
BrainMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d90  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406d90  00406d90  0000ed90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a8c  20000000  00406d98  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000192c  20000a8c  00407824  00010a8c  2**2
                  ALLOC
  4 .stack        00003000  200023b8  00409150  00010a8c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010a8c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010ab6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00023eaf  00000000  00000000  00010b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005997  00000000  00000000  000349c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014057  00000000  00000000  0003a357  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000014c8  00000000  00000000  0004e3ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000025f0  00000000  00000000  0004f876  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000ef07  00000000  00000000  00051e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001f555  00000000  00000000  00060d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005be0f  00000000  00000000  000802c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003674  00000000  00000000  000dc0d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200053b8 	.word	0x200053b8
  400004:	00405329 	.word	0x00405329
  400008:	00405325 	.word	0x00405325
  40000c:	00405535 	.word	0x00405535
  400010:	00405539 	.word	0x00405539
  400014:	0040553d 	.word	0x0040553d
  400018:	00405541 	.word	0x00405541
	...
  40002c:	00403b41 	.word	0x00403b41
  400030:	00405325 	.word	0x00405325
  400034:	00000000 	.word	0x00000000
  400038:	00403ba1 	.word	0x00403ba1
  40003c:	00405545 	.word	0x00405545
  400040:	00405325 	.word	0x00405325
  400044:	00405325 	.word	0x00405325
  400048:	00405325 	.word	0x00405325
  40004c:	00405325 	.word	0x00405325
  400050:	00404521 	.word	0x00404521
  400054:	00405325 	.word	0x00405325
  400058:	00405325 	.word	0x00405325
  40005c:	00000000 	.word	0x00000000
  400060:	00404c29 	.word	0x00404c29
  400064:	00404c71 	.word	0x00404c71
  400068:	00000000 	.word	0x00000000
  40006c:	004051d1 	.word	0x004051d1
  400070:	004051e5 	.word	0x004051e5
  400074:	00000000 	.word	0x00000000
  400078:	00404cc1 	.word	0x00404cc1
  40007c:	00404d11 	.word	0x00404d11
	...
  400088:	00405325 	.word	0x00405325
  40008c:	00405325 	.word	0x00405325
  400090:	00405325 	.word	0x00405325
  400094:	00405325 	.word	0x00405325
  400098:	00405325 	.word	0x00405325
  40009c:	00405325 	.word	0x00405325
  4000a0:	00405325 	.word	0x00405325
  4000a4:	00405325 	.word	0x00405325
	...
  4000b4:	00405325 	.word	0x00405325
  4000b8:	00405325 	.word	0x00405325
  4000bc:	00405325 	.word	0x00405325
  4000c0:	00405325 	.word	0x00405325
  4000c4:	00405325 	.word	0x00405325
  4000c8:	00405325 	.word	0x00405325

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000a8c 	.word	0x20000a8c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00406d98 	.word	0x00406d98

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b06      	ldr	r3, [pc, #24]	; (40010c <frame_dummy+0x1c>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x20>)
  4000f8:	4906      	ldr	r1, [pc, #24]	; (400114 <frame_dummy+0x24>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4806      	ldr	r0, [pc, #24]	; (400118 <frame_dummy+0x28>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b113      	cbz	r3, 40010a <frame_dummy+0x1a>
  400104:	4b05      	ldr	r3, [pc, #20]	; (40011c <frame_dummy+0x2c>)
  400106:	b103      	cbz	r3, 40010a <frame_dummy+0x1a>
  400108:	4798      	blx	r3
  40010a:	bd08      	pop	{r3, pc}
  40010c:	00000000 	.word	0x00000000
  400110:	00406d98 	.word	0x00406d98
  400114:	20000a90 	.word	0x20000a90
  400118:	00406d98 	.word	0x00406d98
  40011c:	00000000 	.word	0x00000000

00400120 <efc_get_wait_state>:
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
  400120:	6800      	ldr	r0, [r0, #0]
}
  400122:	f3c0 2003 	ubfx	r0, r0, #8, #4
  400126:	4770      	bx	lr

00400128 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
  400128:	b508      	push	{r3, lr}
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws) | EEFC_FMR_CLOE);
  40012a:	0212      	lsls	r2, r2, #8
  40012c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  400130:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  400134:	4311      	orrs	r1, r2
  400136:	4b02      	ldr	r3, [pc, #8]	; (400140 <efc_init+0x18>)
  400138:	4798      	blx	r3
#else
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
#endif	
	return EFC_RC_OK;
}
  40013a:	2000      	movs	r0, #0
  40013c:	bd08      	pop	{r3, pc}
  40013e:	bf00      	nop
  400140:	20000069 	.word	0x20000069

00400144 <efc_set_wait_state>:
 *
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fws The number of wait states in cycle (no shift).
 */
void efc_set_wait_state(Efc *p_efc, uint32_t ul_fws)
{
  400144:	b508      	push	{r3, lr}
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
  400146:	6802      	ldr	r2, [r0, #0]

	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <efc_set_wait_state+0x18>)
  40014a:	0209      	lsls	r1, r1, #8
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fws The number of wait states in cycle (no shift).
 */
void efc_set_wait_state(Efc *p_efc, uint32_t ul_fws)
{
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
  40014c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
  400150:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
  400154:	4311      	orrs	r1, r2
  400156:	4798      	blx	r3
  400158:	bd08      	pop	{r3, pc}
  40015a:	bf00      	nop
  40015c:	20000069 	.word	0x20000069

00400160 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
  400160:	b508      	push	{r3, lr}
	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  400162:	f1a1 030e 	sub.w	r3, r1, #14
  400166:	2b01      	cmp	r3, #1
  400168:	d802      	bhi.n	400170 <efc_perform_command+0x10>
		return EFC_RC_NOT_SUPPORT;
  40016a:	f04f 30ff 	mov.w	r0, #4294967295

	/* Use RAM Function. */
	return efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
}
  40016e:	bd08      	pop	{r3, pc}
		return EFC_RC_NOT_SUPPORT;
	}

	/* Use RAM Function. */
	return efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  400170:	0212      	lsls	r2, r2, #8
  400172:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  400176:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  40017a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
  40017e:	b2c9      	uxtb	r1, r1
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
		return EFC_RC_NOT_SUPPORT;
	}

	/* Use RAM Function. */
	return efc_perform_fcr(p_efc,
  400180:	4311      	orrs	r1, r2
  400182:	4b01      	ldr	r3, [pc, #4]	; (400188 <efc_perform_command+0x28>)
  400184:	4798      	blx	r3
  400186:	bd08      	pop	{r3, pc}
  400188:	2000006d 	.word	0x2000006d

0040018c <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
  40018c:	b508      	push	{r3, lr}
  40018e:	460a      	mov	r2, r1
	efc_init(EFC, ul_mode, ul_fws);
  400190:	4b02      	ldr	r3, [pc, #8]	; (40019c <flash_init+0x10>)
  400192:	4601      	mov	r1, r0
  400194:	4802      	ldr	r0, [pc, #8]	; (4001a0 <flash_init+0x14>)
  400196:	4798      	blx	r3
#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
#endif

	return FLASH_RC_OK;
}
  400198:	2000      	movs	r0, #0
  40019a:	bd08      	pop	{r3, pc}
  40019c:	00400129 	.word	0x00400129
  4001a0:	400e0a00 	.word	0x400e0a00

004001a4 <flash_erase_page>:
uint32_t flash_erase_page(uint32_t ul_address, uint8_t uc_page_num)
{
	Efc *p_efc;
	uint16_t us_page;

	if (uc_page_num >= IFLASH_ERASE_PAGES_INVALID) {
  4001a4:	2903      	cmp	r1, #3
 * \param ul_address Flash bank start address.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_erase_page(uint32_t ul_address, uint8_t uc_page_num)
{
  4001a6:	b508      	push	{r3, lr}
	Efc *p_efc;
	uint16_t us_page;

	if (uc_page_num >= IFLASH_ERASE_PAGES_INVALID) {
  4001a8:	d901      	bls.n	4001ae <flash_erase_page+0xa>
		return FLASH_RC_INVALID;
  4001aa:	2011      	movs	r0, #17
					(us_page | uc_page_num))) {
		return FLASH_RC_ERROR;
	}

	return FLASH_RC_OK;
}
  4001ac:	bd08      	pop	{r3, pc}

	if (uc_page_num >= IFLASH_ERASE_PAGES_INVALID) {
		return FLASH_RC_INVALID;
	}

	if (ul_address & (IFLASH_PAGE_SIZE - 1)) {
  4001ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
  4001b2:	2b00      	cmp	r3, #0
  4001b4:	d1f9      	bne.n	4001aa <flash_erase_page+0x6>
#else
	Assert(ul_addr >= IFLASH_ADDR);
	Assert(ul_addr <= (IFLASH_ADDR + IFLASH_SIZE));

	p_efc = EFC;
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  4001b6:	f5a0 0280 	sub.w	r2, r0, #4194304	; 0x400000
  4001ba:	f3c2 224f 	ubfx	r2, r2, #9, #16
		return FLASH_RC_INVALID;
	}

	translate_address(&p_efc, ul_address, &us_page, NULL);

	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_EPA,
  4001be:	430a      	orrs	r2, r1
  4001c0:	4b04      	ldr	r3, [pc, #16]	; (4001d4 <flash_erase_page+0x30>)
  4001c2:	4805      	ldr	r0, [pc, #20]	; (4001d8 <flash_erase_page+0x34>)
  4001c4:	2107      	movs	r1, #7
  4001c6:	4798      	blx	r3
					(us_page | uc_page_num))) {
		return FLASH_RC_ERROR;
  4001c8:	2800      	cmp	r0, #0
  4001ca:	bf14      	ite	ne
  4001cc:	2010      	movne	r0, #16
  4001ce:	2000      	moveq	r0, #0
  4001d0:	bd08      	pop	{r3, pc}
  4001d2:	bf00      	nop
  4001d4:	00400161 	.word	0x00400161
  4001d8:	400e0a00 	.word	0x400e0a00

004001dc <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
  4001dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4001e0:	b085      	sub	sp, #20
  4001e2:	4604      	mov	r4, r0
#else
	Assert(ul_addr >= IFLASH_ADDR);
	Assert(ul_addr <= (IFLASH_ADDR + IFLASH_SIZE));

	p_efc = EFC;
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  4001e4:	f5a0 0880 	sub.w	r8, r0, #4194304	; 0x400000
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;

	translate_address(&p_efc, ul_address, &us_page, &us_offset);

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
  4001e8:	4d32      	ldr	r5, [pc, #200]	; (4002b4 <flash_write+0xd8>)
  4001ea:	4833      	ldr	r0, [pc, #204]	; (4002b8 <flash_write+0xdc>)
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
  4001ec:	9302      	str	r3, [sp, #8]
  4001ee:	468b      	mov	fp, r1
  4001f0:	4691      	mov	r9, r2
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;

	translate_address(&p_efc, ul_address, &us_page, &us_offset);

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
  4001f2:	47a8      	blx	r5
	efc_set_wait_state(p_efc, 6);
  4001f4:	2106      	movs	r1, #6
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;

	translate_address(&p_efc, ul_address, &us_page, &us_offset);

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
  4001f6:	9003      	str	r0, [sp, #12]
	efc_set_wait_state(p_efc, 6);
  4001f8:	4b30      	ldr	r3, [pc, #192]	; (4002bc <flash_write+0xe0>)
  4001fa:	482f      	ldr	r0, [pc, #188]	; (4002b8 <flash_write+0xdc>)
#else
	Assert(ul_addr >= IFLASH_ADDR);
	Assert(ul_addr <= (IFLASH_ADDR + IFLASH_SIZE));

	p_efc = EFC;
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  4001fc:	f3c8 284f 	ubfx	r8, r8, #9, #16
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
  400200:	f3c4 0a08 	ubfx	sl, r4, #0, #9

	translate_address(&p_efc, ul_address, &us_page, &us_offset);

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
	efc_set_wait_state(p_efc, 6);
  400204:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
  400206:	f1b9 0f00 	cmp.w	r9, #0
  40020a:	d04a      	beq.n	4002a2 <flash_write+0xc6>
  40020c:	4f2c      	ldr	r7, [pc, #176]	; (4002c0 <flash_write+0xe4>)
  40020e:	4654      	mov	r4, sl
  400210:	463d      	mov	r5, r7
/* One bank flash */
#else
	/* avoid Cppcheck Warning */
	UNUSED(p_efc);
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  400212:	f508 5a00 	add.w	sl, r8, #8192	; 0x2000
	efc_set_wait_state(p_efc, 6);

	/* Write all pages */
	while (ul_size > 0) {
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
  400216:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
/* One bank flash */
#else
	/* avoid Cppcheck Warning */
	UNUSED(p_efc);
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  40021a:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	efc_set_wait_state(p_efc, 6);

	/* Write all pages */
	while (ul_size > 0) {
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
  40021e:	454b      	cmp	r3, r9
  400220:	bf34      	ite	cc
  400222:	461e      	movcc	r6, r3
  400224:	464e      	movcs	r6, r9
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  400226:	9301      	str	r3, [sp, #4]
  400228:	4651      	mov	r1, sl
  40022a:	4622      	mov	r2, r4
  40022c:	f8df c094 	ldr.w	ip, [pc, #148]	; 4002c4 <flash_write+0xe8>
  400230:	4823      	ldr	r0, [pc, #140]	; (4002c0 <flash_write+0xe4>)
  400232:	47e0      	blx	ip

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
  400234:	4632      	mov	r2, r6
  400236:	1938      	adds	r0, r7, r4
  400238:	4659      	mov	r1, fp
  40023a:	f8df c088 	ldr.w	ip, [pc, #136]	; 4002c4 <flash_write+0xe8>
  40023e:	47e0      	blx	ip
	while (ul_size > 0) {
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
  400240:	9b01      	ldr	r3, [sp, #4]

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
  400242:	1930      	adds	r0, r6, r4
	while (ul_size > 0) {
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
  400244:	1b9a      	subs	r2, r3, r6
		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
				(void *)(ul_page_addr + us_offset + writeSize),
  400246:	eb06 010a 	add.w	r1, r6, sl

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
  40024a:	4438      	add	r0, r7
  40024c:	4421      	add	r1, r4
  40024e:	4b1d      	ldr	r3, [pc, #116]	; (4002c4 <flash_write+0xe8>)
  400250:	b292      	uxth	r2, r2
  400252:	4798      	blx	r3
  400254:	4b1c      	ldr	r3, [pc, #112]	; (4002c8 <flash_write+0xec>)
  400256:	1d1f      	adds	r7, r3, #4
  400258:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
  40025c:	f853 0f04 	ldr.w	r0, [r3, #4]!
  400260:	1b5a      	subs	r2, r3, r5
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  400262:	428b      	cmp	r3, r1
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
  400264:	f842 000a 	str.w	r0, [r2, sl]
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  400268:	d1f8      	bne.n	40025c <flash_write+0x80>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
  40026a:	9b02      	ldr	r3, [sp, #8]
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
  40026c:	4812      	ldr	r0, [pc, #72]	; (4002b8 <flash_write+0xdc>)
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
  40026e:	b17b      	cbz	r3, 400290 <flash_write+0xb4>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
  400270:	2103      	movs	r1, #3
  400272:	4642      	mov	r2, r8
  400274:	f8df c054 	ldr.w	ip, [pc, #84]	; 4002cc <flash_write+0xf0>
  400278:	47e0      	blx	ip
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
					us_page);
		}

		if (ul_error) {
  40027a:	b978      	cbnz	r0, 40029c <flash_write+0xc0>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
		ul_size -= writeSize;
		us_page++;
  40027c:	f108 0c01 	add.w	ip, r8, #1
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
	efc_set_wait_state(p_efc, 6);

	/* Write all pages */
	while (ul_size > 0) {
  400280:	ebb9 0906 	subs.w	r9, r9, r6
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
		ul_size -= writeSize;
		us_page++;
  400284:	fa1f f88c 	uxth.w	r8, ip
		if (ul_error) {
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
  400288:	44b3      	add	fp, r6
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
	efc_set_wait_state(p_efc, 6);

	/* Write all pages */
	while (ul_size > 0) {
  40028a:	d00a      	beq.n	4002a2 <flash_write+0xc6>

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
		ul_size -= writeSize;
		us_page++;
		us_offset = 0;
  40028c:	4604      	mov	r4, r0
  40028e:	e7c0      	b.n	400212 <flash_write+0x36>

		if (ul_erase_flag) {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
  400290:	2101      	movs	r1, #1
  400292:	4642      	mov	r2, r8
  400294:	4b0d      	ldr	r3, [pc, #52]	; (4002cc <flash_write+0xf0>)
  400296:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
  400298:	2800      	cmp	r0, #0
  40029a:	d0ef      	beq.n	40027c <flash_write+0xa0>

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);

	return FLASH_RC_OK;
}
  40029c:	b005      	add	sp, #20
  40029e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		us_page++;
		us_offset = 0;
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
  4002a2:	9903      	ldr	r1, [sp, #12]
  4002a4:	4804      	ldr	r0, [pc, #16]	; (4002b8 <flash_write+0xdc>)
  4002a6:	f8df c014 	ldr.w	ip, [pc, #20]	; 4002bc <flash_write+0xe0>
  4002aa:	47e0      	blx	ip

	return FLASH_RC_OK;
  4002ac:	2000      	movs	r0, #0
}
  4002ae:	b005      	add	sp, #20
  4002b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002b4:	00400121 	.word	0x00400121
  4002b8:	400e0a00 	.word	0x400e0a00
  4002bc:	00400145 	.word	0x00400145
  4002c0:	20000aa8 	.word	0x20000aa8
  4002c4:	004060d5 	.word	0x004060d5
  4002c8:	20000aa4 	.word	0x20000aa4
  4002cc:	00400161 	.word	0x00400161

004002d0 <flash_unlock>:
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
  4002d0:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
  4002d4:	f021 011f 	bic.w	r1, r1, #31
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  4002d8:	b570      	push	{r4, r5, r6, lr}
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
  4002da:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
  4002de:	f501 54ff 	add.w	r4, r1, #8160	; 0x1fe0
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
  4002e2:	f020 001f 	bic.w	r0, r0, #31
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
  4002e6:	341f      	adds	r4, #31
	uint16_t us_num_pages_in_region =
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
	if (pul_actual_start != NULL) {
  4002e8:	b102      	cbz	r2, 4002ec <flash_unlock+0x1c>
		*pul_actual_start = ul_actual_start;
  4002ea:	6010      	str	r0, [r2, #0]
	}
	if (pul_actual_end != NULL) {
  4002ec:	b103      	cbz	r3, 4002f0 <flash_unlock+0x20>
		*pul_actual_end = ul_actual_end;
  4002ee:	601c      	str	r4, [r3, #0]
#else
	Assert(ul_addr >= IFLASH_ADDR);
	Assert(ul_addr <= (IFLASH_ADDR + IFLASH_SIZE));

	p_efc = EFC;
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  4002f0:	4d0c      	ldr	r5, [pc, #48]	; (400324 <flash_unlock+0x54>)
  4002f2:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
  4002f6:	0a64      	lsrs	r4, r4, #9
  4002f8:	440d      	add	r5, r1
  4002fa:	b2a4      	uxth	r4, r4
  4002fc:	f3c5 254f 	ubfx	r5, r5, #9, #16
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
  400300:	42ac      	cmp	r4, r5
  400302:	d20c      	bcs.n	40031e <flash_unlock+0x4e>
  400304:	4e08      	ldr	r6, [pc, #32]	; (400328 <flash_unlock+0x58>)
  400306:	e001      	b.n	40030c <flash_unlock+0x3c>
  400308:	42ac      	cmp	r4, r5
  40030a:	d208      	bcs.n	40031e <flash_unlock+0x4e>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
  40030c:	4622      	mov	r2, r4
  40030e:	4807      	ldr	r0, [pc, #28]	; (40032c <flash_unlock+0x5c>)
  400310:	2109      	movs	r1, #9
  400312:	47b0      	blx	r6
				us_start_page);
		if (ul_error) {
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
  400314:	3410      	adds	r4, #16
  400316:	b2a4      	uxth	r4, r4

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
				us_start_page);
		if (ul_error) {
  400318:	2800      	cmp	r0, #0
  40031a:	d0f5      	beq.n	400308 <flash_unlock+0x38>
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
}
  40031c:	bd70      	pop	{r4, r5, r6, pc}
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
  40031e:	2000      	movs	r0, #0
  400320:	bd70      	pop	{r4, r5, r6, pc}
  400322:	bf00      	nop
  400324:	ffc01fff 	.word	0xffc01fff
  400328:	00400161 	.word	0x00400161
  40032c:	400e0a00 	.word	0x400e0a00

00400330 <loadNewFirmware>:
 * loadNewFirmware(char* filename)
 * @brief Load new firmware function. 
 * @return status_t returns STATUS_PASS if successful and STATUS_FAIL if there is a failure. 
 */
status_t __attribute__((optimize("O0"))) loadNewFirmware(char* filename)
{	
  400330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
  400334:	f5ad 6dd1 	sub.w	sp, sp, #1672	; 0x688
  400338:	af00      	add	r7, sp, #0
  40033a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40033e:	6018      	str	r0, [r3, #0]
	status_t result = STATUS_PASS;
  400340:	2300      	movs	r3, #0
  400342:	f887 3677 	strb.w	r3, [r7, #1655]	; 0x677
	FIL firmwareFileObj = {0};
  400346:	f207 433c 	addw	r3, r7, #1084	; 0x43c
  40034a:	f44f 720a 	mov.w	r2, #552	; 0x228
  40034e:	4618      	mov	r0, r3
  400350:	2100      	movs	r1, #0
  400352:	4b76      	ldr	r3, [pc, #472]	; (40052c <loadNewFirmware+0x1fc>)
  400354:	4798      	blx	r3
	//initialize the suitNumber

	filename[0] = LUN_ID_SD_MMC_0_MEM + '0'; //is this necessary? 
  400356:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40035a:	681b      	ldr	r3, [r3, #0]
  40035c:	2230      	movs	r2, #48	; 0x30
  40035e:	701a      	strb	r2, [r3, #0]
	wdt_disable(WDT);
  400360:	4873      	ldr	r0, [pc, #460]	; (400530 <loadNewFirmware+0x200>)
  400362:	4b74      	ldr	r3, [pc, #464]	; (400534 <loadNewFirmware+0x204>)
  400364:	4798      	blx	r3
	
	FRESULT res = f_open(&firmwareFileObj, (char const *)filename, FA_OPEN_EXISTING | FA_READ);
  400366:	f207 423c 	addw	r2, r7, #1084	; 0x43c
  40036a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40036e:	4610      	mov	r0, r2
  400370:	6819      	ldr	r1, [r3, #0]
  400372:	2201      	movs	r2, #1
  400374:	4b70      	ldr	r3, [pc, #448]	; (400538 <loadNewFirmware+0x208>)
  400376:	4798      	blx	r3
  400378:	4603      	mov	r3, r0
  40037a:	f887 3687 	strb.w	r3, [r7, #1671]	; 0x687
	if (res != FR_OK)
  40037e:	f897 3687 	ldrb.w	r3, [r7, #1671]	; 0x687
  400382:	2b00      	cmp	r3, #0
  400384:	d001      	beq.n	40038a <loadNewFirmware+0x5a>
	{
		return STATUS_FAIL;
  400386:	2301      	movs	r3, #1
  400388:	e2d6      	b.n	400938 <loadNewFirmware+0x608>
	}
	//read the header from the file. 
	firmwareHeader_t header = {0}; 
  40038a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
  40038e:	2200      	movs	r2, #0
  400390:	601a      	str	r2, [r3, #0]
  400392:	3304      	adds	r3, #4
  400394:	2200      	movs	r2, #0
  400396:	601a      	str	r2, [r3, #0]
  400398:	3304      	adds	r3, #4
  40039a:	2200      	movs	r2, #0
  40039c:	601a      	str	r2, [r3, #0]
  40039e:	3304      	adds	r3, #4
	uint32_t bytes_read = 0, total_bytes_read = 0;	
  4003a0:	f207 432c 	addw	r3, r7, #1068	; 0x42c
  4003a4:	2200      	movs	r2, #0
  4003a6:	601a      	str	r2, [r3, #0]
  4003a8:	2300      	movs	r3, #0
  4003aa:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
	res = f_read(&firmwareFileObj, (void*)&header, sizeof(firmwareHeader_t), &bytes_read);
  4003ae:	f207 433c 	addw	r3, r7, #1084	; 0x43c
  4003b2:	f507 6286 	add.w	r2, r7, #1072	; 0x430
  4003b6:	f207 442c 	addw	r4, r7, #1068	; 0x42c
  4003ba:	4618      	mov	r0, r3
  4003bc:	4611      	mov	r1, r2
  4003be:	220c      	movs	r2, #12
  4003c0:	4623      	mov	r3, r4
  4003c2:	4c5e      	ldr	r4, [pc, #376]	; (40053c <loadNewFirmware+0x20c>)
  4003c4:	47a0      	blx	r4
  4003c6:	4603      	mov	r3, r0
  4003c8:	f887 3687 	strb.w	r3, [r7, #1671]	; 0x687
	//confirm that the file has a valid header, with the CRC bytes matching. 
	if(header.fileHeaderBytes != FIRMWARE_FILE_HEADER_BYTES ) //|| header.crc1 != header.crc2
  4003cc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
  4003d0:	681a      	ldr	r2, [r3, #0]
  4003d2:	4b5b      	ldr	r3, [pc, #364]	; (400540 <loadNewFirmware+0x210>)
  4003d4:	429a      	cmp	r2, r3
  4003d6:	d006      	beq.n	4003e6 <loadNewFirmware+0xb6>
	{
		//bad header, don't even try to load this crap!
		f_close(&firmwareFileObj); 
  4003d8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
  4003dc:	4618      	mov	r0, r3
  4003de:	4b59      	ldr	r3, [pc, #356]	; (400544 <loadNewFirmware+0x214>)
  4003e0:	4798      	blx	r3
		return STATUS_FAIL; 
  4003e2:	2301      	movs	r3, #1
  4003e4:	e2a8      	b.n	400938 <loadNewFirmware+0x608>
	}	
	uint32_t destAddress = FIRMWARE_TEMPORARY_LOCATION; //that where we are writing
  4003e6:	4b58      	ldr	r3, [pc, #352]	; (400548 <loadNewFirmware+0x218>)
  4003e8:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
	uint32_t retVal = 0;
  4003ec:	2300      	movs	r3, #0
  4003ee:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
	//initialize the memory
	retVal = flash_init(FLASH_ACCESS_MODE_128, 6); //	| EEFC_FMR_CLOE | EEFC_FMR_SCOD 
  4003f2:	2000      	movs	r0, #0
  4003f4:	2106      	movs	r1, #6
  4003f6:	4b55      	ldr	r3, [pc, #340]	; (40054c <loadNewFirmware+0x21c>)
  4003f8:	4798      	blx	r3
  4003fa:	f8c7 066c 	str.w	r0, [r7, #1644]	; 0x66c
	int resultTest = 	efc_perform_fcr(EFC0,
  4003fe:	4854      	ldr	r0, [pc, #336]	; (400550 <loadNewFirmware+0x220>)
  400400:	4954      	ldr	r1, [pc, #336]	; (400554 <loadNewFirmware+0x224>)
  400402:	4b55      	ldr	r3, [pc, #340]	; (400558 <loadNewFirmware+0x228>)
  400404:	4798      	blx	r3
  400406:	4603      	mov	r3, r0
  400408:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
	EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0x0123) |
	0x07u);
	
	retVal = flash_unlock(destAddress,destAddress + firmwareFileObj.fsize ,NULL,NULL);			
  40040c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
  400410:	68da      	ldr	r2, [r3, #12]
  400412:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
  400416:	4413      	add	r3, r2
  400418:	f8d7 0670 	ldr.w	r0, [r7, #1648]	; 0x670
  40041c:	4619      	mov	r1, r3
  40041e:	2200      	movs	r2, #0
  400420:	2300      	movs	r3, #0
  400422:	4c4e      	ldr	r4, [pc, #312]	; (40055c <loadNewFirmware+0x22c>)
  400424:	47a0      	blx	r4
  400426:	f8c7 066c 	str.w	r0, [r7, #1644]	; 0x66c
	char buf[FIRMWARE_BUFFER_SIZE] = {0}; 	 
  40042a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
  40042e:	f44f 7200 	mov.w	r2, #512	; 0x200
  400432:	4618      	mov	r0, r3
  400434:	2100      	movs	r1, #0
  400436:	4b3d      	ldr	r3, [pc, #244]	; (40052c <loadNewFirmware+0x1fc>)
  400438:	4798      	blx	r3
	char nullBuf[FIRMWARE_BUFFER_SIZE] = {0}; 		
  40043a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40043e:	f44f 7200 	mov.w	r2, #512	; 0x200
  400442:	4618      	mov	r0, r3
  400444:	2100      	movs	r1, #0
  400446:	4b39      	ldr	r3, [pc, #228]	; (40052c <loadNewFirmware+0x1fc>)
  400448:	4798      	blx	r3
		
	uint32_t i = 0, error = 0;
  40044a:	2300      	movs	r3, #0
  40044c:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
  400450:	2300      	movs	r3, #0
  400452:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
	//erase the program space first
	for(i=0x424000ul;i< 0x440000ul;i+=0x4000)
  400456:	4b3c      	ldr	r3, [pc, #240]	; (400548 <loadNewFirmware+0x218>)
  400458:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
  40045c:	e016      	b.n	40048c <loadNewFirmware+0x15c>
	{
		resultTest = flash_erase_page(i,IFLASH_ERASE_PAGES_32);
  40045e:	f8d7 067c 	ldr.w	r0, [r7, #1660]	; 0x67c
  400462:	2103      	movs	r1, #3
  400464:	4b3e      	ldr	r3, [pc, #248]	; (400560 <loadNewFirmware+0x230>)
  400466:	4798      	blx	r3
  400468:	4603      	mov	r3, r0
  40046a:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
		if(resultTest != 0)
  40046e:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
  400472:	2b00      	cmp	r3, #0
  400474:	d004      	beq.n	400480 <loadNewFirmware+0x150>
		{
			error++;
  400476:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
  40047a:	3301      	adds	r3, #1
  40047c:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
	char buf[FIRMWARE_BUFFER_SIZE] = {0}; 	 
	char nullBuf[FIRMWARE_BUFFER_SIZE] = {0}; 		
		
	uint32_t i = 0, error = 0;
	//erase the program space first
	for(i=0x424000ul;i< 0x440000ul;i+=0x4000)
  400480:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
  400484:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  400488:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
  40048c:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
  400490:	f5b3 0f88 	cmp.w	r3, #4456448	; 0x440000
  400494:	d3e3      	bcc.n	40045e <loadNewFirmware+0x12e>
		if(resultTest != 0)
		{
			error++;
		}	
	}
	drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_HIGH);
  400496:	200e      	movs	r0, #14
  400498:	2101      	movs	r1, #1
  40049a:	4b32      	ldr	r3, [pc, #200]	; (400564 <loadNewFirmware+0x234>)
  40049c:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_HIGH);
  40049e:	200c      	movs	r0, #12
  4004a0:	2101      	movs	r1, #1
  4004a2:	4b30      	ldr	r3, [pc, #192]	; (400564 <loadNewFirmware+0x234>)
  4004a4:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_HIGH);			
  4004a6:	200d      	movs	r0, #13
  4004a8:	2101      	movs	r1, #1
  4004aa:	4b2e      	ldr	r3, [pc, #184]	; (400564 <loadNewFirmware+0x234>)
  4004ac:	4798      	blx	r3
	while(total_bytes_read < firmwareFileObj.fsize - sizeof(firmwareHeader_t) && res == FR_OK)
  4004ae:	e093      	b.n	4005d8 <loadNewFirmware+0x2a8>
	{
		res = f_read(&firmwareFileObj, buf, FIRMWARE_BUFFER_SIZE, &bytes_read);
  4004b0:	f207 433c 	addw	r3, r7, #1084	; 0x43c
  4004b4:	f507 720b 	add.w	r2, r7, #556	; 0x22c
  4004b8:	f207 442c 	addw	r4, r7, #1068	; 0x42c
  4004bc:	4618      	mov	r0, r3
  4004be:	4611      	mov	r1, r2
  4004c0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4004c4:	4623      	mov	r3, r4
  4004c6:	4c1d      	ldr	r4, [pc, #116]	; (40053c <loadNewFirmware+0x20c>)
  4004c8:	47a0      	blx	r4
  4004ca:	4603      	mov	r3, r0
  4004cc:	f887 3687 	strb.w	r3, [r7, #1671]	; 0x687
		if(bytes_read != 0)
  4004d0:	f207 432c 	addw	r3, r7, #1068	; 0x42c
  4004d4:	681b      	ldr	r3, [r3, #0]
  4004d6:	2b00      	cmp	r3, #0
  4004d8:	d016      	beq.n	400508 <loadNewFirmware+0x1d8>
		{		
			if(flash_write(destAddress+total_bytes_read, (void*)buf,bytes_read,0) != 0)
  4004da:	f8d7 2670 	ldr.w	r2, [r7, #1648]	; 0x670
  4004de:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
  4004e2:	441a      	add	r2, r3
  4004e4:	f207 432c 	addw	r3, r7, #1068	; 0x42c
  4004e8:	681c      	ldr	r4, [r3, #0]
  4004ea:	f507 730b 	add.w	r3, r7, #556	; 0x22c
  4004ee:	4610      	mov	r0, r2
  4004f0:	4619      	mov	r1, r3
  4004f2:	4622      	mov	r2, r4
  4004f4:	2300      	movs	r3, #0
  4004f6:	4c1c      	ldr	r4, [pc, #112]	; (400568 <loadNewFirmware+0x238>)
  4004f8:	47a0      	blx	r4
  4004fa:	4603      	mov	r3, r0
  4004fc:	2b00      	cmp	r3, #0
  4004fe:	d003      	beq.n	400508 <loadNewFirmware+0x1d8>
			{
				result = STATUS_FAIL;
  400500:	2301      	movs	r3, #1
  400502:	f887 3677 	strb.w	r3, [r7, #1655]	; 0x677
				break;
  400506:	e075      	b.n	4005f4 <loadNewFirmware+0x2c4>
			}
		}
		total_bytes_read += bytes_read; 
  400508:	f207 432c 	addw	r3, r7, #1068	; 0x42c
  40050c:	681b      	ldr	r3, [r3, #0]
  40050e:	f8d7 2680 	ldr.w	r2, [r7, #1664]	; 0x680
  400512:	4413      	add	r3, r2
  400514:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
		if(total_bytes_read ==  firmwareFileObj.fsize - sizeof(firmwareHeader_t))
  400518:	f207 433c 	addw	r3, r7, #1084	; 0x43c
  40051c:	68db      	ldr	r3, [r3, #12]
  40051e:	f1a3 020c 	sub.w	r2, r3, #12
  400522:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
  400526:	429a      	cmp	r2, r3
  400528:	d120      	bne.n	40056c <loadNewFirmware+0x23c>
		{
			break; //this is redundant
  40052a:	e063      	b.n	4005f4 <loadNewFirmware+0x2c4>
  40052c:	00406209 	.word	0x00406209
  400530:	400e1450 	.word	0x400e1450
  400534:	00405319 	.word	0x00405319
  400538:	004034f5 	.word	0x004034f5
  40053c:	00403799 	.word	0x00403799
  400540:	aa55aa55 	.word	0xaa55aa55
  400544:	00403a01 	.word	0x00403a01
  400548:	00424000 	.word	0x00424000
  40054c:	0040018d 	.word	0x0040018d
  400550:	400e0a00 	.word	0x400e0a00
  400554:	5a012307 	.word	0x5a012307
  400558:	2000006d 	.word	0x2000006d
  40055c:	004002d1 	.word	0x004002d1
  400560:	004001a5 	.word	0x004001a5
  400564:	0040495d 	.word	0x0040495d
  400568:	004001dd 	.word	0x004001dd
		}
		drv_gpio_togglePin(DRV_GPIO_PIN_GREEN_LED); 
  40056c:	200c      	movs	r0, #12
  40056e:	4bac      	ldr	r3, [pc, #688]	; (400820 <loadNewFirmware+0x4f0>)
  400570:	4798      	blx	r3
  400572:	4bac      	ldr	r3, [pc, #688]	; (400824 <loadNewFirmware+0x4f4>)
		delay_ms(100);
  400574:	4618      	mov	r0, r3
  400576:	f04f 0100 	mov.w	r1, #0
  40057a:	4602      	mov	r2, r0
  40057c:	460b      	mov	r3, r1
  40057e:	1892      	adds	r2, r2, r2
  400580:	eb43 0303 	adc.w	r3, r3, r3
  400584:	1812      	adds	r2, r2, r0
  400586:	eb43 0301 	adc.w	r3, r3, r1
  40058a:	015c      	lsls	r4, r3, #5
  40058c:	61fc      	str	r4, [r7, #28]
  40058e:	69fd      	ldr	r5, [r7, #28]
  400590:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  400594:	61fd      	str	r5, [r7, #28]
  400596:	ea4f 1c42 	mov.w	ip, r2, lsl #5
  40059a:	f8c7 c018 	str.w	ip, [r7, #24]
  40059e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
  4005a2:	1912      	adds	r2, r2, r4
  4005a4:	eb43 0305 	adc.w	r3, r3, r5
  4005a8:	1880      	adds	r0, r0, r2
  4005aa:	eb41 0103 	adc.w	r1, r1, r3
  4005ae:	f243 62af 	movw	r2, #13999	; 0x36af
  4005b2:	f04f 0300 	mov.w	r3, #0
  4005b6:	1812      	adds	r2, r2, r0
  4005b8:	eb43 0301 	adc.w	r3, r3, r1
  4005bc:	4c9a      	ldr	r4, [pc, #616]	; (400828 <loadNewFirmware+0x4f8>)
  4005be:	4610      	mov	r0, r2
  4005c0:	4619      	mov	r1, r3
  4005c2:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4005c6:	f04f 0300 	mov.w	r3, #0
  4005ca:	47a0      	blx	r4
  4005cc:	4602      	mov	r2, r0
  4005ce:	460b      	mov	r3, r1
  4005d0:	4613      	mov	r3, r2
  4005d2:	4618      	mov	r0, r3
  4005d4:	4b95      	ldr	r3, [pc, #596]	; (40082c <loadNewFirmware+0x4fc>)
  4005d6:	4798      	blx	r3
		}	
	}
	drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_HIGH);
	drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_HIGH);
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_HIGH);			
	while(total_bytes_read < firmwareFileObj.fsize - sizeof(firmwareHeader_t) && res == FR_OK)
  4005d8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
  4005dc:	68db      	ldr	r3, [r3, #12]
  4005de:	f1a3 020c 	sub.w	r2, r3, #12
  4005e2:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
  4005e6:	429a      	cmp	r2, r3
  4005e8:	d904      	bls.n	4005f4 <loadNewFirmware+0x2c4>
  4005ea:	f897 3687 	ldrb.w	r3, [r7, #1671]	; 0x687
  4005ee:	2b00      	cmp	r3, #0
  4005f0:	f43f af5e 	beq.w	4004b0 <loadNewFirmware+0x180>
			break; //this is redundant
		}
		drv_gpio_togglePin(DRV_GPIO_PIN_GREEN_LED); 
		delay_ms(100);
	}
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_LOW);
  4005f4:	200d      	movs	r0, #13
  4005f6:	2100      	movs	r1, #0
  4005f8:	4b8d      	ldr	r3, [pc, #564]	; (400830 <loadNewFirmware+0x500>)
  4005fa:	4798      	blx	r3
  4005fc:	4b89      	ldr	r3, [pc, #548]	; (400824 <loadNewFirmware+0x4f4>)
	delay_ms(100);
  4005fe:	4618      	mov	r0, r3
  400600:	f04f 0100 	mov.w	r1, #0
  400604:	4602      	mov	r2, r0
  400606:	460b      	mov	r3, r1
  400608:	1892      	adds	r2, r2, r2
  40060a:	eb43 0303 	adc.w	r3, r3, r3
  40060e:	1812      	adds	r2, r2, r0
  400610:	eb43 0301 	adc.w	r3, r3, r1
  400614:	015d      	lsls	r5, r3, #5
  400616:	617d      	str	r5, [r7, #20]
  400618:	f8d7 c014 	ldr.w	ip, [r7, #20]
  40061c:	ea4c 6cd2 	orr.w	ip, ip, r2, lsr #27
  400620:	f8c7 c014 	str.w	ip, [r7, #20]
  400624:	0154      	lsls	r4, r2, #5
  400626:	613c      	str	r4, [r7, #16]
  400628:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
  40062c:	1912      	adds	r2, r2, r4
  40062e:	eb43 0305 	adc.w	r3, r3, r5
  400632:	1880      	adds	r0, r0, r2
  400634:	eb41 0103 	adc.w	r1, r1, r3
  400638:	f243 62af 	movw	r2, #13999	; 0x36af
  40063c:	f04f 0300 	mov.w	r3, #0
  400640:	1812      	adds	r2, r2, r0
  400642:	eb43 0301 	adc.w	r3, r3, r1
  400646:	4c78      	ldr	r4, [pc, #480]	; (400828 <loadNewFirmware+0x4f8>)
  400648:	4610      	mov	r0, r2
  40064a:	4619      	mov	r1, r3
  40064c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400650:	f04f 0300 	mov.w	r3, #0
  400654:	47a0      	blx	r4
  400656:	4602      	mov	r2, r0
  400658:	460b      	mov	r3, r1
  40065a:	4613      	mov	r3, r2
  40065c:	4618      	mov	r0, r3
  40065e:	4b73      	ldr	r3, [pc, #460]	; (40082c <loadNewFirmware+0x4fc>)
  400660:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_HIGH);
  400662:	200d      	movs	r0, #13
  400664:	2101      	movs	r1, #1
  400666:	4b72      	ldr	r3, [pc, #456]	; (400830 <loadNewFirmware+0x500>)
  400668:	4798      	blx	r3
  40066a:	4b6e      	ldr	r3, [pc, #440]	; (400824 <loadNewFirmware+0x4f4>)
	delay_ms(100);	
  40066c:	4618      	mov	r0, r3
  40066e:	f04f 0100 	mov.w	r1, #0
  400672:	4602      	mov	r2, r0
  400674:	460b      	mov	r3, r1
  400676:	1892      	adds	r2, r2, r2
  400678:	eb43 0303 	adc.w	r3, r3, r3
  40067c:	1812      	adds	r2, r2, r0
  40067e:	eb43 0301 	adc.w	r3, r3, r1
  400682:	015d      	lsls	r5, r3, #5
  400684:	60fd      	str	r5, [r7, #12]
  400686:	f8d7 c00c 	ldr.w	ip, [r7, #12]
  40068a:	ea4c 6cd2 	orr.w	ip, ip, r2, lsr #27
  40068e:	f8c7 c00c 	str.w	ip, [r7, #12]
  400692:	0154      	lsls	r4, r2, #5
  400694:	60bc      	str	r4, [r7, #8]
  400696:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
  40069a:	1912      	adds	r2, r2, r4
  40069c:	eb43 0305 	adc.w	r3, r3, r5
  4006a0:	1880      	adds	r0, r0, r2
  4006a2:	eb41 0103 	adc.w	r1, r1, r3
  4006a6:	f243 62af 	movw	r2, #13999	; 0x36af
  4006aa:	f04f 0300 	mov.w	r3, #0
  4006ae:	1812      	adds	r2, r2, r0
  4006b0:	eb43 0301 	adc.w	r3, r3, r1
  4006b4:	4c5c      	ldr	r4, [pc, #368]	; (400828 <loadNewFirmware+0x4f8>)
  4006b6:	4610      	mov	r0, r2
  4006b8:	4619      	mov	r1, r3
  4006ba:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4006be:	f04f 0300 	mov.w	r3, #0
  4006c2:	47a0      	blx	r4
  4006c4:	4602      	mov	r2, r0
  4006c6:	460b      	mov	r3, r1
  4006c8:	4613      	mov	r3, r2
  4006ca:	4618      	mov	r0, r3
  4006cc:	4b57      	ldr	r3, [pc, #348]	; (40082c <loadNewFirmware+0x4fc>)
  4006ce:	4798      	blx	r3
	for(i=0x408000ul;i< 0x424000ul;i+=0x2000)
  4006d0:	f44f 0381 	mov.w	r3, #4227072	; 0x408000
  4006d4:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
  4006d8:	e016      	b.n	400708 <loadNewFirmware+0x3d8>
	{
		resultTest = flash_erase_page(i,IFLASH_ERASE_PAGES_16);
  4006da:	f8d7 067c 	ldr.w	r0, [r7, #1660]	; 0x67c
  4006de:	2102      	movs	r1, #2
  4006e0:	4b54      	ldr	r3, [pc, #336]	; (400834 <loadNewFirmware+0x504>)
  4006e2:	4798      	blx	r3
  4006e4:	4603      	mov	r3, r0
  4006e6:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
		if(resultTest != 0)
  4006ea:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
  4006ee:	2b00      	cmp	r3, #0
  4006f0:	d004      	beq.n	4006fc <loadNewFirmware+0x3cc>
		{
			error++;
  4006f2:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
  4006f6:	3301      	adds	r3, #1
  4006f8:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
	}
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_LOW);
	delay_ms(100);
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_HIGH);
	delay_ms(100);	
	for(i=0x408000ul;i< 0x424000ul;i+=0x2000)
  4006fc:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
  400700:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
  400704:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
  400708:	f8d7 267c 	ldr.w	r2, [r7, #1660]	; 0x67c
  40070c:	4b4a      	ldr	r3, [pc, #296]	; (400838 <loadNewFirmware+0x508>)
  40070e:	429a      	cmp	r2, r3
  400710:	d9e3      	bls.n	4006da <loadNewFirmware+0x3aa>
		{
			error++;
		}
	}	
	//verify firmware
	drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_HIGH);
  400712:	200c      	movs	r0, #12
  400714:	2101      	movs	r1, #1
  400716:	4b46      	ldr	r3, [pc, #280]	; (400830 <loadNewFirmware+0x500>)
  400718:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_LOW);
  40071a:	200e      	movs	r0, #14
  40071c:	2100      	movs	r1, #0
  40071e:	4b44      	ldr	r3, [pc, #272]	; (400830 <loadNewFirmware+0x500>)
  400720:	4798      	blx	r3
  400722:	4b40      	ldr	r3, [pc, #256]	; (400824 <loadNewFirmware+0x4f4>)
	delay_ms(100);
  400724:	4618      	mov	r0, r3
  400726:	f04f 0100 	mov.w	r1, #0
  40072a:	4602      	mov	r2, r0
  40072c:	460b      	mov	r3, r1
  40072e:	1892      	adds	r2, r2, r2
  400730:	eb43 0303 	adc.w	r3, r3, r3
  400734:	1812      	adds	r2, r2, r0
  400736:	eb43 0301 	adc.w	r3, r3, r1
  40073a:	ea4f 1b43 	mov.w	fp, r3, lsl #5
  40073e:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
  400742:	ea4f 1a42 	mov.w	sl, r2, lsl #5
  400746:	eb12 020a 	adds.w	r2, r2, sl
  40074a:	eb43 030b 	adc.w	r3, r3, fp
  40074e:	1880      	adds	r0, r0, r2
  400750:	eb41 0103 	adc.w	r1, r1, r3
  400754:	f243 62af 	movw	r2, #13999	; 0x36af
  400758:	f04f 0300 	mov.w	r3, #0
  40075c:	1812      	adds	r2, r2, r0
  40075e:	eb43 0301 	adc.w	r3, r3, r1
  400762:	4c31      	ldr	r4, [pc, #196]	; (400828 <loadNewFirmware+0x4f8>)
  400764:	4610      	mov	r0, r2
  400766:	4619      	mov	r1, r3
  400768:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40076c:	f04f 0300 	mov.w	r3, #0
  400770:	47a0      	blx	r4
  400772:	4602      	mov	r2, r0
  400774:	460b      	mov	r3, r1
  400776:	4613      	mov	r3, r2
  400778:	4618      	mov	r0, r3
  40077a:	4b2c      	ldr	r3, [pc, #176]	; (40082c <loadNewFirmware+0x4fc>)
  40077c:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_HIGH);
  40077e:	200e      	movs	r0, #14
  400780:	2101      	movs	r1, #1
  400782:	4b2b      	ldr	r3, [pc, #172]	; (400830 <loadNewFirmware+0x500>)
  400784:	4798      	blx	r3
  400786:	4b27      	ldr	r3, [pc, #156]	; (400824 <loadNewFirmware+0x4f4>)
	delay_ms(100);
  400788:	4618      	mov	r0, r3
  40078a:	f04f 0100 	mov.w	r1, #0
  40078e:	4602      	mov	r2, r0
  400790:	460b      	mov	r3, r1
  400792:	1892      	adds	r2, r2, r2
  400794:	eb43 0303 	adc.w	r3, r3, r3
  400798:	1812      	adds	r2, r2, r0
  40079a:	eb43 0301 	adc.w	r3, r3, r1
  40079e:	ea4f 1943 	mov.w	r9, r3, lsl #5
  4007a2:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
  4007a6:	ea4f 1842 	mov.w	r8, r2, lsl #5
  4007aa:	eb12 0208 	adds.w	r2, r2, r8
  4007ae:	eb43 0309 	adc.w	r3, r3, r9
  4007b2:	1880      	adds	r0, r0, r2
  4007b4:	eb41 0103 	adc.w	r1, r1, r3
  4007b8:	f243 62af 	movw	r2, #13999	; 0x36af
  4007bc:	f04f 0300 	mov.w	r3, #0
  4007c0:	1812      	adds	r2, r2, r0
  4007c2:	eb43 0301 	adc.w	r3, r3, r1
  4007c6:	4c18      	ldr	r4, [pc, #96]	; (400828 <loadNewFirmware+0x4f8>)
  4007c8:	4610      	mov	r0, r2
  4007ca:	4619      	mov	r1, r3
  4007cc:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4007d0:	f04f 0300 	mov.w	r3, #0
  4007d4:	47a0      	blx	r4
  4007d6:	4602      	mov	r2, r0
  4007d8:	460b      	mov	r3, r1
  4007da:	4613      	mov	r3, r2
  4007dc:	4618      	mov	r0, r3
  4007de:	4b13      	ldr	r3, [pc, #76]	; (40082c <loadNewFirmware+0x4fc>)
  4007e0:	4798      	blx	r3
	//TODO fix CRC problem. 
	//uint32_t ul_crc = compute_crc((uint8_t *)FIRMWARE_TEMPORARY_LOCATION, firmwareFileObj.fsize - sizeof(firmwareHeader_t),
	//CRCCU_MR_PTYPE_CASTAGNOLI);
	uint32_t ul_crc =0;
  4007e2:	2300      	movs	r3, #0
  4007e4:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
	fileCRC = ul_crc; 
  4007e8:	4b14      	ldr	r3, [pc, #80]	; (40083c <loadNewFirmware+0x50c>)
  4007ea:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
  4007ee:	601a      	str	r2, [r3, #0]
	//if(header.crc == fileCRC)
	//{
		//CRC checks out, let copy the firmware to the final location
		total_bytes_read =0;
  4007f0:	2300      	movs	r3, #0
  4007f2:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
		destAddress = APP_START_ADDRESS;
  4007f6:	f44f 0381 	mov.w	r3, #4227072	; 0x408000
  4007fa:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
		retVal = flash_unlock(destAddress,destAddress + firmwareFileObj.fsize ,NULL,NULL);
  4007fe:	f207 433c 	addw	r3, r7, #1084	; 0x43c
  400802:	68da      	ldr	r2, [r3, #12]
  400804:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
  400808:	4413      	add	r3, r2
  40080a:	f8d7 0670 	ldr.w	r0, [r7, #1648]	; 0x670
  40080e:	4619      	mov	r1, r3
  400810:	2200      	movs	r2, #0
  400812:	2300      	movs	r3, #0
  400814:	4c0a      	ldr	r4, [pc, #40]	; (400840 <loadNewFirmware+0x510>)
  400816:	47a0      	blx	r4
  400818:	f8c7 066c 	str.w	r0, [r7, #1644]	; 0x66c
		while(total_bytes_read < firmwareFileObj.fsize - sizeof(firmwareHeader_t))
  40081c:	e074      	b.n	400908 <loadNewFirmware+0x5d8>
  40081e:	bf00      	nop
  400820:	00404a05 	.word	0x00404a05
  400824:	07270e00 	.word	0x07270e00
  400828:	00405591 	.word	0x00405591
  40082c:	20000085 	.word	0x20000085
  400830:	0040495d 	.word	0x0040495d
  400834:	004001a5 	.word	0x004001a5
  400838:	00423fff 	.word	0x00423fff
  40083c:	20000ca8 	.word	0x20000ca8
  400840:	004002d1 	.word	0x004002d1
		{			
			memcpy(buf,FIRMWARE_TEMPORARY_LOCATION+total_bytes_read,FIRMWARE_BUFFER_SIZE); 			
  400844:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
  400848:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
  40084c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  400850:	f507 720b 	add.w	r2, r7, #556	; 0x22c
  400854:	4611      	mov	r1, r2
  400856:	461a      	mov	r2, r3
  400858:	f44f 7300 	mov.w	r3, #512	; 0x200
  40085c:	4608      	mov	r0, r1
  40085e:	4611      	mov	r1, r2
  400860:	461a      	mov	r2, r3
  400862:	4b38      	ldr	r3, [pc, #224]	; (400944 <loadNewFirmware+0x614>)
  400864:	4798      	blx	r3
			if(flash_write(destAddress+total_bytes_read, (void*)buf,FIRMWARE_BUFFER_SIZE,0) != 0)
  400866:	f8d7 2670 	ldr.w	r2, [r7, #1648]	; 0x670
  40086a:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
  40086e:	441a      	add	r2, r3
  400870:	f507 730b 	add.w	r3, r7, #556	; 0x22c
  400874:	4610      	mov	r0, r2
  400876:	4619      	mov	r1, r3
  400878:	f44f 7200 	mov.w	r2, #512	; 0x200
  40087c:	2300      	movs	r3, #0
  40087e:	4c32      	ldr	r4, [pc, #200]	; (400948 <loadNewFirmware+0x618>)
  400880:	47a0      	blx	r4
  400882:	4603      	mov	r3, r0
  400884:	2b00      	cmp	r3, #0
  400886:	d003      	beq.n	400890 <loadNewFirmware+0x560>
			{
				result = STATUS_FAIL;
  400888:	2301      	movs	r3, #1
  40088a:	f887 3677 	strb.w	r3, [r7, #1655]	; 0x677
				break;
  40088e:	e044      	b.n	40091a <loadNewFirmware+0x5ea>
			}
			total_bytes_read += FIRMWARE_BUFFER_SIZE; 
  400890:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
  400894:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400898:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
			drv_gpio_togglePin(DRV_GPIO_PIN_BLUE_LED);
  40089c:	200d      	movs	r0, #13
  40089e:	4b2b      	ldr	r3, [pc, #172]	; (40094c <loadNewFirmware+0x61c>)
  4008a0:	4798      	blx	r3
  4008a2:	4b2b      	ldr	r3, [pc, #172]	; (400950 <loadNewFirmware+0x620>)
			delay_ms(100);
  4008a4:	4618      	mov	r0, r3
  4008a6:	f04f 0100 	mov.w	r1, #0
  4008aa:	4602      	mov	r2, r0
  4008ac:	460b      	mov	r3, r1
  4008ae:	1892      	adds	r2, r2, r2
  4008b0:	eb43 0303 	adc.w	r3, r3, r3
  4008b4:	1812      	adds	r2, r2, r0
  4008b6:	eb43 0301 	adc.w	r3, r3, r1
  4008ba:	015d      	lsls	r5, r3, #5
  4008bc:	607d      	str	r5, [r7, #4]
  4008be:	f8d7 c004 	ldr.w	ip, [r7, #4]
  4008c2:	ea4c 6cd2 	orr.w	ip, ip, r2, lsr #27
  4008c6:	f8c7 c004 	str.w	ip, [r7, #4]
  4008ca:	0154      	lsls	r4, r2, #5
  4008cc:	603c      	str	r4, [r7, #0]
  4008ce:	e9d7 4500 	ldrd	r4, r5, [r7]
  4008d2:	1912      	adds	r2, r2, r4
  4008d4:	eb43 0305 	adc.w	r3, r3, r5
  4008d8:	1880      	adds	r0, r0, r2
  4008da:	eb41 0103 	adc.w	r1, r1, r3
  4008de:	f243 62af 	movw	r2, #13999	; 0x36af
  4008e2:	f04f 0300 	mov.w	r3, #0
  4008e6:	1812      	adds	r2, r2, r0
  4008e8:	eb43 0301 	adc.w	r3, r3, r1
  4008ec:	4c19      	ldr	r4, [pc, #100]	; (400954 <loadNewFirmware+0x624>)
  4008ee:	4610      	mov	r0, r2
  4008f0:	4619      	mov	r1, r3
  4008f2:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4008f6:	f04f 0300 	mov.w	r3, #0
  4008fa:	47a0      	blx	r4
  4008fc:	4602      	mov	r2, r0
  4008fe:	460b      	mov	r3, r1
  400900:	4613      	mov	r3, r2
  400902:	4618      	mov	r0, r3
  400904:	4b14      	ldr	r3, [pc, #80]	; (400958 <loadNewFirmware+0x628>)
  400906:	4798      	blx	r3
	//{
		//CRC checks out, let copy the firmware to the final location
		total_bytes_read =0;
		destAddress = APP_START_ADDRESS;
		retVal = flash_unlock(destAddress,destAddress + firmwareFileObj.fsize ,NULL,NULL);
		while(total_bytes_read < firmwareFileObj.fsize - sizeof(firmwareHeader_t))
  400908:	f207 433c 	addw	r3, r7, #1084	; 0x43c
  40090c:	68db      	ldr	r3, [r3, #12]
  40090e:	f1a3 020c 	sub.w	r2, r3, #12
  400912:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
  400916:	429a      	cmp	r2, r3
  400918:	d894      	bhi.n	400844 <loadNewFirmware+0x514>
	//else
	//{
		//result = STATUS_FAIL; 
	//}
		//
	res = f_close(&firmwareFileObj);
  40091a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
  40091e:	4618      	mov	r0, r3
  400920:	4b0e      	ldr	r3, [pc, #56]	; (40095c <loadNewFirmware+0x62c>)
  400922:	4798      	blx	r3
  400924:	4603      	mov	r3, r0
  400926:	f887 3687 	strb.w	r3, [r7, #1671]	; 0x687
	if (res != FR_OK)
  40092a:	f897 3687 	ldrb.w	r3, [r7, #1671]	; 0x687
  40092e:	2b00      	cmp	r3, #0
  400930:	d001      	beq.n	400936 <loadNewFirmware+0x606>
	{
		return STATUS_FAIL;
  400932:	2301      	movs	r3, #1
  400934:	e000      	b.n	400938 <loadNewFirmware+0x608>
	}
	return STATUS_PASS; 	
  400936:	2300      	movs	r3, #0
}
  400938:	4618      	mov	r0, r3
  40093a:	f507 67d1 	add.w	r7, r7, #1672	; 0x688
  40093e:	46bd      	mov	sp, r7
  400940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
  400944:	004060d5 	.word	0x004060d5
  400948:	004001dd 	.word	0x004001dd
  40094c:	00404a05 	.word	0x00404a05
  400950:	07270e00 	.word	0x07270e00
  400954:	00405591 	.word	0x00405591
  400958:	20000085 	.word	0x20000085
  40095c:	00403a01 	.word	0x00403a01

00400960 <runBootloader>:
 * It will copy a executable to a temporary location, then load it into the main program space. 
 * The bootloader program is always loaded onto a release board at location 0x00000000 and executes the main
 * program. 
 */
void runBootloader()
{
  400960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	status_t status = STATUS_PASS; 
	drv_gpio_initializeAll();
  400964:	4b69      	ldr	r3, [pc, #420]	; (400b0c <runBootloader+0x1ac>)
	pmc_enable_periph_clk(ID_CRCCU);   		    
	board_init();	
	drv_gpio_pin_state_t sw1State = DRV_GPIO_PIN_STATE_HIGH, sw2State = DRV_GPIO_PIN_STATE_HIGH; 	
	//check pins for seeing if the bootloader should be entered. 
	uint32_t enterBootloader = 0;
	drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW1,&sw1State);
  400966:	4c6a      	ldr	r4, [pc, #424]	; (400b10 <runBootloader+0x1b0>)
	drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW2,&sw2State);
	int i = 0; 
	drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_LOW);
  400968:	4f6a      	ldr	r7, [pc, #424]	; (400b14 <runBootloader+0x1b4>)
 * It will copy a executable to a temporary location, then load it into the main program space. 
 * The bootloader program is always loaded onto a release board at location 0x00000000 and executes the main
 * program. 
 */
void runBootloader()
{
  40096a:	b085      	sub	sp, #20
	status_t status = STATUS_PASS; 
	drv_gpio_initializeAll();
  40096c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CRCCU);   		    
  40096e:	4b6a      	ldr	r3, [pc, #424]	; (400b18 <runBootloader+0x1b8>)
  400970:	2020      	movs	r0, #32
  400972:	4798      	blx	r3
	board_init();	
  400974:	4b69      	ldr	r3, [pc, #420]	; (400b1c <runBootloader+0x1bc>)
  400976:	4798      	blx	r3
	drv_gpio_pin_state_t sw1State = DRV_GPIO_PIN_STATE_HIGH, sw2State = DRV_GPIO_PIN_STATE_HIGH; 	
  400978:	2301      	movs	r3, #1
	//check pins for seeing if the bootloader should be entered. 
	uint32_t enterBootloader = 0;
	drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW1,&sw1State);
  40097a:	4618      	mov	r0, r3
  40097c:	f10d 010d 	add.w	r1, sp, #13
{
	status_t status = STATUS_PASS; 
	drv_gpio_initializeAll();
	pmc_enable_periph_clk(ID_CRCCU);   		    
	board_init();	
	drv_gpio_pin_state_t sw1State = DRV_GPIO_PIN_STATE_HIGH, sw2State = DRV_GPIO_PIN_STATE_HIGH; 	
  400980:	f88d 300d 	strb.w	r3, [sp, #13]
  400984:	f88d 300e 	strb.w	r3, [sp, #14]
	//check pins for seeing if the bootloader should be entered. 
	uint32_t enterBootloader = 0;
	drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW1,&sw1State);
  400988:	47a0      	blx	r4
	drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW2,&sw2State);
  40098a:	f10d 010e 	add.w	r1, sp, #14
  40098e:	2002      	movs	r0, #2
  400990:	47a0      	blx	r4
	int i = 0; 
	drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_LOW);
  400992:	2100      	movs	r1, #0
  400994:	200c      	movs	r0, #12
  400996:	47b8      	blx	r7
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_LOW); 
  400998:	200d      	movs	r0, #13
  40099a:	2100      	movs	r1, #0
  40099c:	47b8      	blx	r7
	if(sw1State == DRV_GPIO_PIN_STATE_LOW && sw2State == DRV_GPIO_PIN_STATE_LOW)
  40099e:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4009a2:	2b00      	cmp	r3, #0
  4009a4:	d140      	bne.n	400a28 <runBootloader+0xc8>
  4009a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
  4009aa:	2b00      	cmp	r3, #0
  4009ac:	d13c      	bne.n	400a28 <runBootloader+0xc8>
  4009ae:	4e5c      	ldr	r6, [pc, #368]	; (400b20 <runBootloader+0x1c0>)
  4009b0:	250a      	movs	r5, #10
  4009b2:	e00a      	b.n	4009ca <runBootloader+0x6a>
		for(i=0;i<10;i++)
		{		
			enterBootloader = 1; //set the enter bootloader flag
			drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW1,&sw1State);
			drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW2,&sw2State);
			if(sw1State != DRV_GPIO_PIN_STATE_LOW || sw2State != DRV_GPIO_PIN_STATE_LOW)
  4009b4:	f89d 800e 	ldrb.w	r8, [sp, #14]
			{
				enterBootloader = 0; 
			}
			delay_ms(100); 			
  4009b8:	485a      	ldr	r0, [pc, #360]	; (400b24 <runBootloader+0x1c4>)
		for(i=0;i<10;i++)
		{		
			enterBootloader = 1; //set the enter bootloader flag
			drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW1,&sw1State);
			drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW2,&sw2State);
			if(sw1State != DRV_GPIO_PIN_STATE_LOW || sw2State != DRV_GPIO_PIN_STATE_LOW)
  4009ba:	f1d8 0801 	rsbs	r8, r8, #1
  4009be:	bf38      	it	cc
  4009c0:	f04f 0800 	movcc.w	r8, #0
			{
				enterBootloader = 0; 
			}
			delay_ms(100); 			
  4009c4:	47b0      	blx	r6
	drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_LOW);
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_LOW); 
	if(sw1State == DRV_GPIO_PIN_STATE_LOW && sw2State == DRV_GPIO_PIN_STATE_LOW)
	{
		//make sure that both IO stay low for 1 second
		for(i=0;i<10;i++)
  4009c6:	3d01      	subs	r5, #1
  4009c8:	d011      	beq.n	4009ee <runBootloader+0x8e>
		{		
			enterBootloader = 1; //set the enter bootloader flag
			drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW1,&sw1State);
  4009ca:	f10d 010d 	add.w	r1, sp, #13
  4009ce:	2001      	movs	r0, #1
  4009d0:	47a0      	blx	r4
			drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW2,&sw2State);
  4009d2:	2002      	movs	r0, #2
  4009d4:	f10d 010e 	add.w	r1, sp, #14
  4009d8:	47a0      	blx	r4
			if(sw1State != DRV_GPIO_PIN_STATE_LOW || sw2State != DRV_GPIO_PIN_STATE_LOW)
  4009da:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4009de:	2b00      	cmp	r3, #0
  4009e0:	d0e8      	beq.n	4009b4 <runBootloader+0x54>
			{
				enterBootloader = 0; 
			}
			delay_ms(100); 			
  4009e2:	4850      	ldr	r0, [pc, #320]	; (400b24 <runBootloader+0x1c4>)
  4009e4:	47b0      	blx	r6
	drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_LOW);
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_LOW); 
	if(sw1State == DRV_GPIO_PIN_STATE_LOW && sw2State == DRV_GPIO_PIN_STATE_LOW)
	{
		//make sure that both IO stay low for 1 second
		for(i=0;i<10;i++)
  4009e6:	3d01      	subs	r5, #1
			enterBootloader = 1; //set the enter bootloader flag
			drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW1,&sw1State);
			drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW2,&sw2State);
			if(sw1State != DRV_GPIO_PIN_STATE_LOW || sw2State != DRV_GPIO_PIN_STATE_LOW)
			{
				enterBootloader = 0; 
  4009e8:	f04f 0800 	mov.w	r8, #0
	drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_LOW);
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_LOW); 
	if(sw1State == DRV_GPIO_PIN_STATE_LOW && sw2State == DRV_GPIO_PIN_STATE_LOW)
	{
		//make sure that both IO stay low for 1 second
		for(i=0;i<10;i++)
  4009ec:	d1ed      	bne.n	4009ca <runBootloader+0x6a>
				enterBootloader = 0; 
			}
			delay_ms(100); 			
		}		
	}	
	if(enterBootloader == 1)
  4009ee:	f1b8 0f00 	cmp.w	r8, #0
  4009f2:	d019      	beq.n	400a28 <runBootloader+0xc8>
	{
		//if bootloader conditions met initialize SD card and load firmware	
		drv_gpio_pin_state_t sdCardCD = DRV_GPIO_PIN_STATE_LOW; 
  4009f4:	a904      	add	r1, sp, #16
		//Check if SD card is installed
		drv_gpio_getPinState(DRV_GPIO_PIN_SD_CD,&sdCardCD);
  4009f6:	2010      	movs	r0, #16
		}		
	}	
	if(enterBootloader == 1)
	{
		//if bootloader conditions met initialize SD card and load firmware	
		drv_gpio_pin_state_t sdCardCD = DRV_GPIO_PIN_STATE_LOW; 
  4009f8:	f801 5d01 	strb.w	r5, [r1, #-1]!
		//Check if SD card is installed
		drv_gpio_getPinState(DRV_GPIO_PIN_SD_CD,&sdCardCD);
  4009fc:	47a0      	blx	r4
		if(sdCardCD != DRV_GPIO_PIN_STATE_HIGH)
  4009fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400a02:	2b01      	cmp	r3, #1
  400a04:	d01d      	beq.n	400a42 <runBootloader+0xe2>
 * errorBlink()
 * @brief blink led red 5 times to indicate error
 */
static void errorBlink()
{
	drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_HIGH); 
  400a06:	2101      	movs	r1, #1
  400a08:	200e      	movs	r0, #14
  400a0a:	47b8      	blx	r7
	drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_HIGH); 
  400a0c:	2101      	movs	r1, #1
  400a0e:	200c      	movs	r0, #12
  400a10:	47b8      	blx	r7
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_HIGH); 
  400a12:	200d      	movs	r0, #13
  400a14:	2101      	movs	r1, #1
  400a16:	47b8      	blx	r7
  400a18:	4d43      	ldr	r5, [pc, #268]	; (400b28 <runBootloader+0x1c8>)
  400a1a:	240a      	movs	r4, #10
	
	int i = 0;
	for(i=0; i<10; i++)
	{
		delay_ms(200); 
  400a1c:	4843      	ldr	r0, [pc, #268]	; (400b2c <runBootloader+0x1cc>)
  400a1e:	47b0      	blx	r6
		drv_gpio_togglePin(DRV_GPIO_PIN_RED_LED); 	
  400a20:	200e      	movs	r0, #14
  400a22:	47a8      	blx	r5
	drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_HIGH); 
	drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_HIGH); 
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_HIGH); 
	
	int i = 0;
	for(i=0; i<10; i++)
  400a24:	3c01      	subs	r4, #1
  400a26:	d1f9      	bne.n	400a1c <runBootloader+0xbc>
 */
static void start_application(void)
{
	uint32_t app_start_address;
	/* Rebase the Stack Pointer */
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
  400a28:	f44f 0381 	mov.w	r3, #4227072	; 0x408000

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
  400a2c:	681a      	ldr	r2, [r3, #0]
  400a2e:	f382 8808 	msr	MSP, r2
	/* Rebase the vector table base address */
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
  400a32:	493f      	ldr	r1, [pc, #252]	; (400b30 <runBootloader+0x1d0>)
	/* Load the Reset Handler address of the application */
	app_start_address = *(uint32_t *)(APP_START_ADDRESS+4); 
  400a34:	4a3f      	ldr	r2, [pc, #252]	; (400b34 <runBootloader+0x1d4>)
{
	uint32_t app_start_address;
	/* Rebase the Stack Pointer */
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
	/* Rebase the vector table base address */
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
  400a36:	608b      	str	r3, [r1, #8]
	/* Load the Reset Handler address of the application */
	app_start_address = *(uint32_t *)(APP_START_ADDRESS+4); 
	/* Jump to application Reset Handler in the application */
	asm("bx %0"::"r"(app_start_address));
  400a38:	6813      	ldr	r3, [r2, #0]
  400a3a:	4718      	bx	r3
		//unmount the drive
		//f_mount(LUN_ID_SD_MMC_0_MEM, NULL);		
	} 	   
	start_application();
	
}
  400a3c:	b005      	add	sp, #20
  400a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static status_t initializeSDCard()
{
	static FRESULT res;
	status_t status = STATUS_PASS; 
	////Initialize SD card
	sd_mmc_init();
  400a42:	4b3d      	ldr	r3, [pc, #244]	; (400b38 <runBootloader+0x1d8>)
  400a44:	f8df a10c 	ldr.w	sl, [pc, #268]	; 400b54 <runBootloader+0x1f4>
  400a48:	f8df 910c 	ldr.w	r9, [pc, #268]	; 400b58 <runBootloader+0x1f8>
  400a4c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 400b5c <runBootloader+0x1fc>
  400a50:	4798      	blx	r3
	//
	///* Wait card present and ready */
	//
	////we don't want the firmware to freeze if we don't have an SD card.
	int maxAttemptCount = 500; 
  400a52:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  400a56:	e008      	b.n	400a6a <runBootloader+0x10a>
					break; 
				}
			}
		}
		maxAttemptCount--;
		if(maxAttemptCount == 0)
  400a58:	3c01      	subs	r4, #1
  400a5a:	d049      	beq.n	400af0 <runBootloader+0x190>
		{
			status = STATUS_FAIL;
			break;
		}
		delay_ms(10);
  400a5c:	4837      	ldr	r0, [pc, #220]	; (400b3c <runBootloader+0x1dc>)
		
		
	} while (CTRL_GOOD != res);
  400a5e:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 400b58 <runBootloader+0x1f8>
		if(maxAttemptCount == 0)
		{
			status = STATUS_FAIL;
			break;
		}
		delay_ms(10);
  400a62:	47b0      	blx	r6
		
		
	} while (CTRL_GOOD != res);
  400a64:	f899 3000 	ldrb.w	r3, [r9]
  400a68:	b17b      	cbz	r3, 400a8a <runBootloader+0x12a>
	//
	////we don't want the firmware to freeze if we don't have an SD card.
	int maxAttemptCount = 500; 
	do
	{
		res = sd_mmc_test_unit_ready(0);
  400a6a:	2000      	movs	r0, #0
  400a6c:	47d0      	blx	sl
		if (res == CTRL_FAIL)
  400a6e:	2801      	cmp	r0, #1
	//
	////we don't want the firmware to freeze if we don't have an SD card.
	int maxAttemptCount = 500; 
	do
	{
		res = sd_mmc_test_unit_ready(0);
  400a70:	f889 0000 	strb.w	r0, [r9]
		if (res == CTRL_FAIL)
  400a74:	d1f0      	bne.n	400a58 <runBootloader+0xf8>
		{
			while (CTRL_NO_PRESENT != sd_mmc_check(0))
  400a76:	2000      	movs	r0, #0
  400a78:	47c0      	blx	r8
  400a7a:	2802      	cmp	r0, #2
  400a7c:	d0ec      	beq.n	400a58 <runBootloader+0xf8>
			{
				maxAttemptCount--; 
				if(maxAttemptCount == 0)
  400a7e:	3c01      	subs	r4, #1
  400a80:	d1f9      	bne.n	400a76 <runBootloader+0x116>
				{
					status = STATUS_FAIL;
  400a82:	2501      	movs	r5, #1
					break; 
				}
			}
		}
		maxAttemptCount--;
  400a84:	f04f 34ff 	mov.w	r4, #4294967295
  400a88:	e7e8      	b.n	400a5c <runBootloader+0xfc>
		
	} while (CTRL_GOOD != res);
		
		
	/*	Mount the SD card	*/
	memset(&fs, 0, sizeof(FATFS));
  400a8a:	4619      	mov	r1, r3
  400a8c:	f44f 720c 	mov.w	r2, #560	; 0x230
  400a90:	9301      	str	r3, [sp, #4]
  400a92:	482b      	ldr	r0, [pc, #172]	; (400b40 <runBootloader+0x1e0>)
  400a94:	4c2b      	ldr	r4, [pc, #172]	; (400b44 <runBootloader+0x1e4>)
  400a96:	47a0      	blx	r4
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  400a98:	9b01      	ldr	r3, [sp, #4]
  400a9a:	4929      	ldr	r1, [pc, #164]	; (400b40 <runBootloader+0x1e0>)
  400a9c:	4618      	mov	r0, r3
  400a9e:	4b2a      	ldr	r3, [pc, #168]	; (400b48 <runBootloader+0x1e8>)
  400aa0:	4798      	blx	r3
	if (res == FR_INVALID_DRIVE)
  400aa2:	280b      	cmp	r0, #11
	} while (CTRL_GOOD != res);
		
		
	/*	Mount the SD card	*/
	memset(&fs, 0, sizeof(FATFS));
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  400aa4:	f88b 0000 	strb.w	r0, [fp]
	if (res == FR_INVALID_DRIVE)
  400aa8:	d0ad      	beq.n	400a06 <runBootloader+0xa6>
		if(status == STATUS_PASS)
		{
			status = initializeSDCard(); 	
		}
		//load the new firmware only if the card was initialized. 		
		if(status == STATUS_PASS)
  400aaa:	2d00      	cmp	r5, #0
  400aac:	d1ab      	bne.n	400a06 <runBootloader+0xa6>
		{		
			//set the LED to purple during the firmware load
			drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_HIGH);
  400aae:	2101      	movs	r1, #1
  400ab0:	200c      	movs	r0, #12
  400ab2:	47b8      	blx	r7
			drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_LOW); 
  400ab4:	4629      	mov	r1, r5
  400ab6:	200d      	movs	r0, #13
  400ab8:	47b8      	blx	r7
			drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_LOW); 
  400aba:	4629      	mov	r1, r5
  400abc:	200e      	movs	r0, #14
  400abe:	47b8      	blx	r7
			status = loadNewFirmware(FIRMWARE_IMAGE_NAME);						
  400ac0:	4822      	ldr	r0, [pc, #136]	; (400b4c <runBootloader+0x1ec>)
  400ac2:	4b23      	ldr	r3, [pc, #140]	; (400b50 <runBootloader+0x1f0>)
		}
		//load the new firmware only if the card was initialized. 		
		if(status == STATUS_PASS)
		{		
			//set the LED to purple during the firmware load
			drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_HIGH);
  400ac4:	4c13      	ldr	r4, [pc, #76]	; (400b14 <runBootloader+0x1b4>)
			drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_LOW); 
			drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_LOW); 
			status = loadNewFirmware(FIRMWARE_IMAGE_NAME);						
  400ac6:	4798      	blx	r3
		}
		if(status != STATUS_PASS)
  400ac8:	2800      	cmp	r0, #0
  400aca:	d19c      	bne.n	400a06 <runBootloader+0xa6>
 * successBlink()
 * @brief blink led green 3 times if successful
 */
static void successBlink()
{
	drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_HIGH); 
  400acc:	2101      	movs	r1, #1
  400ace:	200e      	movs	r0, #14
  400ad0:	47a0      	blx	r4
	drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_HIGH); 
  400ad2:	2101      	movs	r1, #1
  400ad4:	200c      	movs	r0, #12
  400ad6:	47a0      	blx	r4
  400ad8:	4d13      	ldr	r5, [pc, #76]	; (400b28 <runBootloader+0x1c8>)
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_HIGH); 
  400ada:	200d      	movs	r0, #13
  400adc:	2101      	movs	r1, #1
  400ade:	47a0      	blx	r4
  400ae0:	2406      	movs	r4, #6
	
	int i = 0;
	for(i=0; i<6; i++)
	{
		delay_ms(200); 
  400ae2:	4812      	ldr	r0, [pc, #72]	; (400b2c <runBootloader+0x1cc>)
  400ae4:	47b0      	blx	r6
		drv_gpio_togglePin(DRV_GPIO_PIN_GREEN_LED); 	
  400ae6:	200c      	movs	r0, #12
  400ae8:	47a8      	blx	r5
	drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_HIGH); 
	drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_HIGH); 
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_HIGH); 
	
	int i = 0;
	for(i=0; i<6; i++)
  400aea:	3c01      	subs	r4, #1
  400aec:	d1f9      	bne.n	400ae2 <runBootloader+0x182>
  400aee:	e79b      	b.n	400a28 <runBootloader+0xc8>
		
	} while (CTRL_GOOD != res);
		
		
	/*	Mount the SD card	*/
	memset(&fs, 0, sizeof(FATFS));
  400af0:	4b14      	ldr	r3, [pc, #80]	; (400b44 <runBootloader+0x1e4>)
  400af2:	4813      	ldr	r0, [pc, #76]	; (400b40 <runBootloader+0x1e0>)
  400af4:	4621      	mov	r1, r4
  400af6:	f44f 720c 	mov.w	r2, #560	; 0x230
  400afa:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  400afc:	4620      	mov	r0, r4
  400afe:	4910      	ldr	r1, [pc, #64]	; (400b40 <runBootloader+0x1e0>)
  400b00:	4b11      	ldr	r3, [pc, #68]	; (400b48 <runBootloader+0x1e8>)
  400b02:	4798      	blx	r3
  400b04:	f889 0000 	strb.w	r0, [r9]
  400b08:	e77d      	b.n	400a06 <runBootloader+0xa6>
  400b0a:	bf00      	nop
  400b0c:	00404921 	.word	0x00404921
  400b10:	004049d5 	.word	0x004049d5
  400b14:	0040495d 	.word	0x0040495d
  400b18:	004052d5 	.word	0x004052d5
  400b1c:	00404dc5 	.word	0x00404dc5
  400b20:	20000085 	.word	0x20000085
  400b24:	000d1437 	.word	0x000d1437
  400b28:	00404a05 	.word	0x00404a05
  400b2c:	001a286e 	.word	0x001a286e
  400b30:	e000ed00 	.word	0xe000ed00
  400b34:	00408004 	.word	0x00408004
  400b38:	00400df9 	.word	0x00400df9
  400b3c:	00014ed3 	.word	0x00014ed3
  400b40:	20001100 	.word	0x20001100
  400b44:	00406209 	.word	0x00406209
  400b48:	004034b5 	.word	0x004034b5
  400b4c:	004066bc 	.word	0x004066bc
  400b50:	00400331 	.word	0x00400331
  400b54:	004017a1 	.word	0x004017a1
  400b58:	20000cac 	.word	0x20000cac
  400b5c:	00400e19 	.word	0x00400e19

00400b60 <debugPrintString>:
		task_debugLogWriteEntry(timeStampedStr, length);
	}
}

void __attribute__((optimize("O0"))) debugPrintString(char* str)
{
  400b60:	b580      	push	{r7, lr}
  400b62:	b0b6      	sub	sp, #216	; 0xd8
  400b64:	af00      	add	r7, sp, #0
  400b66:	6078      	str	r0, [r7, #4]
	size_t length = 0;
  400b68:	2300      	movs	r3, #0
  400b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	char timeStampedStr[200];
	int len = itoa(sgSysTickCount, timeStampedStr, 10);
  400b6e:	4b27      	ldr	r3, [pc, #156]	; (400c0c <debugPrintString+0xac>)
  400b70:	681b      	ldr	r3, [r3, #0]
  400b72:	461a      	mov	r2, r3
  400b74:	f107 0308 	add.w	r3, r7, #8
  400b78:	4610      	mov	r0, r2
  400b7a:	4619      	mov	r1, r3
  400b7c:	220a      	movs	r2, #10
  400b7e:	4b24      	ldr	r3, [pc, #144]	; (400c10 <debugPrintString+0xb0>)
  400b80:	4798      	blx	r3
  400b82:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	timeStampedStr[len++] = ',';
  400b86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
  400b8a:	1c5a      	adds	r2, r3, #1
  400b8c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
  400b90:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
  400b94:	4413      	add	r3, r2
  400b96:	222c      	movs	r2, #44	; 0x2c
  400b98:	f803 2cd0 	strb.w	r2, [r3, #-208]
	strncpy(timeStampedStr+len, str, 200-len);
  400b9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
  400ba0:	f107 0208 	add.w	r2, r7, #8
  400ba4:	441a      	add	r2, r3
  400ba6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
  400baa:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  400bae:	4610      	mov	r0, r2
  400bb0:	6879      	ldr	r1, [r7, #4]
  400bb2:	461a      	mov	r2, r3
  400bb4:	4b17      	ldr	r3, [pc, #92]	; (400c14 <debugPrintString+0xb4>)
  400bb6:	4798      	blx	r3
	
	//uint32_t time = sgSysTickCount;
	//#else
	//length = snprintf(timeStampedStr,100,"%08ld, %s",sgSysTickCount,str); 
	//#endif
	length = strlen(timeStampedStr); 
  400bb8:	f107 0308 	add.w	r3, r7, #8
  400bbc:	4618      	mov	r0, r3
  400bbe:	4b16      	ldr	r3, [pc, #88]	; (400c18 <debugPrintString+0xb8>)
  400bc0:	4798      	blx	r3
  400bc2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	if(length > 0)
  400bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  400bca:	2b00      	cmp	r3, #0
  400bcc:	d01a      	beq.n	400c04 <debugPrintString+0xa4>
	{
		if(brainSettings.debugPrintsEnabled)
  400bce:	4b13      	ldr	r3, [pc, #76]	; (400c1c <debugPrintString+0xbc>)
  400bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  400bd4:	2b00      	cmp	r3, #0
  400bd6:	d00e      	beq.n	400bf6 <debugPrintString+0x96>
		{
			if(config != NULL)
  400bd8:	4b11      	ldr	r3, [pc, #68]	; (400c20 <debugPrintString+0xc0>)
  400bda:	681b      	ldr	r3, [r3, #0]
  400bdc:	2b00      	cmp	r3, #0
  400bde:	d00a      	beq.n	400bf6 <debugPrintString+0x96>
			{
				drv_uart_putData((config->uart), timeStampedStr, length);
  400be0:	4b0f      	ldr	r3, [pc, #60]	; (400c20 <debugPrintString+0xc0>)
  400be2:	681b      	ldr	r3, [r3, #0]
  400be4:	681a      	ldr	r2, [r3, #0]
  400be6:	f107 0308 	add.w	r3, r7, #8
  400bea:	4610      	mov	r0, r2
  400bec:	4619      	mov	r1, r3
  400bee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
  400bf2:	4b0c      	ldr	r3, [pc, #48]	; (400c24 <debugPrintString+0xc4>)
  400bf4:	4798      	blx	r3
			}
		}
		task_debugLogWriteEntry(timeStampedStr, length);
  400bf6:	f107 0308 	add.w	r3, r7, #8
  400bfa:	4618      	mov	r0, r3
  400bfc:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
  400c00:	4b09      	ldr	r3, [pc, #36]	; (400c28 <debugPrintString+0xc8>)
  400c02:	4798      	blx	r3
		//if(config != NULL)
		//{
			//drv_uart_putData((config->uart), str, length);
		//}
	//}
}
  400c04:	37d8      	adds	r7, #216	; 0xd8
  400c06:	46bd      	mov	sp, r7
  400c08:	bd80      	pop	{r7, pc}
  400c0a:	bf00      	nop
  400c0c:	200010c8 	.word	0x200010c8
  400c10:	00404541 	.word	0x00404541
  400c14:	00406329 	.word	0x00406329
  400c18:	004062c9 	.word	0x004062c9
  400c1c:	200000c0 	.word	0x200000c0
  400c20:	20000cb0 	.word	0x20000cb0
  400c24:	00404bf9 	.word	0x00404bf9
  400c28:	00400c2d 	.word	0x00400c2d

00400c2c <task_debugLogWriteEntry>:

	return status; 
}

status_t task_debugLogWriteEntry(char* entry, size_t length)
{
  400c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	status_t status = STATUS_PASS;
	//take the semaphore
	if(semaphore_sdCardWrite == NULL)
  400c2e:	4c15      	ldr	r4, [pc, #84]	; (400c84 <task_debugLogWriteEntry+0x58>)
  400c30:	6823      	ldr	r3, [r4, #0]

	return status; 
}

status_t task_debugLogWriteEntry(char* entry, size_t length)
{
  400c32:	4607      	mov	r7, r0
  400c34:	460e      	mov	r6, r1
	status_t status = STATUS_PASS;
	//take the semaphore
	if(semaphore_sdCardWrite == NULL)
  400c36:	b13b      	cbz	r3, 400c48 <task_debugLogWriteEntry+0x1c>
	{
		return STATUS_FAIL; 
	}	
	if(xSemaphoreTake(semaphore_sdCardWrite,5) == true)
  400c38:	2100      	movs	r1, #0
  400c3a:	4618      	mov	r0, r3
  400c3c:	2205      	movs	r2, #5
  400c3e:	460b      	mov	r3, r1
  400c40:	4d11      	ldr	r5, [pc, #68]	; (400c88 <task_debugLogWriteEntry+0x5c>)
  400c42:	47a8      	blx	r5
  400c44:	2801      	cmp	r0, #1
  400c46:	d001      	beq.n	400c4c <task_debugLogWriteEntry+0x20>
{
	status_t status = STATUS_PASS;
	//take the semaphore
	if(semaphore_sdCardWrite == NULL)
	{
		return STATUS_FAIL; 
  400c48:	2001      	movs	r0, #1
  400c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}	
	if(xSemaphoreTake(semaphore_sdCardWrite,5) == true)
	{
		//copy data to sdCard buffer, make sure we have room first
		if(debugLogBufferPointer + length < DEBUG_LOG_BUFFER_SIZE)
  400c4c:	4d0f      	ldr	r5, [pc, #60]	; (400c8c <task_debugLogWriteEntry+0x60>)
  400c4e:	682a      	ldr	r2, [r5, #0]
  400c50:	4432      	add	r2, r6
  400c52:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  400c56:	d308      	bcc.n	400c6a <task_debugLogWriteEntry+0x3e>
			memcpy(debugLogBuffer+debugLogBufferPointer,entry,length);
			debugLogBufferPointer += length;
		}
		else
		{
			status = STATUS_FAIL;
  400c58:	4605      	mov	r5, r0
		}
		xSemaphoreGive(semaphore_sdCardWrite);
  400c5a:	2100      	movs	r1, #0
  400c5c:	6820      	ldr	r0, [r4, #0]
  400c5e:	4c0c      	ldr	r4, [pc, #48]	; (400c90 <task_debugLogWriteEntry+0x64>)
  400c60:	460a      	mov	r2, r1
  400c62:	460b      	mov	r3, r1
  400c64:	47a0      	blx	r4
  400c66:	4628      	mov	r0, r5
	{
		status = STATUS_FAIL;
	}	
	return status;
	
}
  400c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(xSemaphoreTake(semaphore_sdCardWrite,5) == true)
	{
		//copy data to sdCard buffer, make sure we have room first
		if(debugLogBufferPointer + length < DEBUG_LOG_BUFFER_SIZE)
		{
			memcpy(debugLogBuffer+debugLogBufferPointer,entry,length);
  400c6a:	682a      	ldr	r2, [r5, #0]
  400c6c:	4809      	ldr	r0, [pc, #36]	; (400c94 <task_debugLogWriteEntry+0x68>)
  400c6e:	4b0a      	ldr	r3, [pc, #40]	; (400c98 <task_debugLogWriteEntry+0x6c>)
  400c70:	4410      	add	r0, r2
  400c72:	4639      	mov	r1, r7
  400c74:	4632      	mov	r2, r6
  400c76:	4798      	blx	r3
			debugLogBufferPointer += length;
  400c78:	682b      	ldr	r3, [r5, #0]
  400c7a:	441e      	add	r6, r3
  400c7c:	602e      	str	r6, [r5, #0]
	return status; 
}

status_t task_debugLogWriteEntry(char* entry, size_t length)
{
	status_t status = STATUS_PASS;
  400c7e:	2500      	movs	r5, #0
  400c80:	e7eb      	b.n	400c5a <task_debugLogWriteEntry+0x2e>
  400c82:	bf00      	nop
  400c84:	20000cb4 	.word	0x20000cb4
  400c88:	00403e55 	.word	0x00403e55
  400c8c:	20000eb8 	.word	0x20000eb8
  400c90:	00403d45 	.word	0x00403d45
  400c94:	20000cb8 	.word	0x20000cb8
  400c98:	004060d5 	.word	0x004060d5

00400c9c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  400c9c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  400c9e:	4a07      	ldr	r2, [pc, #28]	; (400cbc <sd_mmc_configure_slot+0x20>)
  400ca0:	4b07      	ldr	r3, [pc, #28]	; (400cc0 <sd_mmc_configure_slot+0x24>)
  400ca2:	6812      	ldr	r2, [r2, #0]
  400ca4:	7818      	ldrb	r0, [r3, #0]
  400ca6:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
  400caa:	6811      	ldr	r1, [r2, #0]
  400cac:	4c05      	ldr	r4, [pc, #20]	; (400cc4 <sd_mmc_configure_slot+0x28>)
  400cae:	7c52      	ldrb	r2, [r2, #17]
  400cb0:	3300      	adds	r3, #0
  400cb2:	bf18      	it	ne
  400cb4:	2301      	movne	r3, #1
  400cb6:	47a0      	blx	r4
  400cb8:	bd10      	pop	{r4, pc}
  400cba:	bf00      	nop
  400cbc:	20000ec0 	.word	0x20000ec0
  400cc0:	20000ec6 	.word	0x20000ec6
  400cc4:	00401b11 	.word	0x00401b11

00400cc8 <sd_mmc_select_slot.part.0>:
 * \retval SD_MMC_ERR_NO_CARD  No card present on slot
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
  400cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  400cca:	00c5      	lsls	r5, r0, #3
  400ccc:	4c34      	ldr	r4, [pc, #208]	; (400da0 <sd_mmc_select_slot.part.0+0xd8>)
  400cce:	1829      	adds	r1, r5, r0
  400cd0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400cd4:	2601      	movs	r6, #1
  400cd6:	688a      	ldr	r2, [r1, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400cd8:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400cda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400cde:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400ce2:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400ce4:	f002 021f 	and.w	r2, r2, #31
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400cea:	fa06 f202 	lsl.w	r2, r6, r2
  400cee:	4013      	ands	r3, r2
  400cf0:	f101 0108 	add.w	r1, r1, #8
  400cf4:	d110      	bne.n	400d18 <sd_mmc_select_slot.part.0+0x50>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400cf6:	7989      	ldrb	r1, [r1, #6]
  400cf8:	42b1      	cmp	r1, r6
  400cfa:	d006      	beq.n	400d0a <sd_mmc_select_slot.part.0+0x42>
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400cfc:	4428      	add	r0, r5
  400cfe:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  400d02:	2304      	movs	r3, #4
  400d04:	73a3      	strb	r3, [r4, #14]
		return SD_MMC_ERR_NO_CARD;
  400d06:	2002      	movs	r0, #2
  400d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
  400d0a:	4a26      	ldr	r2, [pc, #152]	; (400da4 <sd_mmc_select_slot.part.0+0xdc>)
  400d0c:	7812      	ldrb	r2, [r2, #0]
  400d0e:	2a00      	cmp	r2, #0
  400d10:	d0f4      	beq.n	400cfc <sd_mmc_select_slot.part.0+0x34>
		SysTick->CTRL = 0;
  400d12:	4a25      	ldr	r2, [pc, #148]	; (400da8 <sd_mmc_select_slot.part.0+0xe0>)
  400d14:	6013      	str	r3, [r2, #0]
  400d16:	e7f1      	b.n	400cfc <sd_mmc_select_slot.part.0+0x34>
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  400d18:	798b      	ldrb	r3, [r1, #6]
  400d1a:	2b04      	cmp	r3, #4
  400d1c:	d02a      	beq.n	400d74 <sd_mmc_select_slot.part.0+0xac>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400d1e:	2b01      	cmp	r3, #1
  400d20:	d003      	beq.n	400d2a <sd_mmc_select_slot.part.0+0x62>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  400d22:	2b03      	cmp	r3, #3
  400d24:	d118      	bne.n	400d58 <sd_mmc_select_slot.part.0+0x90>
		return SD_MMC_ERR_UNUSABLE;
  400d26:	4618      	mov	r0, r3
  400d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
  400d2a:	4b1e      	ldr	r3, [pc, #120]	; (400da4 <sd_mmc_select_slot.part.0+0xdc>)
  400d2c:	781b      	ldrb	r3, [r3, #0]
  400d2e:	b12b      	cbz	r3, 400d3c <sd_mmc_select_slot.part.0+0x74>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400d30:	4b1d      	ldr	r3, [pc, #116]	; (400da8 <sd_mmc_select_slot.part.0+0xe0>)
  400d32:	681a      	ldr	r2, [r3, #0]
  400d34:	03d2      	lsls	r2, r2, #15
  400d36:	d530      	bpl.n	400d9a <sd_mmc_select_slot.part.0+0xd2>
		SysTick->CTRL = 0;
  400d38:	2200      	movs	r2, #0
  400d3a:	601a      	str	r2, [r3, #0]
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400d3c:	1829      	adds	r1, r5, r0
  400d3e:	0089      	lsls	r1, r1, #2
  400d40:	1863      	adds	r3, r4, r1
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  400d42:	4f1a      	ldr	r7, [pc, #104]	; (400dac <sd_mmc_select_slot.part.0+0xe4>)
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400d44:	2602      	movs	r6, #2
  400d46:	739e      	strb	r6, [r3, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  400d48:	5067      	str	r7, [r4, r1]
		sd_mmc_cards[slot].bus_width = 1;
  400d4a:	2701      	movs	r7, #1
		sd_mmc_cards[slot].high_speed = 0;
  400d4c:	2100      	movs	r1, #0
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
  400d4e:	745f      	strb	r7, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  400d50:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
  400d54:	7b9b      	ldrb	r3, [r3, #14]
  400d56:	e7e4      	b.n	400d22 <sd_mmc_select_slot.part.0+0x5a>
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
	sd_mmc_card = &sd_mmc_cards[slot];
  400d58:	4405      	add	r5, r0
  400d5a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
  400d5e:	4914      	ldr	r1, [pc, #80]	; (400db0 <sd_mmc_select_slot.part.0+0xe8>)
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  400d60:	4a14      	ldr	r2, [pc, #80]	; (400db4 <sd_mmc_select_slot.part.0+0xec>)
	sd_mmc_card = &sd_mmc_cards[slot];
	sd_mmc_configure_slot();
  400d62:	4b15      	ldr	r3, [pc, #84]	; (400db8 <sd_mmc_select_slot.part.0+0xf0>)
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  400d64:	7010      	strb	r0, [r2, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  400d66:	600c      	str	r4, [r1, #0]
	sd_mmc_configure_slot();
  400d68:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400d6a:	7ba0      	ldrb	r0, [r4, #14]

	// Initialize interface
	sd_mmc_slot_sel = slot;
	sd_mmc_card = &sd_mmc_cards[slot];
	sd_mmc_configure_slot();
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  400d6c:	1e83      	subs	r3, r0, #2
  400d6e:	4258      	negs	r0, r3
  400d70:	4158      	adcs	r0, r3
  400d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
  400d74:	4b0c      	ldr	r3, [pc, #48]	; (400da8 <sd_mmc_select_slot.part.0+0xe0>)
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400d76:	718e      	strb	r6, [r1, #6]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
  400d78:	681a      	ldr	r2, [r3, #0]
  400d7a:	b932      	cbnz	r2, 400d8a <sd_mmc_select_slot.part.0+0xc2>
		sd_mmc_sam_systick_used = true;
  400d7c:	4909      	ldr	r1, [pc, #36]	; (400da4 <sd_mmc_select_slot.part.0+0xdc>)
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400d7e:	4a0f      	ldr	r2, [pc, #60]	; (400dbc <sd_mmc_select_slot.part.0+0xf4>)
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
		sd_mmc_sam_systick_used = true;
  400d80:	700e      	strb	r6, [r1, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400d82:	605a      	str	r2, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  400d84:	601e      	str	r6, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  400d86:	2002      	movs	r0, #2
  400d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
  400d8a:	4a06      	ldr	r2, [pc, #24]	; (400da4 <sd_mmc_select_slot.part.0+0xdc>)
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400d8c:	480c      	ldr	r0, [pc, #48]	; (400dc0 <sd_mmc_select_slot.part.0+0xf8>)
  400d8e:	4b0d      	ldr	r3, [pc, #52]	; (400dc4 <sd_mmc_select_slot.part.0+0xfc>)
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
  400d90:	2100      	movs	r1, #0
  400d92:	7011      	strb	r1, [r2, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400d94:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  400d96:	2002      	movs	r0, #2
  400d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
  400d9a:	2002      	movs	r0, #2
  400d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d9e:	bf00      	nop
  400da0:	20000090 	.word	0x20000090
  400da4:	20000ebe 	.word	0x20000ebe
  400da8:	e000e010 	.word	0xe000e010
  400dac:	00061a80 	.word	0x00061a80
  400db0:	20000ec0 	.word	0x20000ec0
  400db4:	20000ec6 	.word	0x20000ec6
  400db8:	00400c9d 	.word	0x00400c9d
  400dbc:	00e4e1c0 	.word	0x00e4e1c0
  400dc0:	0082ca25 	.word	0x0082ca25
  400dc4:	20000085 	.word	0x20000085

00400dc8 <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
  400dc8:	b538      	push	{r3, r4, r5, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  400dca:	4d08      	ldr	r5, [pc, #32]	; (400dec <sd_mmc_cmd9_mci+0x24>)
  400dcc:	4a08      	ldr	r2, [pc, #32]	; (400df0 <sd_mmc_cmd9_mci+0x28>)
  400dce:	682b      	ldr	r3, [r5, #0]
  400dd0:	8999      	ldrh	r1, [r3, #12]
  400dd2:	f641 3009 	movw	r0, #6921	; 0x1b09
  400dd6:	0409      	lsls	r1, r1, #16
  400dd8:	4790      	blx	r2
  400dda:	4604      	mov	r4, r0
  400ddc:	b118      	cbz	r0, 400de6 <sd_mmc_cmd9_mci+0x1e>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
  400dde:	6828      	ldr	r0, [r5, #0]
  400de0:	4b04      	ldr	r3, [pc, #16]	; (400df4 <sd_mmc_cmd9_mci+0x2c>)
  400de2:	3012      	adds	r0, #18
  400de4:	4798      	blx	r3
	return true;
}
  400de6:	4620      	mov	r0, r4
  400de8:	bd38      	pop	{r3, r4, r5, pc}
  400dea:	bf00      	nop
  400dec:	20000ec0 	.word	0x20000ec0
  400df0:	00401bb5 	.word	0x00401bb5
  400df4:	00401be9 	.word	0x00401be9

00400df8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  400df8:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400dfa:	4804      	ldr	r0, [pc, #16]	; (400e0c <sd_mmc_init+0x14>)
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400dfc:	4a04      	ldr	r2, [pc, #16]	; (400e10 <sd_mmc_init+0x18>)
	driver_init();
  400dfe:	4b05      	ldr	r3, [pc, #20]	; (400e14 <sd_mmc_init+0x1c>)
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400e00:	2404      	movs	r4, #4
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400e02:	21ff      	movs	r1, #255	; 0xff
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400e04:	7384      	strb	r4, [r0, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400e06:	7011      	strb	r1, [r2, #0]
	driver_init();
  400e08:	4798      	blx	r3
  400e0a:	bd10      	pop	{r4, pc}
  400e0c:	20000090 	.word	0x20000090
  400e10:	20000ec6 	.word	0x20000ec6
  400e14:	00401ad9 	.word	0x00401ad9

00400e18 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
  400e1c:	4605      	mov	r5, r0
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400e1e:	b095      	sub	sp, #84	; 0x54
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
  400e20:	2800      	cmp	r0, #0
  400e22:	f000 80ea 	beq.w	400ffa <sd_mmc_check+0x1e2>
		return SD_MMC_ERR_SLOT;
  400e26:	2404      	movs	r4, #4
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400e28:	4b9e      	ldr	r3, [pc, #632]	; (4010a4 <sd_mmc_check+0x28c>)
  400e2a:	7818      	ldrb	r0, [r3, #0]
  400e2c:	2800      	cmp	r0, #0
  400e2e:	f000 80de 	beq.w	400fee <sd_mmc_check+0x1d6>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  400e32:	4620      	mov	r0, r4
  400e34:	b015      	add	sp, #84	; 0x54
  400e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  400e3a:	f245 5008 	movw	r0, #21768	; 0x5508
  400e3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  400e42:	47b0      	blx	r6
  400e44:	2800      	cmp	r0, #0
  400e46:	f040 80f7 	bne.w	401038 <sd_mmc_check+0x220>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
  400e4a:	f04f 0900 	mov.w	r9, #0
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400e4e:	683b      	ldr	r3, [r7, #0]
  400e50:	7bdb      	ldrb	r3, [r3, #15]
  400e52:	07da      	lsls	r2, r3, #31
  400e54:	f100 80fc 	bmi.w	401050 <sd_mmc_check+0x238>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400e58:	f245 1003 	movw	r0, #20739	; 0x5103
  400e5c:	2100      	movs	r1, #0
  400e5e:	47b0      	blx	r6
  400e60:	2800      	cmp	r0, #0
  400e62:	f000 80e0 	beq.w	401026 <sd_mmc_check+0x20e>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400e66:	f8df 9274 	ldr.w	r9, [pc, #628]	; 4010dc <sd_mmc_check+0x2c4>
  400e6a:	683d      	ldr	r5, [r7, #0]
  400e6c:	f8df a268 	ldr.w	sl, [pc, #616]	; 4010d8 <sd_mmc_check+0x2c0>
  400e70:	47c8      	blx	r9

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400e72:	683b      	ldr	r3, [r7, #0]
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400e74:	0c00      	lsrs	r0, r0, #16
  400e76:	81a8      	strh	r0, [r5, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400e78:	7bda      	ldrb	r2, [r3, #15]
  400e7a:	07d5      	lsls	r5, r2, #31
  400e7c:	d53a      	bpl.n	400ef4 <sd_mmc_check+0xdc>
		if (!sd_mmc_cmd9_mci()) {
  400e7e:	4b8a      	ldr	r3, [pc, #552]	; (4010a8 <sd_mmc_check+0x290>)
  400e80:	4798      	blx	r3
  400e82:	2800      	cmp	r0, #0
  400e84:	f000 80cf 	beq.w	401026 <sd_mmc_check+0x20e>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400e88:	f8da 3000 	ldr.w	r3, [sl]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400e8c:	4d87      	ldr	r5, [pc, #540]	; (4010ac <sd_mmc_check+0x294>)
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400e8e:	7d5a      	ldrb	r2, [r3, #21]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400e90:	4887      	ldr	r0, [pc, #540]	; (4010b0 <sd_mmc_check+0x298>)
  400e92:	7c99      	ldrb	r1, [r3, #18]
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400e94:	f002 0e07 	and.w	lr, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400e98:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
  400e9c:	f855 502e 	ldr.w	r5, [r5, lr, lsl #2]
  400ea0:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  400ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400ea8:	fb02 f205 	mul.w	r2, r2, r5
  400eac:	fb00 f202 	mul.w	r2, r0, r2
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400eb0:	0989      	lsrs	r1, r1, #6

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  400eb2:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400eb4:	f040 8179 	bne.w	4011aa <sd_mmc_check+0x392>
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400eb8:	7e58      	ldrb	r0, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400eba:	f893 c018 	ldrb.w	ip, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400ebe:	7ed9      	ldrb	r1, [r3, #27]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400ec0:	f893 e01a 	ldrb.w	lr, [r3, #26]
  400ec4:	7f1d      	ldrb	r5, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
  400ec6:	7dda      	ldrb	r2, [r3, #23]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400ec8:	0080      	lsls	r0, r0, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400eca:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400ece:	0049      	lsls	r1, r1, #1
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400ed0:	ea40 109e 	orr.w	r0, r0, lr, lsr #6
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400ed4:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
  400ed8:	f3c0 000b 	ubfx	r0, r0, #0, #12
  400edc:	f001 0107 	and.w	r1, r1, #7
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400ee0:	3001      	adds	r0, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400ee2:	3102      	adds	r1, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400ee4:	fa00 f101 	lsl.w	r1, r0, r1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400ee8:	f002 020f 	and.w	r2, r2, #15
  400eec:	fa01 f202 	lsl.w	r2, r1, r2
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
  400ef0:	0a92      	lsrs	r2, r2, #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400ef2:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  400ef4:	8999      	ldrh	r1, [r3, #12]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400ef6:	4d6f      	ldr	r5, [pc, #444]	; (4010b4 <sd_mmc_check+0x29c>)
  400ef8:	0409      	lsls	r1, r1, #16
  400efa:	f243 1007 	movw	r0, #12551	; 0x3107
  400efe:	47b0      	blx	r6
  400f00:	2800      	cmp	r0, #0
  400f02:	f000 8090 	beq.w	401026 <sd_mmc_check+0x20e>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400f06:	683b      	ldr	r3, [r7, #0]
  400f08:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 4010d8 <sd_mmc_check+0x2c0>
  400f0c:	7bda      	ldrb	r2, [r3, #15]
  400f0e:	07d0      	lsls	r0, r2, #31
  400f10:	d530      	bpl.n	400f74 <sd_mmc_check+0x15c>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400f12:	8999      	ldrh	r1, [r3, #12]
  400f14:	f241 1037 	movw	r0, #4407	; 0x1137
  400f18:	0409      	lsls	r1, r1, #16
  400f1a:	47a8      	blx	r5
  400f1c:	2800      	cmp	r0, #0
  400f1e:	f000 8082 	beq.w	401026 <sd_mmc_check+0x20e>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  400f22:	2501      	movs	r5, #1
  400f24:	9500      	str	r5, [sp, #0]
  400f26:	462b      	mov	r3, r5
  400f28:	4863      	ldr	r0, [pc, #396]	; (4010b8 <sd_mmc_check+0x2a0>)
  400f2a:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 4010e4 <sd_mmc_check+0x2cc>
  400f2e:	2100      	movs	r1, #0
  400f30:	2208      	movs	r2, #8
  400f32:	47e0      	blx	ip
  400f34:	2800      	cmp	r0, #0
  400f36:	d076      	beq.n	401026 <sd_mmc_check+0x20e>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
  400f38:	4629      	mov	r1, r5
  400f3a:	a804      	add	r0, sp, #16
  400f3c:	4b5f      	ldr	r3, [pc, #380]	; (4010bc <sd_mmc_check+0x2a4>)
  400f3e:	4798      	blx	r3
  400f40:	2800      	cmp	r0, #0
  400f42:	d070      	beq.n	401026 <sd_mmc_check+0x20e>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  400f44:	4b5e      	ldr	r3, [pc, #376]	; (4010c0 <sd_mmc_check+0x2a8>)
  400f46:	4798      	blx	r3
  400f48:	2800      	cmp	r0, #0
  400f4a:	d06c      	beq.n	401026 <sd_mmc_check+0x20e>
  400f4c:	f89d 3010 	ldrb.w	r3, [sp, #16]
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  400f50:	f003 030f 	and.w	r3, r3, #15
  400f54:	2b01      	cmp	r3, #1
  400f56:	f000 8223 	beq.w	4013a0 <sd_mmc_check+0x588>
  400f5a:	f0c0 821c 	bcc.w	401396 <sd_mmc_check+0x57e>
  400f5e:	2b02      	cmp	r3, #2
  400f60:	f040 8219 	bne.w	401396 <sd_mmc_check+0x57e>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400f64:	f89d 3012 	ldrb.w	r3, [sp, #18]
	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400f68:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400f6a:	683b      	ldr	r3, [r7, #0]
  400f6c:	bf14      	ite	ne
  400f6e:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400f70:	2220      	moveq	r2, #32
  400f72:	741a      	strb	r2, [r3, #16]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400f74:	4d4b      	ldr	r5, [pc, #300]	; (4010a4 <sd_mmc_check+0x28c>)
  400f76:	4b53      	ldr	r3, [pc, #332]	; (4010c4 <sd_mmc_check+0x2ac>)
  400f78:	7828      	ldrb	r0, [r5, #0]
  400f7a:	4798      	blx	r3
  400f7c:	2803      	cmp	r0, #3
  400f7e:	d91a      	bls.n	400fb6 <sd_mmc_check+0x19e>
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400f80:	683b      	ldr	r3, [r7, #0]
  400f82:	f8df a154 	ldr.w	sl, [pc, #340]	; 4010d8 <sd_mmc_check+0x2c0>
  400f86:	7bda      	ldrb	r2, [r3, #15]
  400f88:	07d1      	lsls	r1, r2, #31
  400f8a:	d512      	bpl.n	400fb2 <sd_mmc_check+0x19a>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400f8c:	8999      	ldrh	r1, [r3, #12]
  400f8e:	f8df b124 	ldr.w	fp, [pc, #292]	; 4010b4 <sd_mmc_check+0x29c>
  400f92:	0409      	lsls	r1, r1, #16
  400f94:	f241 1037 	movw	r0, #4407	; 0x1137
  400f98:	47b0      	blx	r6
  400f9a:	2800      	cmp	r0, #0
  400f9c:	d044      	beq.n	401028 <sd_mmc_check+0x210>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400f9e:	f241 1006 	movw	r0, #4358	; 0x1106
  400fa2:	2102      	movs	r1, #2
  400fa4:	47d8      	blx	fp
  400fa6:	2800      	cmp	r0, #0
  400fa8:	d03e      	beq.n	401028 <sd_mmc_check+0x210>
		return false;
	}
	sd_mmc_card->bus_width = 4;
  400faa:	f8da 3000 	ldr.w	r3, [sl]
  400fae:	2204      	movs	r2, #4
  400fb0:	745a      	strb	r2, [r3, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
  400fb2:	4b45      	ldr	r3, [pc, #276]	; (4010c8 <sd_mmc_check+0x2b0>)
  400fb4:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
  400fb6:	4b45      	ldr	r3, [pc, #276]	; (4010cc <sd_mmc_check+0x2b4>)
  400fb8:	4798      	blx	r3
  400fba:	b158      	cbz	r0, 400fd4 <sd_mmc_check+0x1bc>
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400fbc:	683b      	ldr	r3, [r7, #0]
  400fbe:	f8df b118 	ldr.w	fp, [pc, #280]	; 4010d8 <sd_mmc_check+0x2c0>
  400fc2:	7bda      	ldrb	r2, [r3, #15]
  400fc4:	07d2      	lsls	r2, r2, #31
  400fc6:	d503      	bpl.n	400fd0 <sd_mmc_check+0x1b8>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400fc8:	7c1b      	ldrb	r3, [r3, #16]
  400fca:	2b10      	cmp	r3, #16
  400fcc:	f200 80fa 	bhi.w	4011c4 <sd_mmc_check+0x3ac>
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
  400fd0:	4b3d      	ldr	r3, [pc, #244]	; (4010c8 <sd_mmc_check+0x2b0>)
  400fd2:	4798      	blx	r3
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400fd4:	683a      	ldr	r2, [r7, #0]
  400fd6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 4010d8 <sd_mmc_check+0x2c0>
  400fda:	7bd3      	ldrb	r3, [r2, #15]
  400fdc:	07d9      	lsls	r1, r3, #31
  400fde:	f100 80d9 	bmi.w	401194 <sd_mmc_check+0x37c>
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400fe2:	7828      	ldrb	r0, [r5, #0]
	//if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
			//: sd_mmc_mci_card_init())
	if(sd_mmc_mci_card_init()) 
	{
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400fe4:	2300      	movs	r3, #0
  400fe6:	7393      	strb	r3, [r2, #14]
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400fe8:	2800      	cmp	r0, #0
  400fea:	f47f af22 	bne.w	400e32 <sd_mmc_check+0x1a>
		driver_deselect_device(sd_mmc_slot_sel);
  400fee:	4b38      	ldr	r3, [pc, #224]	; (4010d0 <sd_mmc_check+0x2b8>)
  400ff0:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  400ff2:	4620      	mov	r0, r4
  400ff4:	b015      	add	sp, #84	; 0x54
  400ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400ffa:	4b36      	ldr	r3, [pc, #216]	; (4010d4 <sd_mmc_check+0x2bc>)
  400ffc:	4798      	blx	r3
sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  400ffe:	2801      	cmp	r0, #1
  401000:	4604      	mov	r4, r0
  401002:	f47f af11 	bne.w	400e28 <sd_mmc_check+0x10>
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  401006:	4f34      	ldr	r7, [pc, #208]	; (4010d8 <sd_mmc_check+0x2c0>)
	sd_mmc_card->version = CARD_VER_UNKNOWN;
	sd_mmc_card->rca = 0;
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  401008:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 4010e8 <sd_mmc_check+0x2d0>
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  40100c:	683b      	ldr	r3, [r7, #0]

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40100e:	4e29      	ldr	r6, [pc, #164]	; (4010b4 <sd_mmc_check+0x29c>)
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  401010:	73d8      	strb	r0, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  401012:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  401014:	819d      	strh	r5, [r3, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  401016:	47c0      	blx	r8

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  401018:	4629      	mov	r1, r5
  40101a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40101e:	47b0      	blx	r6
  401020:	2800      	cmp	r0, #0
  401022:	f47f af0a 	bne.w	400e3a <sd_mmc_check+0x22>
  401026:	4d1f      	ldr	r5, [pc, #124]	; (4010a4 <sd_mmc_check+0x28c>)
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  401028:	683b      	ldr	r3, [r7, #0]
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40102a:	7828      	ldrb	r0, [r5, #0]
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  40102c:	2403      	movs	r4, #3
  40102e:	739c      	strb	r4, [r3, #14]
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  401030:	2800      	cmp	r0, #0
  401032:	f47f aefe 	bne.w	400e32 <sd_mmc_check+0x1a>
  401036:	e7da      	b.n	400fee <sd_mmc_check+0x1d6>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
  401038:	4b28      	ldr	r3, [pc, #160]	; (4010dc <sd_mmc_check+0x2c4>)
  40103a:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  40103c:	1c45      	adds	r5, r0, #1
  40103e:	f43f af04 	beq.w	400e4a <sd_mmc_check+0x32>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  401042:	f3c0 000b 	ubfx	r0, r0, #0, #12
  401046:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40104a:	d1ec      	bne.n	401026 <sd_mmc_check+0x20e>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  40104c:	46a1      	mov	r9, r4
  40104e:	e6fe      	b.n	400e4e <sd_mmc_check+0x36>
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401050:	f640 0535 	movw	r5, #2101	; 0x835
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
  401054:	f8df a088 	ldr.w	sl, [pc, #136]	; 4010e0 <sd_mmc_check+0x2c8>
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  401058:	f8df b080 	ldr.w	fp, [pc, #128]	; 4010dc <sd_mmc_check+0x2c4>
  40105c:	e00e      	b.n	40107c <sd_mmc_check+0x264>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
  40105e:	f1b9 0f00 	cmp.w	r9, #0
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  401062:	bf14      	ite	ne
  401064:	4651      	movne	r1, sl
  401066:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
  40106a:	f244 5029 	movw	r0, #17705	; 0x4529
  40106e:	47b0      	blx	r6
  401070:	b150      	cbz	r0, 401088 <sd_mmc_check+0x270>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  401072:	47d8      	blx	fp
		if (resp & OCR_POWER_UP_BUSY) {
  401074:	2800      	cmp	r0, #0
  401076:	db78      	blt.n	40116a <sd_mmc_check+0x352>
			if ((resp & OCR_CCS) != 0) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
  401078:	3d01      	subs	r5, #1
  40107a:	d005      	beq.n	401088 <sd_mmc_check+0x270>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40107c:	f241 1037 	movw	r0, #4407	; 0x1137
  401080:	2100      	movs	r1, #0
  401082:	47b0      	blx	r6
  401084:	2800      	cmp	r0, #0
  401086:	d1ea      	bne.n	40105e <sd_mmc_check+0x246>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  401088:	683b      	ldr	r3, [r7, #0]
  40108a:	2202      	movs	r2, #2
  40108c:	73da      	strb	r2, [r3, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40108e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401092:	2100      	movs	r1, #0
  401094:	47b0      	blx	r6
  401096:	2800      	cmp	r0, #0
  401098:	d0c5      	beq.n	401026 <sd_mmc_check+0x20e>
  40109a:	f241 0569 	movw	r5, #4201	; 0x1069
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  40109e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4010dc <sd_mmc_check+0x2c4>
  4010a2:	e025      	b.n	4010f0 <sd_mmc_check+0x2d8>
  4010a4:	20000ec6 	.word	0x20000ec6
  4010a8:	00400dc9 	.word	0x00400dc9
  4010ac:	0040670c 	.word	0x0040670c
  4010b0:	004066cc 	.word	0x004066cc
  4010b4:	00401bb5 	.word	0x00401bb5
  4010b8:	00081133 	.word	0x00081133
  4010bc:	00401d61 	.word	0x00401d61
  4010c0:	00401dc9 	.word	0x00401dc9
  4010c4:	00401b01 	.word	0x00401b01
  4010c8:	00400c9d 	.word	0x00400c9d
  4010cc:	00401b0d 	.word	0x00401b0d
  4010d0:	00401b91 	.word	0x00401b91
  4010d4:	00400cc9 	.word	0x00400cc9
  4010d8:	20000ec0 	.word	0x20000ec0
  4010dc:	00401be1 	.word	0x00401be1
  4010e0:	401f8000 	.word	0x401f8000
  4010e4:	00401c0d 	.word	0x00401c0d
  4010e8:	00401b95 	.word	0x00401b95
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
  4010ec:	3d01      	subs	r5, #1
  4010ee:	d09a      	beq.n	401026 <sd_mmc_check+0x20e>
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4010f0:	49af      	ldr	r1, [pc, #700]	; (4013b0 <sd_mmc_check+0x598>)
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  4010f2:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 4013f0 <sd_mmc_check+0x5d8>
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4010f6:	f244 5001 	movw	r0, #17665	; 0x4501
  4010fa:	47b0      	blx	r6
  4010fc:	2800      	cmp	r0, #0
  4010fe:	d092      	beq.n	401026 <sd_mmc_check+0x20e>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  401100:	47c0      	blx	r8
		if (resp & OCR_POWER_UP_BUSY) {
  401102:	2800      	cmp	r0, #0
  401104:	daf2      	bge.n	4010ec <sd_mmc_check+0x2d4>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
  401106:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40110a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  40110e:	d104      	bne.n	40111a <sd_mmc_check+0x302>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
  401110:	683b      	ldr	r3, [r7, #0]
  401112:	7bda      	ldrb	r2, [r3, #15]
  401114:	f042 0208 	orr.w	r2, r2, #8
  401118:	73da      	strb	r2, [r3, #15]
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40111a:	f645 3002 	movw	r0, #23298	; 0x5b02
  40111e:	2100      	movs	r1, #0
  401120:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 4013f4 <sd_mmc_check+0x5dc>
  401124:	47b0      	blx	r6
  401126:	2800      	cmp	r0, #0
  401128:	f43f af7d 	beq.w	401026 <sd_mmc_check+0x20e>
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
  40112c:	683b      	ldr	r3, [r7, #0]
  40112e:	4da1      	ldr	r5, [pc, #644]	; (4013b4 <sd_mmc_check+0x59c>)
  401130:	2201      	movs	r2, #1
  401132:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  401134:	f241 1003 	movw	r0, #4355	; 0x1103
  401138:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40113c:	47c0      	blx	r8
  40113e:	2800      	cmp	r0, #0
  401140:	f43f af71 	beq.w	401026 <sd_mmc_check+0x20e>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
  401144:	4b9c      	ldr	r3, [pc, #624]	; (4013b8 <sd_mmc_check+0x5a0>)
  401146:	4798      	blx	r3
  401148:	2800      	cmp	r0, #0
  40114a:	f43f af6c 	beq.w	401026 <sd_mmc_check+0x20e>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  40114e:	682b      	ldr	r3, [r5, #0]
  401150:	7c9a      	ldrb	r2, [r3, #18]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
  401152:	f3c2 0283 	ubfx	r2, r2, #2, #4
  401156:	3a01      	subs	r2, #1
  401158:	2a03      	cmp	r2, #3
  40115a:	f200 817c 	bhi.w	401456 <sd_mmc_check+0x63e>
  40115e:	e8df f012 	tbh	[pc, r2, lsl #1]
  401162:	0177      	.short	0x0177
  401164:	0124017d 	.word	0x0124017d
  401168:	0068      	.short	0x0068
			return false;
		}
		resp = driver_get_response();
		if (resp & OCR_POWER_UP_BUSY) {
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
  40116a:	0041      	lsls	r1, r0, #1
  40116c:	d50f      	bpl.n	40118e <sd_mmc_check+0x376>
				sd_mmc_card->type |= CARD_TYPE_HC;
  40116e:	683a      	ldr	r2, [r7, #0]
  401170:	7bd3      	ldrb	r3, [r2, #15]
  401172:	f043 0308 	orr.w	r3, r3, #8
  401176:	73d3      	strb	r3, [r2, #15]
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401178:	07db      	lsls	r3, r3, #31
  40117a:	f57f ae6d 	bpl.w	400e58 <sd_mmc_check+0x40>
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40117e:	f645 3002 	movw	r0, #23298	; 0x5b02
  401182:	2100      	movs	r1, #0
  401184:	47b0      	blx	r6
  401186:	2800      	cmp	r0, #0
  401188:	f47f ae66 	bne.w	400e58 <sd_mmc_check+0x40>
  40118c:	e74b      	b.n	401026 <sd_mmc_check+0x20e>
  40118e:	683b      	ldr	r3, [r7, #0]
  401190:	7bdb      	ldrb	r3, [r3, #15]
  401192:	e7f1      	b.n	401178 <sd_mmc_check+0x360>
		// Valid new configuration
		sd_mmc_configure_slot();
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  401194:	f241 1010 	movw	r0, #4368	; 0x1110
  401198:	f44f 7100 	mov.w	r1, #512	; 0x200
  40119c:	47b0      	blx	r6
  40119e:	2800      	cmp	r0, #0
  4011a0:	f43f af42 	beq.w	401028 <sd_mmc_check+0x210>
  4011a4:	f8d8 2000 	ldr.w	r2, [r8]
  4011a8:	e71b      	b.n	400fe2 <sd_mmc_check+0x1ca>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4011aa:	7e59      	ldrb	r1, [r3, #25]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4011ac:	7e98      	ldrb	r0, [r3, #26]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4011ae:	7eda      	ldrb	r2, [r3, #27]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4011b0:	0409      	lsls	r1, r1, #16
  4011b2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4011b6:	430a      	orrs	r2, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
  4011b8:	f3c2 0215 	ubfx	r2, r2, #0, #22
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
  4011bc:	3201      	adds	r2, #1
  4011be:	0252      	lsls	r2, r2, #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
  4011c0:	605a      	str	r2, [r3, #4]
  4011c2:	e697      	b.n	400ef4 <sd_mmc_check+0xdc>
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE];

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  4011c4:	f04f 0a01 	mov.w	sl, #1
  4011c8:	f8cd a000 	str.w	sl, [sp]
  4011cc:	4653      	mov	r3, sl
  4011ce:	487b      	ldr	r0, [pc, #492]	; (4013bc <sd_mmc_check+0x5a4>)
  4011d0:	497b      	ldr	r1, [pc, #492]	; (4013c0 <sd_mmc_check+0x5a8>)
  4011d2:	f8df c204 	ldr.w	ip, [pc, #516]	; 4013d8 <sd_mmc_check+0x5c0>
  4011d6:	2240      	movs	r2, #64	; 0x40
  4011d8:	47e0      	blx	ip
  4011da:	2800      	cmp	r0, #0
  4011dc:	f43f af24 	beq.w	401028 <sd_mmc_check+0x210>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
  4011e0:	a804      	add	r0, sp, #16
  4011e2:	4651      	mov	r1, sl
  4011e4:	4b77      	ldr	r3, [pc, #476]	; (4013c4 <sd_mmc_check+0x5ac>)
  4011e6:	4798      	blx	r3
  4011e8:	2800      	cmp	r0, #0
  4011ea:	f43f af1d 	beq.w	401028 <sd_mmc_check+0x210>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  4011ee:	4b76      	ldr	r3, [pc, #472]	; (4013c8 <sd_mmc_check+0x5b0>)
  4011f0:	4798      	blx	r3
  4011f2:	2800      	cmp	r0, #0
  4011f4:	f43f af18 	beq.w	401028 <sd_mmc_check+0x210>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4011f8:	47c8      	blx	r9
  4011fa:	0600      	lsls	r0, r0, #24
  4011fc:	f53f af14 	bmi.w	401028 <sd_mmc_check+0x210>
  401200:	f89d 3020 	ldrb.w	r3, [sp, #32]
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  401204:	f003 030f 	and.w	r3, r3, #15
  401208:	2b0f      	cmp	r3, #15
  40120a:	f43f aee1 	beq.w	400fd0 <sd_mmc_check+0x1b8>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40120e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401212:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  401216:	ea53 2202 	orrs.w	r2, r3, r2, lsl #8
  40121a:	f47f af05 	bne.w	401028 <sd_mmc_check+0x210>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
  40121e:	47c0      	blx	r8
	sd_mmc_card->high_speed = 1;
  401220:	f8db 3000 	ldr.w	r3, [fp]
	sd_mmc_card->clock *= 2;
  401224:	681a      	ldr	r2, [r3, #0]
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
	sd_mmc_card->high_speed = 1;
  401226:	f883 a022 	strb.w	sl, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  40122a:	fa02 f20a 	lsl.w	r2, r2, sl
  40122e:	601a      	str	r2, [r3, #0]
  401230:	e6ce      	b.n	400fd0 <sd_mmc_check+0x1b8>
	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  401232:	2240      	movs	r2, #64	; 0x40
  401234:	741a      	strb	r2, [r3, #16]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401236:	7d5a      	ldrb	r2, [r3, #21]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401238:	f893 e019 	ldrb.w	lr, [r3, #25]
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40123c:	4963      	ldr	r1, [pc, #396]	; (4013cc <sd_mmc_check+0x5b4>)
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  40123e:	4864      	ldr	r0, [pc, #400]	; (4013d0 <sd_mmc_check+0x5b8>)
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401240:	f893 c018 	ldrb.w	ip, [r3, #24]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  401244:	7e9d      	ldrb	r5, [r3, #26]
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  401246:	f002 0807 	and.w	r8, r2, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  40124a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
  40124e:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
  401252:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401256:	ea4f 028e 	mov.w	r2, lr, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40125a:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
  40125e:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
  401262:	fb0e f101 	mul.w	r1, lr, r1
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401266:	ea42 1295 	orr.w	r2, r2, r5, lsr #6
  40126a:	fb00 f001 	mul.w	r0, r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
  40126e:	f3c2 020b 	ubfx	r2, r2, #0, #12
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  401272:	f640 71ff 	movw	r1, #4095	; 0xfff
  401276:	428a      	cmp	r2, r1

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  401278:	6018      	str	r0, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  40127a:	d011      	beq.n	4012a0 <sd_mmc_check+0x488>
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40127c:	7ed9      	ldrb	r1, [r3, #27]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40127e:	7f1d      	ldrb	r5, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
  401280:	7dd8      	ldrb	r0, [r3, #23]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401282:	0049      	lsls	r1, r1, #1
  401284:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
  401288:	f001 0107 	and.w	r1, r1, #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40128c:	3201      	adds	r2, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  40128e:	3102      	adds	r1, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  401290:	fa02 f101 	lsl.w	r1, r2, r1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  401294:	f000 020f 	and.w	r2, r0, #15
  401298:	fa01 f202 	lsl.w	r2, r1, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  40129c:	0a92      	lsrs	r2, r2, #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  40129e:	605a      	str	r2, [r3, #4]
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  4012a0:	8999      	ldrh	r1, [r3, #12]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4012a2:	f243 1007 	movw	r0, #12551	; 0x3107
  4012a6:	0409      	lsls	r1, r1, #16
  4012a8:	47b0      	blx	r6
  4012aa:	2800      	cmp	r0, #0
  4012ac:	f43f aebb 	beq.w	401026 <sd_mmc_check+0x20e>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  4012b0:	683b      	ldr	r3, [r7, #0]
  4012b2:	7c1b      	ldrb	r3, [r3, #16]
  4012b4:	2b3f      	cmp	r3, #63	; 0x3f
  4012b6:	f240 80b1 	bls.w	40141c <sd_mmc_check+0x604>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  4012ba:	2100      	movs	r1, #0
  4012bc:	9100      	str	r1, [sp, #0]
  4012be:	4845      	ldr	r0, [pc, #276]	; (4013d4 <sd_mmc_check+0x5bc>)
  4012c0:	4d45      	ldr	r5, [pc, #276]	; (4013d8 <sd_mmc_check+0x5c0>)
  4012c2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4012c6:	2301      	movs	r3, #1
  4012c8:	47a8      	blx	r5
  4012ca:	2800      	cmp	r0, #0
  4012cc:	f43f aeab 	beq.w	401026 <sd_mmc_check+0x20e>
  4012d0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 4013f8 <sd_mmc_check+0x5e0>
  4012d4:	2532      	movs	r5, #50	; 0x32
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
  4012d6:	a803      	add	r0, sp, #12
  4012d8:	47c0      	blx	r8
  4012da:	3d01      	subs	r5, #1
  4012dc:	b2ad      	uxth	r5, r5
  4012de:	2800      	cmp	r0, #0
  4012e0:	f43f aea1 	beq.w	401026 <sd_mmc_check+0x20e>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4012e4:	2d00      	cmp	r5, #0
  4012e6:	d1f6      	bne.n	4012d6 <sd_mmc_check+0x4be>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4012e8:	683b      	ldr	r3, [r7, #0]
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  4012ea:	9a03      	ldr	r2, [sp, #12]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4012ec:	7e5d      	ldrb	r5, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4012ee:	7e18      	ldrb	r0, [r3, #24]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4012f0:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4012f2:	00ab      	lsls	r3, r5, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4012f4:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4012f8:	ea43 1191 	orr.w	r1, r3, r1, lsr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
  4012fc:	f3c1 010b 	ubfx	r1, r1, #0, #12
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  401300:	f640 73ff 	movw	r3, #4095	; 0xfff
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  401304:	f002 0202 	and.w	r2, r2, #2
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  401308:	4299      	cmp	r1, r3
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  40130a:	fa5f fa82 	uxtb.w	sl, r2
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  40130e:	f04f 0532 	mov.w	r5, #50	; 0x32
  401312:	f10d 0b10 	add.w	fp, sp, #16
  401316:	d073      	beq.n	401400 <sd_mmc_check+0x5e8>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
  401318:	4658      	mov	r0, fp
  40131a:	47c0      	blx	r8
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  40131c:	3501      	adds	r5, #1
  40131e:	b2ad      	uxth	r5, r5
		if (!driver_read_word(&sec_count)) {
  401320:	2800      	cmp	r0, #0
  401322:	f43f ae80 	beq.w	401026 <sd_mmc_check+0x20e>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  401326:	2d7f      	cmp	r5, #127	; 0x7f
  401328:	d9f6      	bls.n	401318 <sd_mmc_check+0x500>
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  40132a:	4d2c      	ldr	r5, [pc, #176]	; (4013dc <sd_mmc_check+0x5c4>)
  40132c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 4013fc <sd_mmc_check+0x5e4>
  401330:	7828      	ldrb	r0, [r5, #0]
  401332:	47c0      	blx	r8
  401334:	2803      	cmp	r0, #3
  401336:	d918      	bls.n	40136a <sd_mmc_check+0x552>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  401338:	7828      	ldrb	r0, [r5, #0]
  40133a:	47c0      	blx	r8
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
  40133c:	2804      	cmp	r0, #4
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  40133e:	4680      	mov	r8, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
  401340:	d070      	beq.n	401424 <sd_mmc_check+0x60c>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  401342:	4927      	ldr	r1, [pc, #156]	; (4013e0 <sd_mmc_check+0x5c8>)
  401344:	4b27      	ldr	r3, [pc, #156]	; (4013e4 <sd_mmc_check+0x5cc>)
  401346:	2808      	cmp	r0, #8
  401348:	bf18      	it	ne
  40134a:	4619      	movne	r1, r3
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40134c:	f243 1006 	movw	r0, #12550	; 0x3106
  401350:	47b0      	blx	r6
  401352:	2800      	cmp	r0, #0
  401354:	f43f ae68 	beq.w	401028 <sd_mmc_check+0x210>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  401358:	47c8      	blx	r9
  40135a:	0602      	lsls	r2, r0, #24
  40135c:	f53f ae64 	bmi.w	401028 <sd_mmc_check+0x210>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
  401360:	683b      	ldr	r3, [r7, #0]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  401362:	4a21      	ldr	r2, [pc, #132]	; (4013e8 <sd_mmc_check+0x5d0>)
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
  401364:	f883 8011 	strb.w	r8, [r3, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  401368:	4790      	blx	r2
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  40136a:	4b20      	ldr	r3, [pc, #128]	; (4013ec <sd_mmc_check+0x5d4>)
  40136c:	4798      	blx	r3
  40136e:	b110      	cbz	r0, 401376 <sd_mmc_check+0x55e>
  401370:	f1ba 0f00 	cmp.w	sl, #0
  401374:	d158      	bne.n	401428 <sd_mmc_check+0x610>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  401376:	f04f 080a 	mov.w	r8, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40137a:	f241 1010 	movw	r0, #4368	; 0x1110
  40137e:	f44f 7100 	mov.w	r1, #512	; 0x200
  401382:	47b0      	blx	r6
  401384:	f108 38ff 	add.w	r8, r8, #4294967295
  401388:	2800      	cmp	r0, #0
  40138a:	d16a      	bne.n	401462 <sd_mmc_check+0x64a>
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
  40138c:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
  401390:	f43f ae4a 	beq.w	401028 <sd_mmc_check+0x210>
  401394:	e7f1      	b.n	40137a <sd_mmc_check+0x562>
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  401396:	f8da 3000 	ldr.w	r3, [sl]
  40139a:	2210      	movs	r2, #16
  40139c:	741a      	strb	r2, [r3, #16]
  40139e:	e5e9      	b.n	400f74 <sd_mmc_check+0x15c>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  4013a0:	f8da 3000 	ldr.w	r3, [sl]
  4013a4:	221a      	movs	r2, #26
  4013a6:	741a      	strb	r2, [r3, #16]
  4013a8:	e5e4      	b.n	400f74 <sd_mmc_check+0x15c>
	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  4013aa:	2230      	movs	r2, #48	; 0x30
  4013ac:	741a      	strb	r2, [r3, #16]
  4013ae:	e742      	b.n	401236 <sd_mmc_check+0x41e>
  4013b0:	401f8000 	.word	0x401f8000
  4013b4:	20000ec0 	.word	0x20000ec0
  4013b8:	00400dc9 	.word	0x00400dc9
  4013bc:	00081106 	.word	0x00081106
  4013c0:	80ffff01 	.word	0x80ffff01
  4013c4:	00401d61 	.word	0x00401d61
  4013c8:	00401dc9 	.word	0x00401dc9
  4013cc:	0040670c 	.word	0x0040670c
  4013d0:	00406728 	.word	0x00406728
  4013d4:	00081108 	.word	0x00081108
  4013d8:	00401c0d 	.word	0x00401c0d
  4013dc:	20000ec6 	.word	0x20000ec6
  4013e0:	01b70200 	.word	0x01b70200
  4013e4:	01b70000 	.word	0x01b70000
  4013e8:	00400c9d 	.word	0x00400c9d
  4013ec:	00401b0d 	.word	0x00401b0d
  4013f0:	00401be1 	.word	0x00401be1
  4013f4:	00401bb5 	.word	0x00401bb5
  4013f8:	00401cbd 	.word	0x00401cbd
  4013fc:	00401b01 	.word	0x00401b01

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
  401400:	4658      	mov	r0, fp
  401402:	47c0      	blx	r8
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  401404:	3501      	adds	r5, #1
  401406:	b2ad      	uxth	r5, r5
			if (!driver_read_word(&sec_count)) {
  401408:	2800      	cmp	r0, #0
  40140a:	f43f ae0c 	beq.w	401026 <sd_mmc_check+0x20e>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  40140e:	2d36      	cmp	r5, #54	; 0x36
  401410:	d1f6      	bne.n	401400 <sd_mmc_check+0x5e8>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  401412:	9a04      	ldr	r2, [sp, #16]
  401414:	683b      	ldr	r3, [r7, #0]
  401416:	0852      	lsrs	r2, r2, #1
  401418:	605a      	str	r2, [r3, #4]
  40141a:	e77d      	b.n	401318 <sd_mmc_check+0x500>
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
  40141c:	4b12      	ldr	r3, [pc, #72]	; (401468 <sd_mmc_check+0x650>)
  40141e:	4d13      	ldr	r5, [pc, #76]	; (40146c <sd_mmc_check+0x654>)
  401420:	4798      	blx	r3
  401422:	e7a8      	b.n	401376 <sd_mmc_check+0x55e>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
  401424:	4912      	ldr	r1, [pc, #72]	; (401470 <sd_mmc_check+0x658>)
  401426:	e791      	b.n	40134c <sd_mmc_check+0x534>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  401428:	f243 1006 	movw	r0, #12550	; 0x3106
  40142c:	4911      	ldr	r1, [pc, #68]	; (401474 <sd_mmc_check+0x65c>)
  40142e:	47b0      	blx	r6
  401430:	2800      	cmp	r0, #0
  401432:	f43f adf9 	beq.w	401028 <sd_mmc_check+0x210>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  401436:	47c8      	blx	r9
  401438:	0603      	lsls	r3, r0, #24
  40143a:	f53f adf5 	bmi.w	401028 <sd_mmc_check+0x210>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
  40143e:	683b      	ldr	r3, [r7, #0]
	sd_mmc_card->clock = 52000000lu;
  401440:	4a0d      	ldr	r2, [pc, #52]	; (401478 <sd_mmc_check+0x660>)
  401442:	601a      	str	r2, [r3, #0]
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
  401444:	2201      	movs	r2, #1
  401446:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
  40144a:	4b07      	ldr	r3, [pc, #28]	; (401468 <sd_mmc_check+0x650>)
  40144c:	4798      	blx	r3
  40144e:	e792      	b.n	401376 <sd_mmc_check+0x55e>
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  401450:	2214      	movs	r2, #20
  401452:	741a      	strb	r2, [r3, #16]
  401454:	e6ef      	b.n	401236 <sd_mmc_check+0x41e>

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  401456:	2212      	movs	r2, #18
  401458:	741a      	strb	r2, [r3, #16]
  40145a:	e6ec      	b.n	401236 <sd_mmc_check+0x41e>
	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40145c:	2222      	movs	r2, #34	; 0x22
  40145e:	741a      	strb	r2, [r3, #16]
  401460:	e6e9      	b.n	401236 <sd_mmc_check+0x41e>
  401462:	683a      	ldr	r2, [r7, #0]
  401464:	e5bd      	b.n	400fe2 <sd_mmc_check+0x1ca>
  401466:	bf00      	nop
  401468:	00400c9d 	.word	0x00400c9d
  40146c:	20000ec6 	.word	0x20000ec6
  401470:	01b70100 	.word	0x01b70100
  401474:	03b90100 	.word	0x03b90100
  401478:	03197500 	.word	0x03197500

0040147c <sd_mmc_get_type>:
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
  40147c:	b508      	push	{r3, lr}
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
  40147e:	b108      	cbz	r0, 401484 <sd_mmc_get_type+0x8>
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
  401480:	2000      	movs	r0, #0
  401482:	bd08      	pop	{r3, pc}
  401484:	4b08      	ldr	r3, [pc, #32]	; (4014a8 <sd_mmc_get_type+0x2c>)
  401486:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  401488:	2800      	cmp	r0, #0
  40148a:	d1f9      	bne.n	401480 <sd_mmc_get_type+0x4>
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40148c:	4b07      	ldr	r3, [pc, #28]	; (4014ac <sd_mmc_get_type+0x30>)
  40148e:	781b      	ldrb	r3, [r3, #0]
  401490:	b11b      	cbz	r3, 40149a <sd_mmc_get_type+0x1e>
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
  401492:	4b07      	ldr	r3, [pc, #28]	; (4014b0 <sd_mmc_get_type+0x34>)
  401494:	681b      	ldr	r3, [r3, #0]
  401496:	7bd8      	ldrb	r0, [r3, #15]
}
  401498:	bd08      	pop	{r3, pc}
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
		driver_deselect_device(sd_mmc_slot_sel);
  40149a:	4b06      	ldr	r3, [pc, #24]	; (4014b4 <sd_mmc_get_type+0x38>)
  40149c:	4798      	blx	r3
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
  40149e:	4b04      	ldr	r3, [pc, #16]	; (4014b0 <sd_mmc_get_type+0x34>)
  4014a0:	681b      	ldr	r3, [r3, #0]
  4014a2:	7bd8      	ldrb	r0, [r3, #15]
}
  4014a4:	bd08      	pop	{r3, pc}
  4014a6:	bf00      	nop
  4014a8:	00400cc9 	.word	0x00400cc9
  4014ac:	20000ec6 	.word	0x20000ec6
  4014b0:	20000ec0 	.word	0x20000ec0
  4014b4:	00401b91 	.word	0x00401b91

004014b8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  4014b8:	b508      	push	{r3, lr}
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
  4014ba:	b108      	cbz	r0, 4014c0 <sd_mmc_get_capacity+0x8>
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
  4014bc:	2000      	movs	r0, #0
  4014be:	bd08      	pop	{r3, pc}
  4014c0:	4b08      	ldr	r3, [pc, #32]	; (4014e4 <sd_mmc_get_capacity+0x2c>)
  4014c2:	4798      	blx	r3
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  4014c4:	2800      	cmp	r0, #0
  4014c6:	d1f9      	bne.n	4014bc <sd_mmc_get_capacity+0x4>
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  4014c8:	4b07      	ldr	r3, [pc, #28]	; (4014e8 <sd_mmc_get_capacity+0x30>)
  4014ca:	781b      	ldrb	r3, [r3, #0]
  4014cc:	b11b      	cbz	r3, 4014d6 <sd_mmc_get_capacity+0x1e>
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
  4014ce:	4b07      	ldr	r3, [pc, #28]	; (4014ec <sd_mmc_get_capacity+0x34>)
  4014d0:	681b      	ldr	r3, [r3, #0]
  4014d2:	6858      	ldr	r0, [r3, #4]
}
  4014d4:	bd08      	pop	{r3, pc}
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
		driver_deselect_device(sd_mmc_slot_sel);
  4014d6:	4b06      	ldr	r3, [pc, #24]	; (4014f0 <sd_mmc_get_capacity+0x38>)
  4014d8:	4798      	blx	r3
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
  4014da:	4b04      	ldr	r3, [pc, #16]	; (4014ec <sd_mmc_get_capacity+0x34>)
  4014dc:	681b      	ldr	r3, [r3, #0]
  4014de:	6858      	ldr	r0, [r3, #4]
}
  4014e0:	bd08      	pop	{r3, pc}
  4014e2:	bf00      	nop
  4014e4:	00400cc9 	.word	0x00400cc9
  4014e8:	20000ec6 	.word	0x20000ec6
  4014ec:	20000ec0 	.word	0x20000ec0
  4014f0:	00401b91 	.word	0x00401b91

004014f4 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  4014f4:	2000      	movs	r0, #0
  4014f6:	4770      	bx	lr

004014f8 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  4014f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014fc:	468b      	mov	fp, r1
  4014fe:	b083      	sub	sp, #12
  401500:	4692      	mov	sl, r2
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
  401502:	b128      	cbz	r0, 401510 <sd_mmc_init_read_blocks+0x18>
		return SD_MMC_ERR_SLOT;
  401504:	f04f 0904 	mov.w	r9, #4
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  401508:	4648      	mov	r0, r9
  40150a:	b003      	add	sp, #12
  40150c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401510:	4b26      	ldr	r3, [pc, #152]	; (4015ac <sd_mmc_init_read_blocks+0xb4>)
  401512:	4798      	blx	r3
{
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
	if (sd_mmc_err != SD_MMC_OK) {
  401514:	4681      	mov	r9, r0
  401516:	2800      	cmp	r0, #0
  401518:	d1f6      	bne.n	401508 <sd_mmc_init_read_blocks+0x10>
  40151a:	4c25      	ldr	r4, [pc, #148]	; (4015b0 <sd_mmc_init_read_blocks+0xb8>)
  40151c:	4d25      	ldr	r5, [pc, #148]	; (4015b4 <sd_mmc_init_read_blocks+0xbc>)
  40151e:	4e26      	ldr	r6, [pc, #152]	; (4015b8 <sd_mmc_init_read_blocks+0xc0>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  401520:	4f26      	ldr	r7, [pc, #152]	; (4015bc <sd_mmc_init_read_blocks+0xc4>)
  401522:	e004      	b.n	40152e <sd_mmc_init_read_blocks+0x36>
  401524:	47b8      	blx	r7
  401526:	05c2      	lsls	r2, r0, #23
  401528:	d414      	bmi.n	401554 <sd_mmc_init_read_blocks+0x5c>
				break;
			}
		}
		if (nec_timeout-- == 0) {
  40152a:	3c01      	subs	r4, #1
  40152c:	d009      	beq.n	401542 <sd_mmc_init_read_blocks+0x4a>
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  40152e:	682b      	ldr	r3, [r5, #0]
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  401530:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4015bc <sd_mmc_init_read_blocks+0xc4>
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  401534:	8999      	ldrh	r1, [r3, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  401536:	f241 100d 	movw	r0, #4365	; 0x110d
  40153a:	0409      	lsls	r1, r1, #16
  40153c:	47b0      	blx	r6
  40153e:	2800      	cmp	r0, #0
  401540:	d1f0      	bne.n	401524 <sd_mmc_init_read_blocks+0x2c>
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  401542:	4b1f      	ldr	r3, [pc, #124]	; (4015c0 <sd_mmc_init_read_blocks+0xc8>)
  401544:	781b      	ldrb	r3, [r3, #0]
  401546:	b33b      	cbz	r3, 401598 <sd_mmc_init_read_blocks+0xa0>
		arg = (start * SD_MMC_BLOCK_SIZE);
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_COMM;
  401548:	f04f 0905 	mov.w	r9, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  40154c:	4648      	mov	r0, r9
  40154e:	b003      	add	sp, #12
  401550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  401554:	682b      	ldr	r3, [r5, #0]
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  401556:	481b      	ldr	r0, [pc, #108]	; (4015c4 <sd_mmc_init_read_blocks+0xcc>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  401558:	7bdb      	ldrb	r3, [r3, #15]
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  40155a:	4a1b      	ldr	r2, [pc, #108]	; (4015c8 <sd_mmc_init_read_blocks+0xd0>)
  40155c:	f1ba 0f01 	cmp.w	sl, #1
  401560:	bf98      	it	ls
  401562:	4610      	movls	r0, r2
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  401564:	071b      	lsls	r3, r3, #28
  401566:	d401      	bmi.n	40156c <sd_mmc_init_read_blocks+0x74>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  401568:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  40156c:	2301      	movs	r3, #1
  40156e:	9300      	str	r3, [sp, #0]
  401570:	4659      	mov	r1, fp
  401572:	f44f 7200 	mov.w	r2, #512	; 0x200
  401576:	4653      	mov	r3, sl
  401578:	4c14      	ldr	r4, [pc, #80]	; (4015cc <sd_mmc_init_read_blocks+0xd4>)
  40157a:	47a0      	blx	r4
  40157c:	2800      	cmp	r0, #0
  40157e:	d0e0      	beq.n	401542 <sd_mmc_init_read_blocks+0x4a>
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_COMM;
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  401580:	47c0      	blx	r8
		if (resp & CARD_STATUS_ERR_RD_WR) {
  401582:	4b13      	ldr	r3, [pc, #76]	; (4015d0 <sd_mmc_init_read_blocks+0xd8>)
  401584:	4003      	ands	r3, r0
  401586:	2b00      	cmp	r3, #0
  401588:	d1db      	bne.n	401542 <sd_mmc_init_read_blocks+0x4a>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  40158a:	4a12      	ldr	r2, [pc, #72]	; (4015d4 <sd_mmc_init_read_blocks+0xdc>)
	sd_mmc_nb_block_to_tranfer = nb_block;
  40158c:	4b12      	ldr	r3, [pc, #72]	; (4015d8 <sd_mmc_init_read_blocks+0xe0>)
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  40158e:	f8a2 a000 	strh.w	sl, [r2]
	sd_mmc_nb_block_to_tranfer = nb_block;
  401592:	f8a3 a000 	strh.w	sl, [r3]
	return SD_MMC_OK;
  401596:	e7b7      	b.n	401508 <sd_mmc_init_read_blocks+0x10>
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
		driver_deselect_device(sd_mmc_slot_sel);
  401598:	2000      	movs	r0, #0
  40159a:	4b10      	ldr	r3, [pc, #64]	; (4015dc <sd_mmc_init_read_blocks+0xe4>)
  40159c:	4798      	blx	r3
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_COMM;
  40159e:	f04f 0905 	mov.w	r9, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  4015a2:	4648      	mov	r0, r9
  4015a4:	b003      	add	sp, #12
  4015a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015aa:	bf00      	nop
  4015ac:	00400cc9 	.word	0x00400cc9
  4015b0:	00030d41 	.word	0x00030d41
  4015b4:	20000ec0 	.word	0x20000ec0
  4015b8:	00401bb5 	.word	0x00401bb5
  4015bc:	00401be1 	.word	0x00401be1
  4015c0:	20000ec6 	.word	0x20000ec6
  4015c4:	00101112 	.word	0x00101112
  4015c8:	00081111 	.word	0x00081111
  4015cc:	00401c0d 	.word	0x00401c0d
  4015d0:	e4580000 	.word	0xe4580000
  4015d4:	20000ec4 	.word	0x20000ec4
  4015d8:	20000ebc 	.word	0x20000ebc
  4015dc:	00401b91 	.word	0x00401b91

004015e0 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  4015e0:	b510      	push	{r4, lr}
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  4015e2:	4b07      	ldr	r3, [pc, #28]	; (401600 <sd_mmc_start_read_blocks+0x20>)
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  4015e4:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  4015e6:	4798      	blx	r3
  4015e8:	4603      	mov	r3, r0
  4015ea:	b918      	cbnz	r0, 4015f4 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  4015ec:	4a05      	ldr	r2, [pc, #20]	; (401604 <sd_mmc_start_read_blocks+0x24>)
  4015ee:	8013      	strh	r3, [r2, #0]
		return SD_MMC_ERR_COMM;
  4015f0:	2005      	movs	r0, #5
  4015f2:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  4015f4:	4b03      	ldr	r3, [pc, #12]	; (401604 <sd_mmc_start_read_blocks+0x24>)
  4015f6:	881a      	ldrh	r2, [r3, #0]
  4015f8:	1b14      	subs	r4, r2, r4
  4015fa:	801c      	strh	r4, [r3, #0]
	return SD_MMC_OK;
  4015fc:	2000      	movs	r0, #0
}
  4015fe:	bd10      	pop	{r4, pc}
  401600:	00401d61 	.word	0x00401d61
  401604:	20000ec4 	.word	0x20000ec4

00401608 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  401608:	b510      	push	{r4, lr}
	if (!driver_wait_end_of_read_blocks()) {
  40160a:	4b12      	ldr	r3, [pc, #72]	; (401654 <sd_mmc_wait_end_of_read_blocks+0x4c>)
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  40160c:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  40160e:	4798      	blx	r3
  401610:	b908      	cbnz	r0, 401616 <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  401612:	2005      	movs	r0, #5
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  401614:	bd10      	pop	{r4, pc}
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
  401616:	4b10      	ldr	r3, [pc, #64]	; (401658 <sd_mmc_wait_end_of_read_blocks+0x50>)
sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
  401618:	b99c      	cbnz	r4, 401642 <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
	} else if (sd_mmc_nb_block_remaining) {
  40161a:	881b      	ldrh	r3, [r3, #0]
  40161c:	b97b      	cbnz	r3, 40163e <sd_mmc_wait_end_of_read_blocks+0x36>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  40161e:	4b0f      	ldr	r3, [pc, #60]	; (40165c <sd_mmc_wait_end_of_read_blocks+0x54>)
  401620:	881b      	ldrh	r3, [r3, #0]
  401622:	2b01      	cmp	r3, #1
  401624:	d005      	beq.n	401632 <sd_mmc_wait_end_of_read_blocks+0x2a>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  401626:	f243 100c 	movw	r0, #12556	; 0x310c
  40162a:	2100      	movs	r1, #0
  40162c:	4c0c      	ldr	r4, [pc, #48]	; (401660 <sd_mmc_wait_end_of_read_blocks+0x58>)
  40162e:	47a0      	blx	r4
  401630:	b150      	cbz	r0, 401648 <sd_mmc_wait_end_of_read_blocks+0x40>
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  401632:	4b0c      	ldr	r3, [pc, #48]	; (401664 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  401634:	781b      	ldrb	r3, [r3, #0]
  401636:	b913      	cbnz	r3, 40163e <sd_mmc_wait_end_of_read_blocks+0x36>
		driver_deselect_device(sd_mmc_slot_sel);
  401638:	2000      	movs	r0, #0
  40163a:	4b0b      	ldr	r3, [pc, #44]	; (401668 <sd_mmc_wait_end_of_read_blocks+0x60>)
  40163c:	4798      	blx	r3

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
		return SD_MMC_OK;
  40163e:	2000      	movs	r0, #0
  401640:	bd10      	pop	{r4, pc}
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
  401642:	2200      	movs	r2, #0
  401644:	801a      	strh	r2, [r3, #0]
  401646:	e7ea      	b.n	40161e <sd_mmc_wait_end_of_read_blocks+0x16>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  401648:	4601      	mov	r1, r0
  40164a:	f243 100c 	movw	r0, #12556	; 0x310c
  40164e:	47a0      	blx	r4
  401650:	e7ef      	b.n	401632 <sd_mmc_wait_end_of_read_blocks+0x2a>
  401652:	bf00      	nop
  401654:	00401dc9 	.word	0x00401dc9
  401658:	20000ec4 	.word	0x20000ec4
  40165c:	20000ebc 	.word	0x20000ebc
  401660:	00401bb5 	.word	0x00401bb5
  401664:	20000ec6 	.word	0x20000ec6
  401668:	00401b91 	.word	0x00401b91

0040166c <sd_mmc_init_write_blocks>:
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  40166c:	b570      	push	{r4, r5, r6, lr}
  40166e:	4615      	mov	r5, r2
  401670:	b084      	sub	sp, #16
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
  401672:	b118      	cbz	r0, 40167c <sd_mmc_init_write_blocks+0x10>
		return SD_MMC_ERR_SLOT;
  401674:	2404      	movs	r4, #4
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  401676:	4620      	mov	r0, r4
  401678:	b004      	add	sp, #16
  40167a:	bd70      	pop	{r4, r5, r6, pc}
  40167c:	9103      	str	r1, [sp, #12]
  40167e:	4b18      	ldr	r3, [pc, #96]	; (4016e0 <sd_mmc_init_write_blocks+0x74>)
  401680:	4798      	blx	r3
{
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
	if (sd_mmc_err != SD_MMC_OK) {
  401682:	9903      	ldr	r1, [sp, #12]
  401684:	4604      	mov	r4, r0
  401686:	2800      	cmp	r0, #0
  401688:	d1f5      	bne.n	401676 <sd_mmc_init_write_blocks+0xa>
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40168a:	4b16      	ldr	r3, [pc, #88]	; (4016e4 <sd_mmc_init_write_blocks+0x78>)
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
  40168c:	4a16      	ldr	r2, [pc, #88]	; (4016e8 <sd_mmc_init_write_blocks+0x7c>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40168e:	681b      	ldr	r3, [r3, #0]
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
  401690:	4816      	ldr	r0, [pc, #88]	; (4016ec <sd_mmc_init_write_blocks+0x80>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  401692:	7bdb      	ldrb	r3, [r3, #15]
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  401694:	4e16      	ldr	r6, [pc, #88]	; (4016f0 <sd_mmc_init_write_blocks+0x84>)
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
  401696:	2d01      	cmp	r5, #1
  401698:	bf88      	it	hi
  40169a:	4610      	movhi	r0, r2
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40169c:	071b      	lsls	r3, r3, #28
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  40169e:	f04f 0301 	mov.w	r3, #1
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  4016a2:	bf58      	it	pl
  4016a4:	0249      	lslpl	r1, r1, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  4016a6:	9300      	str	r3, [sp, #0]
  4016a8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4016ac:	462b      	mov	r3, r5
  4016ae:	47b0      	blx	r6
  4016b0:	b930      	cbnz	r0, 4016c0 <sd_mmc_init_write_blocks+0x54>
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  4016b2:	4b10      	ldr	r3, [pc, #64]	; (4016f4 <sd_mmc_init_write_blocks+0x88>)
  4016b4:	781b      	ldrb	r3, [r3, #0]
  4016b6:	b173      	cbz	r3, 4016d6 <sd_mmc_init_write_blocks+0x6a>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_COMM;
  4016b8:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  4016ba:	4620      	mov	r0, r4
  4016bc:	b004      	add	sp, #16
  4016be:	bd70      	pop	{r4, r5, r6, pc}
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_COMM;
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  4016c0:	4b0d      	ldr	r3, [pc, #52]	; (4016f8 <sd_mmc_init_write_blocks+0x8c>)
  4016c2:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  4016c4:	4b0d      	ldr	r3, [pc, #52]	; (4016fc <sd_mmc_init_write_blocks+0x90>)
  4016c6:	4003      	ands	r3, r0
  4016c8:	2b00      	cmp	r3, #0
  4016ca:	d1f2      	bne.n	4016b2 <sd_mmc_init_write_blocks+0x46>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  4016cc:	4a0c      	ldr	r2, [pc, #48]	; (401700 <sd_mmc_init_write_blocks+0x94>)
	sd_mmc_nb_block_to_tranfer = nb_block;
  4016ce:	4b0d      	ldr	r3, [pc, #52]	; (401704 <sd_mmc_init_write_blocks+0x98>)
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  4016d0:	8015      	strh	r5, [r2, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  4016d2:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  4016d4:	e7cf      	b.n	401676 <sd_mmc_init_write_blocks+0xa>
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
		driver_deselect_device(sd_mmc_slot_sel);
  4016d6:	2000      	movs	r0, #0
  4016d8:	4b0b      	ldr	r3, [pc, #44]	; (401708 <sd_mmc_init_write_blocks+0x9c>)
  4016da:	4798      	blx	r3
  4016dc:	e7ec      	b.n	4016b8 <sd_mmc_init_write_blocks+0x4c>
  4016de:	bf00      	nop
  4016e0:	00400cc9 	.word	0x00400cc9
  4016e4:	20000ec0 	.word	0x20000ec0
  4016e8:	00109119 	.word	0x00109119
  4016ec:	00089118 	.word	0x00089118
  4016f0:	00401c0d 	.word	0x00401c0d
  4016f4:	20000ec6 	.word	0x20000ec6
  4016f8:	00401be1 	.word	0x00401be1
  4016fc:	e4580000 	.word	0xe4580000
  401700:	20000ec4 	.word	0x20000ec4
  401704:	20000ebc 	.word	0x20000ebc
  401708:	00401b91 	.word	0x00401b91

0040170c <sd_mmc_start_write_blocks>:
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  40170c:	b510      	push	{r4, lr}
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  40170e:	4b07      	ldr	r3, [pc, #28]	; (40172c <sd_mmc_start_write_blocks+0x20>)
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  401710:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  401712:	4798      	blx	r3
  401714:	4603      	mov	r3, r0
  401716:	b918      	cbnz	r0, 401720 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  401718:	4a05      	ldr	r2, [pc, #20]	; (401730 <sd_mmc_start_write_blocks+0x24>)
  40171a:	8013      	strh	r3, [r2, #0]
		return SD_MMC_ERR_COMM;
  40171c:	2005      	movs	r0, #5
  40171e:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  401720:	4b03      	ldr	r3, [pc, #12]	; (401730 <sd_mmc_start_write_blocks+0x24>)
  401722:	881a      	ldrh	r2, [r3, #0]
  401724:	1b14      	subs	r4, r2, r4
  401726:	801c      	strh	r4, [r3, #0]
	return SD_MMC_OK;
  401728:	2000      	movs	r0, #0
}
  40172a:	bd10      	pop	{r4, pc}
  40172c:	00401e6d 	.word	0x00401e6d
  401730:	20000ec4 	.word	0x20000ec4

00401734 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  401734:	b510      	push	{r4, lr}
	if (!driver_wait_end_of_write_blocks()) {
  401736:	4b14      	ldr	r3, [pc, #80]	; (401788 <sd_mmc_wait_end_of_write_blocks+0x54>)
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  401738:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  40173a:	4798      	blx	r3
  40173c:	b908      	cbnz	r0, 401742 <sd_mmc_wait_end_of_write_blocks+0xe>
	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
  40173e:	2005      	movs	r0, #5
  401740:	bd10      	pop	{r4, pc}
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
  401742:	4b12      	ldr	r3, [pc, #72]	; (40178c <sd_mmc_wait_end_of_write_blocks+0x58>)
sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
  401744:	b994      	cbnz	r4, 40176c <sd_mmc_wait_end_of_write_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
	} else if (sd_mmc_nb_block_remaining) {
  401746:	881b      	ldrh	r3, [r3, #0]
  401748:	b9e3      	cbnz	r3, 401784 <sd_mmc_wait_end_of_write_blocks+0x50>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  40174a:	4b11      	ldr	r3, [pc, #68]	; (401790 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  40174c:	881b      	ldrh	r3, [r3, #0]
  40174e:	2b01      	cmp	r3, #1
  401750:	d012      	beq.n	401778 <sd_mmc_wait_end_of_write_blocks+0x44>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  401752:	f243 100c 	movw	r0, #12556	; 0x310c
  401756:	2100      	movs	r1, #0
  401758:	4b0e      	ldr	r3, [pc, #56]	; (401794 <sd_mmc_wait_end_of_write_blocks+0x60>)
  40175a:	4798      	blx	r3
  40175c:	b960      	cbnz	r0, 401778 <sd_mmc_wait_end_of_write_blocks+0x44>
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40175e:	4b0e      	ldr	r3, [pc, #56]	; (401798 <sd_mmc_wait_end_of_write_blocks+0x64>)
  401760:	781b      	ldrb	r3, [r3, #0]
  401762:	2b00      	cmp	r3, #0
  401764:	d1eb      	bne.n	40173e <sd_mmc_wait_end_of_write_blocks+0xa>
		driver_deselect_device(sd_mmc_slot_sel);
  401766:	4b0d      	ldr	r3, [pc, #52]	; (40179c <sd_mmc_wait_end_of_write_blocks+0x68>)
  401768:	4798      	blx	r3
  40176a:	e7e8      	b.n	40173e <sd_mmc_wait_end_of_write_blocks+0xa>
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
  40176c:	2200      	movs	r2, #0
  40176e:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  401770:	4b07      	ldr	r3, [pc, #28]	; (401790 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  401772:	881b      	ldrh	r3, [r3, #0]
  401774:	2b01      	cmp	r3, #1
  401776:	d1ec      	bne.n	401752 <sd_mmc_wait_end_of_write_blocks+0x1e>
/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  401778:	4b07      	ldr	r3, [pc, #28]	; (401798 <sd_mmc_wait_end_of_write_blocks+0x64>)
  40177a:	781b      	ldrb	r3, [r3, #0]
  40177c:	b913      	cbnz	r3, 401784 <sd_mmc_wait_end_of_write_blocks+0x50>
		driver_deselect_device(sd_mmc_slot_sel);
  40177e:	2000      	movs	r0, #0
  401780:	4b06      	ldr	r3, [pc, #24]	; (40179c <sd_mmc_wait_end_of_write_blocks+0x68>)
  401782:	4798      	blx	r3

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
		return SD_MMC_OK;
  401784:	2000      	movs	r0, #0
  401786:	bd10      	pop	{r4, pc}
  401788:	00401ed9 	.word	0x00401ed9
  40178c:	20000ec4 	.word	0x20000ec4
  401790:	20000ebc 	.word	0x20000ebc
  401794:	00401bb5 	.word	0x00401bb5
  401798:	20000ec6 	.word	0x20000ec6
  40179c:	00401b91 	.word	0x00401b91

004017a0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  4017a0:	b510      	push	{r4, lr}
	switch (sd_mmc_check(slot))
  4017a2:	4b0f      	ldr	r3, [pc, #60]	; (4017e0 <sd_mmc_test_unit_ready+0x40>)
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  4017a4:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  4017a6:	4798      	blx	r3
  4017a8:	2801      	cmp	r0, #1
  4017aa:	d00d      	beq.n	4017c8 <sd_mmc_test_unit_ready+0x28>
  4017ac:	d307      	bcc.n	4017be <sd_mmc_test_unit_ready+0x1e>
  4017ae:	2802      	cmp	r0, #2
  4017b0:	d103      	bne.n	4017ba <sd_mmc_test_unit_ready+0x1a>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  4017b2:	4b0c      	ldr	r3, [pc, #48]	; (4017e4 <sd_mmc_test_unit_ready+0x44>)
  4017b4:	2200      	movs	r2, #0
  4017b6:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  4017b8:	bd10      	pop	{r4, pc}

	default:
		return CTRL_FAIL;
  4017ba:	2001      	movs	r0, #1
  4017bc:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  4017be:	4b09      	ldr	r3, [pc, #36]	; (4017e4 <sd_mmc_test_unit_ready+0x44>)
  4017c0:	5d1b      	ldrb	r3, [r3, r4]
  4017c2:	b11b      	cbz	r3, 4017cc <sd_mmc_test_unit_ready+0x2c>
			return CTRL_NO_PRESENT;
  4017c4:	2002      	movs	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
  4017c6:	bd10      	pop	{r4, pc}
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  4017c8:	2003      	movs	r0, #3
  4017ca:	bd10      	pop	{r4, pc}
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  4017cc:	4620      	mov	r0, r4
  4017ce:	4b06      	ldr	r3, [pc, #24]	; (4017e8 <sd_mmc_test_unit_ready+0x48>)
  4017d0:	4798      	blx	r3
  4017d2:	f010 0f03 	tst.w	r0, #3
			return CTRL_GOOD;
  4017d6:	bf0c      	ite	eq
  4017d8:	2002      	moveq	r0, #2
  4017da:	2000      	movne	r0, #0
  4017dc:	bd10      	pop	{r4, pc}
  4017de:	bf00      	nop
  4017e0:	00400e19 	.word	0x00400e19
  4017e4:	20000ec8 	.word	0x20000ec8
  4017e8:	0040147d 	.word	0x0040147d

004017ec <sd_mmc_test_unit_ready_0>:
		return CTRL_FAIL;
	}
}

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  4017ec:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  4017ee:	2000      	movs	r0, #0
  4017f0:	4b01      	ldr	r3, [pc, #4]	; (4017f8 <sd_mmc_test_unit_ready_0+0xc>)
  4017f2:	4798      	blx	r3
}
  4017f4:	bd08      	pop	{r3, pc}
  4017f6:	bf00      	nop
  4017f8:	004017a1 	.word	0x004017a1

004017fc <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
  4017fc:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(1);
  4017fe:	2001      	movs	r0, #1
  401800:	4b01      	ldr	r3, [pc, #4]	; (401808 <sd_mmc_test_unit_ready_1+0xc>)
  401802:	4798      	blx	r3
}
  401804:	bd08      	pop	{r3, pc}
  401806:	bf00      	nop
  401808:	004017a1 	.word	0x004017a1

0040180c <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  40180c:	b538      	push	{r3, r4, r5, lr}
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  40180e:	4b05      	ldr	r3, [pc, #20]	; (401824 <sd_mmc_read_capacity+0x18>)
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  401810:	460d      	mov	r5, r1
  401812:	4604      	mov	r4, r0
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  401814:	4798      	blx	r3
  401816:	0040      	lsls	r0, r0, #1
  401818:	3801      	subs	r0, #1
  40181a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  40181c:	4b02      	ldr	r3, [pc, #8]	; (401828 <sd_mmc_read_capacity+0x1c>)
  40181e:	4620      	mov	r0, r4
  401820:	4798      	blx	r3
}
  401822:	bd38      	pop	{r3, r4, r5, pc}
  401824:	004014b9 	.word	0x004014b9
  401828:	004017a1 	.word	0x004017a1

0040182c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  40182c:	b508      	push	{r3, lr}
  40182e:	4601      	mov	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
  401830:	4b01      	ldr	r3, [pc, #4]	; (401838 <sd_mmc_read_capacity_0+0xc>)
  401832:	2000      	movs	r0, #0
  401834:	4798      	blx	r3
}
  401836:	bd08      	pop	{r3, pc}
  401838:	0040180d 	.word	0x0040180d

0040183c <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
  40183c:	b508      	push	{r3, lr}
  40183e:	4601      	mov	r1, r0
	return sd_mmc_read_capacity(1, nb_sector);
  401840:	4b01      	ldr	r3, [pc, #4]	; (401848 <sd_mmc_read_capacity_1+0xc>)
  401842:	2001      	movs	r0, #1
  401844:	4798      	blx	r3
}
  401846:	bd08      	pop	{r3, pc}
  401848:	0040180d 	.word	0x0040180d

0040184c <sd_mmc_unload_0>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
  40184c:	4b01      	ldr	r3, [pc, #4]	; (401854 <sd_mmc_unload_0+0x8>)
  40184e:	7018      	strb	r0, [r3, #0]
}

bool sd_mmc_unload_0(bool unload)
{
	return sd_mmc_unload(0, unload);
}
  401850:	2001      	movs	r0, #1
  401852:	4770      	bx	lr
  401854:	20000ec8 	.word	0x20000ec8

00401858 <sd_mmc_unload_1>:
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
  401858:	4b01      	ldr	r3, [pc, #4]	; (401860 <sd_mmc_unload_1+0x8>)
  40185a:	7058      	strb	r0, [r3, #1]
}

bool sd_mmc_unload_1(bool unload)
{
	return sd_mmc_unload(1, unload);
}
  40185c:	2001      	movs	r0, #1
  40185e:	4770      	bx	lr
  401860:	20000ec8 	.word	0x20000ec8

00401864 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  401864:	b508      	push	{r3, lr}
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
	return sd_mmc_is_write_protected(slot);
  401866:	2000      	movs	r0, #0
  401868:	4b01      	ldr	r3, [pc, #4]	; (401870 <sd_mmc_wr_protect_0+0xc>)
  40186a:	4798      	blx	r3
}

bool sd_mmc_wr_protect_0(void)
{
	return sd_mmc_wr_protect(0);
}
  40186c:	bd08      	pop	{r3, pc}
  40186e:	bf00      	nop
  401870:	004014f5 	.word	0x004014f5

00401874 <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
  401874:	b508      	push	{r3, lr}
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
	return sd_mmc_is_write_protected(slot);
  401876:	2001      	movs	r0, #1
  401878:	4b01      	ldr	r3, [pc, #4]	; (401880 <sd_mmc_wr_protect_1+0xc>)
  40187a:	4798      	blx	r3
}

bool sd_mmc_wr_protect_1(void)
{
	return sd_mmc_wr_protect(1);
}
  40187c:	bd08      	pop	{r3, pc}
  40187e:	bf00      	nop
  401880:	004014f5 	.word	0x004014f5

00401884 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
  401884:	2001      	movs	r0, #1
  401886:	4770      	bx	lr

00401888 <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
	return sd_mmc_removal(1);
}
  401888:	2001      	movs	r0, #1
  40188a:	4770      	bx	lr

0040188c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  40188c:	b510      	push	{r4, lr}
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  40188e:	4b0b      	ldr	r3, [pc, #44]	; (4018bc <sd_mmc_mem_2_ram+0x30>)
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  401890:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  401892:	2201      	movs	r2, #1
  401894:	4798      	blx	r3
  401896:	b120      	cbz	r0, 4018a2 <sd_mmc_mem_2_ram+0x16>
  401898:	2802      	cmp	r0, #2
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  40189a:	bf0c      	ite	eq
  40189c:	2002      	moveq	r0, #2
  40189e:	2001      	movne	r0, #1
  4018a0:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  4018a2:	4620      	mov	r0, r4
  4018a4:	2101      	movs	r1, #1
  4018a6:	4b06      	ldr	r3, [pc, #24]	; (4018c0 <sd_mmc_mem_2_ram+0x34>)
  4018a8:	4798      	blx	r3
  4018aa:	b108      	cbz	r0, 4018b0 <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  4018ac:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  4018ae:	bd10      	pop	{r4, pc}
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  4018b0:	4b04      	ldr	r3, [pc, #16]	; (4018c4 <sd_mmc_mem_2_ram+0x38>)
  4018b2:	4798      	blx	r3
		return CTRL_FAIL;
  4018b4:	3000      	adds	r0, #0
  4018b6:	bf18      	it	ne
  4018b8:	2001      	movne	r0, #1
  4018ba:	bd10      	pop	{r4, pc}
  4018bc:	004014f9 	.word	0x004014f9
  4018c0:	004015e1 	.word	0x004015e1
  4018c4:	00401609 	.word	0x00401609

004018c8 <sd_mmc_mem_2_ram_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  4018c8:	b508      	push	{r3, lr}
  4018ca:	460a      	mov	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
  4018cc:	4b02      	ldr	r3, [pc, #8]	; (4018d8 <sd_mmc_mem_2_ram_0+0x10>)
  4018ce:	4601      	mov	r1, r0
  4018d0:	2000      	movs	r0, #0
  4018d2:	4798      	blx	r3
}
  4018d4:	bd08      	pop	{r3, pc}
  4018d6:	bf00      	nop
  4018d8:	0040188d 	.word	0x0040188d

004018dc <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
  4018dc:	b508      	push	{r3, lr}
  4018de:	460a      	mov	r2, r1
	return sd_mmc_mem_2_ram(1, addr, ram);
  4018e0:	4b02      	ldr	r3, [pc, #8]	; (4018ec <sd_mmc_mem_2_ram_1+0x10>)
  4018e2:	4601      	mov	r1, r0
  4018e4:	2001      	movs	r0, #1
  4018e6:	4798      	blx	r3
}
  4018e8:	bd08      	pop	{r3, pc}
  4018ea:	bf00      	nop
  4018ec:	0040188d 	.word	0x0040188d

004018f0 <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  4018f0:	b510      	push	{r4, lr}
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  4018f2:	4b0b      	ldr	r3, [pc, #44]	; (401920 <sd_mmc_ram_2_mem+0x30>)
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  4018f4:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  4018f6:	2201      	movs	r2, #1
  4018f8:	4798      	blx	r3
  4018fa:	b120      	cbz	r0, 401906 <sd_mmc_ram_2_mem+0x16>
  4018fc:	2802      	cmp	r0, #2
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  4018fe:	bf0c      	ite	eq
  401900:	2002      	moveq	r0, #2
  401902:	2001      	movne	r0, #1
  401904:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  401906:	4620      	mov	r0, r4
  401908:	2101      	movs	r1, #1
  40190a:	4b06      	ldr	r3, [pc, #24]	; (401924 <sd_mmc_ram_2_mem+0x34>)
  40190c:	4798      	blx	r3
  40190e:	b108      	cbz	r0, 401914 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  401910:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  401912:	bd10      	pop	{r4, pc}
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  401914:	4b04      	ldr	r3, [pc, #16]	; (401928 <sd_mmc_ram_2_mem+0x38>)
  401916:	4798      	blx	r3
		return CTRL_FAIL;
  401918:	3000      	adds	r0, #0
  40191a:	bf18      	it	ne
  40191c:	2001      	movne	r0, #1
  40191e:	bd10      	pop	{r4, pc}
  401920:	0040166d 	.word	0x0040166d
  401924:	0040170d 	.word	0x0040170d
  401928:	00401735 	.word	0x00401735

0040192c <sd_mmc_ram_2_mem_0>:
	}
	return CTRL_GOOD;
}

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  40192c:	b508      	push	{r3, lr}
  40192e:	460a      	mov	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
  401930:	4b02      	ldr	r3, [pc, #8]	; (40193c <sd_mmc_ram_2_mem_0+0x10>)
  401932:	4601      	mov	r1, r0
  401934:	2000      	movs	r0, #0
  401936:	4798      	blx	r3
}
  401938:	bd08      	pop	{r3, pc}
  40193a:	bf00      	nop
  40193c:	004018f1 	.word	0x004018f1

00401940 <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
  401940:	b508      	push	{r3, lr}
  401942:	460a      	mov	r2, r1
	return sd_mmc_ram_2_mem(1, addr, ram);
  401944:	4b02      	ldr	r3, [pc, #8]	; (401950 <sd_mmc_ram_2_mem_1+0x10>)
  401946:	4601      	mov	r1, r0
  401948:	2001      	movs	r0, #1
  40194a:	4798      	blx	r3
}
  40194c:	bd08      	pop	{r3, pc}
  40194e:	bf00      	nop
  401950:	004018f1 	.word	0x004018f1

00401954 <mem_test_unit_ready>:
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401954:	2801      	cmp	r0, #1
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
  401956:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401958:	d901      	bls.n	40195e <mem_test_unit_ready+0xa>
  40195a:	2001      	movs	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
  40195c:	bd08      	pop	{r3, pc}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  40195e:	0140      	lsls	r0, r0, #5
  401960:	4b01      	ldr	r3, [pc, #4]	; (401968 <mem_test_unit_ready+0x14>)
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401962:	581b      	ldr	r3, [r3, r0]
  401964:	4798      	blx	r3
  401966:	bd08      	pop	{r3, pc}
  401968:	00406768 	.word	0x00406768

0040196c <mem_read_capacity>:
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  40196c:	2801      	cmp	r0, #1
  return status;
}


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
  40196e:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401970:	d901      	bls.n	401976 <mem_read_capacity+0xa>
  401972:	2001      	movs	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
  401974:	bd08      	pop	{r3, pc}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401976:	4b03      	ldr	r3, [pc, #12]	; (401984 <mem_read_capacity+0x18>)
  401978:	eb03 1340 	add.w	r3, r3, r0, lsl #5
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  40197c:	4608      	mov	r0, r1
  40197e:	685b      	ldr	r3, [r3, #4]
  401980:	4798      	blx	r3
  401982:	bd08      	pop	{r3, pc}
  401984:	00406768 	.word	0x00406768

00401988 <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  401988:	2801      	cmp	r0, #1
  40198a:	bf8c      	ite	hi
  40198c:	2000      	movhi	r0, #0
  40198e:	2001      	movls	r0, #1
  401990:	4770      	bx	lr
  401992:	bf00      	nop

00401994 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401994:	2801      	cmp	r0, #1

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
  401996:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401998:	d901      	bls.n	40199e <mem_wr_protect+0xa>
  40199a:	2001      	movs	r0, #1
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
  40199c:	bd08      	pop	{r3, pc}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  40199e:	4b03      	ldr	r3, [pc, #12]	; (4019ac <mem_wr_protect+0x18>)
  4019a0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  4019a4:	68c3      	ldr	r3, [r0, #12]
  4019a6:	4798      	blx	r3
  4019a8:	bd08      	pop	{r3, pc}
  4019aa:	bf00      	nop
  4019ac:	00406768 	.word	0x00406768

004019b0 <memory_2_ram>:
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  4019b0:	2801      	cmp	r0, #1
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
  4019b2:	b508      	push	{r3, lr}
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  4019b4:	d901      	bls.n	4019ba <memory_2_ram+0xa>
  4019b6:	2001      	movs	r0, #1
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
  4019b8:	bd08      	pop	{r3, pc}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  4019ba:	4b04      	ldr	r3, [pc, #16]	; (4019cc <memory_2_ram+0x1c>)
  4019bc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  4019c0:	4608      	mov	r0, r1
  4019c2:	695b      	ldr	r3, [r3, #20]
  4019c4:	4611      	mov	r1, r2
  4019c6:	4798      	blx	r3
  4019c8:	bd08      	pop	{r3, pc}
  4019ca:	bf00      	nop
  4019cc:	00406768 	.word	0x00406768

004019d0 <ram_2_memory>:
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  4019d0:	2801      	cmp	r0, #1
  return status;
}


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
  4019d2:	b508      	push	{r3, lr}
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  4019d4:	d901      	bls.n	4019da <ram_2_memory+0xa>
  4019d6:	2001      	movs	r0, #1
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
  4019d8:	bd08      	pop	{r3, pc}
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  4019da:	4b04      	ldr	r3, [pc, #16]	; (4019ec <ram_2_memory+0x1c>)
  4019dc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  4019e0:	4608      	mov	r0, r1
  4019e2:	699b      	ldr	r3, [r3, #24]
  4019e4:	4611      	mov	r1, r2
  4019e6:	4798      	blx	r3
  4019e8:	bd08      	pop	{r3, pc}
  4019ea:	bf00      	nop
  4019ec:	00406768 	.word	0x00406768

004019f0 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  4019f0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  4019f4:	f001 033f 	and.w	r3, r1, #63	; 0x3f
	if (cmd & SDMMC_RESP_PRESENT) {
  4019f8:	05cf      	lsls	r7, r1, #23
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  4019fa:	ea43 0000 	orr.w	r0, r3, r0
	if (cmd & SDMMC_RESP_PRESENT) {
  4019fe:	d503      	bpl.n	401a08 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  401a00:	050e      	lsls	r6, r1, #20
  401a02:	d530      	bpl.n	401a66 <hsmci_send_cmd_execute+0x76>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  401a04:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
	if (cmd & SDMMC_CMD_OPENDRAIN) {
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  401a08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  401a0c:	044c      	lsls	r4, r1, #17
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  401a0e:	bf48      	it	mi
  401a10:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  401a14:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  401a16:	461d      	mov	r5, r3
  401a18:	f401 5480 	and.w	r4, r1, #4096	; 0x1000
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  401a1c:	6158      	str	r0, [r3, #20]
  401a1e:	e004      	b.n	401a2a <hsmci_send_cmd_execute+0x3a>

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
		if (cmd & SDMMC_RESP_CRC) {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401a20:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  401a24:	d12c      	bne.n	401a80 <hsmci_send_cmd_execute+0x90>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  401a26:	07da      	lsls	r2, r3, #31
  401a28:	d424      	bmi.n	401a74 <hsmci_send_cmd_execute+0x84>
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  401a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401a2e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  401a30:	2c00      	cmp	r4, #0
  401a32:	d1f5      	bne.n	401a20 <hsmci_send_cmd_execute+0x30>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401a34:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  401a38:	d0f5      	beq.n	401a26 <hsmci_send_cmd_execute+0x36>
/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
	uint32_t mr = HSMCI->HSMCI_MR;
  401a3a:	f8d2 c004 	ldr.w	ip, [r2, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401a3e:	6897      	ldr	r7, [r2, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401a40:	68d6      	ldr	r6, [r2, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401a42:	69d5      	ldr	r5, [r2, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401a44:	6d51      	ldr	r1, [r2, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401a46:	f04f 0880 	mov.w	r8, #128	; 0x80
	HSMCI->HSMCI_CFG = cfg;
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401a4a:	2305      	movs	r3, #5
	uint32_t mr = HSMCI->HSMCI_MR;
	uint32_t dtor = HSMCI->HSMCI_DTOR;
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
	uint32_t cfg = HSMCI->HSMCI_CFG;
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401a4c:	f8c2 8000 	str.w	r8, [r2]
	HSMCI->HSMCI_MR = mr;
  401a50:	f8c2 c004 	str.w	ip, [r2, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401a54:	6097      	str	r7, [r2, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401a56:	60d6      	str	r6, [r2, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401a58:	61d5      	str	r5, [r2, #28]
	HSMCI->HSMCI_CFG = cfg;
  401a5a:	6551      	str	r1, [r2, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401a5c:	6013      	str	r3, [r2, #0]
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
				return false;
  401a5e:	4620      	mov	r0, r4
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
}
  401a60:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  401a64:	4770      	bx	lr
	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
	if (cmd & SDMMC_RESP_PRESENT) {
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
		} else if (cmd & SDMMC_RESP_BUSY) {
  401a66:	048d      	lsls	r5, r1, #18
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  401a68:	bf4c      	ite	mi
  401a6a:	f440 5086 	orrmi.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  401a6e:	f440 5082 	orrpl.w	r0, r0, #4160	; 0x1040
  401a72:	e7c9      	b.n	401a08 <hsmci_send_cmd_execute+0x18>
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));

	if (cmd & SDMMC_RESP_BUSY) {
  401a74:	048b      	lsls	r3, r1, #18
  401a76:	d415      	bmi.n	401aa4 <hsmci_send_cmd_execute+0xb4>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  401a78:	2001      	movs	r0, #1
}
  401a7a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  401a7e:	4770      	bx	lr
	uint32_t mr = HSMCI->HSMCI_MR;
	uint32_t dtor = HSMCI->HSMCI_DTOR;
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
	uint32_t cfg = HSMCI->HSMCI_CFG;
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401a80:	2080      	movs	r0, #128	; 0x80
/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
	uint32_t mr = HSMCI->HSMCI_MR;
  401a82:	6857      	ldr	r7, [r2, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401a84:	6896      	ldr	r6, [r2, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401a86:	68d5      	ldr	r5, [r2, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401a88:	69d4      	ldr	r4, [r2, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401a8a:	6d51      	ldr	r1, [r2, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401a8c:	6010      	str	r0, [r2, #0]
	HSMCI->HSMCI_CFG = cfg;
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401a8e:	2305      	movs	r3, #5
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
				return false;
  401a90:	2000      	movs	r0, #0
	uint32_t dtor = HSMCI->HSMCI_DTOR;
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
	uint32_t cfg = HSMCI->HSMCI_CFG;
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
	HSMCI->HSMCI_MR = mr;
  401a92:	6057      	str	r7, [r2, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401a94:	6096      	str	r6, [r2, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401a96:	60d5      	str	r5, [r2, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401a98:	61d4      	str	r4, [r2, #28]
	HSMCI->HSMCI_CFG = cfg;
  401a9a:	6551      	str	r1, [r2, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401a9c:	6013      	str	r3, [r2, #0]
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
}
  401a9e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  401aa2:	4770      	bx	lr
{
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  401aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401aa8:	4619      	mov	r1, r3
  401aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401aac:	f04f 30ff 	mov.w	r0, #4294967295
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
			return false;
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  401ab0:	f003 0330 	and.w	r3, r3, #48	; 0x30
  401ab4:	2b20      	cmp	r3, #32
{
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  401ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
			return false;
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  401aba:	d0dd      	beq.n	401a78 <hsmci_send_cmd_execute+0x88>
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
		if (busy_wait-- == 0) {
  401abc:	3801      	subs	r0, #1
{
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  401abe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  401ac0:	d1f6      	bne.n	401ab0 <hsmci_send_cmd_execute+0xc0>
	uint32_t mr = HSMCI->HSMCI_MR;
	uint32_t dtor = HSMCI->HSMCI_DTOR;
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
	uint32_t cfg = HSMCI->HSMCI_CFG;
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401ac2:	f04f 0c80 	mov.w	ip, #128	; 0x80
/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
	uint32_t mr = HSMCI->HSMCI_MR;
  401ac6:	6857      	ldr	r7, [r2, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401ac8:	6896      	ldr	r6, [r2, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401aca:	68d5      	ldr	r5, [r2, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401acc:	69d4      	ldr	r4, [r2, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401ace:	6d51      	ldr	r1, [r2, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401ad0:	f8c2 c000 	str.w	ip, [r2]
	HSMCI->HSMCI_CFG = cfg;
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401ad4:	2305      	movs	r3, #5
  401ad6:	e7dc      	b.n	401a92 <hsmci_send_cmd_execute+0xa2>

00401ad8 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  401ad8:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  401ada:	4b08      	ldr	r3, [pc, #32]	; (401afc <hsmci_init+0x24>)
  401adc:	2012      	movs	r0, #18
  401ade:	4798      	blx	r3
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  401ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401ae4:	2272      	movs	r2, #114	; 0x72
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  401ae6:	2411      	movs	r4, #17
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  401ae8:	f44f 60e0 	mov.w	r0, #1792	; 0x700

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  401aec:	2105      	movs	r1, #5
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  401aee:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  401af0:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  401af2:	655c      	str	r4, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  401af4:	6058      	str	r0, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  401af6:	6019      	str	r1, [r3, #0]
  401af8:	bd10      	pop	{r4, pc}
  401afa:	bf00      	nop
  401afc:	004052d5 	.word	0x004052d5

00401b00 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  401b00:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  401b02:	bf0c      	ite	eq
  401b04:	2004      	moveq	r0, #4
  401b06:	2000      	movne	r0, #0
  401b08:	4770      	bx	lr
  401b0a:	bf00      	nop

00401b0c <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  401b0c:	2001      	movs	r0, #1
  401b0e:	4770      	bx	lr

00401b10 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  401b10:	b33b      	cbz	r3, 401b62 <hsmci_select_device+0x52>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  401b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#else
	uint32_t clkdiv = 0;
	uint32_t rest = 0;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if ((speed * 2) < mck) {
  401b16:	0049      	lsls	r1, r1, #1
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  401b18:	6d58      	ldr	r0, [r3, #84]	; 0x54
  401b1a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
  401b1e:	6558      	str	r0, [r3, #84]	; 0x54
#else
	uint32_t clkdiv = 0;
	uint32_t rest = 0;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if ((speed * 2) < mck) {
  401b20:	4b1a      	ldr	r3, [pc, #104]	; (401b8c <hsmci_select_device+0x7c>)
  401b22:	4299      	cmp	r1, r3
  401b24:	d827      	bhi.n	401b76 <hsmci_select_device+0x66>
		clkdiv = mck / (2 * speed);
  401b26:	3301      	adds	r3, #1
		rest = mck % (2 * speed);
  401b28:	4618      	mov	r0, r3
	uint32_t clkdiv = 0;
	uint32_t rest = 0;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if ((speed * 2) < mck) {
		clkdiv = mck / (2 * speed);
  401b2a:	fbb3 f3f1 	udiv	r3, r3, r1
		rest = mck % (2 * speed);
  401b2e:	fb01 f103 	mul.w	r1, r1, r3
  401b32:	1a40      	subs	r0, r0, r1
		if (rest > 0) {
  401b34:	bb08      	cbnz	r0, 401b7a <hsmci_select_device+0x6a>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
		}
		if (clkdiv > 0) {
  401b36:	bb0b      	cbnz	r3, 401b7c <hsmci_select_device+0x6c>
  401b38:	4619      	mov	r1, r3
			clkdiv -= 1;
		}
	} else {
		clkdiv = 0;
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401b3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  401b3e:	2a04      	cmp	r2, #4
			clkdiv -= 1;
		}
	} else {
		clkdiv = 0;
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401b40:	6858      	ldr	r0, [r3, #4]
  401b42:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  401b46:	6058      	str	r0, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  401b48:	6858      	ldr	r0, [r3, #4]
  401b4a:	ea41 0100 	orr.w	r1, r1, r0
  401b4e:	6059      	str	r1, [r3, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  401b50:	d017      	beq.n	401b82 <hsmci_select_device+0x72>
  401b52:	2a08      	cmp	r2, #8
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  401b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  401b58:	bf0c      	ite	eq
  401b5a:	22c0      	moveq	r2, #192	; 0xc0
  401b5c:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  401b5e:	60da      	str	r2, [r3, #12]
  401b60:	4770      	bx	lr
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  401b62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#else
	uint32_t clkdiv = 0;
	uint32_t rest = 0;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if ((speed * 2) < mck) {
  401b66:	0049      	lsls	r1, r1, #1
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  401b68:	6d58      	ldr	r0, [r3, #84]	; 0x54
  401b6a:	f420 7080 	bic.w	r0, r0, #256	; 0x100
  401b6e:	6558      	str	r0, [r3, #84]	; 0x54
#else
	uint32_t clkdiv = 0;
	uint32_t rest = 0;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if ((speed * 2) < mck) {
  401b70:	4b06      	ldr	r3, [pc, #24]	; (401b8c <hsmci_select_device+0x7c>)
  401b72:	4299      	cmp	r1, r3
  401b74:	d9d7      	bls.n	401b26 <hsmci_select_device+0x16>
  401b76:	2100      	movs	r1, #0
  401b78:	e7df      	b.n	401b3a <hsmci_select_device+0x2a>
		clkdiv = mck / (2 * speed);
		rest = mck % (2 * speed);
		if (rest > 0) {
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
  401b7a:	3301      	adds	r3, #1
		}
		if (clkdiv > 0) {
			clkdiv -= 1;
  401b7c:	3b01      	subs	r3, #1
  401b7e:	b2d9      	uxtb	r1, r3
  401b80:	e7db      	b.n	401b3a <hsmci_select_device+0x2a>
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  401b82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401b86:	2280      	movs	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  401b88:	60da      	str	r2, [r3, #12]
  401b8a:	4770      	bx	lr
  401b8c:	07270dff 	.word	0x07270dff

00401b90 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
  401b90:	4770      	bx	lr
  401b92:	bf00      	nop

00401b94 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  401b98:	2000      	movs	r0, #0
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401b9a:	685a      	ldr	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  401b9c:	f44f 6110 	mov.w	r1, #2304	; 0x900
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401ba0:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401ba4:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  401ba6:	6118      	str	r0, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  401ba8:	461a      	mov	r2, r3
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  401baa:	6159      	str	r1, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  401bac:	6c13      	ldr	r3, [r2, #64]	; 0x40
  401bae:	07db      	lsls	r3, r3, #31
  401bb0:	d5fc      	bpl.n	401bac <hsmci_send_clock+0x18>
}
  401bb2:	4770      	bx	lr

00401bb4 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  401bb4:	b570      	push	{r4, r5, r6, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
	HSMCI->HSMCI_BLKR = 0;
  401bba:	2400      	movs	r4, #0
}

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401bbc:	685a      	ldr	r2, [r3, #4]
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
	HSMCI->HSMCI_BLKR = 0;
	return hsmci_send_cmd_execute(0, cmd, arg);
  401bbe:	4d07      	ldr	r5, [pc, #28]	; (401bdc <hsmci_send_cmd+0x28>)
}

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401bc0:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401bc4:	605a      	str	r2, [r3, #4]
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  401bc6:	685e      	ldr	r6, [r3, #4]
  401bc8:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
}

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  401bcc:	460a      	mov	r2, r1
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  401bce:	605e      	str	r6, [r3, #4]
#endif
	HSMCI->HSMCI_BLKR = 0;
	return hsmci_send_cmd_execute(0, cmd, arg);
  401bd0:	4601      	mov	r1, r0
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
	HSMCI->HSMCI_BLKR = 0;
  401bd2:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  401bd4:	4620      	mov	r0, r4
  401bd6:	47a8      	blx	r5
}
  401bd8:	bd70      	pop	{r4, r5, r6, pc}
  401bda:	bf00      	nop
  401bdc:	004019f1 	.word	0x004019f1

00401be0 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  401be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401be4:	6a18      	ldr	r0, [r3, #32]
}
  401be6:	4770      	bx	lr

00401be8 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  401be8:	b430      	push	{r4, r5}
  401bea:	f100 0510 	add.w	r5, r0, #16
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  401bee:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401bf2:	6a23      	ldr	r3, [r4, #32]
		response++;
		*response = (response_32 >> 16) & 0xFF;
		response++;
		*response = (response_32 >>  8) & 0xFF;
		response++;
		*response = (response_32 >>  0) & 0xFF;
  401bf4:	70c3      	strb	r3, [r0, #3]
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
		*response = (response_32 >> 24) & 0xFF;
  401bf6:	0e19      	lsrs	r1, r3, #24
		response++;
		*response = (response_32 >> 16) & 0xFF;
  401bf8:	0c1a      	lsrs	r2, r3, #16
		response++;
		*response = (response_32 >>  8) & 0xFF;
  401bfa:	0a1b      	lsrs	r3, r3, #8
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
		*response = (response_32 >> 24) & 0xFF;
  401bfc:	7001      	strb	r1, [r0, #0]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  401bfe:	7042      	strb	r2, [r0, #1]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  401c00:	7083      	strb	r3, [r0, #2]
  401c02:	3004      	adds	r0, #4

void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  401c04:	42a8      	cmp	r0, r5
  401c06:	d1f4      	bne.n	401bf2 <hsmci_get_response_128+0xa>
		*response = (response_32 >>  8) & 0xFF;
		response++;
		*response = (response_32 >>  0) & 0xFF;
		response++;
	}
}
  401c08:	bc30      	pop	{r4, r5}
  401c0a:	4770      	bx	lr

00401c0c <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  401c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401c0e:	460e      	mov	r6, r1
  401c10:	f89d 5018 	ldrb.w	r5, [sp, #24]
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  401c14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		response++;
	}
}

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  401c18:	4604      	mov	r4, r0
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  401c1a:	6848      	ldr	r0, [r1, #4]
		HSMCI->HSMCI_DMA = 0;
	}
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
  401c1c:	b34d      	cbz	r5, 401c72 <hsmci_adtc_start+0x66>
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  401c1e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
  401c22:	6048      	str	r0, [r1, #4]
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  401c24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	// Force byte transfer if needed
	if (block_size & 0x3) {
  401c28:	0797      	lsls	r7, r2, #30
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  401c2a:	6841      	ldr	r1, [r0, #4]
  401c2c:	f441 51c0 	orr.w	r1, r1, #6144	; 0x1800
  401c30:	6041      	str	r1, [r0, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401c32:	6841      	ldr	r1, [r0, #4]
  401c34:	bf14      	ite	ne
  401c36:	f441 5100 	orrne.w	r1, r1, #8192	; 0x2000
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401c3a:	f421 5100 	biceq.w	r1, r1, #8192	; 0x2000
	}

	if (cmd & SDMMC_CMD_WRITE) {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
  401c3e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
	// Force byte transfer if needed
	if (block_size & 0x3) {
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401c42:	6041      	str	r1, [r0, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
  401c44:	bf0c      	ite	eq
  401c46:	f44f 20a0 	moveq.w	r0, #327680	; 0x50000
  401c4a:	f44f 3080 	movne.w	r0, #65536	; 0x10000
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  401c4e:	03e5      	lsls	r5, r4, #15
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  401c50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  401c54:	d421      	bmi.n	401c9a <hsmci_adtc_start+0x8e>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  401c56:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  401c5a:	618d      	str	r5, [r1, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  401c5c:	03a1      	lsls	r1, r4, #14
  401c5e:	d40c      	bmi.n	401c7a <hsmci_adtc_start+0x6e>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  401c60:	0367      	lsls	r7, r4, #13
  401c62:	d420      	bmi.n	401ca6 <hsmci_adtc_start+0x9a>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  401c64:	0325      	lsls	r5, r4, #12
  401c66:	d40a      	bmi.n	401c7e <hsmci_adtc_start+0x72>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  401c68:	02e1      	lsls	r1, r4, #11
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  401c6a:	bf48      	it	mi
  401c6c:	f440 2000 	orrmi.w	r0, r0, #524288	; 0x80000
  401c70:	e005      	b.n	401c7e <hsmci_adtc_start+0x72>
	if (access_block) {
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
	} else {
		// Disable PDC for HSMCI
		HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  401c72:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  401c76:	6048      	str	r0, [r1, #4]
  401c78:	e7d4      	b.n	401c24 <hsmci_adtc_start+0x18>
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  401c7a:	f440 1020 	orr.w	r0, r0, #2621440	; 0x280000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
	hsmci_block_size = block_size;
  401c7e:	490b      	ldr	r1, [pc, #44]	; (401cac <hsmci_adtc_start+0xa0>)
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  401c80:	f8df e034 	ldr.w	lr, [pc, #52]	; 401cb8 <hsmci_adtc_start+0xac>
	hsmci_block_size = block_size;
	hsmci_nb_block = nb_block;
  401c84:	4f0a      	ldr	r7, [pc, #40]	; (401cb0 <hsmci_adtc_start+0xa4>)
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
	hsmci_block_size = block_size;
  401c86:	800a      	strh	r2, [r1, #0]
	hsmci_nb_block = nb_block;

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  401c88:	4d0a      	ldr	r5, [pc, #40]	; (401cb4 <hsmci_adtc_start+0xa8>)
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
	hsmci_block_size = block_size;
	hsmci_nb_block = nb_block;
  401c8a:	803b      	strh	r3, [r7, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  401c8c:	4621      	mov	r1, r4
  401c8e:	4632      	mov	r2, r6
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  401c90:	2400      	movs	r4, #0
  401c92:	f8ce 4000 	str.w	r4, [lr]
	hsmci_block_size = block_size;
	hsmci_nb_block = nb_block;

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  401c96:	47a8      	blx	r5
}
  401c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  401c9a:	f3c2 0508 	ubfx	r5, r2, #0, #9
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  401c9e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  401ca2:	618d      	str	r5, [r1, #24]
  401ca4:	e7eb      	b.n	401c7e <hsmci_adtc_start+0x72>
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  401ca6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
  401caa:	e7e8      	b.n	401c7e <hsmci_adtc_start+0x72>
  401cac:	20000ecc 	.word	0x20000ecc
  401cb0:	20000ece 	.word	0x20000ece
  401cb4:	004019f1 	.word	0x004019f1
  401cb8:	20000ed0 	.word	0x20000ed0

00401cbc <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  401cbc:	b4f0      	push	{r4, r5, r6, r7}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  401cbe:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401cc2:	e001      	b.n	401cc8 <hsmci_read_word+0xc>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  401cc4:	0792      	lsls	r2, r2, #30
  401cc6:	d417      	bmi.n	401cf8 <hsmci_read_word+0x3c>

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  401cc8:	6c22      	ldr	r2, [r4, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401cca:	4b21      	ldr	r3, [pc, #132]	; (401d50 <hsmci_read_word+0x94>)
  401ccc:	4013      	ands	r3, r2

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  401cce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401cd2:	2b00      	cmp	r3, #0
  401cd4:	d0f6      	beq.n	401cc4 <hsmci_read_word+0x8>
/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
	uint32_t mr = HSMCI->HSMCI_MR;
  401cd6:	684f      	ldr	r7, [r1, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401cd8:	688e      	ldr	r6, [r1, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401cda:	68cd      	ldr	r5, [r1, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401cdc:	69cc      	ldr	r4, [r1, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401cde:	6d4a      	ldr	r2, [r1, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401ce0:	2080      	movs	r0, #128	; 0x80
	HSMCI->HSMCI_CFG = cfg;
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401ce2:	2305      	movs	r3, #5
	uint32_t mr = HSMCI->HSMCI_MR;
	uint32_t dtor = HSMCI->HSMCI_DTOR;
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
	uint32_t cfg = HSMCI->HSMCI_CFG;
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401ce4:	6008      	str	r0, [r1, #0]
	HSMCI->HSMCI_MR = mr;
  401ce6:	604f      	str	r7, [r1, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401ce8:	608e      	str	r6, [r1, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401cea:	60cd      	str	r5, [r1, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401cec:	61cc      	str	r4, [r1, #28]
	HSMCI->HSMCI_CFG = cfg;
  401cee:	654a      	str	r2, [r1, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401cf0:	600b      	str	r3, [r1, #0]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
  401cf2:	2000      	movs	r0, #0
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  401cf4:	bcf0      	pop	{r4, r5, r6, r7}
  401cf6:	4770      	bx	lr
		}
	} while (!(sr & HSMCI_SR_RXRDY));

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
  401cf8:	4a16      	ldr	r2, [pc, #88]	; (401d54 <hsmci_read_word+0x98>)
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401cfa:	4c17      	ldr	r4, [pc, #92]	; (401d58 <hsmci_read_word+0x9c>)
  401cfc:	4d17      	ldr	r5, [pc, #92]	; (401d5c <hsmci_read_word+0xa0>)
		}
	} while (!(sr & HSMCI_SR_RXRDY));

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
  401cfe:	6813      	ldr	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401d00:	8826      	ldrh	r6, [r4, #0]
  401d02:	882d      	ldrh	r5, [r5, #0]
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));

	// Read data
	*value = HSMCI->HSMCI_RDR;
  401d04:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401d06:	6004      	str	r4, [r0, #0]
	hsmci_transfert_pos += 4;
  401d08:	3304      	adds	r3, #4
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401d0a:	fb06 f005 	mul.w	r0, r6, r5
  401d0e:	4283      	cmp	r3, r0
		}
	} while (!(sr & HSMCI_SR_RXRDY));

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
  401d10:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401d12:	d202      	bcs.n	401d1a <hsmci_read_word+0x5e>
  401d14:	e019      	b.n	401d4a <hsmci_read_word+0x8e>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401d16:	0113      	lsls	r3, r2, #4
  401d18:	d417      	bmi.n	401d4a <hsmci_read_word+0x8e>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  401d1a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401d1c:	4b0c      	ldr	r3, [pc, #48]	; (401d50 <hsmci_read_word+0x94>)
  401d1e:	4013      	ands	r3, r2
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  401d20:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401d24:	2b00      	cmp	r3, #0
  401d26:	d0f6      	beq.n	401d16 <hsmci_read_word+0x5a>
/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
	uint32_t mr = HSMCI->HSMCI_MR;
  401d28:	6867      	ldr	r7, [r4, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401d2a:	68a6      	ldr	r6, [r4, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401d2c:	68e5      	ldr	r5, [r4, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401d2e:	69e1      	ldr	r1, [r4, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401d30:	6d62      	ldr	r2, [r4, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401d32:	2080      	movs	r0, #128	; 0x80
	HSMCI->HSMCI_CFG = cfg;
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401d34:	2305      	movs	r3, #5
	uint32_t mr = HSMCI->HSMCI_MR;
	uint32_t dtor = HSMCI->HSMCI_DTOR;
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
	uint32_t cfg = HSMCI->HSMCI_CFG;
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401d36:	6020      	str	r0, [r4, #0]
	HSMCI->HSMCI_MR = mr;
  401d38:	6067      	str	r7, [r4, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401d3a:	60a6      	str	r6, [r4, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401d3c:	60e5      	str	r5, [r4, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401d3e:	61e1      	str	r1, [r4, #28]
	HSMCI->HSMCI_CFG = cfg;
  401d40:	6562      	str	r2, [r4, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401d42:	6023      	str	r3, [r4, #0]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
  401d44:	2000      	movs	r0, #0
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  401d46:	bcf0      	pop	{r4, r5, r6, r7}
  401d48:	4770      	bx	lr

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
  401d4a:	2001      	movs	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  401d4c:	bcf0      	pop	{r4, r5, r6, r7}
  401d4e:	4770      	bx	lr
  401d50:	c0600000 	.word	0xc0600000
  401d54:	20000ed0 	.word	0x20000ed0
  401d58:	20000ecc 	.word	0x20000ecc
  401d5c:	20000ece 	.word	0x20000ece

00401d60 <hsmci_start_read_blocks>:
}
#endif // HSMCI_SR_DMADONE

#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  401d60:	b430      	push	{r4, r5}
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  401d62:	4b17      	ldr	r3, [pc, #92]	; (401dc0 <hsmci_start_read_blocks+0x60>)
  401d64:	881b      	ldrh	r3, [r3, #0]
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  401d66:	0784      	lsls	r4, r0, #30
#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  401d68:	fb03 f101 	mul.w	r1, r3, r1
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  401d6c:	d101      	bne.n	401d72 <hsmci_start_read_blocks+0x12>
  401d6e:	079a      	lsls	r2, r3, #30
  401d70:	d01e      	beq.n	401db0 <hsmci_start_read_blocks+0x50>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401d76:	685a      	ldr	r2, [r3, #4]
  401d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  401d7c:	605a      	str	r2, [r3, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  401d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
			nb_data : nb_data / 4;
	HSMCI->HSMCI_RNCR = 0;
  401d82:	2400      	movs	r4, #0
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  401d84:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  401d88:	685b      	ldr	r3, [r3, #4]
			nb_data : nb_data / 4;
	HSMCI->HSMCI_RNCR = 0;
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
	hsmci_transfert_pos += nb_data;
  401d8a:	4a0e      	ldr	r2, [pc, #56]	; (401dc4 <hsmci_start_read_blocks+0x64>)
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
			nb_data : nb_data / 4;
  401d8c:	049b      	lsls	r3, r3, #18
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  401d8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
			nb_data : nb_data / 4;
  401d92:	bf54      	ite	pl
  401d94:	088d      	lsrpl	r5, r1, #2
  401d96:	460d      	movmi	r5, r1
	HSMCI->HSMCI_RNCR = 0;
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  401d98:	2001      	movs	r0, #1
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  401d9a:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
			nb_data : nb_data / 4;
	HSMCI->HSMCI_RNCR = 0;
  401d9e:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  401da2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  401da6:	6813      	ldr	r3, [r2, #0]
  401da8:	4419      	add	r1, r3
  401daa:	6011      	str	r1, [r2, #0]
	return true;
}
  401dac:	bc30      	pop	{r4, r5}
  401dae:	4770      	bx	lr

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401db0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401db4:	685a      	ldr	r2, [r3, #4]
  401db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401dba:	605a      	str	r2, [r3, #4]
  401dbc:	e7df      	b.n	401d7e <hsmci_start_read_blocks+0x1e>
  401dbe:	bf00      	nop
  401dc0:	20000ecc 	.word	0x20000ecc
  401dc4:	20000ed0 	.word	0x20000ed0

00401dc8 <hsmci_wait_end_of_read_blocks>:
	hsmci_transfert_pos += nb_data;
	return true;
}

bool hsmci_wait_end_of_read_blocks(void)
{
  401dc8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401dca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401dce:	e001      	b.n	401dd4 <hsmci_wait_end_of_read_blocks+0xc>
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
			hsmci_reset();
			return false;
		}

	} while (!(sr & HSMCI_SR_RXBUFF));
  401dd0:	0452      	lsls	r2, r2, #17
  401dd2:	d41b      	bmi.n	401e0c <hsmci_wait_end_of_read_blocks+0x44>
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401dd4:	6c02      	ldr	r2, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401dd6:	4b21      	ldr	r3, [pc, #132]	; (401e5c <hsmci_wait_end_of_read_blocks+0x94>)
  401dd8:	4013      	ands	r3, r2
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401dda:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401dde:	2b00      	cmp	r3, #0
  401de0:	d0f6      	beq.n	401dd0 <hsmci_wait_end_of_read_blocks+0x8>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  401de2:	f240 2302 	movw	r3, #514	; 0x202
  401de6:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
	uint32_t mr = HSMCI->HSMCI_MR;
  401dea:	684f      	ldr	r7, [r1, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401dec:	688e      	ldr	r6, [r1, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401dee:	68cd      	ldr	r5, [r1, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401df0:	69cc      	ldr	r4, [r1, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401df2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401df4:	2080      	movs	r0, #128	; 0x80
	HSMCI->HSMCI_CFG = cfg;
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401df6:	2305      	movs	r3, #5
	uint32_t mr = HSMCI->HSMCI_MR;
	uint32_t dtor = HSMCI->HSMCI_DTOR;
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
	uint32_t cfg = HSMCI->HSMCI_CFG;
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401df8:	6008      	str	r0, [r1, #0]
	HSMCI->HSMCI_MR = mr;
  401dfa:	604f      	str	r7, [r1, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401dfc:	608e      	str	r6, [r1, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401dfe:	60cd      	str	r5, [r1, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401e00:	61cc      	str	r4, [r1, #28]
	HSMCI->HSMCI_CFG = cfg;
  401e02:	654a      	str	r2, [r1, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401e04:	600b      	str	r3, [r1, #0]
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
			hsmci_reset();
			return false;
  401e06:	2000      	movs	r0, #0
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  401e08:	bcf0      	pop	{r4, r5, r6, r7}
  401e0a:	4770      	bx	lr
			return false;
		}

	} while (!(sr & HSMCI_SR_RXBUFF));

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  401e0c:	4a14      	ldr	r2, [pc, #80]	; (401e60 <hsmci_wait_end_of_read_blocks+0x98>)
  401e0e:	4815      	ldr	r0, [pc, #84]	; (401e64 <hsmci_wait_end_of_read_blocks+0x9c>)
  401e10:	4b15      	ldr	r3, [pc, #84]	; (401e68 <hsmci_wait_end_of_read_blocks+0xa0>)
  401e12:	8812      	ldrh	r2, [r2, #0]
  401e14:	8800      	ldrh	r0, [r0, #0]
  401e16:	681b      	ldr	r3, [r3, #0]
  401e18:	fb00 f202 	mul.w	r2, r0, r2
  401e1c:	429a      	cmp	r2, r3
  401e1e:	d902      	bls.n	401e26 <hsmci_wait_end_of_read_blocks+0x5e>
  401e20:	e019      	b.n	401e56 <hsmci_wait_end_of_read_blocks+0x8e>
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401e22:	0113      	lsls	r3, r2, #4
  401e24:	d417      	bmi.n	401e56 <hsmci_wait_end_of_read_blocks+0x8e>
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401e26:	6c0a      	ldr	r2, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401e28:	4b0c      	ldr	r3, [pc, #48]	; (401e5c <hsmci_wait_end_of_read_blocks+0x94>)
  401e2a:	4013      	ands	r3, r2
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401e2c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401e30:	2b00      	cmp	r3, #0
  401e32:	d0f6      	beq.n	401e22 <hsmci_wait_end_of_read_blocks+0x5a>
/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
	uint32_t mr = HSMCI->HSMCI_MR;
  401e34:	6867      	ldr	r7, [r4, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401e36:	68a6      	ldr	r6, [r4, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401e38:	68e5      	ldr	r5, [r4, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401e3a:	69e1      	ldr	r1, [r4, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401e3c:	6d62      	ldr	r2, [r4, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401e3e:	2080      	movs	r0, #128	; 0x80
	HSMCI->HSMCI_CFG = cfg;
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401e40:	2305      	movs	r3, #5
	uint32_t mr = HSMCI->HSMCI_MR;
	uint32_t dtor = HSMCI->HSMCI_DTOR;
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
	uint32_t cfg = HSMCI->HSMCI_CFG;
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401e42:	6020      	str	r0, [r4, #0]
	HSMCI->HSMCI_MR = mr;
  401e44:	6067      	str	r7, [r4, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401e46:	60a6      	str	r6, [r4, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401e48:	60e5      	str	r5, [r4, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401e4a:	61e1      	str	r1, [r4, #28]
	HSMCI->HSMCI_CFG = cfg;
  401e4c:	6562      	str	r2, [r4, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401e4e:	6023      	str	r3, [r4, #0]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
  401e50:	2000      	movs	r0, #0
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  401e52:	bcf0      	pop	{r4, r5, r6, r7}
  401e54:	4770      	bx	lr
		}

	} while (!(sr & HSMCI_SR_RXBUFF));

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
		return true;
  401e56:	2001      	movs	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  401e58:	bcf0      	pop	{r4, r5, r6, r7}
  401e5a:	4770      	bx	lr
  401e5c:	c0600000 	.word	0xc0600000
  401e60:	20000ece 	.word	0x20000ece
  401e64:	20000ecc 	.word	0x20000ecc
  401e68:	20000ed0 	.word	0x20000ed0

00401e6c <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  401e6c:	b430      	push	{r4, r5}
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  401e6e:	4b18      	ldr	r3, [pc, #96]	; (401ed0 <hsmci_start_write_blocks+0x64>)
  401e70:	881b      	ldrh	r3, [r3, #0]
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_TCR_TXCTR_Msk >> PERIPH_TCR_TXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)src & 0x3) || (hsmci_block_size & 0x3)) {
  401e72:	0784      	lsls	r4, r0, #30

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  401e74:	fb03 f101 	mul.w	r1, r3, r1
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_TCR_TXCTR_Msk >> PERIPH_TCR_TXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)src & 0x3) || (hsmci_block_size & 0x3)) {
  401e78:	d101      	bne.n	401e7e <hsmci_start_write_blocks+0x12>
  401e7a:	079a      	lsls	r2, r3, #30
  401e7c:	d020      	beq.n	401ec0 <hsmci_start_write_blocks+0x54>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401e82:	685a      	ldr	r2, [r3, #4]
  401e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  401e88:	605a      	str	r2, [r3, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
  401e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
			nb_data : nb_data / 4;
	HSMCI->HSMCI_TNCR = 0;
  401e8e:	2400      	movs	r4, #0
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
  401e90:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  401e94:	685b      	ldr	r3, [r3, #4]
			nb_data : nb_data / 4;
	HSMCI->HSMCI_TNCR = 0;
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTEN;
	hsmci_transfert_pos += nb_data;
  401e96:	4a0f      	ldr	r2, [pc, #60]	; (401ed4 <hsmci_start_write_blocks+0x68>)
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
			nb_data : nb_data / 4;
  401e98:	049b      	lsls	r3, r3, #18
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  401e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
			nb_data : nb_data / 4;
  401e9e:	bf54      	ite	pl
  401ea0:	088d      	lsrpl	r5, r1, #2
  401ea2:	460d      	movmi	r5, r1
	HSMCI->HSMCI_TNCR = 0;
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTEN;
  401ea4:	f44f 7080 	mov.w	r0, #256	; 0x100
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  401ea8:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
			nb_data : nb_data / 4;
	HSMCI->HSMCI_TNCR = 0;
  401eac:	f8c3 411c 	str.w	r4, [r3, #284]	; 0x11c
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTEN;
  401eb0:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  401eb4:	6813      	ldr	r3, [r2, #0]
  401eb6:	4419      	add	r1, r3
  401eb8:	6011      	str	r1, [r2, #0]
	return true;
}
  401eba:	2001      	movs	r0, #1
  401ebc:	bc30      	pop	{r4, r5}
  401ebe:	4770      	bx	lr

	// Handle unaligned memory address
	if (((uint32_t)src & 0x3) || (hsmci_block_size & 0x3)) {
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401ec4:	685a      	ldr	r2, [r3, #4]
  401ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401eca:	605a      	str	r2, [r3, #4]
  401ecc:	e7dd      	b.n	401e8a <hsmci_start_write_blocks+0x1e>
  401ece:	bf00      	nop
  401ed0:	20000ecc 	.word	0x20000ecc
  401ed4:	20000ed0 	.word	0x20000ed0

00401ed8 <hsmci_wait_end_of_write_blocks>:
	hsmci_transfert_pos += nb_data;
	return true;
}

bool hsmci_wait_end_of_write_blocks(void)
{
  401ed8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t sr;

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401eda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401ede:	e001      	b.n	401ee4 <hsmci_wait_end_of_write_blocks+0xc>
					__func__, sr);
			hsmci_reset();
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
			return false;
		}
	} while (!(sr & HSMCI_SR_TXBUFE));
  401ee0:	0412      	lsls	r2, r2, #16
  401ee2:	d41d      	bmi.n	401f20 <hsmci_wait_end_of_write_blocks+0x48>
	uint32_t sr;

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401ee4:	6c02      	ldr	r2, [r0, #64]	; 0x40
		if (sr &
  401ee6:	4b22      	ldr	r3, [pc, #136]	; (401f70 <hsmci_wait_end_of_write_blocks+0x98>)
  401ee8:	4013      	ands	r3, r2
	uint32_t sr;

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401eea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr &
  401eee:	2b00      	cmp	r3, #0
  401ef0:	d0f6      	beq.n	401ee0 <hsmci_wait_end_of_write_blocks+0x8>
/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
	uint32_t mr = HSMCI->HSMCI_MR;
  401ef2:	f8d1 c004 	ldr.w	ip, [r1, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401ef6:	688f      	ldr	r7, [r1, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401ef8:	68ce      	ldr	r6, [r1, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401efa:	69cd      	ldr	r5, [r1, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401efc:	6d4c      	ldr	r4, [r1, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401efe:	2080      	movs	r0, #128	; 0x80
	HSMCI->HSMCI_CFG = cfg;
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401f00:	2205      	movs	r2, #5
				(HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  401f02:	f240 2302 	movw	r3, #514	; 0x202
	uint32_t mr = HSMCI->HSMCI_MR;
	uint32_t dtor = HSMCI->HSMCI_DTOR;
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
	uint32_t cfg = HSMCI->HSMCI_CFG;
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401f06:	6008      	str	r0, [r1, #0]
	HSMCI->HSMCI_MR = mr;
  401f08:	f8c1 c004 	str.w	ip, [r1, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401f0c:	608f      	str	r7, [r1, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401f0e:	60ce      	str	r6, [r1, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401f10:	61cd      	str	r5, [r1, #28]
	HSMCI->HSMCI_CFG = cfg;
  401f12:	654c      	str	r4, [r1, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401f14:	600a      	str	r2, [r1, #0]
				(HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  401f16:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
			return false;
  401f1a:	2000      	movs	r0, #0
			return false;
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	return true;
}
  401f1c:	bcf0      	pop	{r4, r5, r6, r7}
  401f1e:	4770      	bx	lr
			return false;
		}
	} while (!(sr & HSMCI_SR_TXBUFE));


	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  401f20:	4a14      	ldr	r2, [pc, #80]	; (401f74 <hsmci_wait_end_of_write_blocks+0x9c>)
  401f22:	4815      	ldr	r0, [pc, #84]	; (401f78 <hsmci_wait_end_of_write_blocks+0xa0>)
  401f24:	4b15      	ldr	r3, [pc, #84]	; (401f7c <hsmci_wait_end_of_write_blocks+0xa4>)
  401f26:	8812      	ldrh	r2, [r2, #0]
  401f28:	8800      	ldrh	r0, [r0, #0]
  401f2a:	681b      	ldr	r3, [r3, #0]
  401f2c:	fb00 f202 	mul.w	r2, r0, r2
  401f30:	429a      	cmp	r2, r3
  401f32:	d902      	bls.n	401f3a <hsmci_wait_end_of_write_blocks+0x62>
  401f34:	e019      	b.n	401f6a <hsmci_wait_end_of_write_blocks+0x92>
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
  401f36:	0693      	lsls	r3, r2, #26
  401f38:	d417      	bmi.n	401f6a <hsmci_wait_end_of_write_blocks+0x92>
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401f3a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401f3c:	4b0c      	ldr	r3, [pc, #48]	; (401f70 <hsmci_wait_end_of_write_blocks+0x98>)
  401f3e:	4013      	ands	r3, r2
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401f40:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401f44:	2b00      	cmp	r3, #0
  401f46:	d0f6      	beq.n	401f36 <hsmci_wait_end_of_write_blocks+0x5e>
/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
	uint32_t mr = HSMCI->HSMCI_MR;
  401f48:	6867      	ldr	r7, [r4, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401f4a:	68a6      	ldr	r6, [r4, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401f4c:	68e5      	ldr	r5, [r4, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401f4e:	69e1      	ldr	r1, [r4, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401f50:	6d62      	ldr	r2, [r4, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401f52:	2080      	movs	r0, #128	; 0x80
	HSMCI->HSMCI_CFG = cfg;
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401f54:	2305      	movs	r3, #5
	uint32_t mr = HSMCI->HSMCI_MR;
	uint32_t dtor = HSMCI->HSMCI_DTOR;
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
	uint32_t cfg = HSMCI->HSMCI_CFG;
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401f56:	6020      	str	r0, [r4, #0]
	HSMCI->HSMCI_MR = mr;
  401f58:	6067      	str	r7, [r4, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401f5a:	60a6      	str	r6, [r4, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401f5c:	60e5      	str	r5, [r4, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401f5e:	61e1      	str	r1, [r4, #28]
	HSMCI->HSMCI_CFG = cfg;
  401f60:	6562      	str	r2, [r4, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401f62:	6023      	str	r3, [r4, #0]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
  401f64:	2000      	movs	r0, #0
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	return true;
}
  401f66:	bcf0      	pop	{r4, r5, r6, r7}
  401f68:	4770      	bx	lr
		}
	} while (!(sr & HSMCI_SR_TXBUFE));


	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
		return true;
  401f6a:	2001      	movs	r0, #1
			return false;
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	return true;
}
  401f6c:	bcf0      	pop	{r4, r5, r6, r7}
  401f6e:	4770      	bx	lr
  401f70:	c0600000 	.word	0xc0600000
  401f74:	20000ece 	.word	0x20000ece
  401f78:	20000ecc 	.word	0x20000ecc
  401f7c:	20000ed0 	.word	0x20000ed0

00401f80 <rtc_set_hour_mode>:
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  401f80:	6843      	ldr	r3, [r0, #4]
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  401f82:	b919      	cbnz	r1, 401f8c <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  401f84:	f023 0301 	bic.w	r3, r3, #1
  401f88:	6043      	str	r3, [r0, #4]
  401f8a:	4770      	bx	lr
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  401f8c:	f043 0301 	orr.w	r3, r3, #1
  401f90:	6043      	str	r3, [r0, #4]
  401f92:	4770      	bx	lr

00401f94 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  401f94:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  401f96:	6884      	ldr	r4, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401f98:	6885      	ldr	r5, [r0, #8]
  401f9a:	42ac      	cmp	r4, r5
  401f9c:	d003      	beq.n	401fa6 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  401f9e:	6884      	ldr	r4, [r0, #8]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
	while (ul_time != p_rtc->RTC_TIMR) {
  401fa0:	6885      	ldr	r5, [r0, #8]
  401fa2:	42a5      	cmp	r5, r4
  401fa4:	d1fb      	bne.n	401f9e <rtc_get_time+0xa>
		ul_time = p_rtc->RTC_TIMR;
	}

	/* Hour */
	if (pul_hour) {
  401fa6:	b161      	cbz	r1, 401fc2 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  401fa8:	f404 107c 	and.w	r0, r4, #4128768	; 0x3f0000
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401fac:	0d05      	lsrs	r5, r0, #20
  401fae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401fb2:	f3c0 4003 	ubfx	r0, r0, #16, #4
  401fb6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  401fba:	0265      	lsls	r5, r4, #9
			*pul_hour += 12;
  401fbc:	bf48      	it	mi
  401fbe:	300c      	addmi	r0, #12
  401fc0:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  401fc2:	b14a      	cbz	r2, 401fd8 <rtc_get_time+0x44>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  401fc4:	f404 41fe 	and.w	r1, r4, #32512	; 0x7f00
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  401fc8:	0b08      	lsrs	r0, r1, #12
  401fca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401fce:	f3c1 2103 	ubfx	r1, r1, #8, #4
  401fd2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  401fd6:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  401fd8:	b143      	cbz	r3, 401fec <rtc_get_time+0x58>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401fda:	f3c4 1202 	ubfx	r2, r4, #4, #3
  401fde:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401fe2:	f004 040f 	and.w	r4, r4, #15
  401fe6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  401fea:	601a      	str	r2, [r3, #0]
	}
}
  401fec:	bc30      	pop	{r4, r5}
  401fee:	4770      	bx	lr

00401ff0 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  401ff0:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  401ff2:	68c4      	ldr	r4, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  401ff4:	68c5      	ldr	r5, [r0, #12]
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  401ff6:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
	while (ul_date != p_rtc->RTC_CALR) {
  401ff8:	42ac      	cmp	r4, r5
  401ffa:	d003      	beq.n	402004 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  401ffc:	68c4      	ldr	r4, [r0, #12]
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
	while (ul_date != p_rtc->RTC_CALR) {
  401ffe:	68c5      	ldr	r5, [r0, #12]
  402000:	42a5      	cmp	r5, r4
  402002:	d1fb      	bne.n	401ffc <rtc_get_date+0xc>
		ul_date = p_rtc->RTC_CALR;
	}

	/* Retrieve year */
	if (pul_year) {
  402004:	b1a1      	cbz	r1, 402030 <rtc_get_date+0x40>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
  402006:	f404 457f 	and.w	r5, r4, #65280	; 0xff00
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40200a:	0b2f      	lsrs	r7, r5, #12
	}

	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40200c:	f3c4 1002 	ubfx	r0, r4, #4, #3
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402010:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
  402014:	f3c5 2503 	ubfx	r5, r5, #8, #4
	}

	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402018:	f004 070f 	and.w	r7, r4, #15
  40201c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402020:	eb07 0040 	add.w	r0, r7, r0, lsl #1
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  402024:	eb05 054c 	add.w	r5, r5, ip, lsl #1
  402028:	2764      	movs	r7, #100	; 0x64
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40202a:	fb07 5000 	mla	r0, r7, r0, r5
	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40202e:	6008      	str	r0, [r1, #0]
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
	}

	/* Retrieve month */
	if (pul_month) {
  402030:	b14a      	cbz	r2, 402046 <rtc_get_date+0x56>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
  402032:	f404 10f8 	and.w	r0, r4, #2031616	; 0x1f0000
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402036:	0d01      	lsrs	r1, r0, #20
  402038:	008d      	lsls	r5, r1, #2
  40203a:	f3c0 4003 	ubfx	r0, r0, #16, #4
  40203e:	4429      	add	r1, r5
  402040:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  402044:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  402046:	b14b      	cbz	r3, 40205c <rtc_get_date+0x6c>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
  402048:	f004 527c 	and.w	r2, r4, #1056964608	; 0x3f000000
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40204c:	0f11      	lsrs	r1, r2, #28
  40204e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  402052:	f3c2 6203 	ubfx	r2, r2, #24, #4
  402056:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  40205a:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  40205c:	b116      	cbz	r6, 402064 <rtc_get_date+0x74>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  40205e:	f3c4 5442 	ubfx	r4, r4, #21, #3
  402062:	6034      	str	r4, [r6, #0]
	}
}
  402064:	bcf0      	pop	{r4, r5, r6, r7}
  402066:	4770      	bx	lr

00402068 <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
  402068:	60c1      	str	r1, [r0, #12]
  40206a:	4770      	bx	lr

0040206c <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  40206c:	6940      	ldr	r0, [r0, #20]
}
  40206e:	4770      	bx	lr

00402070 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402070:	6943      	ldr	r3, [r0, #20]
  402072:	079b      	lsls	r3, r3, #30
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402074:	bf46      	itte	mi
  402076:	61c1      	strmi	r1, [r0, #28]
	return 0;
  402078:	2000      	movmi	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  40207a:	2001      	movpl	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  40207c:	4770      	bx	lr
  40207e:	bf00      	nop

00402080 <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
  402080:	6081      	str	r1, [r0, #8]
  402082:	4770      	bx	lr

00402084 <usart_disable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IDR = ul_sources;
  402084:	60c1      	str	r1, [r0, #12]
  402086:	4770      	bx	lr

00402088 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402088:	6943      	ldr	r3, [r0, #20]
  40208a:	079b      	lsls	r3, r3, #30
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40208c:	bf43      	ittte	mi
  40208e:	f3c1 0108 	ubfxmi	r1, r1, #0, #9
  402092:	61c1      	strmi	r1, [r0, #28]
	return 0;
  402094:	2000      	movmi	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  402096:	2001      	movpl	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  402098:	4770      	bx	lr
  40209a:	bf00      	nop

0040209c <usart_getchar>:
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40209c:	6943      	ldr	r3, [r0, #20]
  40209e:	07db      	lsls	r3, r3, #31
  4020a0:	d5fc      	bpl.n	40209c <usart_getchar>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4020a2:	6983      	ldr	r3, [r0, #24]
  4020a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4020a8:	600b      	str	r3, [r1, #0]

	return 0;
}
  4020aa:	2000      	movs	r0, #0
  4020ac:	4770      	bx	lr
  4020ae:	bf00      	nop

004020b0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  4020b0:	b538      	push	{r3, r4, r5, lr}
	int i;
	Ctrl_status mem_status;

#if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S)
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  4020b2:	2100      	movs	r1, #0
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  4020b4:	4604      	mov	r4, r0
	int i;
	Ctrl_status mem_status;

#if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S)
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  4020b6:	4b0b      	ldr	r3, [pc, #44]	; (4020e4 <disk_initialize+0x34>)
  4020b8:	480b      	ldr	r0, [pc, #44]	; (4020e8 <disk_initialize+0x38>)
  4020ba:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  4020bc:	2c02      	cmp	r4, #2
  4020be:	d807      	bhi.n	4020d0 <disk_initialize+0x20>
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  4020c0:	4620      	mov	r0, r4
  4020c2:	4d0a      	ldr	r5, [pc, #40]	; (4020ec <disk_initialize+0x3c>)
  4020c4:	47a8      	blx	r5
		if (CTRL_BUSY != mem_status) {
  4020c6:	2803      	cmp	r0, #3
  4020c8:	d101      	bne.n	4020ce <disk_initialize+0x1e>
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  4020ca:	4620      	mov	r0, r4
  4020cc:	47a8      	blx	r5
		if (CTRL_BUSY != mem_status) {
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
  4020ce:	b108      	cbz	r0, 4020d4 <disk_initialize+0x24>
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  4020d0:	2001      	movs	r0, #1
  4020d2:	bd38      	pop	{r3, r4, r5, pc}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  4020d4:	4620      	mov	r0, r4
  4020d6:	4b06      	ldr	r3, [pc, #24]	; (4020f0 <disk_initialize+0x40>)
  4020d8:	4798      	blx	r3
  4020da:	2800      	cmp	r0, #0
		return STA_PROTECT;
  4020dc:	bf0c      	ite	eq
  4020de:	2000      	moveq	r0, #0
  4020e0:	2004      	movne	r0, #4
	}

	/* The memory should already be initialized */
	return 0;
}
  4020e2:	bd38      	pop	{r3, r4, r5, pc}
  4020e4:	00401f81 	.word	0x00401f81
  4020e8:	400e1460 	.word	0x400e1460
  4020ec:	00401955 	.word	0x00401955
  4020f0:	00401995 	.word	0x00401995

004020f4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  4020f4:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  4020f6:	4b04      	ldr	r3, [pc, #16]	; (402108 <disk_status+0x14>)
  4020f8:	4798      	blx	r3
  4020fa:	b118      	cbz	r0, 402104 <disk_status+0x10>
  4020fc:	2802      	cmp	r0, #2
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  4020fe:	bf0c      	ite	eq
  402100:	2003      	moveq	r0, #3
  402102:	2001      	movne	r0, #1
	}
}
  402104:	bd08      	pop	{r3, pc}
  402106:	bf00      	nop
  402108:	00401955 	.word	0x00401955

0040210c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  40210c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  402110:	4c18      	ldr	r4, [pc, #96]	; (402174 <disk_read+0x68>)
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  402112:	b083      	sub	sp, #12
  402114:	460e      	mov	r6, r1
  402116:	4615      	mov	r5, r2
  402118:	4698      	mov	r8, r3
  40211a:	4681      	mov	r9, r0
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  40211c:	47a0      	blx	r4
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  40211e:	4604      	mov	r4, r0
  402120:	b918      	cbnz	r0, 40212a <disk_read+0x1e>
		return RES_ERROR;
  402122:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  402124:	b003      	add	sp, #12
  402126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uc_sector_size == 0) {
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  40212a:	4b13      	ldr	r3, [pc, #76]	; (402178 <disk_read+0x6c>)
  40212c:	4648      	mov	r0, r9
  40212e:	a901      	add	r1, sp, #4
  402130:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
  402132:	9b01      	ldr	r3, [sp, #4]
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  402134:	fb18 f204 	smulbb	r2, r8, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  402138:	fb03 4304 	mla	r3, r3, r4, r4
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  40213c:	442a      	add	r2, r5
  40213e:	429a      	cmp	r2, r3
  402140:	d903      	bls.n	40214a <disk_read+0x3e>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  402142:	2004      	movs	r0, #4
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  402144:	b003      	add	sp, #12
  402146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  40214a:	f1b8 0f00 	cmp.w	r8, #0
  40214e:	d00f      	beq.n	402170 <disk_read+0x64>
  402150:	f8df b028 	ldr.w	fp, [pc, #40]	; 40217c <disk_read+0x70>
  402154:	ea4f 2a44 	mov.w	sl, r4, lsl #9
  402158:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  40215a:	4629      	mov	r1, r5
  40215c:	4632      	mov	r2, r6
  40215e:	4648      	mov	r0, r9
  402160:	47d8      	blx	fp
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  402162:	3701      	adds	r7, #1
  402164:	4425      	add	r5, r4
  402166:	4456      	add	r6, sl
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  402168:	2800      	cmp	r0, #0
  40216a:	d1da      	bne.n	402122 <disk_read+0x16>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  40216c:	4547      	cmp	r7, r8
  40216e:	d3f4      	bcc.n	40215a <disk_read+0x4e>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  402170:	2000      	movs	r0, #0
  402172:	e7d7      	b.n	402124 <disk_read+0x18>
  402174:	00401989 	.word	0x00401989
  402178:	0040196d 	.word	0x0040196d
  40217c:	004019b1 	.word	0x004019b1

00402180 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  402180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  402184:	4c18      	ldr	r4, [pc, #96]	; (4021e8 <disk_write+0x68>)
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  402186:	b083      	sub	sp, #12
  402188:	460e      	mov	r6, r1
  40218a:	4615      	mov	r5, r2
  40218c:	4698      	mov	r8, r3
  40218e:	4681      	mov	r9, r0
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  402190:	47a0      	blx	r4
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  402192:	4604      	mov	r4, r0
  402194:	b918      	cbnz	r0, 40219e <disk_write+0x1e>
		return RES_ERROR;
  402196:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  402198:	b003      	add	sp, #12
  40219a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uc_sector_size == 0) {
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  40219e:	4b13      	ldr	r3, [pc, #76]	; (4021ec <disk_write+0x6c>)
  4021a0:	4648      	mov	r0, r9
  4021a2:	a901      	add	r1, sp, #4
  4021a4:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
  4021a6:	9b01      	ldr	r3, [sp, #4]
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  4021a8:	fb18 f204 	smulbb	r2, r8, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  4021ac:	fb03 4304 	mla	r3, r3, r4, r4
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  4021b0:	442a      	add	r2, r5
  4021b2:	429a      	cmp	r2, r3
  4021b4:	d903      	bls.n	4021be <disk_write+0x3e>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  4021b6:	2004      	movs	r0, #4
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  4021b8:	b003      	add	sp, #12
  4021ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  4021be:	f1b8 0f00 	cmp.w	r8, #0
  4021c2:	d00f      	beq.n	4021e4 <disk_write+0x64>
  4021c4:	f8df b028 	ldr.w	fp, [pc, #40]	; 4021f0 <disk_write+0x70>
  4021c8:	ea4f 2a44 	mov.w	sl, r4, lsl #9
  4021cc:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  4021ce:	4629      	mov	r1, r5
  4021d0:	4632      	mov	r2, r6
  4021d2:	4648      	mov	r0, r9
  4021d4:	47d8      	blx	fp
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  4021d6:	3701      	adds	r7, #1
  4021d8:	4425      	add	r5, r4
  4021da:	4456      	add	r6, sl
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  4021dc:	2800      	cmp	r0, #0
  4021de:	d1da      	bne.n	402196 <disk_write+0x16>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  4021e0:	4547      	cmp	r7, r8
  4021e2:	d3f4      	bcc.n	4021ce <disk_write+0x4e>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  4021e4:	2000      	movs	r0, #0
  4021e6:	e7d7      	b.n	402198 <disk_write+0x18>
  4021e8:	00401989 	.word	0x00401989
  4021ec:	0040196d 	.word	0x0040196d
  4021f0:	004019d1 	.word	0x004019d1

004021f4 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  4021f4:	b510      	push	{r4, lr}
  4021f6:	4614      	mov	r4, r2
  4021f8:	b082      	sub	sp, #8
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  4021fa:	2903      	cmp	r1, #3
  4021fc:	d829      	bhi.n	402252 <disk_ioctl+0x5e>
  4021fe:	e8df f001 	tbb	[pc, r1]
  402202:	131c      	.short	0x131c
  402204:	0207      	.short	0x0207
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  402206:	2301      	movs	r3, #1
  402208:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  40220a:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  40220c:	b002      	add	sp, #8
  40220e:	bd10      	pop	{r4, pc}
	break;

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
  402210:	4b11      	ldr	r3, [pc, #68]	; (402258 <disk_ioctl+0x64>)
  402212:	4798      	blx	r3

		if ((uc_sector_size != SECTOR_SIZE_512) &&
  402214:	1e43      	subs	r3, r0, #1
  402216:	b2db      	uxtb	r3, r3
  402218:	2b01      	cmp	r3, #1
  40221a:	d916      	bls.n	40224a <disk_ioctl+0x56>
				(uc_sector_size != SECTOR_SIZE_1024) &&
  40221c:	2804      	cmp	r0, #4
  40221e:	d014      	beq.n	40224a <disk_ioctl+0x56>
				(uc_sector_size != SECTOR_SIZE_2048) &&
  402220:	2808      	cmp	r0, #8
  402222:	d012      	beq.n	40224a <disk_ioctl+0x56>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
  402224:	2001      	movs	r0, #1
  402226:	e7f1      	b.n	40220c <disk_ioctl+0x18>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
  402228:	a901      	add	r1, sp, #4
  40222a:	4b0c      	ldr	r3, [pc, #48]	; (40225c <disk_ioctl+0x68>)
  40222c:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
  40222e:	9b01      	ldr	r3, [sp, #4]

		res = RES_OK;
  402230:	2000      	movs	r0, #0
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);

		*(DWORD *)buff = ul_last_sector_num + 1;
  402232:	3301      	adds	r3, #1
  402234:	6023      	str	r3, [r4, #0]
	default:
		res = RES_PARERR;
	}

	return res;
}
  402236:	b002      	add	sp, #8
  402238:	bd10      	pop	{r4, pc}
	}
	break;

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  40223a:	4b09      	ldr	r3, [pc, #36]	; (402260 <disk_ioctl+0x6c>)
  40223c:	4798      	blx	r3
			res = RES_OK;
  40223e:	2800      	cmp	r0, #0
  402240:	bf14      	ite	ne
  402242:	2003      	movne	r0, #3
  402244:	2000      	moveq	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  402246:	b002      	add	sp, #8
  402248:	bd10      	pop	{r4, pc}
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  40224a:	2000      	movs	r0, #0
  40224c:	7020      	strb	r0, [r4, #0]
	default:
		res = RES_PARERR;
	}

	return res;
}
  40224e:	b002      	add	sp, #8
  402250:	bd10      	pop	{r4, pc}
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
  402252:	2004      	movs	r0, #4
  402254:	e7da      	b.n	40220c <disk_ioctl+0x18>
  402256:	bf00      	nop
  402258:	00401989 	.word	0x00401989
  40225c:	0040196d 	.word	0x0040196d
  402260:	00401955 	.word	0x00401955

00402264 <get_fattime>:
 * bit4:0    Second (0..59)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  402264:	b530      	push	{r4, r5, lr}
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  402266:	4c12      	ldr	r4, [pc, #72]	; (4022b0 <get_fattime+0x4c>)
  402268:	4d12      	ldr	r5, [pc, #72]	; (4022b4 <get_fattime+0x50>)
 * bit4:0    Second (0..59)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  40226a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  40226c:	4620      	mov	r0, r4
  40226e:	a903      	add	r1, sp, #12
  402270:	aa04      	add	r2, sp, #16
  402272:	ab05      	add	r3, sp, #20
  402274:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  402276:	ab09      	add	r3, sp, #36	; 0x24
  402278:	4620      	mov	r0, r4
  40227a:	9300      	str	r3, [sp, #0]
  40227c:	a906      	add	r1, sp, #24
  40227e:	aa07      	add	r2, sp, #28
  402280:	ab08      	add	r3, sp, #32
  402282:	4c0d      	ldr	r4, [pc, #52]	; (4022b8 <get_fattime+0x54>)
  402284:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  402286:	9d08      	ldr	r5, [sp, #32]
	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
  402288:	9c07      	ldr	r4, [sp, #28]
			| (ul_day << 16)
  40228a:	9805      	ldr	r0, [sp, #20]
			| (ul_hour << 11)
  40228c:	9903      	ldr	r1, [sp, #12]
			| (ul_minute << 5)
  40228e:	9a04      	ldr	r2, [sp, #16]

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);

	ul_time = ((ul_year - 1980) << 25)
  402290:	9b06      	ldr	r3, [sp, #24]
			| (ul_month << 21)
			| (ul_day << 16)
  402292:	042d      	lsls	r5, r5, #16
	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
  402294:	ea45 5444 	orr.w	r4, r5, r4, lsl #21
			| (ul_day << 16)
  402298:	4320      	orrs	r0, r4
			| (ul_hour << 11)
  40229a:	ea40 21c1 	orr.w	r1, r0, r1, lsl #11
			| (ul_minute << 5)
  40229e:	ea41 1042 	orr.w	r0, r1, r2, lsl #5

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);

	ul_time = ((ul_year - 1980) << 25)
  4022a2:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| (ul_second << 0);

	return ul_time;
}
  4022a6:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
  4022aa:	b00b      	add	sp, #44	; 0x2c
  4022ac:	bd30      	pop	{r4, r5, pc}
  4022ae:	bf00      	nop
  4022b0:	400e1460 	.word	0x400e1460
  4022b4:	00401f95 	.word	0x00401f95
  4022b8:	00401ff1 	.word	0x00401ff1

004022bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dj,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
  4022bc:	b470      	push	{r4, r5, r6}
  4022be:	4a19      	ldr	r2, [pc, #100]	; (402324 <chk_lock+0x68>)
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
  4022c0:	2600      	movs	r6, #0
  4022c2:	4633      	mov	r3, r6
		if (Files[i].fs) {	/* Existing entry */
  4022c4:	f852 4c08 	ldr.w	r4, [r2, #-8]
  4022c8:	b174      	cbz	r4, 4022e8 <chk_lock+0x2c>
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
  4022ca:	6805      	ldr	r5, [r0, #0]
  4022cc:	42ac      	cmp	r4, r5
  4022ce:	d010      	beq.n	4022f2 <chk_lock+0x36>
)
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
  4022d0:	3301      	adds	r3, #1
  4022d2:	2b03      	cmp	r3, #3
  4022d4:	f102 020c 	add.w	r2, r2, #12
  4022d8:	d1f4      	bne.n	4022c4 <chk_lock+0x8>
		} else {			/* Blank entry */
			be++;
		}
	}
	if (i == _FS_SHARE)	/* The file is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file? */
  4022da:	b93e      	cbnz	r6, 4022ec <chk_lock+0x30>
  4022dc:	2902      	cmp	r1, #2
  4022de:	bf14      	ite	ne
  4022e0:	2012      	movne	r0, #18
  4022e2:	2000      	moveq	r0, #0

	/* The file has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
  4022e4:	bc70      	pop	{r4, r5, r6}
  4022e6:	4770      	bx	lr
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
				Files[i].clu == dj->sclust &&
				Files[i].idx == dj->index) break;
		} else {			/* Blank entry */
			be++;
  4022e8:	3601      	adds	r6, #1
  4022ea:	e7f1      	b.n	4022d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_SHARE)	/* The file is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file? */
  4022ec:	2000      	movs	r0, #0

	/* The file has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
  4022ee:	bc70      	pop	{r4, r5, r6}
  4022f0:	4770      	bx	lr
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
  4022f2:	f852 5c04 	ldr.w	r5, [r2, #-4]
  4022f6:	6884      	ldr	r4, [r0, #8]
  4022f8:	42a5      	cmp	r5, r4
  4022fa:	d1e9      	bne.n	4022d0 <chk_lock+0x14>
				Files[i].clu == dj->sclust &&
  4022fc:	8815      	ldrh	r5, [r2, #0]
  4022fe:	88c4      	ldrh	r4, [r0, #6]
  402300:	42a5      	cmp	r5, r4
  402302:	d1e5      	bne.n	4022d0 <chk_lock+0x14>
	}
	if (i == _FS_SHARE)	/* The file is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file? */

	/* The file has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
  402304:	b109      	cbz	r1, 40230a <chk_lock+0x4e>
  402306:	2010      	movs	r0, #16
  402308:	e7ec      	b.n	4022e4 <chk_lock+0x28>
  40230a:	4a07      	ldr	r2, [pc, #28]	; (402328 <chk_lock+0x6c>)
  40230c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402310:	eb02 0383 	add.w	r3, r2, r3, lsl #2
}
  402314:	bc70      	pop	{r4, r5, r6}
	}
	if (i == _FS_SHARE)	/* The file is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file? */

	/* The file has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
  402316:	895b      	ldrh	r3, [r3, #10]
  402318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40231c:	bf14      	ite	ne
  40231e:	2000      	movne	r0, #0
  402320:	2010      	moveq	r0, #16
}
  402322:	4770      	bx	lr
  402324:	20000ee0 	.word	0x20000ee0
  402328:	20000ed8 	.word	0x20000ed8

0040232c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
  40232c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DWORD wsect;


	wsect = fs->winsect;
  402330:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  402332:	428d      	cmp	r5, r1
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
  402334:	4604      	mov	r4, r0
  402336:	460e      	mov	r6, r1
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
  402338:	d002      	beq.n	402340 <move_window+0x14>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
  40233a:	7903      	ldrb	r3, [r0, #4]
  40233c:	b973      	cbnz	r3, 40235c <move_window+0x30>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
  40233e:	b916      	cbnz	r6, 402346 <move_window+0x1a>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
  402340:	2000      	movs	r0, #0
  402342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  402346:	7860      	ldrb	r0, [r4, #1]
  402348:	4d17      	ldr	r5, [pc, #92]	; (4023a8 <move_window+0x7c>)
  40234a:	f104 0130 	add.w	r1, r4, #48	; 0x30
  40234e:	4632      	mov	r2, r6
  402350:	2301      	movs	r3, #1
  402352:	47a8      	blx	r5
  402354:	bb20      	cbnz	r0, 4023a0 <move_window+0x74>
				return FR_DISK_ERR;
			fs->winsect = sector;
  402356:	62e6      	str	r6, [r4, #44]	; 0x2c
		}
	}

	return FR_OK;
}
  402358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  40235c:	f100 0830 	add.w	r8, r0, #48	; 0x30
  402360:	4641      	mov	r1, r8
  402362:	7840      	ldrb	r0, [r0, #1]
  402364:	f8df 9044 	ldr.w	r9, [pc, #68]	; 4023ac <move_window+0x80>
  402368:	462a      	mov	r2, r5
  40236a:	2301      	movs	r3, #1
  40236c:	47c8      	blx	r9
  40236e:	b9b8      	cbnz	r0, 4023a0 <move_window+0x74>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  402370:	69e3      	ldr	r3, [r4, #28]
  402372:	6a22      	ldr	r2, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
  402374:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  402376:	441a      	add	r2, r3
  402378:	4295      	cmp	r5, r2
  40237a:	d2e0      	bcs.n	40233e <move_window+0x12>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  40237c:	78e7      	ldrb	r7, [r4, #3]
  40237e:	2f01      	cmp	r7, #1
  402380:	d801      	bhi.n	402386 <move_window+0x5a>
  402382:	e7dc      	b.n	40233e <move_window+0x12>
  402384:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
  402386:	441d      	add	r5, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402388:	3f01      	subs	r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
  40238a:	462a      	mov	r2, r5
  40238c:	7860      	ldrb	r0, [r4, #1]
  40238e:	4641      	mov	r1, r8
  402390:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402392:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
  402394:	47c8      	blx	r9
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402396:	2f01      	cmp	r7, #1
  402398:	d1f4      	bne.n	402384 <move_window+0x58>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
  40239a:	2e00      	cmp	r6, #0
  40239c:	d0d0      	beq.n	402340 <move_window+0x14>
  40239e:	e7d2      	b.n	402346 <move_window+0x1a>
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
  4023a0:	2001      	movs	r0, #1
  4023a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4023a6:	bf00      	nop
  4023a8:	0040210d 	.word	0x0040210d
  4023ac:	00402181 	.word	0x00402181

004023b0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
  4023b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FRESULT res;


	res = move_window(fs, 0);
  4023b4:	2100      	movs	r1, #0
  4023b6:	4b31      	ldr	r3, [pc, #196]	; (40247c <sync+0xcc>)
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
  4023b8:	4605      	mov	r5, r0
	FRESULT res;


	res = move_window(fs, 0);
  4023ba:	4798      	blx	r3
  4023bc:	4603      	mov	r3, r0
	if (res == FR_OK) {
  4023be:	b950      	cbnz	r0, 4023d6 <sync+0x26>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  4023c0:	782b      	ldrb	r3, [r5, #0]
  4023c2:	2b03      	cmp	r3, #3
  4023c4:	d00a      	beq.n	4023dc <sync+0x2c>
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  4023c6:	2100      	movs	r1, #0
  4023c8:	4b2d      	ldr	r3, [pc, #180]	; (402480 <sync+0xd0>)
  4023ca:	7868      	ldrb	r0, [r5, #1]
  4023cc:	460a      	mov	r2, r1
  4023ce:	4798      	blx	r3
  4023d0:	1c03      	adds	r3, r0, #0
  4023d2:	bf18      	it	ne
  4023d4:	2301      	movne	r3, #1
			res = FR_DISK_ERR;
	}

	return res;
}
  4023d6:	4618      	mov	r0, r3
  4023d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}


	res = move_window(fs, 0);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  4023dc:	796b      	ldrb	r3, [r5, #5]
  4023de:	2b00      	cmp	r3, #0
  4023e0:	d0f1      	beq.n	4023c6 <sync+0x16>
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
  4023e2:	f105 0130 	add.w	r1, r5, #48	; 0x30

	res = move_window(fs, 0);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
  4023e6:	62e8      	str	r0, [r5, #44]	; 0x2c
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
  4023e8:	460b      	mov	r3, r1
  4023ea:	f505 720c 	add.w	r2, r5, #560	; 0x230

	while (cnt--)
		*d++ = (BYTE)val;
  4023ee:	f803 0b01 	strb.w	r0, [r3], #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  4023f2:	4293      	cmp	r3, r2
		*d++ = (BYTE)val;
  4023f4:	f04f 0400 	mov.w	r4, #0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  4023f8:	d1f9      	bne.n	4023ee <sync+0x3e>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  4023fa:	692a      	ldr	r2, [r5, #16]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  4023fc:	68eb      	ldr	r3, [r5, #12]
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  4023fe:	f885 2218 	strb.w	r2, [r5, #536]	; 0x218
  402402:	f3c2 2b07 	ubfx	fp, r2, #8, #8
  402406:	ea4f 4a12 	mov.w	sl, r2, lsr #16
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  40240a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40240e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  402412:	2052      	movs	r0, #82	; 0x52
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  402414:	ea4f 6912 	mov.w	r9, r2, lsr #24
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  402418:	f3c3 2807 	ubfx	r8, r3, #8, #8
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  40241c:	2261      	movs	r2, #97	; 0x61
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  40241e:	26aa      	movs	r6, #170	; 0xaa
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  402420:	f885 b219 	strb.w	fp, [r5, #537]	; 0x219
  402424:	f885 a21a 	strb.w	sl, [r5, #538]	; 0x21a
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  402428:	f04f 0b41 	mov.w	fp, #65	; 0x41
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  40242c:	f04f 0a72 	mov.w	sl, #114	; 0x72
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  402430:	2755      	movs	r7, #85	; 0x55
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  402432:	f885 321c 	strb.w	r3, [r5, #540]	; 0x21c
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  402436:	f885 622f 	strb.w	r6, [r5, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  40243a:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
  40243e:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
  402442:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  402446:	f885 2217 	strb.w	r2, [r5, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  40244a:	f885 921b 	strb.w	r9, [r5, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  40244e:	f885 821d 	strb.w	r8, [r5, #541]	; 0x21d
  402452:	f885 c21e 	strb.w	ip, [r5, #542]	; 0x21e
  402456:	f885 e21f 	strb.w	lr, [r5, #543]	; 0x21f
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  40245a:	f885 722e 	strb.w	r7, [r5, #558]	; 0x22e
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  40245e:	f885 b033 	strb.w	fp, [r5, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  402462:	f885 b216 	strb.w	fp, [r5, #534]	; 0x216
  402466:	f885 a214 	strb.w	sl, [r5, #532]	; 0x214
  40246a:	f885 a215 	strb.w	sl, [r5, #533]	; 0x215
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  40246e:	7868      	ldrb	r0, [r5, #1]
  402470:	696a      	ldr	r2, [r5, #20]
  402472:	4e04      	ldr	r6, [pc, #16]	; (402484 <sync+0xd4>)
  402474:	2301      	movs	r3, #1
  402476:	47b0      	blx	r6
			fs->fsi_flag = 0;
  402478:	716c      	strb	r4, [r5, #5]
  40247a:	e7a4      	b.n	4023c6 <sync+0x16>
  40247c:	0040232d 	.word	0x0040232d
  402480:	004021f5 	.word	0x004021f5
  402484:	00402181 	.word	0x00402181

00402488 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
  402488:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  40248a:	b108      	cbz	r0, 402490 <validate+0x8>
  40248c:	7803      	ldrb	r3, [r0, #0]
  40248e:	b90b      	cbnz	r3, 402494 <validate+0xc>
		return FR_INVALID_OBJECT;
  402490:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  402492:	bd08      	pop	{r3, pc}
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  402494:	88c3      	ldrh	r3, [r0, #6]
  402496:	428b      	cmp	r3, r1
  402498:	d1fa      	bne.n	402490 <validate+0x8>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
  40249a:	4b04      	ldr	r3, [pc, #16]	; (4024ac <validate+0x24>)
  40249c:	7840      	ldrb	r0, [r0, #1]
  40249e:	4798      	blx	r3
  4024a0:	f010 0f01 	tst.w	r0, #1
		return FR_NOT_READY;
  4024a4:	bf0c      	ite	eq
  4024a6:	2000      	moveq	r0, #0
  4024a8:	2003      	movne	r0, #3
  4024aa:	bd08      	pop	{r3, pc}
  4024ac:	004020f5 	.word	0x004020f5

004024b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  4024b0:	b570      	push	{r4, r5, r6, lr}
  4024b2:	4604      	mov	r4, r0
  4024b4:	460a      	mov	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  4024b6:	7840      	ldrb	r0, [r0, #1]
  4024b8:	4d1d      	ldr	r5, [pc, #116]	; (402530 <check_fs+0x80>)
  4024ba:	f104 0130 	add.w	r1, r4, #48	; 0x30
  4024be:	2301      	movs	r3, #1
  4024c0:	47a8      	blx	r5
  4024c2:	b108      	cbz	r0, 4024c8 <check_fs+0x18>
		return 3;
  4024c4:	2003      	movs	r0, #3
  4024c6:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  4024c8:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
  4024cc:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
  4024d0:	4b18      	ldr	r3, [pc, #96]	; (402534 <check_fs+0x84>)
  4024d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4024d6:	b212      	sxth	r2, r2
  4024d8:	429a      	cmp	r2, r3
  4024da:	d001      	beq.n	4024e0 <check_fs+0x30>
		return 2;
  4024dc:	2002      	movs	r0, #2
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
  4024de:	bd70      	pop	{r4, r5, r6, pc}
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  4024e0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
  4024e4:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
  4024e8:	f894 5066 	ldrb.w	r5, [r4, #102]	; 0x66
  4024ec:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
  4024f0:	4b11      	ldr	r3, [pc, #68]	; (402538 <check_fs+0x88>)
  4024f2:	0412      	lsls	r2, r2, #16
  4024f4:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  4024f8:	432a      	orrs	r2, r5
  4024fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4024fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  402502:	429a      	cmp	r2, r3
  402504:	d0eb      	beq.n	4024de <check_fs+0x2e>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  402506:	f894 2084 	ldrb.w	r2, [r4, #132]	; 0x84
  40250a:	f894 5085 	ldrb.w	r5, [r4, #133]	; 0x85
  40250e:	f894 1082 	ldrb.w	r1, [r4, #130]	; 0x82
  402512:	f894 0083 	ldrb.w	r0, [r4, #131]	; 0x83
  402516:	0412      	lsls	r2, r2, #16
  402518:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  40251c:	430a      	orrs	r2, r1
  40251e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
  402522:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 0;
  402526:	1ac0      	subs	r0, r0, r3
  402528:	bf18      	it	ne
  40252a:	2001      	movne	r0, #1
  40252c:	bd70      	pop	{r4, r5, r6, pc}
  40252e:	bf00      	nop
  402530:	0040210d 	.word	0x0040210d
  402534:	ffffaa55 	.word	0xffffaa55
  402538:	00544146 	.word	0x00544146

0040253c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
  40253c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
  402540:	6803      	ldr	r3, [r0, #0]
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
  402542:	781c      	ldrb	r4, [r3, #0]
  402544:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  402546:	2c09      	cmp	r4, #9
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
  402548:	4615      	mov	r5, r2
	const TCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  40254a:	d802      	bhi.n	402552 <chk_mounted+0x16>
  40254c:	785a      	ldrb	r2, [r3, #1]
  40254e:	2a3a      	cmp	r2, #58	; 0x3a
  402550:	d015      	beq.n	40257e <chk_mounted+0x42>
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  402552:	4bbd      	ldr	r3, [pc, #756]	; (402848 <chk_mounted+0x30c>)
  402554:	681c      	ldr	r4, [r3, #0]
  402556:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  402558:	b174      	cbz	r4, 402578 <chk_mounted+0x3c>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
  40255a:	7823      	ldrb	r3, [r4, #0]
  40255c:	b1b3      	cbz	r3, 40258c <chk_mounted+0x50>
		stat = disk_status(fs->drv);
  40255e:	4bbb      	ldr	r3, [pc, #748]	; (40284c <chk_mounted+0x310>)
  402560:	7860      	ldrb	r0, [r4, #1]
  402562:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  402564:	07c3      	lsls	r3, r0, #31
  402566:	d411      	bmi.n	40258c <chk_mounted+0x50>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  402568:	b305      	cbz	r5, 4025ac <chk_mounted+0x70>
				return FR_WRITE_PROTECTED;
  40256a:	f010 0f04 	tst.w	r0, #4
  40256e:	bf0c      	ite	eq
  402570:	2000      	moveq	r0, #0
  402572:	200a      	movne	r0, #10
  402574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  402578:	200c      	movs	r0, #12
  40257a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
		p += 2; *path = p;				/* Return pointer to the path name */
  40257e:	3302      	adds	r3, #2
  402580:	6003      	str	r3, [r0, #0]
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  402582:	2c00      	cmp	r4, #0
  402584:	d0e5      	beq.n	402552 <chk_mounted+0x16>
		return FR_INVALID_DRIVE;
  402586:	200b      	movs	r0, #11
  402588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
  40258c:	2000      	movs	r0, #0
  40258e:	7020      	strb	r0, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  402590:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  402592:	4baf      	ldr	r3, [pc, #700]	; (402850 <chk_mounted+0x314>)
  402594:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  402596:	07c7      	lsls	r7, r0, #31
  402598:	d502      	bpl.n	4025a0 <chk_mounted+0x64>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  40259a:	2003      	movs	r0, #3
  40259c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  4025a0:	b13d      	cbz	r5, 4025b2 <chk_mounted+0x76>
  4025a2:	0746      	lsls	r6, r0, #29
  4025a4:	d505      	bpl.n	4025b2 <chk_mounted+0x76>
		return FR_WRITE_PROTECTED;
  4025a6:	200a      	movs	r0, #10
  4025a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->fs_type) {					/* If the logical drive has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
  4025ac:	4628      	mov	r0, r5
  4025ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  4025b2:	4620      	mov	r0, r4
  4025b4:	2100      	movs	r1, #0
  4025b6:	4da7      	ldr	r5, [pc, #668]	; (402854 <chk_mounted+0x318>)
  4025b8:	47a8      	blx	r5
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  4025ba:	2801      	cmp	r0, #1
  4025bc:	d007      	beq.n	4025ce <chk_mounted+0x92>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  4025be:	2600      	movs	r6, #0
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  4025c0:	2803      	cmp	r0, #3
  4025c2:	f000 80bf 	beq.w	402744 <chk_mounted+0x208>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  4025c6:	b1c0      	cbz	r0, 4025fa <chk_mounted+0xbe>
  4025c8:	200d      	movs	r0, #13
  4025ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
  4025ce:	f894 31f2 	ldrb.w	r3, [r4, #498]	; 0x1f2
  4025d2:	2b00      	cmp	r3, #0
  4025d4:	d0f8      	beq.n	4025c8 <chk_mounted+0x8c>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  4025d6:	f894 21f8 	ldrb.w	r2, [r4, #504]	; 0x1f8
  4025da:	f894 11f9 	ldrb.w	r1, [r4, #505]	; 0x1f9
  4025de:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
  4025e2:	f894 61f7 	ldrb.w	r6, [r4, #503]	; 0x1f7
  4025e6:	0412      	lsls	r2, r2, #16
  4025e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
  4025ec:	4313      	orrs	r3, r2
  4025ee:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  4025f2:	4631      	mov	r1, r6
  4025f4:	4620      	mov	r0, r4
  4025f6:	47a8      	blx	r5
  4025f8:	e7e2      	b.n	4025c0 <chk_mounted+0x84>
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  4025fa:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  4025fe:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
  402602:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40260a:	d1dd      	bne.n	4025c8 <chk_mounted+0x8c>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  40260c:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
  402610:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  402614:	ea53 2101 	orrs.w	r1, r3, r1, lsl #8
  402618:	d10d      	bne.n	402636 <chk_mounted+0xfa>
  40261a:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
  40261e:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
  402622:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
  402626:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
  40262a:	0412      	lsls	r2, r2, #16
  40262c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  402630:	4313      	orrs	r3, r2
  402632:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  402636:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;
  40263a:	61e1      	str	r1, [r4, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  40263c:	1e43      	subs	r3, r0, #1
  40263e:	2b01      	cmp	r3, #1

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  402640:	70e0      	strb	r0, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  402642:	d8c1      	bhi.n	4025c8 <chk_mounted+0x8c>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  402644:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  402648:	70a3      	strb	r3, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  40264a:	2b00      	cmp	r3, #0
  40264c:	d0bc      	beq.n	4025c8 <chk_mounted+0x8c>
  40264e:	1e5a      	subs	r2, r3, #1
  402650:	421a      	tst	r2, r3
  402652:	d1b9      	bne.n	4025c8 <chk_mounted+0x8c>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  402654:	f894 5042 	ldrb.w	r5, [r4, #66]	; 0x42
  402658:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  40265c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  402660:	0715      	lsls	r5, r2, #28
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  402662:	8122      	strh	r2, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  402664:	d1b0      	bne.n	4025c8 <chk_mounted+0x8c>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  402666:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
  40266a:	f894 5043 	ldrb.w	r5, [r4, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  40266e:	ea55 2507 	orrs.w	r5, r5, r7, lsl #8
  402672:	d10f      	bne.n	402694 <chk_mounted+0x158>
  402674:	f894 c052 	ldrb.w	ip, [r4, #82]	; 0x52
  402678:	f894 8053 	ldrb.w	r8, [r4, #83]	; 0x53
  40267c:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
  402680:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
  402684:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  402688:	ea4c 6c08 	orr.w	ip, ip, r8, lsl #24
  40268c:	ea4c 0505 	orr.w	r5, ip, r5
  402690:	ea45 2507 	orr.w	r5, r5, r7, lsl #8

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  402694:	f894 c03f 	ldrb.w	ip, [r4, #63]	; 0x3f
  402698:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  40269c:	ea57 270c 	orrs.w	r7, r7, ip, lsl #8
  4026a0:	d092      	beq.n	4025c8 <chk_mounted+0x8c>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
  4026a2:	fb00 fc01 	mul.w	ip, r0, r1

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  4026a6:	eb07 1012 	add.w	r0, r7, r2, lsr #4
  4026aa:	4460      	add	r0, ip
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  4026ac:	4285      	cmp	r5, r0
  4026ae:	d38b      	bcc.n	4025c8 <chk_mounted+0x8c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  4026b0:	1a2d      	subs	r5, r5, r0
  4026b2:	fbb5 f3f3 	udiv	r3, r5, r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  4026b6:	2b00      	cmp	r3, #0
  4026b8:	d086      	beq.n	4025c8 <chk_mounted+0x8c>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
  4026ba:	f640 75f5 	movw	r5, #4085	; 0xff5
  4026be:	42ab      	cmp	r3, r5
  4026c0:	f240 80c0 	bls.w	402844 <chk_mounted+0x308>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  4026c4:	f64f 75f5 	movw	r5, #65525	; 0xfff5
  4026c8:	42ab      	cmp	r3, r5
  4026ca:	f200 80a0 	bhi.w	40280e <chk_mounted+0x2d2>
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
  4026ce:	2502      	movs	r5, #2
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  4026d0:	3302      	adds	r3, #2
	fs->database = bsect + sysect;						/* Data start sector */
  4026d2:	4430      	add	r0, r6
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  4026d4:	4437      	add	r7, r6
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  4026d6:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  4026d8:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  4026da:	6227      	str	r7, [r4, #32]
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  4026dc:	2a00      	cmp	r2, #0
  4026de:	f43f af73 	beq.w	4025c8 <chk_mounted+0x8c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  4026e2:	4467      	add	r7, ip
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  4026e4:	2d02      	cmp	r5, #2
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  4026e6:	6267      	str	r7, [r4, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  4026e8:	f000 808f 	beq.w	40280a <chk_mounted+0x2ce>
  4026ec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  4026f0:	f003 0301 	and.w	r3, r3, #1
  4026f4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  4026f8:	2501      	movs	r5, #1
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  4026fa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  4026fe:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
  402702:	f4ff af61 	bcc.w	4025c8 <chk_mounted+0x8c>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
  402706:	f04f 32ff 	mov.w	r2, #4294967295
	fs->last_clust = 0;
  40270a:	2300      	movs	r3, #0

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
  40270c:	2d03      	cmp	r5, #3
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
  40270e:	6122      	str	r2, [r4, #16]
	fs->last_clust = 0;
  402710:	60e3      	str	r3, [r4, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
  402712:	d01a      	beq.n	40274a <chk_mounted+0x20e>
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->id = ++Fsid;		/* File system mount ID */
  402714:	4e50      	ldr	r6, [pc, #320]	; (402858 <chk_mounted+0x31c>)
  402716:	4951      	ldr	r1, [pc, #324]	; (40285c <chk_mounted+0x320>)
  402718:	8830      	ldrh	r0, [r6, #0]
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
  40271a:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  40271c:	3001      	adds	r0, #1
	fs->winsect = 0;		/* Invalidate sector cache */
  40271e:	2200      	movs	r2, #0
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->id = ++Fsid;		/* File system mount ID */
  402720:	b280      	uxth	r0, r0
  402722:	8030      	strh	r0, [r6, #0]
  402724:	80e0      	strh	r0, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
	fs->wflag = 0;
  402726:	4613      	mov	r3, r2
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->id = ++Fsid;		/* File system mount ID */
	fs->winsect = 0;		/* Invalidate sector cache */
  402728:	62e2      	str	r2, [r4, #44]	; 0x2c
	fs->wflag = 0;
  40272a:	7122      	strb	r2, [r4, #4]
)
{
	UINT i;

	for (i = 0; i < _FS_SHARE; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
  40272c:	4615      	mov	r5, r2
  40272e:	4608      	mov	r0, r1
  402730:	58ca      	ldr	r2, [r1, r3]
  402732:	4294      	cmp	r4, r2
  402734:	bf08      	it	eq
  402736:	501d      	streq	r5, [r3, r0]
  402738:	330c      	adds	r3, #12
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_SHARE; i++) {
  40273a:	2b24      	cmp	r3, #36	; 0x24
  40273c:	d1f8      	bne.n	402730 <chk_mounted+0x1f4>
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
  40273e:	2000      	movs	r0, #0
  402740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  402744:	2001      	movs	r0, #1
  402746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->last_clust = 0;

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  40274a:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
  40274e:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	fs->free_clust = 0xFFFFFFFF;
	fs->last_clust = 0;

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
  402752:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  402754:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  402758:	4432      	add	r2, r6
  40275a:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  40275c:	7860      	ldrb	r0, [r4, #1]
  40275e:	4e40      	ldr	r6, [pc, #256]	; (402860 <chk_mounted+0x324>)
  402760:	f104 0130 	add.w	r1, r4, #48	; 0x30
  402764:	2301      	movs	r3, #1
  402766:	47b0      	blx	r6
  402768:	2800      	cmp	r0, #0
  40276a:	d1d3      	bne.n	402714 <chk_mounted+0x1d8>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40276c:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
  402770:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  402774:	4b3b      	ldr	r3, [pc, #236]	; (402864 <chk_mounted+0x328>)
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  402776:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  40277a:	b212      	sxth	r2, r2
  40277c:	429a      	cmp	r2, r3
  40277e:	d1c9      	bne.n	402714 <chk_mounted+0x1d8>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  402780:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
  402784:	f894 6033 	ldrb.w	r6, [r4, #51]	; 0x33
  402788:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  40278c:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  402790:	4b35      	ldr	r3, [pc, #212]	; (402868 <chk_mounted+0x32c>)
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  402792:	0400      	lsls	r0, r0, #16
  402794:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
  402798:	4302      	orrs	r2, r0
  40279a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40279e:	429a      	cmp	r2, r3
  4027a0:	d1b8      	bne.n	402714 <chk_mounted+0x1d8>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  4027a2:	f894 0216 	ldrb.w	r0, [r4, #534]	; 0x216
  4027a6:	f894 6217 	ldrb.w	r6, [r4, #535]	; 0x217
  4027aa:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
  4027ae:	f894 1215 	ldrb.w	r1, [r4, #533]	; 0x215
  4027b2:	0400      	lsls	r0, r0, #16
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  4027b4:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  4027b8:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  4027bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  4027c0:	4302      	orrs	r2, r0
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  4027c2:	3320      	adds	r3, #32
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  4027c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  4027c8:	429a      	cmp	r2, r3
  4027ca:	d1a3      	bne.n	402714 <chk_mounted+0x1d8>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4027cc:	f894 721e 	ldrb.w	r7, [r4, #542]	; 0x21e
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4027d0:	f894 621a 	ldrb.w	r6, [r4, #538]	; 0x21a
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4027d4:	f894 821f 	ldrb.w	r8, [r4, #543]	; 0x21f
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4027d8:	f894 c21b 	ldrb.w	ip, [r4, #539]	; 0x21b
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4027dc:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4027e0:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4027e4:	f894 021d 	ldrb.w	r0, [r4, #541]	; 0x21d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4027e8:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4027ec:	043f      	lsls	r7, r7, #16
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4027ee:	0436      	lsls	r6, r6, #16
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4027f0:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4027f4:	ea46 660c 	orr.w	r6, r6, ip, lsl #24
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4027f8:	433a      	orrs	r2, r7
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4027fa:	4333      	orrs	r3, r6
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4027fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  402800:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  402804:	60e2      	str	r2, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  402806:	6123      	str	r3, [r4, #16]
  402808:	e784      	b.n	402714 <chk_mounted+0x1d8>
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  40280a:	005b      	lsls	r3, r3, #1
  40280c:	e775      	b.n	4026fa <chk_mounted+0x1be>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  40280e:	3302      	adds	r3, #2
	fs->database = bsect + sysect;						/* Data start sector */
  402810:	4430      	add	r0, r6
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  402812:	4437      	add	r7, r6
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402814:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  402816:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  402818:	6227      	str	r7, [r4, #32]
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  40281a:	2a00      	cmp	r2, #0
  40281c:	f47f aed4 	bne.w	4025c8 <chk_mounted+0x8c>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  402820:	f894 505e 	ldrb.w	r5, [r4, #94]	; 0x5e
  402824:	f894 705f 	ldrb.w	r7, [r4, #95]	; 0x5f
  402828:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
  40282c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  402830:	042d      	lsls	r5, r5, #16
  402832:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  402836:	432a      	orrs	r2, r5
  402838:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  40283c:	009b      	lsls	r3, r3, #2
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  40283e:	6262      	str	r2, [r4, #36]	; 0x24
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  402840:	2503      	movs	r5, #3
  402842:	e75a      	b.n	4026fa <chk_mounted+0x1be>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
  402844:	2501      	movs	r5, #1
  402846:	e743      	b.n	4026d0 <chk_mounted+0x194>
  402848:	20000efc 	.word	0x20000efc
  40284c:	004020f5 	.word	0x004020f5
  402850:	004020b1 	.word	0x004020b1
  402854:	004024b1 	.word	0x004024b1
  402858:	20000ed4 	.word	0x20000ed4
  40285c:	20000ed8 	.word	0x20000ed8
  402860:	0040210d 	.word	0x0040210d
  402864:	ffffaa55 	.word	0xffffaa55
  402868:	41615252 	.word	0x41615252

0040286c <get_fat.part.3>:
/*-----------------------------------------------------------------------*/
/* FAT access - Read value of a FAT entry                                */
/*-----------------------------------------------------------------------*/


static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
  40286c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;

	switch (fs->fs_type) {
  402870:	7803      	ldrb	r3, [r0, #0]
  402872:	2b02      	cmp	r3, #2
/*-----------------------------------------------------------------------*/
/* FAT access - Read value of a FAT entry                                */
/*-----------------------------------------------------------------------*/


static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
  402874:	4604      	mov	r4, r0
  402876:	460d      	mov	r5, r1


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;

	switch (fs->fs_type) {
  402878:	d048      	beq.n	40290c <get_fat.part.3+0xa0>
  40287a:	2b03      	cmp	r3, #3
  40287c:	d029      	beq.n	4028d2 <get_fat.part.3+0x66>
  40287e:	2b01      	cmp	r3, #1
  402880:	d003      	beq.n	40288a <get_fat.part.3+0x1e>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402882:	f04f 30ff 	mov.w	r0, #4294967295
}
  402886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40288a:	6a01      	ldr	r1, [r0, #32]
  40288c:	4f29      	ldr	r7, [pc, #164]	; (402934 <get_fat.part.3+0xc8>)
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
  40288e:	eb05 0655 	add.w	r6, r5, r5, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  402892:	eb01 2156 	add.w	r1, r1, r6, lsr #9
  402896:	47b8      	blx	r7
  402898:	2800      	cmp	r0, #0
  40289a:	d1f2      	bne.n	402882 <get_fat.part.3+0x16>
		wc = fs->win[bc % SS(fs)]; bc++;
  40289c:	f3c6 0308 	ubfx	r3, r6, #0, #9
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  4028a0:	6a21      	ldr	r1, [r4, #32]

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
  4028a2:	4423      	add	r3, r4
  4028a4:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  4028a6:	eb01 2156 	add.w	r1, r1, r6, lsr #9
  4028aa:	4620      	mov	r0, r4

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
  4028ac:	f893 8030 	ldrb.w	r8, [r3, #48]	; 0x30
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  4028b0:	47b8      	blx	r7
  4028b2:	2800      	cmp	r0, #0
  4028b4:	d1e5      	bne.n	402882 <get_fat.part.3+0x16>
		wc |= fs->win[bc % SS(fs)] << 8;
  4028b6:	f3c6 0608 	ubfx	r6, r6, #0, #9
  4028ba:	4434      	add	r4, r6
  4028bc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  4028c0:	ea48 2003 	orr.w	r0, r8, r3, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  4028c4:	07eb      	lsls	r3, r5, #31
  4028c6:	bf4c      	ite	mi
  4028c8:	0900      	lsrmi	r0, r0, #4
  4028ca:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
  4028ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
		p = &fs->win[clst * 2 % SS(fs)];
		return LD_WORD(p);

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  4028d2:	6a01      	ldr	r1, [r0, #32]
  4028d4:	4b17      	ldr	r3, [pc, #92]	; (402934 <get_fat.part.3+0xc8>)
  4028d6:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
  4028da:	4798      	blx	r3
  4028dc:	2800      	cmp	r0, #0
  4028de:	d1d0      	bne.n	402882 <get_fat.part.3+0x16>
		p = &fs->win[clst * 4 % SS(fs)];
  4028e0:	00ad      	lsls	r5, r5, #2
  4028e2:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  4028e6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4028ea:	4423      	add	r3, r4
		return LD_DWORD(p) & 0x0FFFFFFF;
  4028ec:	442c      	add	r4, r5
  4028ee:	78d8      	ldrb	r0, [r3, #3]
  4028f0:	7899      	ldrb	r1, [r3, #2]
  4028f2:	785a      	ldrb	r2, [r3, #1]
  4028f4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  4028f8:	0600      	lsls	r0, r0, #24
  4028fa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
  4028fe:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
  402902:	4318      	orrs	r0, r3
  402904:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  402908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  40290c:	6a01      	ldr	r1, [r0, #32]
  40290e:	4b09      	ldr	r3, [pc, #36]	; (402934 <get_fat.part.3+0xc8>)
  402910:	eb01 2115 	add.w	r1, r1, r5, lsr #8
  402914:	4798      	blx	r3
  402916:	2800      	cmp	r0, #0
  402918:	d1b3      	bne.n	402882 <get_fat.part.3+0x16>
		p = &fs->win[clst * 2 % SS(fs)];
  40291a:	006d      	lsls	r5, r5, #1
  40291c:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
		return LD_WORD(p);
  402920:	1963      	adds	r3, r4, r5
  402922:	461c      	mov	r4, r3
  402924:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  402928:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
  40292c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  402930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402934:	0040232d 	.word	0x0040232d

00402938 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
  402938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DWORD clst;
	WORD ic;


	dj->index = idx;
	clst = dj->sclust;
  40293a:	6883      	ldr	r3, [r0, #8]
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
  40293c:	4604      	mov	r4, r0
	WORD ic;


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  40293e:	2b01      	cmp	r3, #1
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
  402940:	460d      	mov	r5, r1
	DWORD clst;
	WORD ic;


	dj->index = idx;
  402942:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  402944:	d003      	beq.n	40294e <dir_sdi+0x16>
  402946:	6800      	ldr	r0, [r0, #0]
  402948:	6982      	ldr	r2, [r0, #24]
  40294a:	4293      	cmp	r3, r2
  40294c:	d301      	bcc.n	402952 <dir_sdi+0x1a>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
  40294e:	2002      	movs	r0, #2
  402950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  402952:	b9b3      	cbnz	r3, 402982 <dir_sdi+0x4a>
  402954:	7803      	ldrb	r3, [r0, #0]
  402956:	2b03      	cmp	r3, #3
  402958:	d010      	beq.n	40297c <dir_sdi+0x44>
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
  40295a:	2300      	movs	r3, #0
  40295c:	60e3      	str	r3, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  40295e:	8903      	ldrh	r3, [r0, #8]
  402960:	42ab      	cmp	r3, r5
  402962:	d9f4      	bls.n	40294e <dir_sdi+0x16>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402964:	6a43      	ldr	r3, [r0, #36]	; 0x24
  402966:	eb03 1315 	add.w	r3, r3, r5, lsr #4
  40296a:	6123      	str	r3, [r4, #16]
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  40296c:	f005 050f 	and.w	r5, r5, #15
  402970:	eb00 1045 	add.w	r0, r0, r5, lsl #5
  402974:	3030      	adds	r0, #48	; 0x30
  402976:	6160      	str	r0, [r4, #20]

	return FR_OK;	/* Seek succeeded */
  402978:	2000      	movs	r0, #0
  40297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dj->fs->dirbase;
  40297c:	6a43      	ldr	r3, [r0, #36]	; 0x24

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  40297e:	2b00      	cmp	r3, #0
  402980:	d0eb      	beq.n	40295a <dir_sdi+0x22>
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  402982:	7886      	ldrb	r6, [r0, #2]
  402984:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  402986:	42b5      	cmp	r5, r6
  402988:	d319      	bcc.n	4029be <dir_sdi+0x86>
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  40298a:	2b01      	cmp	r3, #1
  40298c:	d9df      	bls.n	40294e <dir_sdi+0x16>
  40298e:	1bad      	subs	r5, r5, r6
  402990:	429a      	cmp	r2, r3
  402992:	b2ad      	uxth	r5, r5
  402994:	d9db      	bls.n	40294e <dir_sdi+0x16>
  402996:	4f11      	ldr	r7, [pc, #68]	; (4029dc <dir_sdi+0xa4>)
  402998:	e008      	b.n	4029ac <dir_sdi+0x74>
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  40299a:	2801      	cmp	r0, #1
  40299c:	d9d7      	bls.n	40294e <dir_sdi+0x16>
  40299e:	6820      	ldr	r0, [r4, #0]
  4029a0:	6982      	ldr	r2, [r0, #24]
  4029a2:	429a      	cmp	r2, r3
  4029a4:	d9d3      	bls.n	40294e <dir_sdi+0x16>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
  4029a6:	42ae      	cmp	r6, r5
  4029a8:	d809      	bhi.n	4029be <dir_sdi+0x86>
  4029aa:	460d      	mov	r5, r1
  4029ac:	4619      	mov	r1, r3
  4029ae:	47b8      	blx	r7
  4029b0:	1ba9      	subs	r1, r5, r6
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  4029b2:	1c42      	adds	r2, r0, #1
  4029b4:	4603      	mov	r3, r0
  4029b6:	b289      	uxth	r1, r1
  4029b8:	d1ef      	bne.n	40299a <dir_sdi+0x62>
  4029ba:	2001      	movs	r0, #1
  4029bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
  4029be:	60e3      	str	r3, [r4, #12]
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4029c0:	6982      	ldr	r2, [r0, #24]
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  4029c2:	3b02      	subs	r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4029c4:	3a02      	subs	r2, #2
  4029c6:	4293      	cmp	r3, r2
	return clst * fs->csize + fs->database;
  4029c8:	bf3b      	ittet	cc
  4029ca:	7881      	ldrbcc	r1, [r0, #2]
  4029cc:	6a82      	ldrcc	r2, [r0, #40]	; 0x28
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4029ce:	2300      	movcs	r3, #0
	return clst * fs->csize + fs->database;
  4029d0:	fb01 2303 	mlacc	r3, r1, r3, r2
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  4029d4:	eb03 1315 	add.w	r3, r3, r5, lsr #4
  4029d8:	6123      	str	r3, [r4, #16]
  4029da:	e7c7      	b.n	40296c <dir_sdi+0x34>
  4029dc:	0040286d 	.word	0x0040286d

004029e0 <put_fat.part.4>:
/*-----------------------------------------------------------------------*/
/* FAT access - Change value of a FAT entry                              */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY

static FRESULT put_fat (
  4029e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
  4029e4:	7803      	ldrb	r3, [r0, #0]
  4029e6:	2b02      	cmp	r3, #2
/*-----------------------------------------------------------------------*/
/* FAT access - Change value of a FAT entry                              */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY

static FRESULT put_fat (
  4029e8:	4604      	mov	r4, r0
  4029ea:	460d      	mov	r5, r1
  4029ec:	4616      	mov	r6, r2

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
  4029ee:	d05b      	beq.n	402aa8 <put_fat.part.4+0xc8>
  4029f0:	2b03      	cmp	r3, #3
  4029f2:	d039      	beq.n	402a68 <put_fat.part.4+0x88>
  4029f4:	2b01      	cmp	r3, #1
  4029f6:	d004      	beq.n	402a02 <put_fat.part.4+0x22>
			val |= LD_DWORD(p) & 0xF0000000;
			ST_DWORD(p, val);
			break;

		default :
			res = FR_INT_ERR;
  4029f8:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
  4029fa:	2301      	movs	r3, #1
  4029fc:	7123      	strb	r3, [r4, #4]
	}

	return res;
}
  4029fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	} else {
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402a02:	6a01      	ldr	r1, [r0, #32]
  402a04:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 402adc <put_fat.part.4+0xfc>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
  402a08:	eb05 0755 	add.w	r7, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402a0c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402a10:	47c0      	blx	r8
			if (res != FR_OK) break;
  402a12:	2800      	cmp	r0, #0
  402a14:	d1f1      	bne.n	4029fa <put_fat.part.4+0x1a>
			p = &fs->win[bc % SS(fs)];
  402a16:	f3c7 0308 	ubfx	r3, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402a1a:	f015 0501 	ands.w	r5, r5, #1
  402a1e:	4423      	add	r3, r4
  402a20:	b2f2      	uxtb	r2, r6
  402a22:	d006      	beq.n	402a32 <put_fat.part.4+0x52>
  402a24:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
  402a28:	f001 010f 	and.w	r1, r1, #15
  402a2c:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
  402a30:	b2d2      	uxtb	r2, r2
  402a32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402a36:	6a21      	ldr	r1, [r4, #32]
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
  402a38:	3701      	adds	r7, #1
			fs->wflag = 1;
  402a3a:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402a3c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
  402a40:	7123      	strb	r3, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402a42:	4620      	mov	r0, r4
  402a44:	47c0      	blx	r8
			if (res != FR_OK) break;
  402a46:	2800      	cmp	r0, #0
  402a48:	d1d7      	bne.n	4029fa <put_fat.part.4+0x1a>
			p = &fs->win[bc % SS(fs)];
  402a4a:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402a4e:	2d00      	cmp	r5, #0
  402a50:	d13f      	bne.n	402ad2 <put_fat.part.4+0xf2>
  402a52:	4427      	add	r7, r4
  402a54:	f3c6 2603 	ubfx	r6, r6, #8, #4
  402a58:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
  402a5c:	f023 030f 	bic.w	r3, r3, #15
  402a60:	431e      	orrs	r6, r3
  402a62:	f887 6030 	strb.w	r6, [r7, #48]	; 0x30
  402a66:	e7c8      	b.n	4029fa <put_fat.part.4+0x1a>
			p = &fs->win[clst * 2 % SS(fs)];
			ST_WORD(p, (WORD)val);
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  402a68:	6a01      	ldr	r1, [r0, #32]
  402a6a:	4b1c      	ldr	r3, [pc, #112]	; (402adc <put_fat.part.4+0xfc>)
  402a6c:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
  402a70:	4798      	blx	r3
			if (res != FR_OK) break;
  402a72:	2800      	cmp	r0, #0
  402a74:	d1c1      	bne.n	4029fa <put_fat.part.4+0x1a>
			p = &fs->win[clst * 4 % SS(fs)];
  402a76:	00ad      	lsls	r5, r5, #2
  402a78:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  402a7c:	f105 0330 	add.w	r3, r5, #48	; 0x30
  402a80:	4423      	add	r3, r4
			val |= LD_DWORD(p) & 0xF0000000;
  402a82:	4425      	add	r5, r4
  402a84:	78da      	ldrb	r2, [r3, #3]
  402a86:	0612      	lsls	r2, r2, #24
  402a88:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  402a8c:	4316      	orrs	r6, r2
			ST_DWORD(p, val);
  402a8e:	f3c6 2707 	ubfx	r7, r6, #8, #8
  402a92:	0c31      	lsrs	r1, r6, #16
  402a94:	0e32      	lsrs	r2, r6, #24
  402a96:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
  402a9a:	705f      	strb	r7, [r3, #1]
  402a9c:	7099      	strb	r1, [r3, #2]
  402a9e:	70da      	strb	r2, [r3, #3]
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
  402aa0:	2301      	movs	r3, #1
  402aa2:	7123      	strb	r3, [r4, #4]
	}

	return res;
}
  402aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  402aa8:	6a01      	ldr	r1, [r0, #32]
  402aaa:	4b0c      	ldr	r3, [pc, #48]	; (402adc <put_fat.part.4+0xfc>)
  402aac:	eb01 2115 	add.w	r1, r1, r5, lsr #8
  402ab0:	4798      	blx	r3
			if (res != FR_OK) break;
  402ab2:	2800      	cmp	r0, #0
  402ab4:	d1a1      	bne.n	4029fa <put_fat.part.4+0x1a>
			p = &fs->win[clst * 2 % SS(fs)];
  402ab6:	006d      	lsls	r5, r5, #1
  402ab8:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  402abc:	1962      	adds	r2, r4, r5
  402abe:	f3c6 2307 	ubfx	r3, r6, #8, #8
  402ac2:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
  402ac6:	2301      	movs	r3, #1

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
			p = &fs->win[clst * 2 % SS(fs)];
			ST_WORD(p, (WORD)val);
  402ac8:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
  402acc:	7123      	strb	r3, [r4, #4]
	}

	return res;
}
  402ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402ad2:	f3c6 1607 	ubfx	r6, r6, #4, #8
  402ad6:	4427      	add	r7, r4
  402ad8:	e7c3      	b.n	402a62 <put_fat.part.4+0x82>
  402ada:	bf00      	nop
  402adc:	0040232d 	.word	0x0040232d

00402ae0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
  402ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402ae4:	4605      	mov	r5, r0
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
  402ae6:	4688      	mov	r8, r1
  402ae8:	bb01      	cbnz	r1, 402b2c <create_chain+0x4c>
		scl = fs->last_clust;			/* Get suggested start point */
  402aea:	68c6      	ldr	r6, [r0, #12]
  402aec:	6983      	ldr	r3, [r0, #24]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402aee:	b35e      	cbz	r6, 402b48 <create_chain+0x68>
  402af0:	429e      	cmp	r6, r3
  402af2:	bf28      	it	cs
  402af4:	2601      	movcs	r6, #1
  402af6:	4f2e      	ldr	r7, [pc, #184]	; (402bb0 <create_chain+0xd0>)
  402af8:	4634      	mov	r4, r6
  402afa:	e00f      	b.n	402b1c <create_chain+0x3c>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
  402afc:	2e01      	cmp	r6, #1
  402afe:	d925      	bls.n	402b4c <create_chain+0x6c>
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402b00:	2b02      	cmp	r3, #2
  402b02:	d910      	bls.n	402b26 <create_chain+0x46>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
  402b04:	2402      	movs	r4, #2
  402b06:	4628      	mov	r0, r5
  402b08:	4621      	mov	r1, r4
  402b0a:	47b8      	blx	r7
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
  402b0c:	b338      	cbz	r0, 402b5e <create_chain+0x7e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  402b0e:	1c41      	adds	r1, r0, #1
  402b10:	d021      	beq.n	402b56 <create_chain+0x76>
  402b12:	2801      	cmp	r0, #1
  402b14:	d007      	beq.n	402b26 <create_chain+0x46>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
  402b16:	42a6      	cmp	r6, r4
  402b18:	d018      	beq.n	402b4c <create_chain+0x6c>
  402b1a:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
  402b1c:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  402b1e:	429c      	cmp	r4, r3
  402b20:	d2ec      	bcs.n	402afc <create_chain+0x1c>
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402b22:	2c01      	cmp	r4, #1
  402b24:	d8ef      	bhi.n	402b06 <create_chain+0x26>
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  402b26:	2001      	movs	r0, #1
	}

	return ncl;		/* Return new cluster number or error code */
}
  402b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402b2c:	2901      	cmp	r1, #1
  402b2e:	d9fa      	bls.n	402b26 <create_chain+0x46>
  402b30:	6983      	ldr	r3, [r0, #24]
  402b32:	4299      	cmp	r1, r3
  402b34:	d2f7      	bcs.n	402b26 <create_chain+0x46>
  402b36:	4b1e      	ldr	r3, [pc, #120]	; (402bb0 <create_chain+0xd0>)
  402b38:	4798      	blx	r3
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
  402b3a:	2801      	cmp	r0, #1
  402b3c:	d9f3      	bls.n	402b26 <create_chain+0x46>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  402b3e:	69ab      	ldr	r3, [r5, #24]
  402b40:	4283      	cmp	r3, r0
  402b42:	d8f1      	bhi.n	402b28 <create_chain+0x48>
  402b44:	4646      	mov	r6, r8
  402b46:	e7d6      	b.n	402af6 <create_chain+0x16>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402b48:	2601      	movs	r6, #1
  402b4a:	e7d4      	b.n	402af6 <create_chain+0x16>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
  402b4c:	2000      	movs	r0, #0
  402b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  402b52:	2801      	cmp	r0, #1
  402b54:	d1e7      	bne.n	402b26 <create_chain+0x46>
  402b56:	f04f 30ff 	mov.w	r0, #4294967295
  402b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402b5e:	69ab      	ldr	r3, [r5, #24]
  402b60:	42a3      	cmp	r3, r4
  402b62:	d9e0      	bls.n	402b26 <create_chain+0x46>
  402b64:	4628      	mov	r0, r5
  402b66:	4621      	mov	r1, r4
  402b68:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  402b6c:	4e11      	ldr	r6, [pc, #68]	; (402bb4 <create_chain+0xd4>)
  402b6e:	47b0      	blx	r6
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
  402b70:	2800      	cmp	r0, #0
  402b72:	d1ee      	bne.n	402b52 <create_chain+0x72>
  402b74:	f1b8 0f00 	cmp.w	r8, #0
  402b78:	d00b      	beq.n	402b92 <create_chain+0xb2>
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402b7a:	f1b8 0f01 	cmp.w	r8, #1
  402b7e:	d9d2      	bls.n	402b26 <create_chain+0x46>
  402b80:	69ab      	ldr	r3, [r5, #24]
  402b82:	4598      	cmp	r8, r3
  402b84:	d2cf      	bcs.n	402b26 <create_chain+0x46>
  402b86:	4641      	mov	r1, r8
  402b88:	4628      	mov	r0, r5
  402b8a:	4622      	mov	r2, r4
  402b8c:	47b0      	blx	r6

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
  402b8e:	2800      	cmp	r0, #0
  402b90:	d1df      	bne.n	402b52 <create_chain+0x72>
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
  402b92:	692b      	ldr	r3, [r5, #16]
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
  402b94:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  402b96:	1c5a      	adds	r2, r3, #1
  402b98:	d006      	beq.n	402ba8 <create_chain+0xc8>
			fs->free_clust--;
  402b9a:	3b01      	subs	r3, #1
			fs->fsi_flag = 1;
  402b9c:	2201      	movs	r2, #1
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
  402b9e:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  402ba0:	716a      	strb	r2, [r5, #5]
  402ba2:	4620      	mov	r0, r4
  402ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ba8:	4620      	mov	r0, r4
  402baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402bae:	bf00      	nop
  402bb0:	0040286d 	.word	0x0040286d
  402bb4:	004029e1 	.word	0x004029e1

00402bb8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  402bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
  402bbc:	88c5      	ldrh	r5, [r0, #6]
  402bbe:	3501      	adds	r5, #1
  402bc0:	b2ad      	uxth	r5, r5
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  402bc2:	4604      	mov	r4, r0
  402bc4:	460e      	mov	r6, r1
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  402bc6:	b915      	cbnz	r5, 402bce <dir_next+0x16>
		return FR_NO_FILE;
  402bc8:	2004      	movs	r0, #4
  402bca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  402bce:	6903      	ldr	r3, [r0, #16]
  402bd0:	2b00      	cmp	r3, #0
  402bd2:	d0f9      	beq.n	402bc8 <dir_next+0x10>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  402bd4:	f015 070f 	ands.w	r7, r5, #15
  402bd8:	d008      	beq.n	402bec <dir_next+0x34>
  402bda:	6800      	ldr	r0, [r0, #0]
			}
		}
	}

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  402bdc:	eb00 1347 	add.w	r3, r0, r7, lsl #5
  402be0:	3330      	adds	r3, #48	; 0x30
  402be2:	6163      	str	r3, [r4, #20]
				dj->sect = clust2sect(dj->fs, clst);
			}
		}
	}

	dj->index = i;
  402be4:	80e5      	strh	r5, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
  402be6:	2000      	movs	r0, #0
  402be8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
  402bec:	68c1      	ldr	r1, [r0, #12]
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */
  402bee:	3301      	adds	r3, #1
  402bf0:	6103      	str	r3, [r0, #16]

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  402bf2:	6800      	ldr	r0, [r0, #0]
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
  402bf4:	b161      	cbz	r1, 402c10 <dir_next+0x58>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  402bf6:	7882      	ldrb	r2, [r0, #2]
  402bf8:	3a01      	subs	r2, #1
  402bfa:	ea12 1215 	ands.w	r2, r2, r5, lsr #4
  402bfe:	d1ed      	bne.n	402bdc <dir_next+0x24>
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402c00:	2901      	cmp	r1, #1
  402c02:	d902      	bls.n	402c0a <dir_next+0x52>
  402c04:	6982      	ldr	r2, [r0, #24]
  402c06:	4291      	cmp	r1, r2
  402c08:	d306      	bcc.n	402c18 <dir_next+0x60>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
  402c0a:	2002      	movs	r0, #2
  402c0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  402c10:	8902      	ldrh	r2, [r0, #8]
  402c12:	42aa      	cmp	r2, r5
  402c14:	d9d8      	bls.n	402bc8 <dir_next+0x10>
  402c16:	e7e1      	b.n	402bdc <dir_next+0x24>
  402c18:	4b34      	ldr	r3, [pc, #208]	; (402cec <dir_next+0x134>)
  402c1a:	4798      	blx	r3
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
  402c1c:	2801      	cmp	r0, #1
  402c1e:	4680      	mov	r8, r0
  402c20:	d9f3      	bls.n	402c0a <dir_next+0x52>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402c22:	f1b0 3fff 	cmp.w	r0, #4294967295
  402c26:	d01c      	beq.n	402c62 <dir_next+0xaa>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  402c28:	6820      	ldr	r0, [r4, #0]
  402c2a:	6982      	ldr	r2, [r0, #24]
  402c2c:	4542      	cmp	r2, r8
  402c2e:	d90e      	bls.n	402c4e <dir_next+0x96>
  402c30:	f1a8 0602 	sub.w	r6, r8, #2
					dj->fs->winsect -= c;						/* Rewind window address */
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
  402c34:	f8c4 800c 	str.w	r8, [r4, #12]
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  402c38:	6982      	ldr	r2, [r0, #24]
  402c3a:	3a02      	subs	r2, #2
  402c3c:	4296      	cmp	r6, r2
	return clst * fs->csize + fs->database;
  402c3e:	bf3b      	ittet	cc
  402c40:	7881      	ldrbcc	r1, [r0, #2]
  402c42:	6a82      	ldrcc	r2, [r0, #40]	; 0x28
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  402c44:	2600      	movcs	r6, #0
	return clst * fs->csize + fs->database;
  402c46:	fb01 2606 	mlacc	r6, r1, r6, r2
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
  402c4a:	6126      	str	r6, [r4, #16]
  402c4c:	e7c6      	b.n	402bdc <dir_next+0x24>
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  402c4e:	2e00      	cmp	r6, #0
  402c50:	d0ba      	beq.n	402bc8 <dir_next+0x10>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  402c52:	68e1      	ldr	r1, [r4, #12]
  402c54:	4b26      	ldr	r3, [pc, #152]	; (402cf0 <dir_next+0x138>)
  402c56:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  402c58:	4680      	mov	r8, r0
  402c5a:	b928      	cbnz	r0, 402c68 <dir_next+0xb0>
  402c5c:	2007      	movs	r0, #7

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
  402c5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402c62:	2001      	movs	r0, #1
  402c64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
					if (clst == 1) return FR_INT_ERR;
  402c68:	2801      	cmp	r0, #1
  402c6a:	d0ce      	beq.n	402c0a <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402c6c:	f1b0 3fff 	cmp.w	r0, #4294967295
  402c70:	d0f7      	beq.n	402c62 <dir_next+0xaa>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  402c72:	6820      	ldr	r0, [r4, #0]
  402c74:	f8df 907c 	ldr.w	r9, [pc, #124]	; 402cf4 <dir_next+0x13c>
  402c78:	2100      	movs	r1, #0
  402c7a:	47c8      	blx	r9
  402c7c:	2800      	cmp	r0, #0
  402c7e:	d1f0      	bne.n	402c62 <dir_next+0xaa>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  402c80:	6822      	ldr	r2, [r4, #0]
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
  402c82:	4601      	mov	r1, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  402c84:	f102 0330 	add.w	r3, r2, #48	; 0x30
  402c88:	f502 720c 	add.w	r2, r2, #560	; 0x230
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
  402c8c:	f803 1b01 	strb.w	r1, [r3], #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  402c90:	4293      	cmp	r3, r2
  402c92:	d1fb      	bne.n	402c8c <dir_next+0xd4>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  402c94:	6823      	ldr	r3, [r4, #0]
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  402c96:	699a      	ldr	r2, [r3, #24]
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  402c98:	f1a8 0602 	sub.w	r6, r8, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  402c9c:	3a02      	subs	r2, #2
  402c9e:	4296      	cmp	r6, r2
	return clst * fs->csize + fs->database;
  402ca0:	bf3b      	ittet	cc
  402ca2:	6a9a      	ldrcc	r2, [r3, #40]	; 0x28
  402ca4:	7899      	ldrbcc	r1, [r3, #2]
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  402ca6:	2200      	movcs	r2, #0
	return clst * fs->csize + fs->database;
  402ca8:	fb01 2206 	mlacc	r2, r1, r6, r2
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  402cac:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402cae:	f04f 0a00 	mov.w	sl, #0
						dj->fs->wflag = 1;
  402cb2:	f04f 0b01 	mov.w	fp, #1
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402cb6:	e00b      	b.n	402cd0 <dir_next+0x118>
						dj->fs->wflag = 1;
  402cb8:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402cbc:	6820      	ldr	r0, [r4, #0]
  402cbe:	47c8      	blx	r9
  402cc0:	f10a 0a01 	add.w	sl, sl, #1
  402cc4:	2800      	cmp	r0, #0
  402cc6:	d1cc      	bne.n	402c62 <dir_next+0xaa>
						dj->fs->winsect++;
  402cc8:	6823      	ldr	r3, [r4, #0]
  402cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402ccc:	3201      	adds	r2, #1
  402cce:	62da      	str	r2, [r3, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402cd0:	6823      	ldr	r3, [r4, #0]
  402cd2:	7898      	ldrb	r0, [r3, #2]
  402cd4:	fa5f f28a 	uxtb.w	r2, sl
  402cd8:	4290      	cmp	r0, r2
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402cda:	f04f 0100 	mov.w	r1, #0
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402cde:	d8eb      	bhi.n	402cb8 <dir_next+0x100>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
  402ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  402ce2:	1a8a      	subs	r2, r1, r2
  402ce4:	62da      	str	r2, [r3, #44]	; 0x2c
  402ce6:	6820      	ldr	r0, [r4, #0]
  402ce8:	e7a4      	b.n	402c34 <dir_next+0x7c>
  402cea:	bf00      	nop
  402cec:	0040286d 	.word	0x0040286d
  402cf0:	00402ae1 	.word	0x00402ae1
  402cf4:	0040232d 	.word	0x0040232d

00402cf8 <dir_find.part.5>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Find an object in the directory                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_find (
  402cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402cfc:	f04f 08ff 	mov.w	r8, #255	; 0xff
  402d00:	b085      	sub	sp, #20
  402d02:	4f52      	ldr	r7, [pc, #328]	; (402e4c <dir_find.part.5+0x154>)
  402d04:	f8df 914c 	ldr.w	r9, [pc, #332]	; 402e54 <dir_find.part.5+0x15c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402d08:	f8df a14c 	ldr.w	sl, [pc, #332]	; 402e58 <dir_find.part.5+0x160>
/*-----------------------------------------------------------------------*/
/* Directory handling - Find an object in the directory                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_find (
  402d0c:	4605      	mov	r5, r0
  402d0e:	4646      	mov	r6, r8
  402d10:	e008      	b.n	402d24 <dir_find.part.5+0x2c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  402d12:	290f      	cmp	r1, #15
  402d14:	d03e      	beq.n	402d94 <dir_find.part.5+0x9c>
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402d16:	26ff      	movs	r6, #255	; 0xff
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
  402d18:	4628      	mov	r0, r5
  402d1a:	2100      	movs	r1, #0
  402d1c:	4b4c      	ldr	r3, [pc, #304]	; (402e50 <dir_find.part.5+0x158>)
  402d1e:	4798      	blx	r3
	} while (res == FR_OK);
  402d20:	2800      	cmp	r0, #0
  402d22:	d134      	bne.n	402d8e <dir_find.part.5+0x96>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  402d24:	6828      	ldr	r0, [r5, #0]
  402d26:	6929      	ldr	r1, [r5, #16]
  402d28:	47b8      	blx	r7
		if (res != FR_OK) break;
  402d2a:	bb80      	cbnz	r0, 402d8e <dir_find.part.5+0x96>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  402d2c:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  402d2e:	7822      	ldrb	r2, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402d30:	2a00      	cmp	r2, #0
  402d32:	d078      	beq.n	402e26 <dir_find.part.5+0x12e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  402d34:	7ae3      	ldrb	r3, [r4, #11]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  402d36:	2ae5      	cmp	r2, #229	; 0xe5
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  402d38:	f003 013f 	and.w	r1, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  402d3c:	d0eb      	beq.n	402d16 <dir_find.part.5+0x1e>
  402d3e:	071b      	lsls	r3, r3, #28
  402d40:	d4e7      	bmi.n	402d12 <dir_find.part.5+0x1a>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
  402d42:	290f      	cmp	r1, #15
  402d44:	d026      	beq.n	402d94 <dir_find.part.5+0x9c>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  402d46:	b98e      	cbnz	r6, 402d6c <dir_find.part.5+0x74>
  402d48:	4694      	mov	ip, r2
  402d4a:	f104 060a 	add.w	r6, r4, #10
  402d4e:	4622      	mov	r2, r4
  402d50:	4603      	mov	r3, r0
  402d52:	e001      	b.n	402d58 <dir_find.part.5+0x60>
  402d54:	f812 cf01 	ldrb.w	ip, [r2, #1]!
)
{
	BYTE sum = 0;
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  402d58:	01d9      	lsls	r1, r3, #7
  402d5a:	ea41 0353 	orr.w	r3, r1, r3, lsr #1
  402d5e:	fa5c f383 	uxtab	r3, ip, r3
  402d62:	42b2      	cmp	r2, r6
  402d64:	b2db      	uxtb	r3, r3
  402d66:	d1f5      	bne.n	402d54 <dir_find.part.5+0x5c>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  402d68:	4543      	cmp	r3, r8
  402d6a:	d010      	beq.n	402d8e <dir_find.part.5+0x96>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  402d70:	69ab      	ldr	r3, [r5, #24]
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402d72:	842a      	strh	r2, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  402d74:	7ada      	ldrb	r2, [r3, #11]
  402d76:	07d2      	lsls	r2, r2, #31
  402d78:	d4cd      	bmi.n	402d16 <dir_find.part.5+0x1e>
  402d7a:	f104 060b 	add.w	r6, r4, #11
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
  402d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
  402d82:	f813 2b01 	ldrb.w	r2, [r3], #1
  402d86:	4291      	cmp	r1, r2
  402d88:	d1c5      	bne.n	402d16 <dir_find.part.5+0x1e>
  402d8a:	42b4      	cmp	r4, r6
  402d8c:	d1f7      	bne.n	402d7e <dir_find.part.5+0x86>
#endif
		res = dir_next(dj, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
}
  402d8e:	b005      	add	sp, #20
  402d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (dj->lfn) {
  402d94:	69eb      	ldr	r3, [r5, #28]
  402d96:	2b00      	cmp	r3, #0
  402d98:	d0be      	beq.n	402d18 <dir_find.part.5+0x20>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  402d9a:	0651      	lsls	r1, r2, #25
  402d9c:	d53f      	bpl.n	402e1e <dir_find.part.5+0x126>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
  402d9e:	88e9      	ldrh	r1, [r5, #6]
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (dj->lfn) {
					if (c & LLE) {		/* Is it start of LFN sequence? */
						sum = dir[LDIR_Chksum];
  402da0:	f894 800d 	ldrb.w	r8, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
  402da4:	8429      	strh	r1, [r5, #32]
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (dj->lfn) {
					if (c & LLE) {		/* Is it start of LFN sequence? */
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
  402da6:	f002 06bf 	and.w	r6, r2, #191	; 0xbf
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402daa:	7b61      	ldrb	r1, [r4, #13]
  402dac:	4541      	cmp	r1, r8
  402dae:	d1b2      	bne.n	402d16 <dir_find.part.5+0x1e>
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  402db0:	7822      	ldrb	r2, [r4, #0]
  402db2:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 402e5c <dir_find.part.5+0x164>
  402db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  402dba:	3a01      	subs	r2, #1
  402dbc:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
  402dc0:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  402dc4:	f64f 78ff 	movw	r8, #65535	; 0xffff
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
  402dc8:	2201      	movs	r2, #1
  402dca:	e003      	b.n	402dd4 <dir_find.part.5+0xdc>
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  402dcc:	4540      	cmp	r0, r8
  402dce:	d135      	bne.n	402e3c <dir_find.part.5+0x144>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  402dd0:	45cb      	cmp	fp, r9
  402dd2:	d02c      	beq.n	402e2e <dir_find.part.5+0x136>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  402dd4:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
  402dd8:	eb04 0e00 	add.w	lr, r4, r0
  402ddc:	5c20      	ldrb	r0, [r4, r0]
  402dde:	f89e e001 	ldrb.w	lr, [lr, #1]
  402de2:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
		if (wc) {	/* Last char has not been processed */
  402de6:	2a00      	cmp	r2, #0
  402de8:	d0f0      	beq.n	402dcc <dir_find.part.5+0xd4>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  402dea:	f10c 0201 	add.w	r2, ip, #1
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402dee:	e88d 100a 	stmia.w	sp, {r1, r3, ip}
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  402df2:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402df4:	47d0      	blx	sl
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  402df6:	f8dd c008 	ldr.w	ip, [sp, #8]
  402dfa:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402dfe:	4602      	mov	r2, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  402e00:	e89d 000a 	ldmia.w	sp, {r1, r3}
  402e04:	d81a      	bhi.n	402e3c <dir_find.part.5+0x144>
  402e06:	f833 001c 	ldrh.w	r0, [r3, ip, lsl #1]
  402e0a:	9202      	str	r2, [sp, #8]
  402e0c:	47d0      	blx	sl
  402e0e:	9a02      	ldr	r2, [sp, #8]
  402e10:	4282      	cmp	r2, r0
  402e12:	e89d 000a 	ldmia.w	sp, {r1, r3}
  402e16:	d111      	bne.n	402e3c <dir_find.part.5+0x144>
  402e18:	f8dd c00c 	ldr.w	ip, [sp, #12]
  402e1c:	e7d8      	b.n	402dd0 <dir_find.part.5+0xd8>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402e1e:	42b2      	cmp	r2, r6
  402e20:	f47f af79 	bne.w	402d16 <dir_find.part.5+0x1e>
  402e24:	e7c1      	b.n	402daa <dir_find.part.5+0xb2>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402e26:	2004      	movs	r0, #4
#endif
		res = dir_next(dj, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
}
  402e28:	b005      	add	sp, #20
  402e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  402e2e:	7820      	ldrb	r0, [r4, #0]
  402e30:	0640      	lsls	r0, r0, #25
  402e32:	d506      	bpl.n	402e42 <dir_find.part.5+0x14a>
  402e34:	b12a      	cbz	r2, 402e42 <dir_find.part.5+0x14a>
  402e36:	f833 301c 	ldrh.w	r3, [r3, ip, lsl #1]
  402e3a:	b113      	cbz	r3, 402e42 <dir_find.part.5+0x14a>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402e3c:	4688      	mov	r8, r1
  402e3e:	26ff      	movs	r6, #255	; 0xff
  402e40:	e76a      	b.n	402d18 <dir_find.part.5+0x20>
  402e42:	3e01      	subs	r6, #1
  402e44:	b2f6      	uxtb	r6, r6
  402e46:	4688      	mov	r8, r1
  402e48:	e766      	b.n	402d18 <dir_find.part.5+0x20>
  402e4a:	bf00      	nop
  402e4c:	0040232d 	.word	0x0040232d
  402e50:	00402bb9 	.word	0x00402bb9
  402e54:	00406878 	.word	0x00406878
  402e58:	00403a99 	.word	0x00403a99
  402e5c:	0040686b 	.word	0x0040686b

00402e60 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
  402e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
  402e64:	f8d0 a018 	ldr.w	sl, [r0, #24]
  402e68:	69c5      	ldr	r5, [r0, #28]
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
  402e6a:	b089      	sub	sp, #36	; 0x24
  402e6c:	f10a 36ff 	add.w	r6, sl, #4294967295
  402e70:	4604      	mov	r4, r0
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
  402e72:	4632      	mov	r2, r6
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
  402e74:	ab05      	add	r3, sp, #20
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
  402e76:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402e7a:	f803 1b01 	strb.w	r1, [r3], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  402e7e:	a908      	add	r1, sp, #32
  402e80:	428b      	cmp	r3, r1
  402e82:	d1f8      	bne.n	402e76 <dir_register+0x16>
	mem_cpy(sn, fn, 12);

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  402e84:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402e88:	9301      	str	r3, [sp, #4]
  402e8a:	07da      	lsls	r2, r3, #31
  402e8c:	d456      	bmi.n	402f3c <dir_register+0xdc>
  402e8e:	4fb1      	ldr	r7, [pc, #708]	; (403154 <dir_register+0x2f4>)
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
		fn[NS] = sn[NS]; dj->lfn = lfn;
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  402e90:	9b01      	ldr	r3, [sp, #4]
  402e92:	079b      	lsls	r3, r3, #30
  402e94:	f100 80c2 	bmi.w	40301c <dir_register+0x1bc>
		for (ne = 0; lfn[ne]; ne++) ;
		ne = (ne + 25) / 13;
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
  402e98:	f04f 0901 	mov.w	r9, #1
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
  402e9c:	4620      	mov	r0, r4
  402e9e:	2100      	movs	r1, #0
  402ea0:	47b8      	blx	r7
	if (res != FR_OK) return res;
  402ea2:	2800      	cmp	r0, #0
  402ea4:	d147      	bne.n	402f36 <dir_register+0xd6>
  402ea6:	4682      	mov	sl, r0
  402ea8:	4eab      	ldr	r6, [pc, #684]	; (403158 <dir_register+0x2f8>)
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
			if (++n == ne) break;	/* A contiguous entry that required count is found */
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  402eaa:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 403160 <dir_register+0x300>
		ne = 1;
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
	if (res != FR_OK) return res;
  402eae:	4605      	mov	r5, r0
  402eb0:	e005      	b.n	402ebe <dir_register+0x5e>
		c = *dj->dir;				/* Check the entry status */
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
			if (++n == ne) break;	/* A contiguous entry that required count is found */
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
  402eb2:	461d      	mov	r5, r3
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  402eb4:	47c0      	blx	r8
	} while (res == FR_OK);
  402eb6:	4603      	mov	r3, r0
  402eb8:	2800      	cmp	r0, #0
  402eba:	f040 80ce 	bne.w	40305a <dir_register+0x1fa>
	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
	if (res != FR_OK) return res;
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
  402ebe:	6921      	ldr	r1, [r4, #16]
  402ec0:	6820      	ldr	r0, [r4, #0]
  402ec2:	47b0      	blx	r6
		if (res != FR_OK) break;
  402ec4:	4603      	mov	r3, r0
		c = *dj->dir;				/* Check the entry status */
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  402ec6:	f105 0c01 	add.w	ip, r5, #1
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  402eca:	4620      	mov	r0, r4
  402ecc:	2101      	movs	r1, #1
	res = dir_sdi(dj, 0);
	if (res != FR_OK) return res;
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
  402ece:	2b00      	cmp	r3, #0
  402ed0:	f040 80c3 	bne.w	40305a <dir_register+0x1fa>
		c = *dj->dir;				/* Check the entry status */
  402ed4:	6962      	ldr	r2, [r4, #20]
  402ed6:	7812      	ldrb	r2, [r2, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  402ed8:	2ae5      	cmp	r2, #229	; 0xe5
  402eda:	d001      	beq.n	402ee0 <dir_register+0x80>
  402edc:	2a00      	cmp	r2, #0
  402ede:	d1e8      	bne.n	402eb2 <dir_register+0x52>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  402ee0:	b90d      	cbnz	r5, 402ee6 <dir_register+0x86>
  402ee2:	f8b4 a006 	ldrh.w	sl, [r4, #6]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  402ee6:	fa1f f58c 	uxth.w	r5, ip
  402eea:	454d      	cmp	r5, r9
  402eec:	d1e2      	bne.n	402eb4 <dir_register+0x54>
			n = 0;					/* Not a blank entry. Restart to search */
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
	} while (res == FR_OK);

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  402eee:	f1b9 0f01 	cmp.w	r9, #1
  402ef2:	f040 80b6 	bne.w	403062 <dir_register+0x202>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
  402ef6:	6820      	ldr	r0, [r4, #0]
  402ef8:	6921      	ldr	r1, [r4, #16]
  402efa:	47b0      	blx	r6
		if (res == FR_OK) {
  402efc:	b9d8      	cbnz	r0, 402f36 <dir_register+0xd6>
			dir = dj->dir;
  402efe:	6965      	ldr	r5, [r4, #20]
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
  402f00:	4601      	mov	r1, r0
  402f02:	f105 0220 	add.w	r2, r5, #32
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
  402f06:	462b      	mov	r3, r5

	while (cnt--)
		*d++ = (BYTE)val;
  402f08:	f803 1b01 	strb.w	r1, [r3], #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  402f0c:	4293      	cmp	r3, r2
  402f0e:	d1fb      	bne.n	402f08 <dir_register+0xa8>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  402f10:	69a2      	ldr	r2, [r4, #24]
  402f12:	f105 000b 	add.w	r0, r5, #11
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
  402f16:	462b      	mov	r3, r5
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
  402f18:	f812 1b01 	ldrb.w	r1, [r2], #1
  402f1c:	f803 1b01 	strb.w	r1, [r3], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  402f20:	4283      	cmp	r3, r0
  402f22:	d1f9      	bne.n	402f18 <dir_register+0xb8>
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  402f24:	69a3      	ldr	r3, [r4, #24]
  402f26:	7adb      	ldrb	r3, [r3, #11]
  402f28:	f003 0318 	and.w	r3, r3, #24
  402f2c:	732b      	strb	r3, [r5, #12]
#endif
			dj->fs->wflag = 1;
  402f2e:	6823      	ldr	r3, [r4, #0]
  402f30:	2201      	movs	r2, #1
  402f32:	711a      	strb	r2, [r3, #4]
  402f34:	2000      	movs	r0, #0
		}
	}

	return res;
}
  402f36:	b009      	add	sp, #36	; 0x24
  402f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  402f3c:	2300      	movs	r3, #0
  402f3e:	4f85      	ldr	r7, [pc, #532]	; (403154 <dir_register+0x2f4>)
  402f40:	f8df 8220 	ldr.w	r8, [pc, #544]	; 403164 <dir_register+0x304>
  402f44:	f88a 300b 	strb.w	r3, [sl, #11]
		for (n = 1; n < 100; n++) {
  402f48:	f04f 0901 	mov.w	r9, #1

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  402f4c:	61e3      	str	r3, [r4, #28]
  402f4e:	f10d 0b1f 	add.w	fp, sp, #31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
  402f52:	4632      	mov	r2, r6
  402f54:	ab05      	add	r3, sp, #20
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
  402f56:	f813 1b01 	ldrb.w	r1, [r3], #1
  402f5a:	f802 1f01 	strb.w	r1, [r2, #1]!
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  402f5e:	455b      	cmp	r3, fp
  402f60:	d1f9      	bne.n	402f56 <dir_register+0xf6>
	UINT i, j;


	mem_cpy(dst, src, 11);

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  402f62:	f1b9 0f05 	cmp.w	r9, #5
  402f66:	d957      	bls.n	403018 <dir_register+0x1b8>
  402f68:	8828      	ldrh	r0, [r5, #0]
  402f6a:	4629      	mov	r1, r5
  402f6c:	464a      	mov	r2, r9
  402f6e:	e000      	b.n	402f72 <dir_register+0x112>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  402f70:	4618      	mov	r0, r3
  402f72:	03d3      	lsls	r3, r2, #15
  402f74:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
  402f78:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  402f7c:	fa10 f282 	uxtah	r2, r0, r2
  402f80:	b292      	uxth	r2, r2
  402f82:	2b00      	cmp	r3, #0
  402f84:	d1f4      	bne.n	402f70 <dir_register+0x110>
	UINT i, j;


	mem_cpy(dst, src, 11);

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  402f86:	2307      	movs	r3, #7
	}

	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
  402f88:	f002 000f 	and.w	r0, r2, #15
  402f8c:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  402f90:	2939      	cmp	r1, #57	; 0x39
  402f92:	bf88      	it	hi
  402f94:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  402f98:	3b01      	subs	r3, #1
  402f9a:	a803      	add	r0, sp, #12
  402f9c:	4418      	add	r0, r3
		seq /= 16;
  402f9e:	f3c2 120f 	ubfx	r2, r2, #4, #16
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
		if (c > '9') c += 7;
		ns[i--] = c;
  402fa2:	7041      	strb	r1, [r0, #1]
		seq /= 16;
	} while (seq);
  402fa4:	2a00      	cmp	r2, #0
  402fa6:	d1ef      	bne.n	402f88 <dir_register+0x128>
	ns[i] = '~';
  402fa8:	a908      	add	r1, sp, #32
  402faa:	4419      	add	r1, r3
  402fac:	207e      	movs	r0, #126	; 0x7e
  402fae:	f801 0c14 	strb.w	r0, [r1, #-20]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
  402fb2:	2b00      	cmp	r3, #0
  402fb4:	d04f      	beq.n	403056 <dir_register+0x1f6>
  402fb6:	f89a 1000 	ldrb.w	r1, [sl]
  402fba:	2920      	cmp	r1, #32
  402fbc:	d014      	beq.n	402fe8 <dir_register+0x188>
  402fbe:	4651      	mov	r1, sl
  402fc0:	e003      	b.n	402fca <dir_register+0x16a>
  402fc2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  402fc6:	2820      	cmp	r0, #32
  402fc8:	d00e      	beq.n	402fe8 <dir_register+0x188>
  402fca:	3201      	adds	r2, #1
  402fcc:	429a      	cmp	r2, r3
  402fce:	d1f8      	bne.n	402fc2 <dir_register+0x162>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402fd0:	2b07      	cmp	r3, #7
  402fd2:	d80b      	bhi.n	402fec <dir_register+0x18c>
  402fd4:	a908      	add	r1, sp, #32
  402fd6:	4419      	add	r1, r3
  402fd8:	3301      	adds	r3, #1
  402fda:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  402fde:	f80a 1002 	strb.w	r1, [sl, r2]
  402fe2:	3201      	adds	r2, #1
	} while (j < 8);
  402fe4:	2a07      	cmp	r2, #7
  402fe6:	d807      	bhi.n	402ff8 <dir_register+0x198>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402fe8:	2b07      	cmp	r3, #7
  402fea:	d9f3      	bls.n	402fd4 <dir_register+0x174>
  402fec:	2120      	movs	r1, #32
  402fee:	f80a 1002 	strb.w	r1, [sl, r2]
  402ff2:	3201      	adds	r2, #1
	} while (j < 8);
  402ff4:	2a07      	cmp	r2, #7
  402ff6:	d9f7      	bls.n	402fe8 <dir_register+0x188>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
  402ff8:	4620      	mov	r0, r4
  402ffa:	2100      	movs	r1, #0
  402ffc:	47b8      	blx	r7
	if (res != FR_OK) return res;
  402ffe:	bb10      	cbnz	r0, 403046 <dir_register+0x1e6>
  403000:	4620      	mov	r0, r4
  403002:	47c0      	blx	r8
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
  403004:	b9f8      	cbnz	r0, 403046 <dir_register+0x1e6>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  403006:	f109 0901 	add.w	r9, r9, #1
  40300a:	fa1f f989 	uxth.w	r9, r9
  40300e:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
  403012:	d19e      	bne.n	402f52 <dir_register+0xf2>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  403014:	2007      	movs	r0, #7
  403016:	e78e      	b.n	402f36 <dir_register+0xd6>
	UINT i, j;


	mem_cpy(dst, src, 11);

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  403018:	464a      	mov	r2, r9
  40301a:	e7b4      	b.n	402f86 <dir_register+0x126>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
		fn[NS] = sn[NS]; dj->lfn = lfn;
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
		for (ne = 0; lfn[ne]; ne++) ;
  40301c:	882b      	ldrh	r3, [r5, #0]
  40301e:	2b00      	cmp	r3, #0
  403020:	f43f af3a 	beq.w	402e98 <dir_register+0x38>
  403024:	2300      	movs	r3, #0
  403026:	3301      	adds	r3, #1
  403028:	b29b      	uxth	r3, r3
  40302a:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
  40302e:	2a00      	cmp	r2, #0
  403030:	d1f9      	bne.n	403026 <dir_register+0x1c6>
  403032:	4a4a      	ldr	r2, [pc, #296]	; (40315c <dir_register+0x2fc>)
  403034:	3319      	adds	r3, #25
  403036:	fb82 1903 	smull	r1, r9, r2, r3
  40303a:	17db      	asrs	r3, r3, #31
  40303c:	ebc3 09a9 	rsb	r9, r3, r9, asr #2
  403040:	fa1f f989 	uxth.w	r9, r9
  403044:	e72a      	b.n	402e9c <dir_register+0x3c>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  403046:	2804      	cmp	r0, #4
  403048:	f47f af75 	bne.w	402f36 <dir_register+0xd6>
		fn[NS] = sn[NS]; dj->lfn = lfn;
  40304c:	9b01      	ldr	r3, [sp, #4]
  40304e:	f88a 300b 	strb.w	r3, [sl, #11]
  403052:	61e5      	str	r5, [r4, #28]
  403054:	e71c      	b.n	402e90 <dir_register+0x30>
		seq /= 16;
	} while (seq);
	ns[i] = '~';

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
  403056:	461a      	mov	r2, r3
  403058:	e7c6      	b.n	402fe8 <dir_register+0x188>
  40305a:	4618      	mov	r0, r3
			dj->fs->wflag = 1;
		}
	}

	return res;
}
  40305c:	b009      	add	sp, #36	; 0x24
  40305e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
	} while (res == FR_OK);

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
		res = dir_sdi(dj, is);
  403062:	4651      	mov	r1, sl
  403064:	4620      	mov	r0, r4
  403066:	47b8      	blx	r7
		if (res == FR_OK) {
  403068:	4603      	mov	r3, r0
  40306a:	2800      	cmp	r0, #0
  40306c:	d1f5      	bne.n	40305a <dir_register+0x1fa>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  40306e:	69a2      	ldr	r2, [r4, #24]
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
	BYTE sum = 0;
  403070:	4683      	mov	fp, r0
  403072:	f102 000b 	add.w	r0, r2, #11
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  403076:	f812 3b01 	ldrb.w	r3, [r2], #1
  40307a:	ea4f 11cb 	mov.w	r1, fp, lsl #7
  40307e:	ea41 0b5b 	orr.w	fp, r1, fp, lsr #1
  403082:	fa53 fb8b 	uxtab	fp, r3, fp
  403086:	4282      	cmp	r2, r0
  403088:	fa5f fb8b 	uxtb.w	fp, fp
  40308c:	d1f3      	bne.n	403076 <dir_register+0x216>

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
		res = dir_sdi(dj, is);
		if (res == FR_OK) {
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
			ne--;
  40308e:	f109 39ff 	add.w	r9, r9, #4294967295
  403092:	fa1f f989 	uxth.w	r9, r9
  403096:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 403168 <dir_register+0x308>
  40309a:	f8cd b000 	str.w	fp, [sp]
  40309e:	46cb      	mov	fp, r9
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
  4030a0:	6820      	ldr	r0, [r4, #0]
  4030a2:	6921      	ldr	r1, [r4, #16]
  4030a4:	47b0      	blx	r6
  4030a6:	4603      	mov	r3, r0
				if (res != FR_OK) break;
  4030a8:	2800      	cmp	r0, #0
  4030aa:	d1d6      	bne.n	40305a <dir_register+0x1fa>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  4030ac:	fa5f fa8b 	uxtb.w	sl, fp
  4030b0:	6965      	ldr	r5, [r4, #20]
{
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
  4030b2:	9b00      	ldr	r3, [sp, #0]
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  4030b4:	f8d4 901c 	ldr.w	r9, [r4, #28]
{
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
  4030b8:	736b      	strb	r3, [r5, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
	dir[LDIR_Type] = 0;
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  4030ba:	f10a 32ff 	add.w	r2, sl, #4294967295
  4030be:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  4030c2:	270f      	movs	r7, #15
	dir[LDIR_Type] = 0;
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
  4030c4:	4603      	mov	r3, r0
	dir[LDIR_Chksum] = sum;			/* Set check sum */
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
	dir[LDIR_Type] = 0;
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  4030c6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  4030ca:	72ef      	strb	r7, [r5, #11]
	dir[LDIR_Type] = 0;
  4030cc:	7328      	strb	r0, [r5, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  4030ce:	76a8      	strb	r0, [r5, #26]
  4030d0:	76e8      	strb	r0, [r5, #27]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
  4030d2:	4602      	mov	r2, r0
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4030d4:	f64f 77ff 	movw	r7, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4030d8:	20ff      	movs	r0, #255	; 0xff
  4030da:	e010      	b.n	4030fe <dir_register+0x29e>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4030dc:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4030e0:	f805 300e 	strb.w	r3, [r5, lr]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
	} while (++s < 13);
  4030e4:	3201      	adds	r2, #1

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4030e6:	44ae      	add	lr, r5
  4030e8:	ea4f 2c13 	mov.w	ip, r3, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  4030ec:	2b00      	cmp	r3, #0
  4030ee:	bf08      	it	eq
  4030f0:	463b      	moveq	r3, r7
	} while (++s < 13);
  4030f2:	2a0d      	cmp	r2, #13
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4030f4:	f101 0101 	add.w	r1, r1, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4030f8:	f88e c001 	strb.w	ip, [lr, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
	} while (++s < 13);
  4030fc:	d00c      	beq.n	403118 <dir_register+0x2b8>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4030fe:	42bb      	cmp	r3, r7
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  403100:	f818 e002 	ldrb.w	lr, [r8, r2]
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  403104:	d1ea      	bne.n	4030dc <dir_register+0x27c>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  403106:	eb05 0c0e 	add.w	ip, r5, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
	} while (++s < 13);
  40310a:	3201      	adds	r2, #1
  40310c:	2a0d      	cmp	r2, #13

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  40310e:	f805 000e 	strb.w	r0, [r5, lr]
  403112:	f88c 0001 	strb.w	r0, [ip, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
	} while (++s < 13);
  403116:	d1f2      	bne.n	4030fe <dir_register+0x29e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  403118:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40311c:	4293      	cmp	r3, r2
  40311e:	d002      	beq.n	403126 <dir_register+0x2c6>
  403120:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  403124:	b90b      	cbnz	r3, 40312a <dir_register+0x2ca>
  403126:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  40312a:	f885 a000 	strb.w	sl, [r5]
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
  40312e:	6823      	ldr	r3, [r4, #0]
				res = dir_next(dj, 0);	/* Next entry */
  403130:	4a0b      	ldr	r2, [pc, #44]	; (403160 <dir_register+0x300>)
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
  403132:	2101      	movs	r1, #1
  403134:	7119      	strb	r1, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  403136:	4620      	mov	r0, r4
  403138:	2100      	movs	r1, #0
  40313a:	4790      	blx	r2
			} while (res == FR_OK && --ne);
  40313c:	4603      	mov	r3, r0
  40313e:	2800      	cmp	r0, #0
  403140:	d18b      	bne.n	40305a <dir_register+0x1fa>
  403142:	f10b 3bff 	add.w	fp, fp, #4294967295
  403146:	fa1f fb8b 	uxth.w	fp, fp
  40314a:	f1bb 0f00 	cmp.w	fp, #0
  40314e:	d1a7      	bne.n	4030a0 <dir_register+0x240>
  403150:	e6d1      	b.n	402ef6 <dir_register+0x96>
  403152:	bf00      	nop
  403154:	00402939 	.word	0x00402939
  403158:	0040232d 	.word	0x0040232d
  40315c:	4ec4ec4f 	.word	0x4ec4ec4f
  403160:	00402bb9 	.word	0x00402bb9
  403164:	00402cf9 	.word	0x00402cf9
  403168:	0040686c 	.word	0x0040686c

0040316c <remove_chain.part.6>:
/*-----------------------------------------------------------------------*/
/* FAT handling - Remove a cluster chain                                 */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT remove_chain (
  40316c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403170:	4604      	mov	r4, r0
  403172:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
  403174:	69a3      	ldr	r3, [r4, #24]
  403176:	4f16      	ldr	r7, [pc, #88]	; (4031d0 <remove_chain.part.6+0x64>)
  403178:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4031d4 <remove_chain.part.6+0x68>
  40317c:	429d      	cmp	r5, r3
  40317e:	d220      	bcs.n	4031c2 <remove_chain.part.6+0x56>
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  403180:	2d01      	cmp	r5, #1
  403182:	d90b      	bls.n	40319c <remove_chain.part.6+0x30>
  403184:	4620      	mov	r0, r4
  403186:	4629      	mov	r1, r5
  403188:	47b8      	blx	r7

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
  40318a:	4606      	mov	r6, r0
  40318c:	b1c8      	cbz	r0, 4031c2 <remove_chain.part.6+0x56>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  40318e:	2801      	cmp	r0, #1
  403190:	d004      	beq.n	40319c <remove_chain.part.6+0x30>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  403192:	3001      	adds	r0, #1
  403194:	d018      	beq.n	4031c8 <remove_chain.part.6+0x5c>
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  403196:	69a3      	ldr	r3, [r4, #24]
  403198:	429d      	cmp	r5, r3
  40319a:	d302      	bcc.n	4031a2 <remove_chain.part.6+0x36>
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  40319c:	2002      	movs	r0, #2
  40319e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4031a2:	2200      	movs	r2, #0
  4031a4:	4629      	mov	r1, r5
  4031a6:	4620      	mov	r0, r4
  4031a8:	47c0      	blx	r8
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
  4031aa:	2201      	movs	r2, #1
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
  4031ac:	b968      	cbnz	r0, 4031ca <remove_chain.part.6+0x5e>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  4031ae:	6923      	ldr	r3, [r4, #16]
  4031b0:	1c59      	adds	r1, r3, #1
  4031b2:	d002      	beq.n	4031ba <remove_chain.part.6+0x4e>
				fs->free_clust++;
  4031b4:	4413      	add	r3, r2
  4031b6:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  4031b8:	7162      	strb	r2, [r4, #5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
  4031ba:	69a3      	ldr	r3, [r4, #24]
/*-----------------------------------------------------------------------*/
/* FAT handling - Remove a cluster chain                                 */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT remove_chain (
  4031bc:	4635      	mov	r5, r6
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
  4031be:	429d      	cmp	r5, r3
  4031c0:	d3de      	bcc.n	403180 <remove_chain.part.6+0x14>
/*-----------------------------------------------------------------------*/
/* FAT handling - Remove a cluster chain                                 */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT remove_chain (
  4031c2:	2000      	movs	r0, #0
  4031c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4031c8:	2001      	movs	r0, #1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
  4031ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4031ce:	bf00      	nop
  4031d0:	0040286d 	.word	0x0040286d
  4031d4:	004029e1 	.word	0x004029e1

004031d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
  4031d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  4031dc:	780b      	ldrb	r3, [r1, #0]
  4031de:	2b2f      	cmp	r3, #47	; 0x2f
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
  4031e0:	b083      	sub	sp, #12
  4031e2:	4689      	mov	r9, r1
  4031e4:	4606      	mov	r6, r0
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  4031e6:	f000 8133 	beq.w	403450 <follow_path+0x278>
  4031ea:	2b5c      	cmp	r3, #92	; 0x5c
  4031ec:	f000 8130 	beq.w	403450 <follow_path+0x278>
		path++;
	dj->sclust = 0;						/* Start from the root dir */
  4031f0:	2400      	movs	r4, #0
  4031f2:	60b4      	str	r4, [r6, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  4031f4:	f899 0000 	ldrb.w	r0, [r9]
  4031f8:	281f      	cmp	r0, #31
  4031fa:	f240 8132 	bls.w	403462 <follow_path+0x28a>
  4031fe:	4da7      	ldr	r5, [pc, #668]	; (40349c <follow_path+0x2c4>)
  403200:	e001      	b.n	403206 <follow_path+0x2e>
  403202:	f819 0f01 	ldrb.w	r0, [r9, #1]!
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  403206:	282f      	cmp	r0, #47	; 0x2f
  403208:	d0fb      	beq.n	403202 <follow_path+0x2a>
  40320a:	285c      	cmp	r0, #92	; 0x5c
  40320c:	d0f9      	beq.n	403202 <follow_path+0x2a>
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  40320e:	281f      	cmp	r0, #31
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
  403210:	69f7      	ldr	r7, [r6, #28]
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  403212:	f240 80ec 	bls.w	4033ee <follow_path+0x216>
  403216:	282f      	cmp	r0, #47	; 0x2f
  403218:	d02d      	beq.n	403276 <follow_path+0x9e>
  40321a:	285c      	cmp	r0, #92	; 0x5c
  40321c:	d02b      	beq.n	403276 <follow_path+0x9e>
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  40321e:	2101      	movs	r1, #1
  403220:	f1a7 0b02 	sub.w	fp, r7, #2
  403224:	46ca      	mov	sl, r9
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  403226:	2401      	movs	r4, #1
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  403228:	47a8      	blx	r5
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  40322a:	b300      	cbz	r0, 40326e <follow_path+0x96>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  40322c:	287f      	cmp	r0, #127	; 0x7f
  40322e:	d809      	bhi.n	403244 <follow_path+0x6c>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
  403230:	2822      	cmp	r0, #34	; 0x22
  403232:	d01c      	beq.n	40326e <follow_path+0x96>
  403234:	4a9a      	ldr	r2, [pc, #616]	; (4034a0 <follow_path+0x2c8>)
  403236:	e001      	b.n	40323c <follow_path+0x64>
  403238:	4298      	cmp	r0, r3
  40323a:	d018      	beq.n	40326e <follow_path+0x96>
  40323c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  403240:	2b00      	cmp	r3, #0
  403242:	d1f9      	bne.n	403238 <follow_path+0x60>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
  403244:	f82b 0f02 	strh.w	r0, [fp, #2]!
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  403248:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  40324c:	281f      	cmp	r0, #31
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  40324e:	f104 0301 	add.w	r3, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  403252:	f240 80ce 	bls.w	4033f2 <follow_path+0x21a>
  403256:	282f      	cmp	r0, #47	; 0x2f
  403258:	d00f      	beq.n	40327a <follow_path+0xa2>
  40325a:	285c      	cmp	r0, #92	; 0x5c
  40325c:	d00d      	beq.n	40327a <follow_path+0xa2>
		if (di >= _MAX_LFN)				/* Reject too long name */
  40325e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  403262:	d004      	beq.n	40326e <follow_path+0x96>
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  403264:	2101      	movs	r1, #1
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  403266:	461c      	mov	r4, r3
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  403268:	47a8      	blx	r5
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  40326a:	2800      	cmp	r0, #0
  40326c:	d1de      	bne.n	40322c <follow_path+0x54>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
  40326e:	2006      	movs	r0, #6
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
  403270:	b003      	add	sp, #12
  403272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
  403276:	2400      	movs	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
  403278:	2301      	movs	r3, #1
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
  40327a:	4499      	add	r9, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  40327c:	f04f 0b00 	mov.w	fp, #0
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  403280:	2c00      	cmp	r4, #0
  403282:	d0f4      	beq.n	40326e <follow_path+0x96>
  403284:	eb07 0044 	add.w	r0, r7, r4, lsl #1
		w = lfn[di-1];
  403288:	f830 2d02 	ldrh.w	r2, [r0, #-2]!
		if (w != ' ' && w != '.') break;
  40328c:	2a20      	cmp	r2, #32
  40328e:	d001      	beq.n	403294 <follow_path+0xbc>
  403290:	2a2e      	cmp	r2, #46	; 0x2e
  403292:	d102      	bne.n	40329a <follow_path+0xc2>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  403294:	3c01      	subs	r4, #1
  403296:	d1f7      	bne.n	403288 <follow_path+0xb0>
  403298:	e7e9      	b.n	40326e <follow_path+0x96>
		if (w != ' ' && w != '.') break;
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */

	lfn[di] = 0;						/* LFN is created */
  40329a:	2300      	movs	r3, #0
  40329c:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
  4032a0:	69b3      	ldr	r3, [r6, #24]
		if (w != ' ' && w != '.') break;
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */

	lfn[di] = 0;						/* LFN is created */
  4032a2:	eb07 0044 	add.w	r0, r7, r4, lsl #1
  4032a6:	f103 010b 	add.w	r1, r3, #11
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
  4032aa:	2220      	movs	r2, #32
  4032ac:	f803 2b01 	strb.w	r2, [r3], #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  4032b0:	428b      	cmp	r3, r1
  4032b2:	d1fb      	bne.n	4032ac <follow_path+0xd4>
  4032b4:	1ebb      	subs	r3, r7, #2
  4032b6:	f04f 0a00 	mov.w	sl, #0
  4032ba:	e001      	b.n	4032c0 <follow_path+0xe8>

	lfn[di] = 0;						/* LFN is created */

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  4032bc:	f10a 0a01 	add.w	sl, sl, #1
  4032c0:	f833 2f02 	ldrh.w	r2, [r3, #2]!
  4032c4:	2a20      	cmp	r2, #32
  4032c6:	d0f9      	beq.n	4032bc <follow_path+0xe4>
  4032c8:	2a2e      	cmp	r2, #46	; 0x2e
  4032ca:	d0f7      	beq.n	4032bc <follow_path+0xe4>
	if (si) cf |= NS_LOSS | NS_LFN;
  4032cc:	f1ba 0f00 	cmp.w	sl, #0
  4032d0:	d001      	beq.n	4032d6 <follow_path+0xfe>
  4032d2:	f04b 0b03 	orr.w	fp, fp, #3
  4032d6:	4603      	mov	r3, r0
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  4032d8:	f833 1d02 	ldrh.w	r1, [r3, #-2]!
  4032dc:	292e      	cmp	r1, #46	; 0x2e
  4032de:	d001      	beq.n	4032e4 <follow_path+0x10c>
  4032e0:	3c01      	subs	r4, #1
  4032e2:	d1f9      	bne.n	4032d8 <follow_path+0x100>

	lfn[di] = 0;						/* LFN is created */

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  4032e4:	f04f 0c00 	mov.w	ip, #0
  4032e8:	4610      	mov	r0, r2
  4032ea:	46e0      	mov	r8, ip
  4032ec:	2308      	movs	r3, #8
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  4032ee:	f10a 0a01 	add.w	sl, sl, #1
		if (!w) break;					/* Break on end of the LFN */
  4032f2:	b378      	cbz	r0, 403354 <follow_path+0x17c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  4032f4:	2820      	cmp	r0, #32
  4032f6:	d01f      	beq.n	403338 <follow_path+0x160>
  4032f8:	282e      	cmp	r0, #46	; 0x2e
  4032fa:	d01b      	beq.n	403334 <follow_path+0x15c>
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
  4032fc:	459c      	cmp	ip, r3
  4032fe:	d220      	bcs.n	403342 <follow_path+0x16a>
  403300:	4554      	cmp	r4, sl
  403302:	d07a      	beq.n	4033fa <follow_path+0x222>
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
			b <<= 2; continue;
		}

		if (w >= 0x80) {				/* Non ASCII char */
  403304:	287f      	cmp	r0, #127	; 0x7f
  403306:	f200 8083 	bhi.w	403410 <follow_path+0x238>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
  40330a:	282b      	cmp	r0, #43	; 0x2b
  40330c:	f000 8090 	beq.w	403430 <follow_path+0x258>
  403310:	4a64      	ldr	r2, [pc, #400]	; (4034a4 <follow_path+0x2cc>)
  403312:	e002      	b.n	40331a <follow_path+0x142>
  403314:	4288      	cmp	r0, r1
  403316:	f000 808b 	beq.w	403430 <follow_path+0x258>
  40331a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  40331e:	2900      	cmp	r1, #0
  403320:	d1f8      	bne.n	403314 <follow_path+0x13c>
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
  403322:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
  403326:	2919      	cmp	r1, #25
  403328:	f200 80a6 	bhi.w	403478 <follow_path+0x2a0>
					b |= 2;
  40332c:	f048 0802 	orr.w	r8, r8, #2
  403330:	b2c0      	uxtb	r0, r0
  403332:	e080      	b.n	403436 <follow_path+0x25e>

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
		if (!w) break;					/* Break on end of the LFN */
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  403334:	4554      	cmp	r4, sl
  403336:	d060      	beq.n	4033fa <follow_path+0x222>
			cf |= NS_LOSS | NS_LFN; continue;
  403338:	f04b 0b03 	orr.w	fp, fp, #3
  40333c:	f837 001a 	ldrh.w	r0, [r7, sl, lsl #1]
  403340:	e7d5      	b.n	4032ee <follow_path+0x116>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
  403342:	2b0b      	cmp	r3, #11
  403344:	f000 80a6 	beq.w	403494 <follow_path+0x2bc>
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  403348:	4554      	cmp	r4, sl
  40334a:	d058      	beq.n	4033fe <follow_path+0x226>
			if (si > di) break;			/* No extension */
  40334c:	45a2      	cmp	sl, r4

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  40334e:	f04b 0b03 	orr.w	fp, fp, #3
			if (si > di) break;			/* No extension */
  403352:	d954      	bls.n	4033fe <follow_path+0x226>
			}
		}
		dj->fn[i++] = (BYTE)w;
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  403354:	69b1      	ldr	r1, [r6, #24]
  403356:	7808      	ldrb	r0, [r1, #0]
  403358:	28e5      	cmp	r0, #229	; 0xe5
  40335a:	d075      	beq.n	403448 <follow_path+0x270>

	if (ni == 8) b <<= 2;
  40335c:	2b08      	cmp	r3, #8
  40335e:	bf04      	itt	eq
  403360:	ea4f 0288 	moveq.w	r2, r8, lsl #2
  403364:	fa5f f882 	uxtbeq.w	r8, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  403368:	f008 030c 	and.w	r3, r8, #12
  40336c:	2b0c      	cmp	r3, #12
  40336e:	d068      	beq.n	403442 <follow_path+0x26a>
  403370:	f008 0003 	and.w	r0, r8, #3
  403374:	2803      	cmp	r0, #3
  403376:	d064      	beq.n	403442 <follow_path+0x26a>
		cf |= NS_LFN;
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  403378:	f01b 0f02 	tst.w	fp, #2
  40337c:	d109      	bne.n	403392 <follow_path+0x1ba>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  40337e:	f008 0203 	and.w	r2, r8, #3
  403382:	2a01      	cmp	r2, #1
  403384:	bf08      	it	eq
  403386:	f04b 0b10 	orreq.w	fp, fp, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  40338a:	2b04      	cmp	r3, #4
  40338c:	bf08      	it	eq
  40338e:	f04b 0b08 	orreq.w	fp, fp, #8
	}

	dj->fn[NS] = cf;	/* SFN is created */
  403392:	f881 b00b 	strb.w	fp, [r1, #11]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
  403396:	4630      	mov	r0, r6
  403398:	2100      	movs	r1, #0
  40339a:	4b43      	ldr	r3, [pc, #268]	; (4034a8 <follow_path+0x2d0>)
  40339c:	4798      	blx	r3
	if (res != FR_OK) return res;
  40339e:	b9d0      	cbnz	r0, 4033d6 <follow_path+0x1fe>
  4033a0:	4b42      	ldr	r3, [pc, #264]	; (4034ac <follow_path+0x2d4>)
  4033a2:	4630      	mov	r0, r6
  4033a4:	4798      	blx	r3
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
  4033a6:	69b3      	ldr	r3, [r6, #24]
  4033a8:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  4033aa:	b9b0      	cbnz	r0, 4033da <follow_path+0x202>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  4033ac:	0759      	lsls	r1, r3, #29
  4033ae:	f53f af5f 	bmi.w	403270 <follow_path+0x98>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  4033b2:	6973      	ldr	r3, [r6, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  4033b4:	7ada      	ldrb	r2, [r3, #11]
  4033b6:	06d2      	lsls	r2, r2, #27
  4033b8:	d568      	bpl.n	40348c <follow_path+0x2b4>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
  4033ba:	7d5c      	ldrb	r4, [r3, #21]
  4033bc:	7d1a      	ldrb	r2, [r3, #20]
  4033be:	7ed8      	ldrb	r0, [r3, #27]
  4033c0:	7e99      	ldrb	r1, [r3, #26]
  4033c2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4033c6:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
  4033ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4033ce:	60b3      	str	r3, [r6, #8]
  4033d0:	f899 0000 	ldrb.w	r0, [r9]
		}
  4033d4:	e717      	b.n	403206 <follow_path+0x2e>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
  4033d6:	69b3      	ldr	r3, [r6, #24]
  4033d8:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  4033da:	2804      	cmp	r0, #4
  4033dc:	f47f af48 	bne.w	403270 <follow_path+0x98>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  4033e0:	f013 0f04 	tst.w	r3, #4
  4033e4:	bf08      	it	eq
  4033e6:	2005      	moveq	r0, #5
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
  4033e8:	b003      	add	sp, #12
  4033ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
  4033ee:	2400      	movs	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
  4033f0:	2301      	movs	r3, #1
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
  4033f2:	4499      	add	r9, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  4033f4:	f04f 0b04 	mov.w	fp, #4
  4033f8:	e742      	b.n	403280 <follow_path+0xa8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
  4033fa:	2b0b      	cmp	r3, #11
  4033fc:	d04a      	beq.n	403494 <follow_path+0x2bc>
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
			b <<= 2; continue;
  4033fe:	ea4f 0288 	mov.w	r2, r8, lsl #2
  403402:	fa5f f882 	uxtb.w	r8, r2
  403406:	46a2      	mov	sl, r4
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
  403408:	230b      	movs	r3, #11
  40340a:	f04f 0c08 	mov.w	ip, #8
  40340e:	e795      	b.n	40333c <follow_path+0x164>
			b <<= 2; continue;
		}

		if (w >= 0x80) {				/* Non ASCII char */
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  403410:	2100      	movs	r1, #0
  403412:	e88d 1008 	stmia.w	sp, {r3, ip}
  403416:	47a8      	blx	r5
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  403418:	e89d 1008 	ldmia.w	sp, {r3, ip}
  40341c:	b348      	cbz	r0, 403472 <follow_path+0x29a>
  40341e:	4a24      	ldr	r2, [pc, #144]	; (4034b0 <follow_path+0x2d8>)
  403420:	4410      	add	r0, r2
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  403422:	f04b 0b02 	orr.w	fp, fp, #2
		}

		if (w >= 0x80) {				/* Non ASCII char */
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  403426:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  40342a:	2800      	cmp	r0, #0
  40342c:	f47f af6d 	bne.w	40330a <follow_path+0x132>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  403430:	f04b 0b03 	orr.w	fp, fp, #3
  403434:	205f      	movs	r0, #95	; 0x5f
						b |= 1; w -= 0x20;
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
  403436:	69b1      	ldr	r1, [r6, #24]
  403438:	f801 000c 	strb.w	r0, [r1, ip]
  40343c:	f10c 0c01 	add.w	ip, ip, #1
  403440:	e77c      	b.n	40333c <follow_path+0x164>

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */

	if (ni == 8) b <<= 2;
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
		cf |= NS_LFN;
  403442:	f04b 0b02 	orr.w	fp, fp, #2
  403446:	e797      	b.n	403378 <follow_path+0x1a0>
			}
		}
		dj->fn[i++] = (BYTE)w;
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  403448:	2005      	movs	r0, #5
  40344a:	7008      	strb	r0, [r1, #0]
  40344c:	69b1      	ldr	r1, [r6, #24]
  40344e:	e785      	b.n	40335c <follow_path+0x184>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
  403450:	f109 0901 	add.w	r9, r9, #1
	dj->sclust = 0;						/* Start from the root dir */
  403454:	2400      	movs	r4, #0
  403456:	60b4      	str	r4, [r6, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  403458:	f899 0000 	ldrb.w	r0, [r9]
  40345c:	281f      	cmp	r0, #31
  40345e:	f63f aece 	bhi.w	4031fe <follow_path+0x26>
		res = dir_sdi(dj, 0);
  403462:	4630      	mov	r0, r6
  403464:	4621      	mov	r1, r4
  403466:	4b10      	ldr	r3, [pc, #64]	; (4034a8 <follow_path+0x2d0>)
  403468:	4798      	blx	r3
		dj->dir = 0;
  40346a:	6174      	str	r4, [r6, #20]
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
  40346c:	b003      	add	sp, #12
  40346e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  403472:	f04b 0b02 	orr.w	fp, fp, #2
  403476:	e7db      	b.n	403430 <follow_path+0x258>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
					b |= 2;
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
  403478:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
  40347c:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
  40347e:	bf97      	itett	ls
  403480:	3820      	subls	r0, #32
  403482:	b2c0      	uxtbhi	r0, r0
  403484:	b2c0      	uxtbls	r0, r0
  403486:	f048 0801 	orrls.w	r8, r8, #1
  40348a:	e7d4      	b.n	403436 <follow_path+0x25e>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
  40348c:	2005      	movs	r0, #5
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
  40348e:	b003      	add	sp, #12
  403490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
  403494:	f04b 0b03 	orr.w	fp, fp, #3
  403498:	230b      	movs	r3, #11
  40349a:	e75b      	b.n	403354 <follow_path+0x17c>
  40349c:	00403a4d 	.word	0x00403a4d
  4034a0:	00406858 	.word	0x00406858
  4034a4:	00406864 	.word	0x00406864
  4034a8:	00402939 	.word	0x00402939
  4034ac:	00402cf9 	.word	0x00402cf9
  4034b0:	004067d8 	.word	0x004067d8

004034b4 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
  4034b4:	b4f0      	push	{r4, r5, r6, r7}
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  4034b6:	b110      	cbz	r0, 4034be <f_mount+0xa>
		return FR_INVALID_DRIVE;
  4034b8:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  4034ba:	bcf0      	pop	{r4, r5, r6, r7}
  4034bc:	4770      	bx	lr
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
  4034be:	4d0b      	ldr	r5, [pc, #44]	; (4034ec <f_mount+0x38>)
  4034c0:	682b      	ldr	r3, [r5, #0]

	if (rfs) {
  4034c2:	b15b      	cbz	r3, 4034dc <f_mount+0x28>
  4034c4:	4c0a      	ldr	r4, [pc, #40]	; (4034f0 <f_mount+0x3c>)
)
{
	UINT i;

	for (i = 0; i < _FS_SHARE; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
  4034c6:	4607      	mov	r7, r0
  4034c8:	4626      	mov	r6, r4
  4034ca:	5822      	ldr	r2, [r4, r0]
  4034cc:	4293      	cmp	r3, r2
  4034ce:	bf08      	it	eq
  4034d0:	5187      	streq	r7, [r0, r6]
  4034d2:	300c      	adds	r0, #12
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_SHARE; i++) {
  4034d4:	2824      	cmp	r0, #36	; 0x24
  4034d6:	d1f8      	bne.n	4034ca <f_mount+0x16>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
  4034d8:	2200      	movs	r2, #0
  4034da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
  4034dc:	b109      	cbz	r1, 4034e2 <f_mount+0x2e>
		fs->fs_type = 0;		/* Clear new fs object */
  4034de:	2300      	movs	r3, #0
  4034e0:	700b      	strb	r3, [r1, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
  4034e2:	6029      	str	r1, [r5, #0]

	return FR_OK;
  4034e4:	2000      	movs	r0, #0
}
  4034e6:	bcf0      	pop	{r4, r5, r6, r7}
  4034e8:	4770      	bx	lr
  4034ea:	bf00      	nop
  4034ec:	20000efc 	.word	0x20000efc
  4034f0:	20000ed8 	.word	0x20000ed8

004034f4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  4034f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4034f8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  4034fc:	2300      	movs	r3, #0
  4034fe:	6003      	str	r3, [r0, #0]
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  403500:	4616      	mov	r6, r2
  403502:	9101      	str	r1, [sp, #4]

	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  403504:	f002 021e 	and.w	r2, r2, #30
  403508:	4b9a      	ldr	r3, [pc, #616]	; (403774 <f_open+0x280>)
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  40350a:	4604      	mov	r4, r0

	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  40350c:	a905      	add	r1, sp, #20
  40350e:	a801      	add	r0, sp, #4
  403510:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  403512:	ab02      	add	r3, sp, #8
  403514:	aa0e      	add	r2, sp, #56	; 0x38
  403516:	930b      	str	r3, [sp, #44]	; 0x2c
  403518:	920c      	str	r2, [sp, #48]	; 0x30


	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  40351a:	f006 071f 	and.w	r7, r6, #31
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
	if (res == FR_OK)
  40351e:	b130      	cbz	r0, 40352e <f_open+0x3a>
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403520:	f016 0f1c 	tst.w	r6, #28
  403524:	d11a      	bne.n	40355c <f_open+0x68>
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
  403526:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  40352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
  40352e:	9901      	ldr	r1, [sp, #4]
  403530:	4b91      	ldr	r3, [pc, #580]	; (403778 <f_open+0x284>)
  403532:	a805      	add	r0, sp, #20
  403534:	4798      	blx	r3
	dir = dj.dir;
  403536:	9d0a      	ldr	r5, [sp, #40]	; 0x28

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
  403538:	2800      	cmp	r0, #0
  40353a:	d1f1      	bne.n	403520 <f_open+0x2c>
		if (!dir)	/* Current dir itself */
  40353c:	2d00      	cmp	r5, #0
  40353e:	f000 80ab 	beq.w	403698 <f_open+0x1a4>
			res = FR_INVALID_NAME;
#if _FS_SHARE
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
  403542:	f037 0801 	bics.w	r8, r7, #1
  403546:	bf0c      	ite	eq
  403548:	2100      	moveq	r1, #0
  40354a:	2101      	movne	r1, #1
  40354c:	a805      	add	r0, sp, #20
  40354e:	4b8b      	ldr	r3, [pc, #556]	; (40377c <f_open+0x288>)
  403550:	4798      	blx	r3
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403552:	f016 0f1c 	tst.w	r6, #28
  403556:	d01b      	beq.n	403590 <f_open+0x9c>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
  403558:	2800      	cmp	r0, #0
  40355a:	d050      	beq.n	4035fe <f_open+0x10a>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  40355c:	2804      	cmp	r0, #4
  40355e:	d1e2      	bne.n	403526 <f_open+0x32>
static
int enq_lock (void)	/* Check if an entry is available for a new file */
{
	UINT i;

	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
  403560:	4b87      	ldr	r3, [pc, #540]	; (403780 <f_open+0x28c>)
  403562:	681a      	ldr	r2, [r3, #0]
  403564:	b12a      	cbz	r2, 403572 <f_open+0x7e>
  403566:	68da      	ldr	r2, [r3, #12]
  403568:	b11a      	cbz	r2, 403572 <f_open+0x7e>
  40356a:	699b      	ldr	r3, [r3, #24]
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
  40356c:	2012      	movs	r0, #18
static
int enq_lock (void)	/* Check if an entry is available for a new file */
{
	UINT i;

	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
  40356e:	2b00      	cmp	r3, #0
  403570:	d1d9      	bne.n	403526 <f_open+0x32>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
  403572:	a805      	add	r0, sp, #20
  403574:	4b83      	ldr	r3, [pc, #524]	; (403784 <f_open+0x290>)
  403576:	4798      	blx	r3
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  403578:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  40357c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  40357e:	2800      	cmp	r0, #0
  403580:	d1d1      	bne.n	403526 <f_open+0x32>
  403582:	0738      	lsls	r0, r7, #28
  403584:	f100 808a 	bmi.w	40369c <f_open+0x1a8>
  403588:	9e05      	ldr	r6, [sp, #20]
  40358a:	f027 0801 	bic.w	r8, r7, #1
  40358e:	e011      	b.n	4035b4 <f_open+0xc0>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  403590:	2800      	cmp	r0, #0
  403592:	d1c8      	bne.n	403526 <f_open+0x32>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  403594:	7aeb      	ldrb	r3, [r5, #11]
  403596:	06d9      	lsls	r1, r3, #27
  403598:	d43e      	bmi.n	403618 <f_open+0x124>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  40359a:	07b2      	lsls	r2, r6, #30
  40359c:	d501      	bpl.n	4035a2 <f_open+0xae>
  40359e:	07db      	lsls	r3, r3, #31
  4035a0:	d435      	bmi.n	40360e <f_open+0x11a>
  4035a2:	f006 0308 	and.w	r3, r6, #8
  4035a6:	b2db      	uxtb	r3, r3
  4035a8:	9e05      	ldr	r6, [sp, #20]
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  4035aa:	b11b      	cbz	r3, 4035b4 <f_open+0xc0>
			mode |= FA__WRITTEN;
  4035ac:	f047 0720 	orr.w	r7, r7, #32
  4035b0:	f027 0801 	bic.w	r8, r7, #1
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  4035b4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
		if (Files[i].fs == dj->fs &&
			Files[i].clu == dj->sclust &&
  4035b6:	9807      	ldr	r0, [sp, #28]
			Files[i].idx == dj->index) break;
  4035b8:	f8bd c01a 	ldrh.w	ip, [sp, #26]
  4035bc:	4a72      	ldr	r2, [pc, #456]	; (403788 <f_open+0x294>)
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
			mode |= FA__WRITTEN;
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  4035be:	61e3      	str	r3, [r4, #28]
		fp->dir_ptr = dir;
  4035c0:	6225      	str	r5, [r4, #32]
)
{
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
  4035c2:	2300      	movs	r3, #0
		if (Files[i].fs == dj->fs &&
  4035c4:	f852 1c08 	ldr.w	r1, [r2, #-8]
  4035c8:	42b1      	cmp	r1, r6
  4035ca:	d02a      	beq.n	403622 <f_open+0x12e>
)
{
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
  4035cc:	3301      	adds	r3, #1
  4035ce:	2b03      	cmp	r3, #3
  4035d0:	f102 020c 	add.w	r2, r2, #12
  4035d4:	d1f6      	bne.n	4035c4 <f_open+0xd0>
			Files[i].clu == dj->sclust &&
			Files[i].idx == dj->index) break;
	}

	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
  4035d6:	4a6a      	ldr	r2, [pc, #424]	; (403780 <f_open+0x28c>)
  4035d8:	6813      	ldr	r3, [r2, #0]
  4035da:	2b00      	cmp	r3, #0
  4035dc:	f000 809a 	beq.w	403714 <f_open+0x220>
  4035e0:	68d3      	ldr	r3, [r2, #12]
  4035e2:	2b00      	cmp	r3, #0
  4035e4:	f000 8095 	beq.w	403712 <f_open+0x21e>
  4035e8:	6993      	ldr	r3, [r2, #24]
  4035ea:	2b00      	cmp	r3, #0
  4035ec:	f000 80ac 	beq.w	403748 <f_open+0x254>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
			mode |= FA__WRITTEN;
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
		fp->dir_ptr = dir;
#if _FS_SHARE
		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
  4035f0:	2300      	movs	r3, #0
		if (!fp->lockid) res = FR_INT_ERR;
  4035f2:	2002      	movs	r0, #2
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
			mode |= FA__WRITTEN;
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
		fp->dir_ptr = dir;
#if _FS_SHARE
		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
  4035f4:	6263      	str	r3, [r4, #36]	; 0x24
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
  4035f6:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  4035fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  4035fe:	7aeb      	ldrb	r3, [r5, #11]
  403600:	f013 0f11 	tst.w	r3, #17
  403604:	d103      	bne.n	40360e <f_open+0x11a>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  403606:	0776      	lsls	r6, r6, #29
  403608:	d5bb      	bpl.n	403582 <f_open+0x8e>
					res = FR_EXIST;
  40360a:	2008      	movs	r0, #8
  40360c:	e78b      	b.n	403526 <f_open+0x32>
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
  40360e:	2007      	movs	r0, #7
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
  403610:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  403614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
  403618:	2004      	movs	r0, #4
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
  40361a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  40361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
		if (Files[i].fs == dj->fs &&
  403622:	f852 1c04 	ldr.w	r1, [r2, #-4]
  403626:	4281      	cmp	r1, r0
  403628:	d1d0      	bne.n	4035cc <f_open+0xd8>
			Files[i].clu == dj->sclust &&
  40362a:	8811      	ldrh	r1, [r2, #0]
  40362c:	4561      	cmp	r1, ip
  40362e:	d1cd      	bne.n	4035cc <f_open+0xd8>
  403630:	0059      	lsls	r1, r3, #1
  403632:	4a53      	ldr	r2, [pc, #332]	; (403780 <f_open+0x28c>)
  403634:	18c8      	adds	r0, r1, r3
  403636:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40363a:	8940      	ldrh	r0, [r0, #10]
		Files[i].clu = dj->sclust;
		Files[i].idx = dj->index;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
  40363c:	f1b8 0f00 	cmp.w	r8, #0
  403640:	d161      	bne.n	403706 <f_open+0x212>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
  403642:	3001      	adds	r0, #1
  403644:	b280      	uxth	r0, r0
  403646:	4419      	add	r1, r3
  403648:	eb02 0281 	add.w	r2, r2, r1, lsl #2

	return i + 1;
  40364c:	3301      	adds	r3, #1
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
  40364e:	8150      	strh	r0, [r2, #10]
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
			mode |= FA__WRITTEN;
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
		fp->dir_ptr = dir;
#if _FS_SHARE
		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
  403650:	6263      	str	r3, [r4, #36]	; 0x24
		if (!fp->lockid) res = FR_INT_ERR;
  403652:	2b00      	cmp	r3, #0
  403654:	d052      	beq.n	4036fc <f_open+0x208>
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
  403656:	71a7      	strb	r7, [r4, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  403658:	7d68      	ldrb	r0, [r5, #21]
  40365a:	7ea9      	ldrb	r1, [r5, #26]
  40365c:	7d2a      	ldrb	r2, [r5, #20]
  40365e:	7eeb      	ldrb	r3, [r5, #27]
  403660:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  403664:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  403668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40366c:	6123      	str	r3, [r4, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  40366e:	7fab      	ldrb	r3, [r5, #30]
  403670:	7fe8      	ldrb	r0, [r5, #31]
  403672:	7f29      	ldrb	r1, [r5, #28]
  403674:	7f6a      	ldrb	r2, [r5, #29]
		fp->fptr = 0;						/* File pointer */
		fp->dsect = 0;
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  403676:	6026      	str	r6, [r4, #0]
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  403678:	041b      	lsls	r3, r3, #16
  40367a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  40367e:	430b      	orrs	r3, r1
		fp->fptr = 0;						/* File pointer */
  403680:	2000      	movs	r0, #0
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  403682:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403686:	60e3      	str	r3, [r4, #12]
		fp->fptr = 0;						/* File pointer */
  403688:	60a0      	str	r0, [r4, #8]
		fp->dsect = 0;
  40368a:	61a0      	str	r0, [r4, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  40368c:	88f3      	ldrh	r3, [r6, #6]
  40368e:	80a3      	strh	r3, [r4, #4]
	}

	LEAVE_FF(dj.fs, res);
}
  403690:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  403694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dir = dj.dir;

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
		if (!dir)	/* Current dir itself */
			res = FR_INVALID_NAME;
  403698:	2006      	movs	r0, #6
  40369a:	e741      	b.n	403520 <f_open+0x2c>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
  40369c:	4b3b      	ldr	r3, [pc, #236]	; (40378c <f_open+0x298>)
  40369e:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
  4036a0:	f895 c015 	ldrb.w	ip, [r5, #21]
  4036a4:	7eab      	ldrb	r3, [r5, #26]
  4036a6:	7d29      	ldrb	r1, [r5, #20]
  4036a8:	7eea      	ldrb	r2, [r5, #27]
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
  4036aa:	9e05      	ldr	r6, [sp, #20]
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
  4036ac:	73a8      	strb	r0, [r5, #14]
  4036ae:	ea4f 4810 	mov.w	r8, r0, lsr #16
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
  4036b2:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
  4036b6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
  4036ba:	f3c0 2907 	ubfx	r9, r0, #8, #8
			dir[DIR_Attr] = 0;					/* Reset attribute */
  4036be:	2300      	movs	r3, #0
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
  4036c0:	f885 8010 	strb.w	r8, [r5, #16]
  4036c4:	0e00      	lsrs	r0, r0, #24
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
  4036c6:	f04f 0c01 	mov.w	ip, #1
			if (cl) {							/* Remove the cluster chain if exist */
  4036ca:	ea52 4801 	orrs.w	r8, r2, r1, lsl #16
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
  4036ce:	f885 900f 	strb.w	r9, [r5, #15]
  4036d2:	7468      	strb	r0, [r5, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  4036d4:	72eb      	strb	r3, [r5, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  4036d6:	772b      	strb	r3, [r5, #28]
  4036d8:	776b      	strb	r3, [r5, #29]
  4036da:	77ab      	strb	r3, [r5, #30]
  4036dc:	77eb      	strb	r3, [r5, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
			ST_CLUST(dir, 0);					/* cluster = 0 */
  4036de:	76ab      	strb	r3, [r5, #26]
  4036e0:	76eb      	strb	r3, [r5, #27]
  4036e2:	752b      	strb	r3, [r5, #20]
  4036e4:	756b      	strb	r3, [r5, #21]
			dj.fs->wflag = 1;
  4036e6:	f886 c004 	strb.w	ip, [r6, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  4036ea:	f43f af5f 	beq.w	4035ac <f_open+0xb8>
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4036ee:	45e0      	cmp	r8, ip
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
  4036f0:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4036f4:	d002      	beq.n	4036fc <f_open+0x208>
  4036f6:	69b3      	ldr	r3, [r6, #24]
  4036f8:	4598      	cmp	r8, r3
  4036fa:	d327      	bcc.n	40374c <f_open+0x258>
			mode |= FA__WRITTEN;
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
		fp->dir_ptr = dir;
#if _FS_SHARE
		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
		if (!fp->lockid) res = FR_INT_ERR;
  4036fc:	2002      	movs	r0, #2
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
  4036fe:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  403702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Files[i].clu = dj->sclust;
		Files[i].idx = dj->index;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
  403706:	2800      	cmp	r0, #0
  403708:	f47f af72 	bne.w	4035f0 <f_open+0xfc>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
  40370c:	f44f 7080 	mov.w	r0, #256	; 0x100
  403710:	e799      	b.n	403646 <f_open+0x152>
			Files[i].clu == dj->sclust &&
			Files[i].idx == dj->index) break;
	}

	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
  403712:	2301      	movs	r3, #1
		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
		Files[i].fs = dj->fs;
  403714:	0059      	lsls	r1, r3, #1
  403716:	eb01 0c03 	add.w	ip, r1, r3
  40371a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  40371e:	eb02 000c 	add.w	r0, r2, ip
  403722:	f842 600c 	str.w	r6, [r2, ip]
		Files[i].clu = dj->sclust;
  403726:	f8dd b01c 	ldr.w	fp, [sp, #28]
		Files[i].idx = dj->index;
  40372a:	f8bd a01a 	ldrh.w	sl, [sp, #26]

	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
		Files[i].fs = dj->fs;
		Files[i].clu = dj->sclust;
  40372e:	f8c0 b004 	str.w	fp, [r0, #4]
		Files[i].idx = dj->index;
		Files[i].ctr = 0;
  403732:	f04f 0c00 	mov.w	ip, #0
	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
		Files[i].fs = dj->fs;
		Files[i].clu = dj->sclust;
		Files[i].idx = dj->index;
  403736:	f8a0 a008 	strh.w	sl, [r0, #8]
		Files[i].ctr = 0;
  40373a:	f8a0 c00a 	strh.w	ip, [r0, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
  40373e:	f1b8 0f00 	cmp.w	r8, #0
  403742:	d1e3      	bne.n	40370c <f_open+0x218>
  403744:	4640      	mov	r0, r8
  403746:	e77c      	b.n	403642 <f_open+0x14e>
			Files[i].clu == dj->sclust &&
			Files[i].idx == dj->index) break;
	}

	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
  403748:	2302      	movs	r3, #2
  40374a:	e7e3      	b.n	403714 <f_open+0x220>
  40374c:	4630      	mov	r0, r6
  40374e:	4641      	mov	r1, r8
  403750:	4b0f      	ldr	r3, [pc, #60]	; (403790 <f_open+0x29c>)
  403752:	4798      	blx	r3
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
				res = remove_chain(dj.fs, cl);
				if (res == FR_OK) {
  403754:	2800      	cmp	r0, #0
  403756:	f47f aee6 	bne.w	403526 <f_open+0x32>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  40375a:	9805      	ldr	r0, [sp, #20]
					res = move_window(dj.fs, dw);
  40375c:	4b0d      	ldr	r3, [pc, #52]	; (403794 <f_open+0x2a0>)
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
				res = remove_chain(dj.fs, cl);
				if (res == FR_OK) {
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  40375e:	f108 32ff 	add.w	r2, r8, #4294967295
					res = move_window(dj.fs, dw);
  403762:	4649      	mov	r1, r9
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
				res = remove_chain(dj.fs, cl);
				if (res == FR_OK) {
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  403764:	60c2      	str	r2, [r0, #12]
					res = move_window(dj.fs, dw);
  403766:	4798      	blx	r3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
  403768:	2800      	cmp	r0, #0
  40376a:	f47f aedc 	bne.w	403526 <f_open+0x32>
  40376e:	9e05      	ldr	r6, [sp, #20]
  403770:	e71c      	b.n	4035ac <f_open+0xb8>
  403772:	bf00      	nop
  403774:	0040253d 	.word	0x0040253d
  403778:	004031d9 	.word	0x004031d9
  40377c:	004022bd 	.word	0x004022bd
  403780:	20000ed8 	.word	0x20000ed8
  403784:	00402e61 	.word	0x00402e61
  403788:	20000ee0 	.word	0x20000ee0
  40378c:	00402265 	.word	0x00402265
  403790:	0040316d 	.word	0x0040316d
  403794:	0040232d 	.word	0x0040232d

00403798 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
  403798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40379c:	469b      	mov	fp, r3
  40379e:	4606      	mov	r6, r0
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
  4037a0:	2300      	movs	r3, #0
  4037a2:	f8cb 3000 	str.w	r3, [fp]
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
  4037a6:	b083      	sub	sp, #12
  4037a8:	460d      	mov	r5, r1
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
  4037aa:	6800      	ldr	r0, [r0, #0]
  4037ac:	88b1      	ldrh	r1, [r6, #4]
  4037ae:	4b62      	ldr	r3, [pc, #392]	; (403938 <f_read+0x1a0>)
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
  4037b0:	4614      	mov	r4, r2
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
  4037b2:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  4037b4:	b928      	cbnz	r0, 4037c2 <f_read+0x2a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
  4037b6:	79b3      	ldrb	r3, [r6, #6]
  4037b8:	061f      	lsls	r7, r3, #24
  4037ba:	d405      	bmi.n	4037c8 <f_read+0x30>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
  4037bc:	07d8      	lsls	r0, r3, #31
  4037be:	d407      	bmi.n	4037d0 <f_read+0x38>
		LEAVE_FF(fp->fs, FR_DENIED);
  4037c0:	2007      	movs	r0, #7
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
  4037c2:	b003      	add	sp, #12
  4037c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
  4037c8:	2002      	movs	r0, #2
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
  4037ca:	b003      	add	sp, #12
  4037cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
  4037d0:	68b1      	ldr	r1, [r6, #8]
  4037d2:	68f7      	ldr	r7, [r6, #12]
  4037d4:	1a7f      	subs	r7, r7, r1
  4037d6:	42bc      	cmp	r4, r7
  4037d8:	bf38      	it	cc
  4037da:	4627      	movcc	r7, r4
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
  4037dc:	2f00      	cmp	r7, #0
  4037de:	f000 80a8 	beq.w	403932 <f_read+0x19a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
  4037e2:	f3c1 0308 	ubfx	r3, r1, #0, #9
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
  4037e6:	f8df 8158 	ldr.w	r8, [pc, #344]	; 403940 <f_read+0x1a8>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  4037ea:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403944 <f_read+0x1ac>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
  4037ee:	2b00      	cmp	r3, #0
  4037f0:	d13e      	bne.n	403870 <f_read+0xd8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  4037f2:	6830      	ldr	r0, [r6, #0]
  4037f4:	7883      	ldrb	r3, [r0, #2]
  4037f6:	3b01      	subs	r3, #1
  4037f8:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {						/* On the cluster boundary? */
  4037fc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  403800:	d04b      	beq.n	40389a <f_read+0x102>
  403802:	6972      	ldr	r2, [r6, #20]
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  403804:	6981      	ldr	r1, [r0, #24]
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  403806:	f1a2 0c02 	sub.w	ip, r2, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  40380a:	3902      	subs	r1, #2
  40380c:	458c      	cmp	ip, r1
  40380e:	d271      	bcs.n	4038f4 <f_read+0x15c>
	return clst * fs->csize + fs->database;
  403810:	7882      	ldrb	r2, [r0, #2]
  403812:	6a81      	ldr	r1, [r0, #40]	; 0x28
  403814:	fb02 110c 	mla	r1, r2, ip, r1
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  403818:	2900      	cmp	r1, #0
  40381a:	d06b      	beq.n	4038f4 <f_read+0x15c>
			sect += csect;
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
  40381c:	0a7c      	lsrs	r4, r7, #9
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
  40381e:	eb01 0a03 	add.w	sl, r1, r3
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
  403822:	d043      	beq.n	4038ac <f_read+0x114>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  403824:	1919      	adds	r1, r3, r4
  403826:	4291      	cmp	r1, r2
					cc = fp->fs->csize - csect;
  403828:	bf88      	it	hi
  40382a:	ebc3 0402 	rsbhi	r4, r3, r2
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
  40382e:	b2e3      	uxtb	r3, r4
  403830:	7840      	ldrb	r0, [r0, #1]
  403832:	4629      	mov	r1, r5
  403834:	4652      	mov	r2, sl
  403836:	47c0      	blx	r8
					ABORT(fp->fs, FR_DISK_ERR);
  403838:	79b3      	ldrb	r3, [r6, #6]
			sect += csect;
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
  40383a:	2800      	cmp	r0, #0
  40383c:	d161      	bne.n	403902 <f_read+0x16a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
  40383e:	065a      	lsls	r2, r3, #25
  403840:	d504      	bpl.n	40384c <f_read+0xb4>
  403842:	69b3      	ldr	r3, [r6, #24]
  403844:	ebca 0303 	rsb	r3, sl, r3
  403848:	429c      	cmp	r4, r3
  40384a:	d85f      	bhi.n	40390c <f_read+0x174>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
  40384c:	0262      	lsls	r2, r4, #9
  40384e:	68b1      	ldr	r1, [r6, #8]
  403850:	18ab      	adds	r3, r5, r2
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  403852:	4411      	add	r1, r2
  403854:	60b1      	str	r1, [r6, #8]
  403856:	f8db 1000 	ldr.w	r1, [fp]
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
  40385a:	1abf      	subs	r7, r7, r2
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  40385c:	4411      	add	r1, r2
  40385e:	461d      	mov	r5, r3
  403860:	f8cb 1000 	str.w	r1, [fp]
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
  403864:	d065      	beq.n	403932 <f_read+0x19a>
  403866:	68b1      	ldr	r1, [r6, #8]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
  403868:	f3c1 0308 	ubfx	r3, r1, #0, #9
  40386c:	2b00      	cmp	r3, #0
  40386e:	d0c0      	beq.n	4037f2 <f_read+0x5a>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
  403870:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
  403874:	f103 0428 	add.w	r4, r3, #40	; 0x28
  403878:	42ba      	cmp	r2, r7
  40387a:	bf28      	it	cs
  40387c:	463a      	movcs	r2, r7
  40387e:	4434      	add	r4, r6
  403880:	462b      	mov	r3, r5
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  403882:	2a00      	cmp	r2, #0
  403884:	d0e5      	beq.n	403852 <f_read+0xba>
  403886:	18ab      	adds	r3, r5, r2
  403888:	4629      	mov	r1, r5
		*d++ = *s++;
  40388a:	f814 5b01 	ldrb.w	r5, [r4], #1
  40388e:	f801 5b01 	strb.w	r5, [r1], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  403892:	4299      	cmp	r1, r3
  403894:	d1f9      	bne.n	40388a <f_read+0xf2>
  403896:	68b1      	ldr	r1, [r6, #8]
  403898:	e7db      	b.n	403852 <f_read+0xba>
	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {						/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
  40389a:	bb29      	cbnz	r1, 4038e8 <f_read+0x150>
					clst = fp->sclust;			/* Follow from the origin */
  40389c:	6932      	ldr	r2, [r6, #16]
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  40389e:	2a01      	cmp	r2, #1
  4038a0:	d928      	bls.n	4038f4 <f_read+0x15c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4038a2:	1c51      	adds	r1, r2, #1
  4038a4:	d02c      	beq.n	403900 <f_read+0x168>
  4038a6:	6830      	ldr	r0, [r6, #0]
				fp->clust = clst;				/* Update current cluster */
  4038a8:	6172      	str	r2, [r6, #20]
  4038aa:	e7ab      	b.n	403804 <f_read+0x6c>
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
				continue;
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
  4038ac:	69b2      	ldr	r2, [r6, #24]
  4038ae:	4552      	cmp	r2, sl
  4038b0:	d014      	beq.n	4038dc <f_read+0x144>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
  4038b2:	79b3      	ldrb	r3, [r6, #6]
  4038b4:	065b      	lsls	r3, r3, #25
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  4038b6:	f106 0428 	add.w	r4, r6, #40	; 0x28
				continue;
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
  4038ba:	d509      	bpl.n	4038d0 <f_read+0x138>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  4038bc:	2301      	movs	r3, #1
  4038be:	7840      	ldrb	r0, [r0, #1]
  4038c0:	4621      	mov	r1, r4
  4038c2:	47c8      	blx	r9
						ABORT(fp->fs, FR_DISK_ERR);
  4038c4:	79b3      	ldrb	r3, [r6, #6]
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  4038c6:	b9e0      	cbnz	r0, 403902 <f_read+0x16a>
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
  4038c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4038cc:	6830      	ldr	r0, [r6, #0]
  4038ce:	71b3      	strb	r3, [r6, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
  4038d0:	7840      	ldrb	r0, [r0, #1]
  4038d2:	4621      	mov	r1, r4
  4038d4:	4652      	mov	r2, sl
  4038d6:	2301      	movs	r3, #1
  4038d8:	47c0      	blx	r8
  4038da:	b988      	cbnz	r0, 403900 <f_read+0x168>
  4038dc:	68b1      	ldr	r1, [r6, #8]
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
  4038de:	f8c6 a018 	str.w	sl, [r6, #24]
  4038e2:	f3c1 0308 	ubfx	r3, r1, #0, #9
  4038e6:	e7c3      	b.n	403870 <f_read+0xd8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
  4038e8:	6971      	ldr	r1, [r6, #20]
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4038ea:	2901      	cmp	r1, #1
  4038ec:	d902      	bls.n	4038f4 <f_read+0x15c>
  4038ee:	6982      	ldr	r2, [r0, #24]
  4038f0:	4291      	cmp	r1, r2
  4038f2:	d318      	bcc.n	403926 <f_read+0x18e>
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  4038f4:	79b3      	ldrb	r3, [r6, #6]
  4038f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4038fa:	71b3      	strb	r3, [r6, #6]
  4038fc:	2002      	movs	r0, #2
  4038fe:	e760      	b.n	4037c2 <f_read+0x2a>
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
  403900:	79b3      	ldrb	r3, [r6, #6]
  403902:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403906:	71b3      	strb	r3, [r6, #6]
  403908:	2001      	movs	r0, #1
  40390a:	e75a      	b.n	4037c2 <f_read+0x2a>
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
  40390c:	eb05 2343 	add.w	r3, r5, r3, lsl #9
  403910:	f503 7000 	add.w	r0, r3, #512	; 0x200
  403914:	f106 0228 	add.w	r2, r6, #40	; 0x28
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
  403918:	f812 1b01 	ldrb.w	r1, [r2], #1
  40391c:	f803 1b01 	strb.w	r1, [r3], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  403920:	4283      	cmp	r3, r0
  403922:	d1f9      	bne.n	403918 <f_read+0x180>
  403924:	e792      	b.n	40384c <f_read+0xb4>
  403926:	9301      	str	r3, [sp, #4]
  403928:	4a04      	ldr	r2, [pc, #16]	; (40393c <f_read+0x1a4>)
  40392a:	4790      	blx	r2
  40392c:	9b01      	ldr	r3, [sp, #4]
  40392e:	4602      	mov	r2, r0
  403930:	e7b5      	b.n	40389e <f_read+0x106>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
  403932:	2000      	movs	r0, #0
  403934:	e745      	b.n	4037c2 <f_read+0x2a>
  403936:	bf00      	nop
  403938:	00402489 	.word	0x00402489
  40393c:	0040286d 	.word	0x0040286d
  403940:	0040210d 	.word	0x0040210d
  403944:	00402181 	.word	0x00402181

00403948 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  403948:	b538      	push	{r3, r4, r5, lr}
  40394a:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  40394c:	4b27      	ldr	r3, [pc, #156]	; (4039ec <f_sync+0xa4>)
  40394e:	6800      	ldr	r0, [r0, #0]
  403950:	88a1      	ldrh	r1, [r4, #4]
  403952:	4798      	blx	r3
	if (res == FR_OK) {
  403954:	b9d0      	cbnz	r0, 40398c <f_sync+0x44>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  403956:	79a2      	ldrb	r2, [r4, #6]
  403958:	f002 0320 	and.w	r3, r2, #32
  40395c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  403960:	b1a3      	cbz	r3, 40398c <f_sync+0x44>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
  403962:	0653      	lsls	r3, r2, #25
  403964:	d50d      	bpl.n	403982 <f_sync+0x3a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  403966:	4621      	mov	r1, r4
  403968:	69a2      	ldr	r2, [r4, #24]
  40396a:	f851 3b28 	ldr.w	r3, [r1], #40
  40396e:	4d20      	ldr	r5, [pc, #128]	; (4039f0 <f_sync+0xa8>)
  403970:	7858      	ldrb	r0, [r3, #1]
  403972:	2301      	movs	r3, #1
  403974:	47a8      	blx	r5
  403976:	2800      	cmp	r0, #0
  403978:	d136      	bne.n	4039e8 <f_sync+0xa0>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
  40397a:	79a3      	ldrb	r3, [r4, #6]
  40397c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  403980:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  403982:	6820      	ldr	r0, [r4, #0]
  403984:	69e1      	ldr	r1, [r4, #28]
  403986:	4b1b      	ldr	r3, [pc, #108]	; (4039f4 <f_sync+0xac>)
  403988:	4798      	blx	r3
			if (res == FR_OK) {
  40398a:	b100      	cbz	r0, 40398e <f_sync+0x46>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  40398c:	bd38      	pop	{r3, r4, r5, pc}
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
			if (res == FR_OK) {
				dir = fp->dir_ptr;
  40398e:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
				tim = get_fattime();						/* Update updated time */
  403990:	4a19      	ldr	r2, [pc, #100]	; (4039f8 <f_sync+0xb0>)
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
			if (res == FR_OK) {
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  403992:	7aeb      	ldrb	r3, [r5, #11]
  403994:	f043 0320 	orr.w	r3, r3, #32
  403998:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  40399a:	68e3      	ldr	r3, [r4, #12]
  40399c:	772b      	strb	r3, [r5, #28]
  40399e:	89a3      	ldrh	r3, [r4, #12]
  4039a0:	0a1b      	lsrs	r3, r3, #8
  4039a2:	776b      	strb	r3, [r5, #29]
  4039a4:	89e3      	ldrh	r3, [r4, #14]
  4039a6:	77ab      	strb	r3, [r5, #30]
  4039a8:	7be3      	ldrb	r3, [r4, #15]
  4039aa:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  4039ac:	6923      	ldr	r3, [r4, #16]
  4039ae:	76ab      	strb	r3, [r5, #26]
  4039b0:	8a23      	ldrh	r3, [r4, #16]
  4039b2:	0a1b      	lsrs	r3, r3, #8
  4039b4:	76eb      	strb	r3, [r5, #27]
  4039b6:	8a63      	ldrh	r3, [r4, #18]
  4039b8:	752b      	strb	r3, [r5, #20]
  4039ba:	8a63      	ldrh	r3, [r4, #18]
  4039bc:	0a1b      	lsrs	r3, r3, #8
  4039be:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  4039c0:	4790      	blx	r2
				ST_DWORD(dir+DIR_WrtTime, tim);
  4039c2:	f3c0 2107 	ubfx	r1, r0, #8, #8
  4039c6:	0c02      	lsrs	r2, r0, #16
  4039c8:	0e03      	lsrs	r3, r0, #24
  4039ca:	75e9      	strb	r1, [r5, #23]
  4039cc:	762a      	strb	r2, [r5, #24]
  4039ce:	75a8      	strb	r0, [r5, #22]
  4039d0:	766b      	strb	r3, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  4039d2:	79a0      	ldrb	r0, [r4, #6]
				fp->fs->wflag = 1;
  4039d4:	6823      	ldr	r3, [r4, #0]
				res = sync(fp->fs);
  4039d6:	4a09      	ldr	r2, [pc, #36]	; (4039fc <f_sync+0xb4>)
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
				tim = get_fattime();						/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
				fp->flag &= ~FA__WRITTEN;
  4039d8:	f020 0020 	bic.w	r0, r0, #32
				fp->fs->wflag = 1;
  4039dc:	2101      	movs	r1, #1
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
				tim = get_fattime();						/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
				fp->flag &= ~FA__WRITTEN;
  4039de:	71a0      	strb	r0, [r4, #6]
				fp->fs->wflag = 1;
  4039e0:	7119      	strb	r1, [r3, #4]
				res = sync(fp->fs);
  4039e2:	6820      	ldr	r0, [r4, #0]
  4039e4:	4790      	blx	r2
  4039e6:	bd38      	pop	{r3, r4, r5, pc}
	if (res == FR_OK) {
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					LEAVE_FF(fp->fs, FR_DISK_ERR);
  4039e8:	2001      	movs	r0, #1
  4039ea:	e7cf      	b.n	40398c <f_sync+0x44>
  4039ec:	00402489 	.word	0x00402489
  4039f0:	00402181 	.word	0x00402181
  4039f4:	0040232d 	.word	0x0040232d
  4039f8:	00402265 	.word	0x00402265
  4039fc:	004023b1 	.word	0x004023b1

00403a00 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  403a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  403a02:	4b10      	ldr	r3, [pc, #64]	; (403a44 <f_close+0x44>)
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  403a04:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  403a06:	4798      	blx	r3
#if _FS_SHARE
	if (res == FR_OK) {		/* Decrement open counter */
  403a08:	b998      	cbnz	r0, 403a32 <f_close+0x32>
{
	WORD n;
	FRESULT res;


	if (--i < _FS_SHARE) {
  403a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403a0c:	3b01      	subs	r3, #1
  403a0e:	2b02      	cmp	r3, #2
  403a10:	d810      	bhi.n	403a34 <f_close+0x34>
		n = Files[i].ctr;
  403a12:	005d      	lsls	r5, r3, #1
  403a14:	490c      	ldr	r1, [pc, #48]	; (403a48 <f_close+0x48>)
  403a16:	18ea      	adds	r2, r5, r3
  403a18:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  403a1c:	3208      	adds	r2, #8
  403a1e:	8856      	ldrh	r6, [r2, #2]
		if (n == 0x100) n = 0;
		if (n) n--;
  403a20:	f426 7780 	bic.w	r7, r6, #256	; 0x100
  403a24:	b147      	cbz	r7, 403a38 <f_close+0x38>
  403a26:	3e01      	subs	r6, #1
  403a28:	b2b6      	uxth	r6, r6
		Files[i].ctr = n;
  403a2a:	8056      	strh	r6, [r2, #2]
		if (!n) Files[i].fs = 0;
  403a2c:	b12e      	cbz	r6, 403a3a <f_close+0x3a>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  403a2e:	2300      	movs	r3, #0
  403a30:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
  403a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (n) n--;
		Files[i].ctr = n;
		if (!n) Files[i].fs = 0;
		res = FR_OK;
	} else {
		res = FR_INT_ERR;
  403a34:	2002      	movs	r0, #2
  403a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	if (--i < _FS_SHARE) {
		n = Files[i].ctr;
		if (n == 0x100) n = 0;
		if (n) n--;
		Files[i].ctr = n;
  403a38:	8050      	strh	r0, [r2, #2]
		if (!n) Files[i].fs = 0;
  403a3a:	442b      	add	r3, r5
  403a3c:	009b      	lsls	r3, r3, #2
  403a3e:	2200      	movs	r2, #0
  403a40:	50ca      	str	r2, [r1, r3]
  403a42:	e7f4      	b.n	403a2e <f_close+0x2e>
  403a44:	00403949 	.word	0x00403949
  403a48:	20000ed8 	.word	0x20000ed8

00403a4c <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  403a4c:	287f      	cmp	r0, #127	; 0x7f

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
  403a4e:	b410      	push	{r4}
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  403a50:	d90e      	bls.n	403a70 <ff_convert+0x24>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  403a52:	b981      	cbnz	r1, 403a76 <ff_convert+0x2a>
  403a54:	4b0e      	ldr	r3, [pc, #56]	; (403a90 <ff_convert+0x44>)
  403a56:	e001      	b.n	403a5c <ff_convert+0x10>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  403a58:	2980      	cmp	r1, #128	; 0x80
  403a5a:	d015      	beq.n	403a88 <ff_convert+0x3c>
				if (src == Tbl[c]) break;
  403a5c:	f833 2f02 	ldrh.w	r2, [r3, #2]!
  403a60:	4282      	cmp	r2, r0
  403a62:	b28c      	uxth	r4, r1
  403a64:	f101 0101 	add.w	r1, r1, #1
  403a68:	d1f6      	bne.n	403a58 <ff_convert+0xc>
  403a6a:	f104 0080 	add.w	r0, r4, #128	; 0x80
  403a6e:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
  403a70:	f85d 4b04 	ldr.w	r4, [sp], #4
  403a74:	4770      	bx	lr
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  403a76:	28ff      	cmp	r0, #255	; 0xff
  403a78:	d806      	bhi.n	403a88 <ff_convert+0x3c>
  403a7a:	3880      	subs	r0, #128	; 0x80
  403a7c:	4b05      	ldr	r3, [pc, #20]	; (403a94 <ff_convert+0x48>)
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
  403a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  403a82:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
  403a86:	4770      	bx	lr
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  403a88:	2000      	movs	r0, #0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
  403a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  403a8e:	4770      	bx	lr
  403a90:	00406a5a 	.word	0x00406a5a
  403a94:	00406a5c 	.word	0x00406a5c

00403a98 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  403a98:	2861      	cmp	r0, #97	; 0x61
  403a9a:	d00a      	beq.n	403ab2 <ff_wtoupper+0x1a>
  403a9c:	4907      	ldr	r1, [pc, #28]	; (403abc <ff_wtoupper+0x24>)
  403a9e:	2200      	movs	r2, #0
  403aa0:	e001      	b.n	403aa6 <ff_wtoupper+0xe>
  403aa2:	4283      	cmp	r3, r0
  403aa4:	d006      	beq.n	403ab4 <ff_wtoupper+0x1c>
  403aa6:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  403aaa:	3201      	adds	r2, #1
  403aac:	2b00      	cmp	r3, #0
  403aae:	d1f8      	bne.n	403aa2 <ff_wtoupper+0xa>

	return tbl_lower[i] ? tbl_upper[i] : chr;
}
  403ab0:	4770      	bx	lr
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  403ab2:	2200      	movs	r2, #0

	return tbl_lower[i] ? tbl_upper[i] : chr;
  403ab4:	4b02      	ldr	r3, [pc, #8]	; (403ac0 <ff_wtoupper+0x28>)
  403ab6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  403aba:	4770      	bx	lr
  403abc:	0040687c 	.word	0x0040687c
  403ac0:	00406b5c 	.word	0x00406b5c

00403ac4 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  403ac4:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
  403ac6:	685a      	ldr	r2, [r3, #4]
  403ac8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  403aca:	6842      	ldr	r2, [r0, #4]
  403acc:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  403ace:	685a      	ldr	r2, [r3, #4]
  403ad0:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  403ad2:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  403ad4:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  403ad6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  403ad8:	6803      	ldr	r3, [r0, #0]
  403ada:	3301      	adds	r3, #1
  403adc:	6003      	str	r3, [r0, #0]
  403ade:	4770      	bx	lr

00403ae0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  403ae0:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  403ae2:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  403ae4:	1c63      	adds	r3, r4, #1
  403ae6:	d016      	beq.n	403b16 <vListInsert+0x36>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  403ae8:	68c3      	ldr	r3, [r0, #12]
  403aea:	681a      	ldr	r2, [r3, #0]
  403aec:	4294      	cmp	r4, r2
  403aee:	f100 0308 	add.w	r3, r0, #8
  403af2:	d304      	bcc.n	403afe <vListInsert+0x1e>
  403af4:	685b      	ldr	r3, [r3, #4]
  403af6:	685a      	ldr	r2, [r3, #4]
  403af8:	6812      	ldr	r2, [r2, #0]
  403afa:	4294      	cmp	r4, r2
  403afc:	d2fa      	bcs.n	403af4 <vListInsert+0x14>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  403afe:	685a      	ldr	r2, [r3, #4]
  403b00:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  403b02:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
  403b04:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  403b06:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  403b08:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  403b0a:	6803      	ldr	r3, [r0, #0]
}
  403b0c:	f85d 4b04 	ldr.w	r4, [sp], #4

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
  403b10:	3301      	adds	r3, #1
  403b12:	6003      	str	r3, [r0, #0]
}
  403b14:	4770      	bx	lr
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  403b16:	6903      	ldr	r3, [r0, #16]
  403b18:	e7f1      	b.n	403afe <vListInsert+0x1e>
  403b1a:	bf00      	nop

00403b1c <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  403b1c:	6843      	ldr	r3, [r0, #4]
  403b1e:	6882      	ldr	r2, [r0, #8]
  403b20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  403b22:	6883      	ldr	r3, [r0, #8]
  403b24:	6842      	ldr	r2, [r0, #4]
  403b26:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  403b28:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  403b2a:	685a      	ldr	r2, [r3, #4]
  403b2c:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  403b2e:	bf04      	itt	eq
  403b30:	6882      	ldreq	r2, [r0, #8]
  403b32:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  403b34:	2200      	movs	r2, #0
  403b36:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  403b38:	681a      	ldr	r2, [r3, #0]
  403b3a:	3a01      	subs	r2, #1
  403b3c:	601a      	str	r2, [r3, #0]
  403b3e:	4770      	bx	lr

00403b40 <SVC_Handler>:
/**
 * \brief Handler for Sytem supervisor call.
 */
void vPortSVCHandler(void)
{
	__asm volatile (" ldr r3, pxCurrentTCBConst2  \n"  /* Restore the context. */
  403b40:	4b06      	ldr	r3, [pc, #24]	; (403b5c <pxCurrentTCBConst2>)
  403b42:	6819      	ldr	r1, [r3, #0]
  403b44:	6808      	ldr	r0, [r1, #0]
  403b46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  403b4a:	f380 8809 	msr	PSP, r0
  403b4e:	f04f 0000 	mov.w	r0, #0
  403b52:	f380 8811 	msr	BASEPRI, r0
  403b56:	f04e 0e0d 	orr.w	lr, lr, #13
  403b5a:	4770      	bx	lr

00403b5c <pxCurrentTCBConst2>:
  403b5c:	20000fd4 	.word	0x20000fd4

00403b60 <vPortYieldFromISR>:
 * \brief Yield PendSV to request a context switch.
 */
void vPortYieldFromISR(void)
{
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
  403b60:	4b02      	ldr	r3, [pc, #8]	; (403b6c <vPortYieldFromISR+0xc>)
  403b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403b66:	601a      	str	r2, [r3, #0]
  403b68:	4770      	bx	lr
  403b6a:	bf00      	nop
  403b6c:	e000ed04 	.word	0xe000ed04

00403b70 <vPortEnterCritical>:
/**
 * \brief Enter Critical code.
 */
void vPortEnterCritical(void)
{
	portDISABLE_INTERRUPTS();
  403b70:	f04f 0000 	mov.w	r0, #0
  403b74:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
  403b78:	4b02      	ldr	r3, [pc, #8]	; (403b84 <vPortEnterCritical+0x14>)
  403b7a:	681a      	ldr	r2, [r3, #0]
  403b7c:	3201      	adds	r2, #1
  403b7e:	601a      	str	r2, [r3, #0]
  403b80:	4770      	bx	lr
  403b82:	bf00      	nop
  403b84:	200000b4 	.word	0x200000b4

00403b88 <vPortExitCritical>:
/**
 * \brief Exit Critical code.
 */
void vPortExitCritical(void)
{
	uxCriticalNesting--;
  403b88:	4a04      	ldr	r2, [pc, #16]	; (403b9c <vPortExitCritical+0x14>)
  403b8a:	6813      	ldr	r3, [r2, #0]
  403b8c:	3b01      	subs	r3, #1
  403b8e:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  403b90:	b91b      	cbnz	r3, 403b9a <vPortExitCritical+0x12>
		portENABLE_INTERRUPTS();
  403b92:	f04f 0000 	mov.w	r0, #0
  403b96:	f380 8811 	msr	BASEPRI, r0
  403b9a:	4770      	bx	lr
  403b9c:	200000b4 	.word	0x200000b4

00403ba0 <PendSV_Handler>:
 * \brief Handler for Sytem interrupt-driven request.
 */
void xPortPendSVHandler(void)
{
	/* This is a naked function. */
	__asm volatile (" mrs r0, psp      \n"
  403ba0:	f3ef 8009 	mrs	r0, PSP
  403ba4:	4b0c      	ldr	r3, [pc, #48]	; (403bd8 <pxCurrentTCBConst>)
  403ba6:	681a      	ldr	r2, [r3, #0]
  403ba8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  403bac:	6010      	str	r0, [r2, #0]
  403bae:	e92d 4008 	stmdb	sp!, {r3, lr}
  403bb2:	f04f 0000 	mov.w	r0, #0
  403bb6:	f380 8811 	msr	BASEPRI, r0
  403bba:	f000 fb35 	bl	404228 <vTaskSwitchContext>
  403bbe:	f04f 0000 	mov.w	r0, #0
  403bc2:	f380 8811 	msr	BASEPRI, r0
  403bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  403bca:	6819      	ldr	r1, [r3, #0]
  403bcc:	6808      	ldr	r0, [r1, #0]
  403bce:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  403bd2:	f380 8809 	msr	PSP, r0
  403bd6:	4770      	bx	lr

00403bd8 <pxCurrentTCBConst>:
  403bd8:	20000fd4 	.word	0x20000fd4

00403bdc <xPortSysTickHandler>:

/**
 * \brief Handler for Sytem Tick interrupt.
 */
void xPortSysTickHandler(void)
{
  403bdc:	b508      	push	{r3, lr}
	unsigned portLONG ulDummy;

	/* If using preemption, also force a context switch. */
#if configUSE_PREEMPTION == 1
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
  403bde:	4b07      	ldr	r3, [pc, #28]	; (403bfc <xPortSysTickHandler+0x20>)
  403be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403be4:	601a      	str	r2, [r3, #0]
#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
  403be6:	f04f 0000 	mov.w	r0, #0
  403bea:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
  403bee:	4b04      	ldr	r3, [pc, #16]	; (403c00 <xPortSysTickHandler+0x24>)
  403bf0:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(ulDummy);
  403bf2:	f04f 0000 	mov.w	r0, #0
  403bf6:	f380 8811 	msr	BASEPRI, r0
  403bfa:	bd08      	pop	{r3, pc}
  403bfc:	e000ed04 	.word	0xe000ed04
  403c00:	00404009 	.word	0x00404009

00403c04 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  403c04:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  403c06:	6c03      	ldr	r3, [r0, #64]	; 0x40
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  403c08:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  403c0a:	b933      	cbnz	r3, 403c1a <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403c0c:	6805      	ldr	r5, [r0, #0]
  403c0e:	2d00      	cmp	r5, #0
  403c10:	d028      	beq.n	403c64 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
  403c12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403c14:	3301      	adds	r3, #1
  403c16:	63a3      	str	r3, [r4, #56]	; 0x38
  403c18:	bd38      	pop	{r3, r4, r5, pc}
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  403c1a:	b982      	cbnz	r2, 403c3e <prvCopyDataToQueue+0x3a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  403c1c:	461a      	mov	r2, r3
  403c1e:	6880      	ldr	r0, [r0, #8]
  403c20:	4b13      	ldr	r3, [pc, #76]	; (403c70 <prvCopyDataToQueue+0x6c>)
  403c22:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  403c24:	68a1      	ldr	r1, [r4, #8]
  403c26:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  403c28:	6862      	ldr	r2, [r4, #4]
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  403c2a:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  403c2c:	4293      	cmp	r3, r2
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  403c2e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  403c30:	d3ef      	bcc.n	403c12 <prvCopyDataToQueue+0xe>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  403c32:	6823      	ldr	r3, [r4, #0]
  403c34:	60a3      	str	r3, [r4, #8]
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
  403c36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403c38:	3301      	adds	r3, #1
  403c3a:	63a3      	str	r3, [r4, #56]	; 0x38
  403c3c:	bd38      	pop	{r3, r4, r5, pc}
			pxQueue->pcWriteTo = pxQueue->pcHead;
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  403c3e:	461a      	mov	r2, r3
  403c40:	68c0      	ldr	r0, [r0, #12]
  403c42:	4b0b      	ldr	r3, [pc, #44]	; (403c70 <prvCopyDataToQueue+0x6c>)
  403c44:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  403c46:	6c22      	ldr	r2, [r4, #64]	; 0x40
  403c48:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  403c4a:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  403c4c:	4252      	negs	r2, r2
  403c4e:	4413      	add	r3, r2
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  403c50:	428b      	cmp	r3, r1
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  403c52:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  403c54:	d2dd      	bcs.n	403c12 <prvCopyDataToQueue+0xe>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  403c56:	6863      	ldr	r3, [r4, #4]
  403c58:	441a      	add	r2, r3
		}
	}

	++( pxQueue->uxMessagesWaiting );
  403c5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  403c5c:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  403c5e:	3301      	adds	r3, #1
  403c60:	63a3      	str	r3, [r4, #56]	; 0x38
  403c62:	bd38      	pop	{r3, r4, r5, pc}
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  403c64:	6840      	ldr	r0, [r0, #4]
  403c66:	4b03      	ldr	r3, [pc, #12]	; (403c74 <prvCopyDataToQueue+0x70>)
  403c68:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  403c6a:	6065      	str	r5, [r4, #4]
  403c6c:	e7d1      	b.n	403c12 <prvCopyDataToQueue+0xe>
  403c6e:	bf00      	nop
  403c70:	004060d5 	.word	0x004060d5
  403c74:	004044d5 	.word	0x004044d5

00403c78 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  403c78:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  403c7a:	6804      	ldr	r4, [r0, #0]
  403c7c:	b164      	cbz	r4, 403c98 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  403c7e:	68c3      	ldr	r3, [r0, #12]
  403c80:	6c02      	ldr	r2, [r0, #64]	; 0x40
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  403c82:	6845      	ldr	r5, [r0, #4]

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  403c84:	4413      	add	r3, r2
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  403c86:	42ab      	cmp	r3, r5

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  403c88:	60c3      	str	r3, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  403c8a:	bf24      	itt	cs
  403c8c:	4623      	movcs	r3, r4
  403c8e:	60c4      	strcs	r4, [r0, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  403c90:	4608      	mov	r0, r1
  403c92:	4619      	mov	r1, r3
  403c94:	4b01      	ldr	r3, [pc, #4]	; (403c9c <prvCopyDataFromQueue+0x24>)
  403c96:	4798      	blx	r3
  403c98:	bd38      	pop	{r3, r4, r5, pc}
  403c9a:	bf00      	nop
  403c9c:	004060d5 	.word	0x004060d5

00403ca0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  403ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ca4:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  403ca6:	4f23      	ldr	r7, [pc, #140]	; (403d34 <prvUnlockQueue+0x94>)
  403ca8:	47b8      	blx	r7
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  403caa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403cac:	2b00      	cmp	r3, #0
  403cae:	dd18      	ble.n	403ce2 <prvUnlockQueue+0x42>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403cb2:	b1b3      	cbz	r3, 403ce2 <prvUnlockQueue+0x42>
  403cb4:	f104 0624 	add.w	r6, r4, #36	; 0x24
  403cb8:	4d1f      	ldr	r5, [pc, #124]	; (403d38 <prvUnlockQueue+0x98>)
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  403cba:	f8df 8080 	ldr.w	r8, [pc, #128]	; 403d3c <prvUnlockQueue+0x9c>
  403cbe:	e006      	b.n	403cce <prvUnlockQueue+0x2e>
				}

				--( pxQueue->xTxLock );
  403cc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403cc2:	3b01      	subs	r3, #1
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  403cc4:	2b00      	cmp	r3, #0
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
				}

				--( pxQueue->xTxLock );
  403cc6:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  403cc8:	dd0b      	ble.n	403ce2 <prvUnlockQueue+0x42>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403ccc:	b14b      	cbz	r3, 403ce2 <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403cce:	4630      	mov	r0, r6
  403cd0:	47a8      	blx	r5
  403cd2:	2800      	cmp	r0, #0
  403cd4:	d0f4      	beq.n	403cc0 <prvUnlockQueue+0x20>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  403cd6:	47c0      	blx	r8
				}

				--( pxQueue->xTxLock );
  403cd8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403cda:	3b01      	subs	r3, #1
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  403cdc:	2b00      	cmp	r3, #0
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
				}

				--( pxQueue->xTxLock );
  403cde:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  403ce0:	dcf3      	bgt.n	403cca <prvUnlockQueue+0x2a>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  403ce2:	f04f 33ff 	mov.w	r3, #4294967295
  403ce6:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  403ce8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 403d40 <prvUnlockQueue+0xa0>
  403cec:	47c0      	blx	r8

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  403cee:	47b8      	blx	r7
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  403cf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403cf2:	2b00      	cmp	r3, #0
  403cf4:	dd17      	ble.n	403d26 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  403cf6:	6923      	ldr	r3, [r4, #16]
  403cf8:	b1ab      	cbz	r3, 403d26 <prvUnlockQueue+0x86>
  403cfa:	f104 0610 	add.w	r6, r4, #16
  403cfe:	4d0e      	ldr	r5, [pc, #56]	; (403d38 <prvUnlockQueue+0x98>)
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					vTaskMissedYield();
  403d00:	4f0e      	ldr	r7, [pc, #56]	; (403d3c <prvUnlockQueue+0x9c>)
  403d02:	e006      	b.n	403d12 <prvUnlockQueue+0x72>
				}

				--( pxQueue->xRxLock );
  403d04:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403d06:	3b01      	subs	r3, #1
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  403d08:	2b00      	cmp	r3, #0
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					vTaskMissedYield();
				}

				--( pxQueue->xRxLock );
  403d0a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  403d0c:	dd0b      	ble.n	403d26 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  403d0e:	6923      	ldr	r3, [r4, #16]
  403d10:	b14b      	cbz	r3, 403d26 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  403d12:	4630      	mov	r0, r6
  403d14:	47a8      	blx	r5
  403d16:	2800      	cmp	r0, #0
  403d18:	d0f4      	beq.n	403d04 <prvUnlockQueue+0x64>
				{
					vTaskMissedYield();
  403d1a:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
  403d1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403d1e:	3b01      	subs	r3, #1
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  403d20:	2b00      	cmp	r3, #0
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					vTaskMissedYield();
				}

				--( pxQueue->xRxLock );
  403d22:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  403d24:	dcf3      	bgt.n	403d0e <prvUnlockQueue+0x6e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  403d26:	f04f 33ff 	mov.w	r3, #4294967295
  403d2a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  403d2c:	47c0      	blx	r8
  403d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403d32:	bf00      	nop
  403d34:	00403b71 	.word	0x00403b71
  403d38:	00404349 	.word	0x00404349
  403d3c:	0040444d 	.word	0x0040444d
  403d40:	00403b89 	.word	0x00403b89

00403d44 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  403d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d48:	4f37      	ldr	r7, [pc, #220]	; (403e28 <xQueueGenericSend+0xe4>)
  403d4a:	4d38      	ldr	r5, [pc, #224]	; (403e2c <xQueueGenericSend+0xe8>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  403d4c:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 403e4c <xQueueGenericSend+0x108>
		taskEXIT_CRITICAL();

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  403d50:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 403e50 <xQueueGenericSend+0x10c>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  403d54:	b087      	sub	sp, #28
  403d56:	4604      	mov	r4, r0
  403d58:	9203      	str	r2, [sp, #12]
  403d5a:	9101      	str	r1, [sp, #4]
  403d5c:	9302      	str	r3, [sp, #8]

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
  403d5e:	46b9      	mov	r9, r7
#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  403d60:	2600      	movs	r6, #0
  403d62:	e021      	b.n	403da8 <xQueueGenericSend+0x64>
  403d64:	ae04      	add	r6, sp, #16
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  403d66:	47b8      	blx	r7

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  403d68:	47c0      	blx	r8
		prvLockQueue( pxQueue );
  403d6a:	47a8      	blx	r5
  403d6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403d6e:	3301      	adds	r3, #1
  403d70:	bf04      	itt	eq
  403d72:	2300      	moveq	r3, #0
  403d74:	6463      	streq	r3, [r4, #68]	; 0x44
  403d76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403d78:	3301      	adds	r3, #1
  403d7a:	bf04      	itt	eq
  403d7c:	2300      	moveq	r3, #0
  403d7e:	64a3      	streq	r3, [r4, #72]	; 0x48
  403d80:	47b8      	blx	r7

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  403d82:	4630      	mov	r0, r6
  403d84:	a903      	add	r1, sp, #12
  403d86:	4b2a      	ldr	r3, [pc, #168]	; (403e30 <xQueueGenericSend+0xec>)
  403d88:	4798      	blx	r3
  403d8a:	2800      	cmp	r0, #0
  403d8c:	d13a      	bne.n	403e04 <xQueueGenericSend+0xc0>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  403d8e:	47a8      	blx	r5
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  403d90:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  403d94:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  403d96:	47c8      	blx	r9
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
  403d98:	45b3      	cmp	fp, r6
  403d9a:	d012      	beq.n	403dc2 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  403d9c:	4b25      	ldr	r3, [pc, #148]	; (403e34 <xQueueGenericSend+0xf0>)
  403d9e:	4620      	mov	r0, r4
  403da0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  403da2:	4b25      	ldr	r3, [pc, #148]	; (403e38 <xQueueGenericSend+0xf4>)
  403da4:	4798      	blx	r3
  403da6:	2601      	movs	r6, #1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  403da8:	47a8      	blx	r5
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  403daa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403dac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403dae:	429a      	cmp	r2, r3
  403db0:	d316      	bcc.n	403de0 <xQueueGenericSend+0x9c>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  403db2:	9803      	ldr	r0, [sp, #12]
  403db4:	b300      	cbz	r0, 403df8 <xQueueGenericSend+0xb4>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
  403db6:	2e00      	cmp	r6, #0
  403db8:	d1d4      	bne.n	403d64 <xQueueGenericSend+0x20>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  403dba:	ae04      	add	r6, sp, #16
  403dbc:	4630      	mov	r0, r6
  403dbe:	47d0      	blx	sl
  403dc0:	e7d1      	b.n	403d66 <xQueueGenericSend+0x22>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  403dc2:	f104 0010 	add.w	r0, r4, #16
  403dc6:	9903      	ldr	r1, [sp, #12]
  403dc8:	4b1c      	ldr	r3, [pc, #112]	; (403e3c <xQueueGenericSend+0xf8>)
  403dca:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  403dcc:	4b19      	ldr	r3, [pc, #100]	; (403e34 <xQueueGenericSend+0xf0>)
  403dce:	4620      	mov	r0, r4
  403dd0:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
  403dd2:	4b19      	ldr	r3, [pc, #100]	; (403e38 <xQueueGenericSend+0xf4>)
  403dd4:	4798      	blx	r3
  403dd6:	2800      	cmp	r0, #0
  403dd8:	d1e5      	bne.n	403da6 <xQueueGenericSend+0x62>
				{
					portYIELD_WITHIN_API();
  403dda:	4b19      	ldr	r3, [pc, #100]	; (403e40 <xQueueGenericSend+0xfc>)
  403ddc:	4798      	blx	r3
  403dde:	e7e2      	b.n	403da6 <xQueueGenericSend+0x62>
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  403de0:	4b18      	ldr	r3, [pc, #96]	; (403e44 <xQueueGenericSend+0x100>)
  403de2:	9901      	ldr	r1, [sp, #4]
  403de4:	9a02      	ldr	r2, [sp, #8]
  403de6:	4620      	mov	r0, r4
  403de8:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403dec:	b99b      	cbnz	r3, 403e16 <xQueueGenericSend+0xd2>
						takes care of that. */
						portYIELD_WITHIN_API();
					}
				}

				taskEXIT_CRITICAL();
  403dee:	47b8      	blx	r7

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  403df0:	2001      	movs	r0, #1
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
  403df2:	b007      	add	sp, #28
  403df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			{
				if( xTicksToWait == ( portTickType ) 0 )
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  403df8:	9000      	str	r0, [sp, #0]
  403dfa:	47b8      	blx	r7

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  403dfc:	9800      	ldr	r0, [sp, #0]
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
  403dfe:	b007      	add	sp, #28
  403e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  403e04:	4620      	mov	r0, r4
  403e06:	4b0b      	ldr	r3, [pc, #44]	; (403e34 <xQueueGenericSend+0xf0>)
  403e08:	4798      	blx	r3
			( void ) xTaskResumeAll();
  403e0a:	4b0b      	ldr	r3, [pc, #44]	; (403e38 <xQueueGenericSend+0xf4>)
  403e0c:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  403e0e:	2000      	movs	r0, #0
		}
	}
}
  403e10:	b007      	add	sp, #28
  403e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  403e16:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403e1a:	4b0b      	ldr	r3, [pc, #44]	; (403e48 <xQueueGenericSend+0x104>)
  403e1c:	4798      	blx	r3
  403e1e:	2801      	cmp	r0, #1
  403e20:	d1e5      	bne.n	403dee <xQueueGenericSend+0xaa>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  403e22:	4b07      	ldr	r3, [pc, #28]	; (403e40 <xQueueGenericSend+0xfc>)
  403e24:	4798      	blx	r3
  403e26:	e7e2      	b.n	403dee <xQueueGenericSend+0xaa>
  403e28:	00403b89 	.word	0x00403b89
  403e2c:	00403b71 	.word	0x00403b71
  403e30:	004043d1 	.word	0x004043d1
  403e34:	00403ca1 	.word	0x00403ca1
  403e38:	00404135 	.word	0x00404135
  403e3c:	004042f9 	.word	0x004042f9
  403e40:	00403b61 	.word	0x00403b61
  403e44:	00403c05 	.word	0x00403c05
  403e48:	00404349 	.word	0x00404349
  403e4c:	004043b9 	.word	0x004043b9
  403e50:	00403ff9 	.word	0x00403ff9

00403e54 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  403e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e58:	4f46      	ldr	r7, [pc, #280]	; (403f74 <xQueueGenericReceive+0x120>)
  403e5a:	4d47      	ldr	r5, [pc, #284]	; (403f78 <xQueueGenericReceive+0x124>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  403e5c:	f8df a140 	ldr.w	sl, [pc, #320]	; 403fa0 <xQueueGenericReceive+0x14c>
		taskEXIT_CRITICAL();

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  403e60:	f8df 9140 	ldr.w	r9, [pc, #320]	; 403fa4 <xQueueGenericReceive+0x150>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  403e64:	b087      	sub	sp, #28
  403e66:	4604      	mov	r4, r0
  403e68:	9203      	str	r2, [sp, #12]
  403e6a:	9101      	str	r1, [sp, #4]
  403e6c:	9302      	str	r3, [sp, #8]

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
  403e6e:	46b8      	mov	r8, r7
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  403e70:	2600      	movs	r6, #0
  403e72:	e02a      	b.n	403eca <xQueueGenericReceive+0x76>
  403e74:	ae04      	add	r6, sp, #16
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  403e76:	47b8      	blx	r7

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  403e78:	47c8      	blx	r9
		prvLockQueue( pxQueue );
  403e7a:	47a8      	blx	r5
  403e7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403e7e:	3301      	adds	r3, #1
  403e80:	bf04      	itt	eq
  403e82:	2300      	moveq	r3, #0
  403e84:	6463      	streq	r3, [r4, #68]	; 0x44
  403e86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403e88:	3301      	adds	r3, #1
  403e8a:	bf04      	itt	eq
  403e8c:	2300      	moveq	r3, #0
  403e8e:	64a3      	streq	r3, [r4, #72]	; 0x48
  403e90:	47b8      	blx	r7

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  403e92:	4630      	mov	r0, r6
  403e94:	a903      	add	r1, sp, #12
  403e96:	4b39      	ldr	r3, [pc, #228]	; (403f7c <xQueueGenericReceive+0x128>)
  403e98:	4798      	blx	r3
  403e9a:	2800      	cmp	r0, #0
  403e9c:	d14d      	bne.n	403f3a <xQueueGenericReceive+0xe6>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  403e9e:	47a8      	blx	r5
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  403ea0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  403ea4:	4e34      	ldr	r6, [pc, #208]	; (403f78 <xQueueGenericReceive+0x124>)
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
	taskEXIT_CRITICAL();
  403ea6:	47c0      	blx	r8
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) )
  403ea8:	f1bb 0f00 	cmp.w	fp, #0
  403eac:	d119      	bne.n	403ee2 <xQueueGenericReceive+0x8e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403eae:	6823      	ldr	r3, [r4, #0]
  403eb0:	b303      	cbz	r3, 403ef4 <xQueueGenericReceive+0xa0>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  403eb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403eb6:	9903      	ldr	r1, [sp, #12]
  403eb8:	4b31      	ldr	r3, [pc, #196]	; (403f80 <xQueueGenericReceive+0x12c>)
  403eba:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  403ebc:	4b31      	ldr	r3, [pc, #196]	; (403f84 <xQueueGenericReceive+0x130>)
  403ebe:	4620      	mov	r0, r4
  403ec0:	4798      	blx	r3
				if( !xTaskResumeAll() )
  403ec2:	4b31      	ldr	r3, [pc, #196]	; (403f88 <xQueueGenericReceive+0x134>)
  403ec4:	4798      	blx	r3
  403ec6:	b190      	cbz	r0, 403eee <xQueueGenericReceive+0x9a>
  403ec8:	2601      	movs	r6, #1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  403eca:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  403ecc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403ece:	b9bb      	cbnz	r3, 403f00 <xQueueGenericReceive+0xac>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  403ed0:	9803      	ldr	r0, [sp, #12]
  403ed2:	2800      	cmp	r0, #0
  403ed4:	d02b      	beq.n	403f2e <xQueueGenericReceive+0xda>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
  403ed6:	2e00      	cmp	r6, #0
  403ed8:	d1cc      	bne.n	403e74 <xQueueGenericReceive+0x20>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  403eda:	ae04      	add	r6, sp, #16
  403edc:	4630      	mov	r0, r6
  403ede:	47d0      	blx	sl
  403ee0:	e7c9      	b.n	403e76 <xQueueGenericReceive+0x22>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  403ee2:	4620      	mov	r0, r4
  403ee4:	4b27      	ldr	r3, [pc, #156]	; (403f84 <xQueueGenericReceive+0x130>)
  403ee6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  403ee8:	4b27      	ldr	r3, [pc, #156]	; (403f88 <xQueueGenericReceive+0x134>)
  403eea:	4798      	blx	r3
  403eec:	e7ec      	b.n	403ec8 <xQueueGenericReceive+0x74>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( !xTaskResumeAll() )
				{
					portYIELD_WITHIN_API();
  403eee:	4b27      	ldr	r3, [pc, #156]	; (403f8c <xQueueGenericReceive+0x138>)
  403ef0:	4798      	blx	r3
  403ef2:	e7e9      	b.n	403ec8 <xQueueGenericReceive+0x74>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
						portENTER_CRITICAL();
  403ef4:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  403ef6:	6860      	ldr	r0, [r4, #4]
  403ef8:	4b25      	ldr	r3, [pc, #148]	; (403f90 <xQueueGenericReceive+0x13c>)
  403efa:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  403efc:	47c0      	blx	r8
  403efe:	e7d8      	b.n	403eb2 <xQueueGenericReceive+0x5e>
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  403f00:	4b24      	ldr	r3, [pc, #144]	; (403f94 <xQueueGenericReceive+0x140>)
  403f02:	9901      	ldr	r1, [sp, #4]
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  403f04:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  403f06:	4620      	mov	r0, r4
  403f08:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  403f0a:	9b02      	ldr	r3, [sp, #8]
  403f0c:	b9f3      	cbnz	r3, 403f4c <xQueueGenericReceive+0xf8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  403f0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403f10:	6823      	ldr	r3, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  403f12:	3a01      	subs	r2, #1
  403f14:	63a2      	str	r2, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403f16:	b343      	cbz	r3, 403f6a <xQueueGenericReceive+0x116>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  403f18:	6923      	ldr	r3, [r4, #16]
  403f1a:	b1d3      	cbz	r3, 403f52 <xQueueGenericReceive+0xfe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  403f1c:	f104 0010 	add.w	r0, r4, #16
  403f20:	4b1d      	ldr	r3, [pc, #116]	; (403f98 <xQueueGenericReceive+0x144>)
  403f22:	4798      	blx	r3
  403f24:	2801      	cmp	r0, #1
  403f26:	d114      	bne.n	403f52 <xQueueGenericReceive+0xfe>
						{
							portYIELD_WITHIN_API();
  403f28:	4b18      	ldr	r3, [pc, #96]	; (403f8c <xQueueGenericReceive+0x138>)
  403f2a:	4798      	blx	r3
  403f2c:	e011      	b.n	403f52 <xQueueGenericReceive+0xfe>
			{
				if( xTicksToWait == ( portTickType ) 0 )
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  403f2e:	9000      	str	r0, [sp, #0]
  403f30:	47b8      	blx	r7
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  403f32:	9800      	ldr	r0, [sp, #0]
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
  403f34:	b007      	add	sp, #28
  403f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  403f3a:	4620      	mov	r0, r4
  403f3c:	4b11      	ldr	r3, [pc, #68]	; (403f84 <xQueueGenericReceive+0x130>)
  403f3e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  403f40:	4b11      	ldr	r3, [pc, #68]	; (403f88 <xQueueGenericReceive+0x134>)
  403f42:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  403f44:	2000      	movs	r0, #0
		}
	}
}
  403f46:	b007      	add	sp, #28
  403f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403f4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  403f4e:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403f50:	b923      	cbnz	r3, 403f5c <xQueueGenericReceive+0x108>
						}
					}

				}

				taskEXIT_CRITICAL();
  403f52:	47b8      	blx	r7
				return pdPASS;
  403f54:	2001      	movs	r0, #1
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
  403f56:	b007      	add	sp, #28
  403f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403f5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403f60:	4b0d      	ldr	r3, [pc, #52]	; (403f98 <xQueueGenericReceive+0x144>)
  403f62:	4798      	blx	r3
  403f64:	2800      	cmp	r0, #0
  403f66:	d0f4      	beq.n	403f52 <xQueueGenericReceive+0xfe>
  403f68:	e7de      	b.n	403f28 <xQueueGenericReceive+0xd4>
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  403f6a:	4b0c      	ldr	r3, [pc, #48]	; (403f9c <xQueueGenericReceive+0x148>)
  403f6c:	4798      	blx	r3
  403f6e:	6060      	str	r0, [r4, #4]
  403f70:	e7d2      	b.n	403f18 <xQueueGenericReceive+0xc4>
  403f72:	bf00      	nop
  403f74:	00403b89 	.word	0x00403b89
  403f78:	00403b71 	.word	0x00403b71
  403f7c:	004043d1 	.word	0x004043d1
  403f80:	004042f9 	.word	0x004042f9
  403f84:	00403ca1 	.word	0x00403ca1
  403f88:	00404135 	.word	0x00404135
  403f8c:	00403b61 	.word	0x00403b61
  403f90:	00404465 	.word	0x00404465
  403f94:	00403c79 	.word	0x00403c79
  403f98:	00404349 	.word	0x00404349
  403f9c:	00404459 	.word	0x00404459
  403fa0:	004043b9 	.word	0x004043b9
  403fa4:	00403ff9 	.word	0x00403ff9

00403fa8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  403fa8:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  403faa:	4b0d      	ldr	r3, [pc, #52]	; (403fe0 <prvAddCurrentTaskToDelayedList+0x38>)

	if( xTimeToWake < xTickCount )
  403fac:	4a0d      	ldr	r2, [pc, #52]	; (403fe4 <prvAddCurrentTaskToDelayedList+0x3c>)
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  403fae:	6819      	ldr	r1, [r3, #0]

	if( xTimeToWake < xTickCount )
  403fb0:	6812      	ldr	r2, [r2, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  403fb2:	6048      	str	r0, [r1, #4]

	if( xTimeToWake < xTickCount )
  403fb4:	4290      	cmp	r0, r2
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  403fb6:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
  403fb8:	d30b      	bcc.n	403fd2 <prvAddCurrentTaskToDelayedList+0x2a>
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  403fba:	490b      	ldr	r1, [pc, #44]	; (403fe8 <prvAddCurrentTaskToDelayedList+0x40>)
  403fbc:	4a0b      	ldr	r2, [pc, #44]	; (403fec <prvAddCurrentTaskToDelayedList+0x44>)
  403fbe:	6808      	ldr	r0, [r1, #0]
  403fc0:	6819      	ldr	r1, [r3, #0]
  403fc2:	3104      	adds	r1, #4
  403fc4:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  403fc6:	4b0a      	ldr	r3, [pc, #40]	; (403ff0 <prvAddCurrentTaskToDelayedList+0x48>)
  403fc8:	681a      	ldr	r2, [r3, #0]
  403fca:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
  403fcc:	bf38      	it	cc
  403fce:	601c      	strcc	r4, [r3, #0]
  403fd0:	bd10      	pop	{r4, pc}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  403fd2:	4908      	ldr	r1, [pc, #32]	; (403ff4 <prvAddCurrentTaskToDelayedList+0x4c>)
  403fd4:	4a05      	ldr	r2, [pc, #20]	; (403fec <prvAddCurrentTaskToDelayedList+0x44>)
  403fd6:	6808      	ldr	r0, [r1, #0]
  403fd8:	6819      	ldr	r1, [r3, #0]
  403fda:	3104      	adds	r1, #4
  403fdc:	4790      	blx	r2
  403fde:	bd10      	pop	{r4, pc}
  403fe0:	20000fd4 	.word	0x20000fd4
  403fe4:	20000f04 	.word	0x20000f04
  403fe8:	20000fb0 	.word	0x20000fb0
  403fec:	00403ae1 	.word	0x00403ae1
  403ff0:	200000bc 	.word	0x200000bc
  403ff4:	20000fa8 	.word	0x20000fa8

00403ff8 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  403ff8:	4b02      	ldr	r3, [pc, #8]	; (404004 <vTaskSuspendAll+0xc>)
  403ffa:	681a      	ldr	r2, [r3, #0]
  403ffc:	3201      	adds	r2, #1
  403ffe:	601a      	str	r2, [r3, #0]
  404000:	4770      	bx	lr
  404002:	bf00      	nop
  404004:	20000fec 	.word	0x20000fec

00404008 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
  404008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40400c:	4b3e      	ldr	r3, [pc, #248]	; (404108 <vTaskIncrementTick+0x100>)
  40400e:	681b      	ldr	r3, [r3, #0]
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
  404010:	b083      	sub	sp, #12
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  404012:	2b00      	cmp	r3, #0
  404014:	d150      	bne.n	4040b8 <vTaskIncrementTick+0xb0>
	{
		++xTickCount;
  404016:	4c3d      	ldr	r4, [pc, #244]	; (40410c <vTaskIncrementTick+0x104>)
  404018:	6823      	ldr	r3, [r4, #0]
  40401a:	3301      	adds	r3, #1
  40401c:	6023      	str	r3, [r4, #0]
		if( xTickCount == ( portTickType ) 0 )
  40401e:	6823      	ldr	r3, [r4, #0]
  404020:	2b00      	cmp	r3, #0
  404022:	d050      	beq.n	4040c6 <vTaskIncrementTick+0xbe>
  404024:	4a3a      	ldr	r2, [pc, #232]	; (404110 <vTaskIncrementTick+0x108>)
  404026:	9201      	str	r2, [sp, #4]
  404028:	6813      	ldr	r3, [r2, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  40402a:	6822      	ldr	r2, [r4, #0]
  40402c:	4937      	ldr	r1, [pc, #220]	; (40410c <vTaskIncrementTick+0x104>)
  40402e:	429a      	cmp	r2, r3
  404030:	d346      	bcc.n	4040c0 <vTaskIncrementTick+0xb8>
  404032:	4d38      	ldr	r5, [pc, #224]	; (404114 <vTaskIncrementTick+0x10c>)
  404034:	682b      	ldr	r3, [r5, #0]
  404036:	681b      	ldr	r3, [r3, #0]
  404038:	2b00      	cmp	r3, #0
  40403a:	d036      	beq.n	4040aa <vTaskIncrementTick+0xa2>
  40403c:	682b      	ldr	r3, [r5, #0]
  40403e:	68db      	ldr	r3, [r3, #12]
  404040:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  404044:	6809      	ldr	r1, [r1, #0]
  404046:	f8db 2004 	ldr.w	r2, [fp, #4]
  40404a:	428a      	cmp	r2, r1
  40404c:	d857      	bhi.n	4040fe <vTaskIncrementTick+0xf6>
  40404e:	4f32      	ldr	r7, [pc, #200]	; (404118 <vTaskIncrementTick+0x110>)
  404050:	4e32      	ldr	r6, [pc, #200]	; (40411c <vTaskIncrementTick+0x114>)
  404052:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 40412c <vTaskIncrementTick+0x124>
  404056:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 404130 <vTaskIncrementTick+0x128>
  40405a:	e009      	b.n	404070 <vTaskIncrementTick+0x68>
  40405c:	4a2d      	ldr	r2, [pc, #180]	; (404114 <vTaskIncrementTick+0x10c>)
  40405e:	6813      	ldr	r3, [r2, #0]
  404060:	68db      	ldr	r3, [r3, #12]
  404062:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  404066:	6821      	ldr	r1, [r4, #0]
  404068:	f8db 2004 	ldr.w	r2, [fp, #4]
  40406c:	428a      	cmp	r2, r1
  40406e:	d846      	bhi.n	4040fe <vTaskIncrementTick+0xf6>
  404070:	f10b 0a04 	add.w	sl, fp, #4
  404074:	4650      	mov	r0, sl
  404076:	47b8      	blx	r7
  404078:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
  40407c:	f10b 0018 	add.w	r0, fp, #24
  404080:	b10a      	cbz	r2, 404086 <vTaskIncrementTick+0x7e>
  404082:	4a25      	ldr	r2, [pc, #148]	; (404118 <vTaskIncrementTick+0x110>)
  404084:	4790      	blx	r2
  404086:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
  40408a:	6832      	ldr	r2, [r6, #0]
  40408c:	4293      	cmp	r3, r2
  40408e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  404092:	bf88      	it	hi
  404094:	4a21      	ldrhi	r2, [pc, #132]	; (40411c <vTaskIncrementTick+0x114>)
  404096:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40409a:	4651      	mov	r1, sl
  40409c:	bf88      	it	hi
  40409e:	6013      	strhi	r3, [r2, #0]
  4040a0:	47c0      	blx	r8
  4040a2:	682b      	ldr	r3, [r5, #0]
  4040a4:	681b      	ldr	r3, [r3, #0]
  4040a6:	2b00      	cmp	r3, #0
  4040a8:	d1d8      	bne.n	40405c <vTaskIncrementTick+0x54>
  4040aa:	9a01      	ldr	r2, [sp, #4]
  4040ac:	f04f 33ff 	mov.w	r3, #4294967295
  4040b0:	6013      	str	r3, [r2, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
  4040b2:	b003      	add	sp, #12
  4040b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
	}
	else
	{
		++uxMissedTicks;
  4040b8:	4b19      	ldr	r3, [pc, #100]	; (404120 <vTaskIncrementTick+0x118>)
  4040ba:	681a      	ldr	r2, [r3, #0]
  4040bc:	3201      	adds	r2, #1
  4040be:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
  4040c0:	b003      	add	sp, #12
  4040c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
  4040c6:	4b13      	ldr	r3, [pc, #76]	; (404114 <vTaskIncrementTick+0x10c>)
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  4040c8:	4916      	ldr	r1, [pc, #88]	; (404124 <vTaskIncrementTick+0x11c>)
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
  4040ca:	6818      	ldr	r0, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
			pxOverflowDelayedTaskList = pxTemp;
			xNumOfOverflows++;
  4040cc:	4a16      	ldr	r2, [pc, #88]	; (404128 <vTaskIncrementTick+0x120>)
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  4040ce:	680d      	ldr	r5, [r1, #0]
  4040d0:	601d      	str	r5, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  4040d2:	6008      	str	r0, [r1, #0]
			xNumOfOverflows++;
  4040d4:	6811      	ldr	r1, [r2, #0]
  4040d6:	3101      	adds	r1, #1
  4040d8:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4040da:	681a      	ldr	r2, [r3, #0]
  4040dc:	6812      	ldr	r2, [r2, #0]
  4040de:	b932      	cbnz	r2, 4040ee <vTaskIncrementTick+0xe6>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  4040e0:	4b0b      	ldr	r3, [pc, #44]	; (404110 <vTaskIncrementTick+0x108>)
  4040e2:	4a0b      	ldr	r2, [pc, #44]	; (404110 <vTaskIncrementTick+0x108>)
  4040e4:	9301      	str	r3, [sp, #4]
  4040e6:	f04f 33ff 	mov.w	r3, #4294967295
  4040ea:	6013      	str	r3, [r2, #0]
  4040ec:	e79d      	b.n	40402a <vTaskIncrementTick+0x22>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4040ee:	681b      	ldr	r3, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4040f0:	4a07      	ldr	r2, [pc, #28]	; (404110 <vTaskIncrementTick+0x108>)
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4040f2:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4040f4:	9201      	str	r2, [sp, #4]
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4040f6:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4040f8:	685b      	ldr	r3, [r3, #4]
  4040fa:	6013      	str	r3, [r2, #0]
  4040fc:	e795      	b.n	40402a <vTaskIncrementTick+0x22>
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  4040fe:	9b01      	ldr	r3, [sp, #4]
  404100:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
  404102:	b003      	add	sp, #12
  404104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404108:	20000fec 	.word	0x20000fec
  40410c:	20000f04 	.word	0x20000f04
  404110:	200000bc 	.word	0x200000bc
  404114:	20000fb0 	.word	0x20000fb0
  404118:	00403b1d 	.word	0x00403b1d
  40411c:	20000f00 	.word	0x20000f00
  404120:	20000ff0 	.word	0x20000ff0
  404124:	20000fa8 	.word	0x20000fa8
  404128:	20000ff8 	.word	0x20000ff8
  40412c:	20000f08 	.word	0x20000f08
  404130:	00403ac5 	.word	0x00403ac5

00404134 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  404134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  404138:	4b2d      	ldr	r3, [pc, #180]	; (4041f0 <xTaskResumeAll+0xbc>)
  40413a:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  40413c:	4b2d      	ldr	r3, [pc, #180]	; (4041f4 <xTaskResumeAll+0xc0>)
  40413e:	681a      	ldr	r2, [r3, #0]
  404140:	3a01      	subs	r2, #1
  404142:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  404144:	681e      	ldr	r6, [r3, #0]
  404146:	2e00      	cmp	r6, #0
  404148:	d13c      	bne.n	4041c4 <xTaskResumeAll+0x90>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
  40414a:	4b2b      	ldr	r3, [pc, #172]	; (4041f8 <xTaskResumeAll+0xc4>)
  40414c:	681b      	ldr	r3, [r3, #0]
  40414e:	2b00      	cmp	r3, #0
  404150:	d038      	beq.n	4041c4 <xTaskResumeAll+0x90>
  404152:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 404220 <xTaskResumeAll+0xec>
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
  404156:	4f29      	ldr	r7, [pc, #164]	; (4041fc <xTaskResumeAll+0xc8>)
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
  404158:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 404224 <xTaskResumeAll+0xf0>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  40415c:	46ca      	mov	sl, r9
  40415e:	e01e      	b.n	40419e <xTaskResumeAll+0x6a>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  404160:	f8da 300c 	ldr.w	r3, [sl, #12]
  404164:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
  404166:	f104 0018 	add.w	r0, r4, #24
					vListRemove( &( pxTCB->xGenericListItem ) );
  40416a:	1d25      	adds	r5, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
  40416c:	47b8      	blx	r7
					vListRemove( &( pxTCB->xGenericListItem ) );
  40416e:	4628      	mov	r0, r5
  404170:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
  404172:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404174:	f8d8 e000 	ldr.w	lr, [r8]
  404178:	4921      	ldr	r1, [pc, #132]	; (404200 <xTaskResumeAll+0xcc>)
  40417a:	4a22      	ldr	r2, [pc, #136]	; (404204 <xTaskResumeAll+0xd0>)
  40417c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  404180:	4573      	cmp	r3, lr
  404182:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  404186:	4629      	mov	r1, r5
  404188:	bf88      	it	hi
  40418a:	f8c8 3000 	strhi.w	r3, [r8]
  40418e:	4790      	blx	r2

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  404190:	4b1d      	ldr	r3, [pc, #116]	; (404208 <xTaskResumeAll+0xd4>)
  404192:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  404194:	681b      	ldr	r3, [r3, #0]
  404196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
  404198:	429a      	cmp	r2, r3
  40419a:	bf28      	it	cs
  40419c:	2601      	movcs	r6, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  40419e:	f8d9 3000 	ldr.w	r3, [r9]
  4041a2:	2b00      	cmp	r3, #0
  4041a4:	d1dc      	bne.n	404160 <xTaskResumeAll+0x2c>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
  4041a6:	4c19      	ldr	r4, [pc, #100]	; (40420c <xTaskResumeAll+0xd8>)
  4041a8:	6823      	ldr	r3, [r4, #0]
  4041aa:	b18b      	cbz	r3, 4041d0 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
  4041ac:	6823      	ldr	r3, [r4, #0]
  4041ae:	b13b      	cbz	r3, 4041c0 <xTaskResumeAll+0x8c>
  4041b0:	4d17      	ldr	r5, [pc, #92]	; (404210 <xTaskResumeAll+0xdc>)
					{
						vTaskIncrementTick();
  4041b2:	47a8      	blx	r5
						--uxMissedTicks;
  4041b4:	6823      	ldr	r3, [r4, #0]
  4041b6:	3b01      	subs	r3, #1
  4041b8:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
  4041ba:	6823      	ldr	r3, [r4, #0]
  4041bc:	2b00      	cmp	r3, #0
  4041be:	d1f8      	bne.n	4041b2 <xTaskResumeAll+0x7e>
  4041c0:	4b14      	ldr	r3, [pc, #80]	; (404214 <xTaskResumeAll+0xe0>)
  4041c2:	e00b      	b.n	4041dc <xTaskResumeAll+0xa8>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  4041c4:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  4041c6:	4b14      	ldr	r3, [pc, #80]	; (404218 <xTaskResumeAll+0xe4>)
  4041c8:	4798      	blx	r3

	return xAlreadyYielded;
}
  4041ca:	4620      	mov	r0, r4
  4041cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  4041d0:	2e01      	cmp	r6, #1
  4041d2:	d0f5      	beq.n	4041c0 <xTaskResumeAll+0x8c>
  4041d4:	4b0f      	ldr	r3, [pc, #60]	; (404214 <xTaskResumeAll+0xe0>)
  4041d6:	681a      	ldr	r2, [r3, #0]
  4041d8:	2a01      	cmp	r2, #1
  4041da:	d1f3      	bne.n	4041c4 <xTaskResumeAll+0x90>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
  4041dc:	2100      	movs	r1, #0
					portYIELD_WITHIN_API();
  4041de:	4a0f      	ldr	r2, [pc, #60]	; (40421c <xTaskResumeAll+0xe8>)
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
  4041e0:	6019      	str	r1, [r3, #0]
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
  4041e2:	2401      	movs	r4, #1
					xMissedYield = pdFALSE;
					portYIELD_WITHIN_API();
  4041e4:	4790      	blx	r2
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  4041e6:	4b0c      	ldr	r3, [pc, #48]	; (404218 <xTaskResumeAll+0xe4>)
  4041e8:	4798      	blx	r3

	return xAlreadyYielded;
}
  4041ea:	4620      	mov	r0, r4
  4041ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4041f0:	00403b71 	.word	0x00403b71
  4041f4:	20000fec 	.word	0x20000fec
  4041f8:	20000fb4 	.word	0x20000fb4
  4041fc:	00403b1d 	.word	0x00403b1d
  404200:	20000f08 	.word	0x20000f08
  404204:	00403ac5 	.word	0x00403ac5
  404208:	20000fd4 	.word	0x20000fd4
  40420c:	20000ff0 	.word	0x20000ff0
  404210:	00404009 	.word	0x00404009
  404214:	20000fcc 	.word	0x20000fcc
  404218:	00403b89 	.word	0x00403b89
  40421c:	00403b61 	.word	0x00403b61
  404220:	20000fb8 	.word	0x20000fb8
  404224:	20000f00 	.word	0x20000f00

00404228 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  404228:	b430      	push	{r4, r5}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  40422a:	4b29      	ldr	r3, [pc, #164]	; (4042d0 <vTaskSwitchContext+0xa8>)
  40422c:	681b      	ldr	r3, [r3, #0]
  40422e:	2b00      	cmp	r3, #0
  404230:	d134      	bne.n	40429c <vTaskSwitchContext+0x74>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
  404232:	4b28      	ldr	r3, [pc, #160]	; (4042d4 <vTaskSwitchContext+0xac>)
  404234:	4928      	ldr	r1, [pc, #160]	; (4042d8 <vTaskSwitchContext+0xb0>)
  404236:	681a      	ldr	r2, [r3, #0]
  404238:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40423c:	0092      	lsls	r2, r2, #2
  40423e:	588a      	ldr	r2, [r1, r2]
  404240:	b94a      	cbnz	r2, 404256 <vTaskSwitchContext+0x2e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
  404242:	681a      	ldr	r2, [r3, #0]
  404244:	3a01      	subs	r2, #1
  404246:	601a      	str	r2, [r3, #0]

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
  404248:	681a      	ldr	r2, [r3, #0]
  40424a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40424e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  404252:	2a00      	cmp	r2, #0
  404254:	d0f5      	beq.n	404242 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
  404256:	681b      	ldr	r3, [r3, #0]
  404258:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40425c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  404260:	f101 0208 	add.w	r2, r1, #8
  404264:	684b      	ldr	r3, [r1, #4]
  404266:	685b      	ldr	r3, [r3, #4]
  404268:	604b      	str	r3, [r1, #4]
  40426a:	4293      	cmp	r3, r2
  40426c:	d02c      	beq.n	4042c8 <vTaskSwitchContext+0xa0>

		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
  40426e:	491b      	ldr	r1, [pc, #108]	; (4042dc <vTaskSwitchContext+0xb4>)
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
  404270:	4a1b      	ldr	r2, [pc, #108]	; (4042e0 <vTaskSwitchContext+0xb8>)

		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
  404272:	6808      	ldr	r0, [r1, #0]
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
  404274:	68db      	ldr	r3, [r3, #12]
  404276:	6013      	str	r3, [r2, #0]

		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
  404278:	b170      	cbz	r0, 404298 <vTaskSwitchContext+0x70>
  40427a:	6813      	ldr	r3, [r2, #0]
  40427c:	4819      	ldr	r0, [pc, #100]	; (4042e4 <vTaskSwitchContext+0xbc>)
  40427e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  404280:	6803      	ldr	r3, [r0, #0]
  404282:	429c      	cmp	r4, r3
  404284:	d008      	beq.n	404298 <vTaskSwitchContext+0x70>
  404286:	4b18      	ldr	r3, [pc, #96]	; (4042e8 <vTaskSwitchContext+0xc0>)
  404288:	4d18      	ldr	r5, [pc, #96]	; (4042ec <vTaskSwitchContext+0xc4>)
  40428a:	681c      	ldr	r4, [r3, #0]
  40428c:	682d      	ldr	r5, [r5, #0]
  40428e:	3408      	adds	r4, #8
  404290:	42a5      	cmp	r5, r4
  404292:	d808      	bhi.n	4042a6 <vTaskSwitchContext+0x7e>
  404294:	2300      	movs	r3, #0
  404296:	600b      	str	r3, [r1, #0]
	}
}
  404298:	bc30      	pop	{r4, r5}
  40429a:	4770      	bx	lr
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  40429c:	4b14      	ldr	r3, [pc, #80]	; (4042f0 <vTaskSwitchContext+0xc8>)
  40429e:	2201      	movs	r2, #1
  4042a0:	601a      	str	r2, [r3, #0]
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );

		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
  4042a2:	bc30      	pop	{r4, r5}
  4042a4:	4770      	bx	lr
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );

		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
  4042a6:	4913      	ldr	r1, [pc, #76]	; (4042f4 <vTaskSwitchContext+0xcc>)
  4042a8:	6812      	ldr	r2, [r2, #0]
  4042aa:	681c      	ldr	r4, [r3, #0]
  4042ac:	680d      	ldr	r5, [r1, #0]
  4042ae:	6819      	ldr	r1, [r3, #0]
  4042b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
  4042b2:	6002      	str	r2, [r0, #0]
  4042b4:	3104      	adds	r1, #4
  4042b6:	6019      	str	r1, [r3, #0]
  4042b8:	6818      	ldr	r0, [r3, #0]
  4042ba:	6819      	ldr	r1, [r3, #0]
  4042bc:	6025      	str	r5, [r4, #0]
  4042be:	3104      	adds	r1, #4
  4042c0:	6002      	str	r2, [r0, #0]
  4042c2:	6019      	str	r1, [r3, #0]
	}
}
  4042c4:	bc30      	pop	{r4, r5}
  4042c6:	4770      	bx	lr
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
  4042c8:	685b      	ldr	r3, [r3, #4]
  4042ca:	604b      	str	r3, [r1, #4]
  4042cc:	e7cf      	b.n	40426e <vTaskSwitchContext+0x46>
  4042ce:	bf00      	nop
  4042d0:	20000fec 	.word	0x20000fec
  4042d4:	20000f00 	.word	0x20000f00
  4042d8:	20000f08 	.word	0x20000f08
  4042dc:	20000fac 	.word	0x20000fac
  4042e0:	20000fd4 	.word	0x20000fd4
  4042e4:	200000b8 	.word	0x200000b8
  4042e8:	20000fd0 	.word	0x20000fd0
  4042ec:	20000ff4 	.word	0x20000ff4
  4042f0:	20000fcc 	.word	0x20000fcc
  4042f4:	20000f04 	.word	0x20000f04

004042f8 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  4042f8:	b538      	push	{r3, r4, r5, lr}
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4042fa:	4c0c      	ldr	r4, [pc, #48]	; (40432c <vTaskPlaceOnEventList+0x34>)
  4042fc:	4b0c      	ldr	r3, [pc, #48]	; (404330 <vTaskPlaceOnEventList+0x38>)
  4042fe:	6822      	ldr	r2, [r4, #0]
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  404300:	460d      	mov	r5, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  404302:	f102 0118 	add.w	r1, r2, #24
  404306:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  404308:	6820      	ldr	r0, [r4, #0]
  40430a:	4b0a      	ldr	r3, [pc, #40]	; (404334 <vTaskPlaceOnEventList+0x3c>)
  40430c:	3004      	adds	r0, #4
  40430e:	4798      	blx	r3


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  404310:	1c6b      	adds	r3, r5, #1
  404312:	d005      	beq.n	404320 <vTaskPlaceOnEventList+0x28>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  404314:	4a08      	ldr	r2, [pc, #32]	; (404338 <vTaskPlaceOnEventList+0x40>)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  404316:	4b09      	ldr	r3, [pc, #36]	; (40433c <vTaskPlaceOnEventList+0x44>)
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  404318:	6810      	ldr	r0, [r2, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40431a:	4428      	add	r0, r5
  40431c:	4798      	blx	r3
  40431e:	bd38      	pop	{r3, r4, r5, pc}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  404320:	6821      	ldr	r1, [r4, #0]
  404322:	4807      	ldr	r0, [pc, #28]	; (404340 <vTaskPlaceOnEventList+0x48>)
  404324:	4b07      	ldr	r3, [pc, #28]	; (404344 <vTaskPlaceOnEventList+0x4c>)
  404326:	3104      	adds	r1, #4
  404328:	4798      	blx	r3
  40432a:	bd38      	pop	{r3, r4, r5, pc}
  40432c:	20000fd4 	.word	0x20000fd4
  404330:	00403ae1 	.word	0x00403ae1
  404334:	00403b1d 	.word	0x00403b1d
  404338:	20000f04 	.word	0x20000f04
  40433c:	00403fa9 	.word	0x00403fa9
  404340:	20000fd8 	.word	0x20000fd8
  404344:	00403ac5 	.word	0x00403ac5

00404348 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  404348:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40434a:	68c3      	ldr	r3, [r0, #12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40434c:	4e13      	ldr	r6, [pc, #76]	; (40439c <xTaskRemoveFromEventList+0x54>)
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40434e:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
  404350:	f104 0518 	add.w	r5, r4, #24
  404354:	4628      	mov	r0, r5
  404356:	47b0      	blx	r6

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  404358:	4b11      	ldr	r3, [pc, #68]	; (4043a0 <xTaskRemoveFromEventList+0x58>)
  40435a:	681b      	ldr	r3, [r3, #0]
  40435c:	b9cb      	cbnz	r3, 404392 <xTaskRemoveFromEventList+0x4a>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40435e:	1d25      	adds	r5, r4, #4
  404360:	4628      	mov	r0, r5
  404362:	47b0      	blx	r6
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  404364:	4a0f      	ldr	r2, [pc, #60]	; (4043a4 <xTaskRemoveFromEventList+0x5c>)
  404366:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404368:	6811      	ldr	r1, [r2, #0]
  40436a:	480f      	ldr	r0, [pc, #60]	; (4043a8 <xTaskRemoveFromEventList+0x60>)
  40436c:	428b      	cmp	r3, r1
  40436e:	bf88      	it	hi
  404370:	6013      	strhi	r3, [r2, #0]
  404372:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404376:	4a0d      	ldr	r2, [pc, #52]	; (4043ac <xTaskRemoveFromEventList+0x64>)
  404378:	4629      	mov	r1, r5
  40437a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  40437e:	4790      	blx	r2
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  404380:	4b0b      	ldr	r3, [pc, #44]	; (4043b0 <xTaskRemoveFromEventList+0x68>)
  404382:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  404384:	681b      	ldr	r3, [r3, #0]
  404386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
  404388:	4298      	cmp	r0, r3
  40438a:	bf34      	ite	cc
  40438c:	2000      	movcc	r0, #0
  40438e:	2001      	movcs	r0, #1
  404390:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  404392:	4629      	mov	r1, r5
  404394:	4807      	ldr	r0, [pc, #28]	; (4043b4 <xTaskRemoveFromEventList+0x6c>)
  404396:	4b05      	ldr	r3, [pc, #20]	; (4043ac <xTaskRemoveFromEventList+0x64>)
  404398:	4798      	blx	r3
  40439a:	e7f1      	b.n	404380 <xTaskRemoveFromEventList+0x38>
  40439c:	00403b1d 	.word	0x00403b1d
  4043a0:	20000fec 	.word	0x20000fec
  4043a4:	20000f00 	.word	0x20000f00
  4043a8:	20000f08 	.word	0x20000f08
  4043ac:	00403ac5 	.word	0x00403ac5
  4043b0:	20000fd4 	.word	0x20000fd4
  4043b4:	20000fb8 	.word	0x20000fb8

004043b8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4043b8:	4a03      	ldr	r2, [pc, #12]	; (4043c8 <vTaskSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
  4043ba:	4b04      	ldr	r3, [pc, #16]	; (4043cc <vTaskSetTimeOutState+0x14>)
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4043bc:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4043be:	681b      	ldr	r3, [r3, #0]
  4043c0:	e880 000c 	stmia.w	r0, {r2, r3}
  4043c4:	4770      	bx	lr
  4043c6:	bf00      	nop
  4043c8:	20000ff8 	.word	0x20000ff8
  4043cc:	20000f04 	.word	0x20000f04

004043d0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  4043d0:	b570      	push	{r4, r5, r6, lr}
  4043d2:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
  4043d4:	4b19      	ldr	r3, [pc, #100]	; (40443c <xTaskCheckForTimeOut+0x6c>)
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  4043d6:	4604      	mov	r4, r0
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
  4043d8:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4043da:	682b      	ldr	r3, [r5, #0]
  4043dc:	1c5a      	adds	r2, r3, #1
  4043de:	d028      	beq.n	404432 <xTaskCheckForTimeOut+0x62>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  4043e0:	4817      	ldr	r0, [pc, #92]	; (404440 <xTaskCheckForTimeOut+0x70>)
  4043e2:	6822      	ldr	r2, [r4, #0]
  4043e4:	6801      	ldr	r1, [r0, #0]
  4043e6:	428a      	cmp	r2, r1
  4043e8:	d01b      	beq.n	404422 <xTaskCheckForTimeOut+0x52>
  4043ea:	4916      	ldr	r1, [pc, #88]	; (404444 <xTaskCheckForTimeOut+0x74>)
  4043ec:	6862      	ldr	r2, [r4, #4]
  4043ee:	680e      	ldr	r6, [r1, #0]
  4043f0:	42b2      	cmp	r2, r6
  4043f2:	d911      	bls.n	404418 <xTaskCheckForTimeOut+0x48>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  4043f4:	680e      	ldr	r6, [r1, #0]
  4043f6:	4913      	ldr	r1, [pc, #76]	; (404444 <xTaskCheckForTimeOut+0x74>)
  4043f8:	1ab6      	subs	r6, r6, r2
  4043fa:	42b3      	cmp	r3, r6
  4043fc:	d90c      	bls.n	404418 <xTaskCheckForTimeOut+0x48>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  4043fe:	680e      	ldr	r6, [r1, #0]
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  404400:	6800      	ldr	r0, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  404402:	6809      	ldr	r1, [r1, #0]
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  404404:	1b9b      	subs	r3, r3, r6
  404406:	441a      	add	r2, r3
  404408:	602a      	str	r2, [r5, #0]
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
  40440a:	4b0f      	ldr	r3, [pc, #60]	; (404448 <xTaskCheckForTimeOut+0x78>)

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
	pxTimeOut->xTimeOnEntering = xTickCount;
  40440c:	e884 0003 	stmia.w	r4, {r0, r1}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
  404410:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
  404412:	4798      	blx	r3

	return xReturn;
}
  404414:	4628      	mov	r0, r5
  404416:	bd70      	pop	{r4, r5, r6, pc}
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  404418:	2501      	movs	r5, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
  40441a:	4b0b      	ldr	r3, [pc, #44]	; (404448 <xTaskCheckForTimeOut+0x78>)
  40441c:	4798      	blx	r3

	return xReturn;
}
  40441e:	4628      	mov	r0, r5
  404420:	bd70      	pop	{r4, r5, r6, pc}
  404422:	4908      	ldr	r1, [pc, #32]	; (404444 <xTaskCheckForTimeOut+0x74>)
  404424:	6862      	ldr	r2, [r4, #4]
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  404426:	680e      	ldr	r6, [r1, #0]
  404428:	4906      	ldr	r1, [pc, #24]	; (404444 <xTaskCheckForTimeOut+0x74>)
  40442a:	1ab6      	subs	r6, r6, r2
  40442c:	42b3      	cmp	r3, r6
  40442e:	d8e6      	bhi.n	4043fe <xTaskCheckForTimeOut+0x2e>
  404430:	e7f2      	b.n	404418 <xTaskCheckForTimeOut+0x48>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  404432:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
  404434:	4b04      	ldr	r3, [pc, #16]	; (404448 <xTaskCheckForTimeOut+0x78>)
  404436:	4798      	blx	r3

	return xReturn;
}
  404438:	4628      	mov	r0, r5
  40443a:	bd70      	pop	{r4, r5, r6, pc}
  40443c:	00403b71 	.word	0x00403b71
  404440:	20000ff8 	.word	0x20000ff8
  404444:	20000f04 	.word	0x20000f04
  404448:	00403b89 	.word	0x00403b89

0040444c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
  40444c:	4b01      	ldr	r3, [pc, #4]	; (404454 <vTaskMissedYield+0x8>)
  40444e:	2201      	movs	r2, #1
  404450:	601a      	str	r2, [r3, #0]
  404452:	4770      	bx	lr
  404454:	20000fcc 	.word	0x20000fcc

00404458 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  404458:	4b01      	ldr	r3, [pc, #4]	; (404460 <xTaskGetCurrentTaskHandle+0x8>)
  40445a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
  40445c:	4770      	bx	lr
  40445e:	bf00      	nop
  404460:	20000fd4 	.word	0x20000fd4

00404464 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  404464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  404466:	4d16      	ldr	r5, [pc, #88]	; (4044c0 <vTaskPriorityInherit+0x5c>)
  404468:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40446a:	682a      	ldr	r2, [r5, #0]
  40446c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40446e:	4293      	cmp	r3, r2
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  404470:	4604      	mov	r4, r0
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  404472:	d20f      	bcs.n	404494 <vTaskPriorityInherit+0x30>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  404474:	682a      	ldr	r2, [r5, #0]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
  404476:	4e13      	ldr	r6, [pc, #76]	; (4044c4 <vTaskPriorityInherit+0x60>)
		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  404478:	6ad1      	ldr	r1, [r2, #44]	; 0x2c

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
  40447a:	6942      	ldr	r2, [r0, #20]
  40447c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404480:	eb06 0383 	add.w	r3, r6, r3, lsl #2
		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  404484:	f1c1 0108 	rsb	r1, r1, #8

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
  404488:	429a      	cmp	r2, r3
		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  40448a:	6181      	str	r1, [r0, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
  40448c:	d003      	beq.n	404496 <vTaskPriorityInherit+0x32>
				prvAddTaskToReadyQueue( pxTCB );
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40448e:	682b      	ldr	r3, [r5, #0]
  404490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404492:	62c3      	str	r3, [r0, #44]	; 0x2c
  404494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
  404496:	1d07      	adds	r7, r0, #4
  404498:	4638      	mov	r0, r7
  40449a:	4b0b      	ldr	r3, [pc, #44]	; (4044c8 <vTaskPriorityInherit+0x64>)
  40449c:	4798      	blx	r3

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40449e:	682b      	ldr	r3, [r5, #0]
				prvAddTaskToReadyQueue( pxTCB );
  4044a0:	4a0a      	ldr	r2, [pc, #40]	; (4044cc <vTaskPriorityInherit+0x68>)
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
  4044a4:	6811      	ldr	r1, [r2, #0]
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4044a6:	62e3      	str	r3, [r4, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
  4044a8:	428b      	cmp	r3, r1
  4044aa:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  4044ae:	bf88      	it	hi
  4044b0:	6013      	strhi	r3, [r2, #0]
  4044b2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4044b6:	4639      	mov	r1, r7
  4044b8:	4b05      	ldr	r3, [pc, #20]	; (4044d0 <vTaskPriorityInherit+0x6c>)
  4044ba:	4798      	blx	r3
  4044bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044be:	bf00      	nop
  4044c0:	20000fd4 	.word	0x20000fd4
  4044c4:	20000f08 	.word	0x20000f08
  4044c8:	00403b1d 	.word	0x00403b1d
  4044cc:	20000f00 	.word	0x20000f00
  4044d0:	00403ac5 	.word	0x00403ac5

004044d4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  4044d4:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
  4044d6:	4604      	mov	r4, r0
  4044d8:	b1c8      	cbz	r0, 40450e <vTaskPriorityDisinherit+0x3a>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4044da:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4044dc:	6c83      	ldr	r3, [r0, #72]	; 0x48
  4044de:	429a      	cmp	r2, r3
  4044e0:	d015      	beq.n	40450e <vTaskPriorityDisinherit+0x3a>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
  4044e2:	1d05      	adds	r5, r0, #4
  4044e4:	4628      	mov	r0, r5
  4044e6:	4b0a      	ldr	r3, [pc, #40]	; (404510 <vTaskPriorityDisinherit+0x3c>)
  4044e8:	4798      	blx	r3

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
				prvAddTaskToReadyQueue( pxTCB );
  4044ea:	4a0a      	ldr	r2, [pc, #40]	; (404514 <vTaskPriorityDisinherit+0x40>)
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  4044ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
				prvAddTaskToReadyQueue( pxTCB );
  4044ee:	6811      	ldr	r1, [r2, #0]
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  4044f0:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  4044f2:	f1c3 0008 	rsb	r0, r3, #8
				prvAddTaskToReadyQueue( pxTCB );
  4044f6:	428b      	cmp	r3, r1
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  4044f8:	61a0      	str	r0, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
  4044fa:	4807      	ldr	r0, [pc, #28]	; (404518 <vTaskPriorityDisinherit+0x44>)
  4044fc:	bf88      	it	hi
  4044fe:	6013      	strhi	r3, [r2, #0]
  404500:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404504:	4a05      	ldr	r2, [pc, #20]	; (40451c <vTaskPriorityDisinherit+0x48>)
  404506:	4629      	mov	r1, r5
  404508:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  40450c:	4790      	blx	r2
  40450e:	bd38      	pop	{r3, r4, r5, pc}
  404510:	00403b1d 	.word	0x00403b1d
  404514:	20000f00 	.word	0x20000f00
  404518:	20000f08 	.word	0x20000f08
  40451c:	00403ac5 	.word	0x00403ac5

00404520 <WDT_Handler>:

/**
 *  \brief Handler for watchdog interrupt.
 */
void WDT_Handler(void)
{
  404520:	b508      	push	{r3, lr}

	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
  404522:	4803      	ldr	r0, [pc, #12]	; (404530 <WDT_Handler+0x10>)
  404524:	4b03      	ldr	r3, [pc, #12]	; (404534 <WDT_Handler+0x14>)
  404526:	4798      	blx	r3

	debugPrintString("Restarting system!!!\r");
  404528:	4803      	ldr	r0, [pc, #12]	; (404538 <WDT_Handler+0x18>)
  40452a:	4b04      	ldr	r3, [pc, #16]	; (40453c <WDT_Handler+0x1c>)
  40452c:	4798      	blx	r3
  40452e:	bd08      	pop	{r3, pc}
  404530:	400e1450 	.word	0x400e1450
  404534:	00405321 	.word	0x00405321
  404538:	00406d3c 	.word	0x00406d3c
  40453c:	00400b61 	.word	0x00400b61

00404540 <itoa>:
 *  Author: sean
 * Copyright Heddoko(TM) 2015, all rights reserved
 */ 

int itoa(int value, char* sp, int radix)
{
  404540:	b4f0      	push	{r4, r5, r6, r7}
	 char tmp[16];		// be careful with the length of the buffer
	 char *tp = tmp;
	 int i;
	 unsigned v;

	 int sign = (radix == 10 && value < 0);
  404542:	2a0a      	cmp	r2, #10
 *  Author: sean
 * Copyright Heddoko(TM) 2015, all rights reserved
 */ 

int itoa(int value, char* sp, int radix)
{
  404544:	b084      	sub	sp, #16
	 char tmp[16];		// be careful with the length of the buffer
	 char *tp = tmp;
	 int i;
	 unsigned v;

	 int sign = (radix == 10 && value < 0);
  404546:	d028      	beq.n	40459a <itoa+0x5a>
	 if (sign)
		 v = -value;
	 else
		v = (unsigned)value;
  404548:	2700      	movs	r7, #0
	 while (v || tp == tmp)
	 {
		 i = v % radix;
		 v /= radix;	// v/=radix uses less CPU clocks than v=v/radix does
		 if (i < 10)
			*tp++ = i+'0';
  40454a:	466e      	mov	r6, sp
  40454c:	466b      	mov	r3, sp
	 if (sign)
		 v = -value;
	 else
		v = (unsigned)value;

	 while (v || tp == tmp)
  40454e:	b938      	cbnz	r0, 404560 <itoa+0x20>
  404550:	42b3      	cmp	r3, r6
  404552:	d110      	bne.n	404576 <itoa+0x36>
	 {
		 i = v % radix;
  404554:	4604      	mov	r4, r0
		 v /= radix;	// v/=radix uses less CPU clocks than v=v/radix does
		 if (i < 10)
			*tp++ = i+'0';
  404556:	3430      	adds	r4, #48	; 0x30
  404558:	701c      	strb	r4, [r3, #0]
  40455a:	3301      	adds	r3, #1
	 if (sign)
		 v = -value;
	 else
		v = (unsigned)value;

	 while (v || tp == tmp)
  40455c:	2800      	cmp	r0, #0
  40455e:	d0f7      	beq.n	404550 <itoa+0x10>
	 {
		 i = v % radix;
  404560:	fbb0 f5f2 	udiv	r5, r0, r2
  404564:	fb02 0415 	mls	r4, r2, r5, r0
		 v /= radix;	// v/=radix uses less CPU clocks than v=v/radix does
		 if (i < 10)
  404568:	2c09      	cmp	r4, #9
		v = (unsigned)value;

	 while (v || tp == tmp)
	 {
		 i = v % radix;
		 v /= radix;	// v/=radix uses less CPU clocks than v=v/radix does
  40456a:	4628      	mov	r0, r5
		 if (i < 10)
  40456c:	ddf3      	ble.n	404556 <itoa+0x16>
			*tp++ = i+'0';
		 else
			*tp++ = i + 'a' - 10;
  40456e:	3457      	adds	r4, #87	; 0x57
  404570:	701c      	strb	r4, [r3, #0]
  404572:	3301      	adds	r3, #1
  404574:	e7eb      	b.n	40454e <itoa+0xe>
	 }

	 int len = tp - tmp;
  404576:	1b98      	subs	r0, r3, r6

	 if (sign)
  404578:	b11f      	cbz	r7, 404582 <itoa+0x42>
	 {
		 *sp++ = '-';
  40457a:	222d      	movs	r2, #45	; 0x2d
  40457c:	700a      	strb	r2, [r1, #0]
		 len++;
  40457e:	3001      	adds	r0, #1

	 int len = tp - tmp;

	 if (sign)
	 {
		 *sp++ = '-';
  404580:	3101      	adds	r1, #1
		 len++;
	 }

	 while (tp > tmp)
  404582:	42b3      	cmp	r3, r6
  404584:	d906      	bls.n	404594 <itoa+0x54>
  404586:	3901      	subs	r1, #1
	 *sp++ = *--tp;
  404588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40458c:	f801 2f01 	strb.w	r2, [r1, #1]!
	 {
		 *sp++ = '-';
		 len++;
	 }

	 while (tp > tmp)
  404590:	42b3      	cmp	r3, r6
  404592:	d1f9      	bne.n	404588 <itoa+0x48>
	 *sp++ = *--tp;

	 return len;
  404594:	b004      	add	sp, #16
  404596:	bcf0      	pop	{r4, r5, r6, r7}
  404598:	4770      	bx	lr
	 char tmp[16];		// be careful with the length of the buffer
	 char *tp = tmp;
	 int i;
	 unsigned v;

	 int sign = (radix == 10 && value < 0);
  40459a:	2800      	cmp	r0, #0
  40459c:	dad4      	bge.n	404548 <itoa+0x8>
	 if (sign)
		 v = -value;
  40459e:	4240      	negs	r0, r0
	 char tmp[16];		// be careful with the length of the buffer
	 char *tp = tmp;
	 int i;
	 unsigned v;

	 int sign = (radix == 10 && value < 0);
  4045a0:	2701      	movs	r7, #1
  4045a2:	e7d2      	b.n	40454a <itoa+0xa>

004045a4 <drv_gpio_int_cd>:
 * @brief Interrupt routine for SD Card Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_cd(uint32_t ul_id, uint32_t ul_mask)
{
  4045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_SD_CD].pinId);
  4045a6:	4e0b      	ldr	r6, [pc, #44]	; (4045d4 <drv_gpio_int_cd+0x30>)
  4045a8:	4b0b      	ldr	r3, [pc, #44]	; (4045d8 <drv_gpio_int_cd+0x34>)
  4045aa:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
	pio_disable_interrupt(PIOB, PinMask);
  4045ae:	4d0b      	ldr	r5, [pc, #44]	; (4045dc <drv_gpio_int_cd+0x38>)
 * @brief Interrupt routine for SD Card Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_cd(uint32_t ul_id, uint32_t ul_mask)
{
  4045b0:	460f      	mov	r7, r1
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_SD_CD].pinId);
  4045b2:	4798      	blx	r3
	pio_disable_interrupt(PIOB, PinMask);
  4045b4:	4b0a      	ldr	r3, [pc, #40]	; (4045e0 <drv_gpio_int_cd+0x3c>)
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_cd(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_SD_CD].pinId);
  4045b6:	4604      	mov	r4, r0
	pio_disable_interrupt(PIOB, PinMask);
  4045b8:	4601      	mov	r1, r0
  4045ba:	4628      	mov	r0, r5
  4045bc:	4798      	blx	r3
	uint32_t ReadIsr = PIOB->PIO_ISR;
	if (PinMask == ul_mask)
  4045be:	42bc      	cmp	r4, r7
 ***********************************************************************************************/
static void drv_gpio_int_cd(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_SD_CD].pinId);
	pio_disable_interrupt(PIOB, PinMask);
	uint32_t ReadIsr = PIOB->PIO_ISR;
  4045c0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_SD_CD].gpioSetFlag = 1;
	}
	pio_enable_interrupt(PIOB, PinMask);
  4045c2:	4806      	ldr	r0, [pc, #24]	; (4045dc <drv_gpio_int_cd+0x38>)
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_SD_CD].pinId);
	pio_disable_interrupt(PIOB, PinMask);
	uint32_t ReadIsr = PIOB->PIO_ISR;
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_SD_CD].gpioSetFlag = 1;
  4045c4:	bf04      	itt	eq
  4045c6:	2301      	moveq	r3, #1
  4045c8:	f886 310e 	strbeq.w	r3, [r6, #270]	; 0x10e
	}
	pio_enable_interrupt(PIOB, PinMask);
  4045cc:	4621      	mov	r1, r4
  4045ce:	4b05      	ldr	r3, [pc, #20]	; (4045e4 <drv_gpio_int_cd+0x40>)
  4045d0:	4798      	blx	r3
  4045d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4045d4:	20000118 	.word	0x20000118
  4045d8:	004050fd 	.word	0x004050fd
  4045dc:	400e1000 	.word	0x400e1000
  4045e0:	00404f39 	.word	0x00404f39
  4045e4:	00404f31 	.word	0x00404f31

004045e8 <drv_gpio_int_lbo>:
 * @brief Interrupt routine for Low Battery Out
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_lbo(uint32_t ul_id, uint32_t ul_mask)
{
  4045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_LBO].pinId);
  4045ea:	4e0b      	ldr	r6, [pc, #44]	; (404618 <drv_gpio_int_lbo+0x30>)
  4045ec:	4b0b      	ldr	r3, [pc, #44]	; (40461c <drv_gpio_int_lbo+0x34>)
  4045ee:	f8d6 00f0 	ldr.w	r0, [r6, #240]	; 0xf0
	pio_disable_interrupt(PIOA, PinMask);
  4045f2:	4d0b      	ldr	r5, [pc, #44]	; (404620 <drv_gpio_int_lbo+0x38>)
 * @brief Interrupt routine for Low Battery Out
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_lbo(uint32_t ul_id, uint32_t ul_mask)
{
  4045f4:	460f      	mov	r7, r1
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_LBO].pinId);
  4045f6:	4798      	blx	r3
	pio_disable_interrupt(PIOA, PinMask);
  4045f8:	4b0a      	ldr	r3, [pc, #40]	; (404624 <drv_gpio_int_lbo+0x3c>)
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_lbo(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_LBO].pinId);
  4045fa:	4604      	mov	r4, r0
	pio_disable_interrupt(PIOA, PinMask);
  4045fc:	4601      	mov	r1, r0
  4045fe:	4628      	mov	r0, r5
  404600:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
  404602:	42bc      	cmp	r4, r7
 ***********************************************************************************************/
static void drv_gpio_int_lbo(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_LBO].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
  404604:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_LBO].gpioSetFlag = 1;
	}
	pio_enable_interrupt(PIOA, PinMask);
  404606:	4806      	ldr	r0, [pc, #24]	; (404620 <drv_gpio_int_lbo+0x38>)
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_LBO].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_LBO].gpioSetFlag = 1;
  404608:	bf04      	itt	eq
  40460a:	2301      	moveq	r3, #1
  40460c:	f886 30fe 	strbeq.w	r3, [r6, #254]	; 0xfe
	}
	pio_enable_interrupt(PIOA, PinMask);
  404610:	4621      	mov	r1, r4
  404612:	4b05      	ldr	r3, [pc, #20]	; (404628 <drv_gpio_int_lbo+0x40>)
  404614:	4798      	blx	r3
  404616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404618:	20000118 	.word	0x20000118
  40461c:	004050fd 	.word	0x004050fd
  404620:	400e0e00 	.word	0x400e0e00
  404624:	00404f39 	.word	0x00404f39
  404628:	00404f31 	.word	0x00404f31

0040462c <drv_gpio_int_dc2>:
 * @brief Interrupt routine for Jack-2 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc2(uint32_t ul_id, uint32_t ul_mask)
{
  40462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC2].pinId);
  40462e:	4e0b      	ldr	r6, [pc, #44]	; (40465c <drv_gpio_int_dc2+0x30>)
  404630:	4b0b      	ldr	r3, [pc, #44]	; (404660 <drv_gpio_int_dc2+0x34>)
  404632:	6e30      	ldr	r0, [r6, #96]	; 0x60
	pio_disable_interrupt(PIOA, PinMask);
  404634:	4d0b      	ldr	r5, [pc, #44]	; (404664 <drv_gpio_int_dc2+0x38>)
 * @brief Interrupt routine for Jack-2 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc2(uint32_t ul_id, uint32_t ul_mask)
{
  404636:	460f      	mov	r7, r1
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC2].pinId);
  404638:	4798      	blx	r3
	pio_disable_interrupt(PIOA, PinMask);
  40463a:	4b0b      	ldr	r3, [pc, #44]	; (404668 <drv_gpio_int_dc2+0x3c>)
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc2(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC2].pinId);
  40463c:	4604      	mov	r4, r0
	pio_disable_interrupt(PIOA, PinMask);
  40463e:	4601      	mov	r1, r0
  404640:	4628      	mov	r0, r5
  404642:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
  404644:	42bc      	cmp	r4, r7
 ***********************************************************************************************/
static void drv_gpio_int_dc2(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC2].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
  404646:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_JC_DC2].gpioSetFlag = 1;
	}
	pio_enable_interrupt(PIOA, PinMask);
  404648:	4806      	ldr	r0, [pc, #24]	; (404664 <drv_gpio_int_dc2+0x38>)
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC2].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_JC_DC2].gpioSetFlag = 1;
  40464a:	bf04      	itt	eq
  40464c:	2301      	moveq	r3, #1
  40464e:	f886 306e 	strbeq.w	r3, [r6, #110]	; 0x6e
	}
	pio_enable_interrupt(PIOA, PinMask);
  404652:	4621      	mov	r1, r4
  404654:	4b05      	ldr	r3, [pc, #20]	; (40466c <drv_gpio_int_dc2+0x40>)
  404656:	4798      	blx	r3
  404658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40465a:	bf00      	nop
  40465c:	20000118 	.word	0x20000118
  404660:	004050fd 	.word	0x004050fd
  404664:	400e0e00 	.word	0x400e0e00
  404668:	00404f39 	.word	0x00404f39
  40466c:	00404f31 	.word	0x00404f31

00404670 <drv_gpio_int_dc1>:
 * @brief Interrupt routine for Jack-1 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc1(uint32_t ul_id, uint32_t ul_mask)
{
  404670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC1].pinId);
  404672:	4e0b      	ldr	r6, [pc, #44]	; (4046a0 <drv_gpio_int_dc1+0x30>)
  404674:	4b0b      	ldr	r3, [pc, #44]	; (4046a4 <drv_gpio_int_dc1+0x34>)
  404676:	6d30      	ldr	r0, [r6, #80]	; 0x50
	pio_disable_interrupt(PIOA, PinMask);
  404678:	4d0b      	ldr	r5, [pc, #44]	; (4046a8 <drv_gpio_int_dc1+0x38>)
 * @brief Interrupt routine for Jack-1 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc1(uint32_t ul_id, uint32_t ul_mask)
{
  40467a:	460f      	mov	r7, r1
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC1].pinId);
  40467c:	4798      	blx	r3
	pio_disable_interrupt(PIOA, PinMask);
  40467e:	4b0b      	ldr	r3, [pc, #44]	; (4046ac <drv_gpio_int_dc1+0x3c>)
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc1(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC1].pinId);
  404680:	4604      	mov	r4, r0
	pio_disable_interrupt(PIOA, PinMask);
  404682:	4601      	mov	r1, r0
  404684:	4628      	mov	r0, r5
  404686:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
  404688:	42bc      	cmp	r4, r7
 ***********************************************************************************************/
static void drv_gpio_int_dc1(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC1].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40468a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_JC_DC1].gpioSetFlag = 1;
	}
	pio_enable_interrupt(PIOA, PinMask);
  40468c:	4806      	ldr	r0, [pc, #24]	; (4046a8 <drv_gpio_int_dc1+0x38>)
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC1].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_JC_DC1].gpioSetFlag = 1;
  40468e:	bf04      	itt	eq
  404690:	2301      	moveq	r3, #1
  404692:	f886 305e 	strbeq.w	r3, [r6, #94]	; 0x5e
	}
	pio_enable_interrupt(PIOA, PinMask);
  404696:	4621      	mov	r1, r4
  404698:	4b05      	ldr	r3, [pc, #20]	; (4046b0 <drv_gpio_int_dc1+0x40>)
  40469a:	4798      	blx	r3
  40469c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40469e:	bf00      	nop
  4046a0:	20000118 	.word	0x20000118
  4046a4:	004050fd 	.word	0x004050fd
  4046a8:	400e0e00 	.word	0x400e0e00
  4046ac:	00404f39 	.word	0x00404f39
  4046b0:	00404f31 	.word	0x00404f31

004046b4 <drv_gpio_int_oc2>:
 * @brief Interrupt routine for Jack-2 Over Current
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_oc2(uint32_t ul_id, uint32_t ul_mask)
{
  4046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC2].pinId);
  4046b6:	4e0b      	ldr	r6, [pc, #44]	; (4046e4 <drv_gpio_int_oc2+0x30>)
  4046b8:	4b0b      	ldr	r3, [pc, #44]	; (4046e8 <drv_gpio_int_oc2+0x34>)
  4046ba:	6c30      	ldr	r0, [r6, #64]	; 0x40
	pio_disable_interrupt(PIOA, PinMask);
  4046bc:	4d0b      	ldr	r5, [pc, #44]	; (4046ec <drv_gpio_int_oc2+0x38>)
 * @brief Interrupt routine for Jack-2 Over Current
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_oc2(uint32_t ul_id, uint32_t ul_mask)
{
  4046be:	460f      	mov	r7, r1
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC2].pinId);
  4046c0:	4798      	blx	r3
	pio_disable_interrupt(PIOA, PinMask);
  4046c2:	4b0b      	ldr	r3, [pc, #44]	; (4046f0 <drv_gpio_int_oc2+0x3c>)
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_oc2(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC2].pinId);
  4046c4:	4604      	mov	r4, r0
	pio_disable_interrupt(PIOA, PinMask);
  4046c6:	4601      	mov	r1, r0
  4046c8:	4628      	mov	r0, r5
  4046ca:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
  4046cc:	42bc      	cmp	r4, r7
 ***********************************************************************************************/
static void drv_gpio_int_oc2(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC2].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
  4046ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_JC_OC2].gpioSetFlag = 1;
	}
	pio_enable_interrupt(PIOA, PinMask);
  4046d0:	4806      	ldr	r0, [pc, #24]	; (4046ec <drv_gpio_int_oc2+0x38>)
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC2].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_JC_OC2].gpioSetFlag = 1;
  4046d2:	bf04      	itt	eq
  4046d4:	2301      	moveq	r3, #1
  4046d6:	f886 304e 	strbeq.w	r3, [r6, #78]	; 0x4e
	}
	pio_enable_interrupt(PIOA, PinMask);
  4046da:	4621      	mov	r1, r4
  4046dc:	4b05      	ldr	r3, [pc, #20]	; (4046f4 <drv_gpio_int_oc2+0x40>)
  4046de:	4798      	blx	r3
  4046e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4046e2:	bf00      	nop
  4046e4:	20000118 	.word	0x20000118
  4046e8:	004050fd 	.word	0x004050fd
  4046ec:	400e0e00 	.word	0x400e0e00
  4046f0:	00404f39 	.word	0x00404f39
  4046f4:	00404f31 	.word	0x00404f31

004046f8 <drv_gpio_int_oc1>:
 * @brief Interrupt routine for Jack-1 Over Current
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_oc1(uint32_t ul_id, uint32_t ul_mask)
{
  4046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC1].pinId);
  4046fa:	4e0b      	ldr	r6, [pc, #44]	; (404728 <drv_gpio_int_oc1+0x30>)
  4046fc:	4b0b      	ldr	r3, [pc, #44]	; (40472c <drv_gpio_int_oc1+0x34>)
  4046fe:	6b30      	ldr	r0, [r6, #48]	; 0x30
	pio_disable_interrupt(PIOA, PinMask);
  404700:	4d0b      	ldr	r5, [pc, #44]	; (404730 <drv_gpio_int_oc1+0x38>)
 * @brief Interrupt routine for Jack-1 Over Current
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_oc1(uint32_t ul_id, uint32_t ul_mask)
{
  404702:	460f      	mov	r7, r1
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC1].pinId);
  404704:	4798      	blx	r3
	pio_disable_interrupt(PIOA, PinMask);
  404706:	4b0b      	ldr	r3, [pc, #44]	; (404734 <drv_gpio_int_oc1+0x3c>)
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_oc1(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC1].pinId);
  404708:	4604      	mov	r4, r0
	pio_disable_interrupt(PIOA, PinMask);
  40470a:	4601      	mov	r1, r0
  40470c:	4628      	mov	r0, r5
  40470e:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
  404710:	42bc      	cmp	r4, r7
 ***********************************************************************************************/
static void drv_gpio_int_oc1(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC1].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
  404712:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_JC_OC1].gpioSetFlag = 1;
	}
	pio_enable_interrupt(PIOA, PinMask);
  404714:	4806      	ldr	r0, [pc, #24]	; (404730 <drv_gpio_int_oc1+0x38>)
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC1].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_JC_OC1].gpioSetFlag = 1;
  404716:	bf04      	itt	eq
  404718:	2301      	moveq	r3, #1
  40471a:	f886 303e 	strbeq.w	r3, [r6, #62]	; 0x3e
	}
	pio_enable_interrupt(PIOA, PinMask);
  40471e:	4621      	mov	r1, r4
  404720:	4b05      	ldr	r3, [pc, #20]	; (404738 <drv_gpio_int_oc1+0x40>)
  404722:	4798      	blx	r3
  404724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404726:	bf00      	nop
  404728:	20000118 	.word	0x20000118
  40472c:	004050fd 	.word	0x004050fd
  404730:	400e0e00 	.word	0x400e0e00
  404734:	00404f39 	.word	0x00404f39
  404738:	00404f31 	.word	0x00404f31

0040473c <drv_gpio_int_sw2>:
 * @brief Interrupt routine for Action Switch-2
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_sw2(uint32_t ul_id, uint32_t ul_mask)
{
  40473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW2].pinId);
  40473e:	4e0b      	ldr	r6, [pc, #44]	; (40476c <drv_gpio_int_sw2+0x30>)
  404740:	4b0b      	ldr	r3, [pc, #44]	; (404770 <drv_gpio_int_sw2+0x34>)
  404742:	6a30      	ldr	r0, [r6, #32]
	pio_disable_interrupt(PIOA, PinMask);
  404744:	4d0b      	ldr	r5, [pc, #44]	; (404774 <drv_gpio_int_sw2+0x38>)
 * @brief Interrupt routine for Action Switch-2
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_sw2(uint32_t ul_id, uint32_t ul_mask)
{
  404746:	460f      	mov	r7, r1
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW2].pinId);
  404748:	4798      	blx	r3
	pio_disable_interrupt(PIOA, PinMask);
  40474a:	4b0b      	ldr	r3, [pc, #44]	; (404778 <drv_gpio_int_sw2+0x3c>)
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_sw2(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW2].pinId);
  40474c:	4604      	mov	r4, r0
	pio_disable_interrupt(PIOA, PinMask);
  40474e:	4601      	mov	r1, r0
  404750:	4628      	mov	r0, r5
  404752:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
  404754:	42bc      	cmp	r4, r7
 ***********************************************************************************************/
static void drv_gpio_int_sw2(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW2].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
  404756:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_AC_SW2].gpioSetFlag = 1;
	}
	pio_enable_interrupt(PIOA, PinMask);
  404758:	4806      	ldr	r0, [pc, #24]	; (404774 <drv_gpio_int_sw2+0x38>)
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW2].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_AC_SW2].gpioSetFlag = 1;
  40475a:	bf04      	itt	eq
  40475c:	2301      	moveq	r3, #1
  40475e:	f886 302e 	strbeq.w	r3, [r6, #46]	; 0x2e
	}
	pio_enable_interrupt(PIOA, PinMask);
  404762:	4621      	mov	r1, r4
  404764:	4b05      	ldr	r3, [pc, #20]	; (40477c <drv_gpio_int_sw2+0x40>)
  404766:	4798      	blx	r3
  404768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40476a:	bf00      	nop
  40476c:	20000118 	.word	0x20000118
  404770:	004050fd 	.word	0x004050fd
  404774:	400e0e00 	.word	0x400e0e00
  404778:	00404f39 	.word	0x00404f39
  40477c:	00404f31 	.word	0x00404f31

00404780 <drv_gpio_int_sw1>:
 * @brief Interrupt routine for Action Switch-1
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_sw1(uint32_t ul_id, uint32_t ul_mask)
{
  404780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW1].pinId);
  404782:	4e0a      	ldr	r6, [pc, #40]	; (4047ac <drv_gpio_int_sw1+0x2c>)
  404784:	4b0a      	ldr	r3, [pc, #40]	; (4047b0 <drv_gpio_int_sw1+0x30>)
  404786:	6930      	ldr	r0, [r6, #16]
	pio_disable_interrupt(PIOA, PinMask);
  404788:	4d0a      	ldr	r5, [pc, #40]	; (4047b4 <drv_gpio_int_sw1+0x34>)
 * @brief Interrupt routine for Action Switch-1
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_sw1(uint32_t ul_id, uint32_t ul_mask)
{
  40478a:	460f      	mov	r7, r1
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW1].pinId);
  40478c:	4798      	blx	r3
	pio_disable_interrupt(PIOA, PinMask);
  40478e:	4b0a      	ldr	r3, [pc, #40]	; (4047b8 <drv_gpio_int_sw1+0x38>)
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_sw1(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW1].pinId);
  404790:	4604      	mov	r4, r0
	pio_disable_interrupt(PIOA, PinMask);
  404792:	4601      	mov	r1, r0
  404794:	4628      	mov	r0, r5
  404796:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
  404798:	42bc      	cmp	r4, r7
 ***********************************************************************************************/
static void drv_gpio_int_sw1(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW1].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40479a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_AC_SW1].gpioSetFlag = 1;
	}
	pio_enable_interrupt(PIOA, PinMask);
  40479c:	4805      	ldr	r0, [pc, #20]	; (4047b4 <drv_gpio_int_sw1+0x34>)
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW1].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_AC_SW1].gpioSetFlag = 1;
  40479e:	bf04      	itt	eq
  4047a0:	2301      	moveq	r3, #1
  4047a2:	77b3      	strbeq	r3, [r6, #30]
	}
	pio_enable_interrupt(PIOA, PinMask);
  4047a4:	4621      	mov	r1, r4
  4047a6:	4b05      	ldr	r3, [pc, #20]	; (4047bc <drv_gpio_int_sw1+0x3c>)
  4047a8:	4798      	blx	r3
  4047aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4047ac:	20000118 	.word	0x20000118
  4047b0:	004050fd 	.word	0x004050fd
  4047b4:	400e0e00 	.word	0x400e0e00
  4047b8:	00404f39 	.word	0x00404f39
  4047bc:	00404f31 	.word	0x00404f31

004047c0 <drv_gpio_int_pw>:
 * @brief Interrupt routine for Power Switch
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_pw(uint32_t ul_id, uint32_t ul_mask)
{
  4047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_PW_SW].pinId);
  4047c2:	4e0a      	ldr	r6, [pc, #40]	; (4047ec <drv_gpio_int_pw+0x2c>)
  4047c4:	4b0a      	ldr	r3, [pc, #40]	; (4047f0 <drv_gpio_int_pw+0x30>)
  4047c6:	6830      	ldr	r0, [r6, #0]
	pio_disable_interrupt(PIOA, PinMask);
  4047c8:	4d0a      	ldr	r5, [pc, #40]	; (4047f4 <drv_gpio_int_pw+0x34>)
 * @brief Interrupt routine for Power Switch
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_pw(uint32_t ul_id, uint32_t ul_mask)
{
  4047ca:	460f      	mov	r7, r1
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_PW_SW].pinId);
  4047cc:	4798      	blx	r3
	pio_disable_interrupt(PIOA, PinMask);
  4047ce:	4b0a      	ldr	r3, [pc, #40]	; (4047f8 <drv_gpio_int_pw+0x38>)
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_pw(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_PW_SW].pinId);
  4047d0:	4604      	mov	r4, r0
	pio_disable_interrupt(PIOA, PinMask);
  4047d2:	4601      	mov	r1, r0
  4047d4:	4628      	mov	r0, r5
  4047d6:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
  4047d8:	42bc      	cmp	r4, r7
 ***********************************************************************************************/
static void drv_gpio_int_pw(uint32_t ul_id, uint32_t ul_mask)
{
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_PW_SW].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
  4047da:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_PW_SW].gpioSetFlag = 1;
	}
	pio_enable_interrupt(PIOA, PinMask);
  4047dc:	4805      	ldr	r0, [pc, #20]	; (4047f4 <drv_gpio_int_pw+0x34>)
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_PW_SW].pinId);
	pio_disable_interrupt(PIOA, PinMask);
	uint32_t ReadIsr = PIOA->PIO_ISR;
	if (PinMask == ul_mask)
	{
		gpioConfig[DRV_GPIO_PIN_PW_SW].gpioSetFlag = 1;
  4047de:	bf04      	itt	eq
  4047e0:	2301      	moveq	r3, #1
  4047e2:	73b3      	strbeq	r3, [r6, #14]
	}
	pio_enable_interrupt(PIOA, PinMask);
  4047e4:	4621      	mov	r1, r4
  4047e6:	4b05      	ldr	r3, [pc, #20]	; (4047fc <drv_gpio_int_pw+0x3c>)
  4047e8:	4798      	blx	r3
  4047ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4047ec:	20000118 	.word	0x20000118
  4047f0:	004050fd 	.word	0x004050fd
  4047f4:	400e0e00 	.word	0x400e0e00
  4047f8:	00404f39 	.word	0x00404f39
  4047fc:	00404f31 	.word	0x00404f31

00404800 <drv_gpio_config>:
 * @brief Set and configure all GPIOs
 * @param drv_gpio_config_t* gpioConfig
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config(drv_gpio_config_t* gpioConfig)
{
  404800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	status_t status = STATUS_PASS;
	unsigned long PinFlag = 0;	
	if(gpioConfig->pinMode == DRV_GPIO_PIN_MODE_INPUT)	//Check if input or output
  404804:	7903      	ldrb	r3, [r0, #4]
  404806:	2b01      	cmp	r3, #1
 * @brief Set and configure all GPIOs
 * @param drv_gpio_config_t* gpioConfig
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config(drv_gpio_config_t* gpioConfig)
{
  404808:	b082      	sub	sp, #8
  40480a:	4604      	mov	r4, r0
	status_t status = STATUS_PASS;
	unsigned long PinFlag = 0;	
	if(gpioConfig->pinMode == DRV_GPIO_PIN_MODE_INPUT)	//Check if input or output
  40480c:	d011      	beq.n	404832 <drv_gpio_config+0x32>
		p_pio->PIO_PPDDR |= PinMask; 
		
	}
	else	//The pin is output
	{
		if (gpioConfig->initialPinState == DRV_GPIO_PIN_STATE_HIGH)
  40480e:	7942      	ldrb	r2, [r0, #5]
		else
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_0;	//set default pin state
		}
		
		pmc_enable_periph_clk(gpioConfig->pinId);
  404810:	4b36      	ldr	r3, [pc, #216]	; (4048ec <drv_gpio_config+0xec>)
  404812:	6800      	ldr	r0, [r0, #0]
	}
	else	//The pin is output
	{
		if (gpioConfig->initialPinState == DRV_GPIO_PIN_STATE_HIGH)
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_1;	//set default pin state
  404814:	2a01      	cmp	r2, #1
  404816:	bf14      	ite	ne
  404818:	f04f 5540 	movne.w	r5, #805306368	; 0x30000000
  40481c:	f04f 5560 	moveq.w	r5, #939524096	; 0x38000000
		else
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_0;	//set default pin state
		}
		
		pmc_enable_periph_clk(gpioConfig->pinId);
  404820:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  404822:	4629      	mov	r1, r5
  404824:	6820      	ldr	r0, [r4, #0]
  404826:	4b32      	ldr	r3, [pc, #200]	; (4048f0 <drv_gpio_config+0xf0>)
  404828:	4798      	blx	r3
	}
	
	return status;
}
  40482a:	2000      	movs	r0, #0
  40482c:	b002      	add	sp, #8
  40482e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	status_t status = STATUS_PASS;
	unsigned long PinFlag = 0;	
	if(gpioConfig->pinMode == DRV_GPIO_PIN_MODE_INPUT)	//Check if input or output
	{
		PinFlag |= PIO_TYPE_PIO_INPUT;	//Set as input
		if (gpioConfig->pullUpEnabled == TRUE)
  404832:	7b02      	ldrb	r2, [r0, #12]
{
	status_t status = STATUS_PASS;
	unsigned long PinFlag = 0;	
	if(gpioConfig->pinMode == DRV_GPIO_PIN_MODE_INPUT)	//Check if input or output
	{
		PinFlag |= PIO_TYPE_PIO_INPUT;	//Set as input
  404834:	4f2f      	ldr	r7, [pc, #188]	; (4048f4 <drv_gpio_config+0xf4>)
		if (gpioConfig->pullUpEnabled == TRUE)
		{
			PinFlag |= PIO_PULLUP;	//enable the pull up
		}
		
		if (gpioConfig->debounceEnabled == TRUE)
  404836:	7b43      	ldrb	r3, [r0, #13]
{
	status_t status = STATUS_PASS;
	unsigned long PinFlag = 0;	
	if(gpioConfig->pinMode == DRV_GPIO_PIN_MODE_INPUT)	//Check if input or output
	{
		PinFlag |= PIO_TYPE_PIO_INPUT;	//Set as input
  404838:	2a01      	cmp	r2, #1
  40483a:	bf18      	it	ne
  40483c:	f04f 5720 	movne.w	r7, #671088640	; 0x28000000
		if (gpioConfig->pullUpEnabled == TRUE)
		{
			PinFlag |= PIO_PULLUP;	//enable the pull up
		}
		
		if (gpioConfig->debounceEnabled == TRUE)
  404840:	2b01      	cmp	r3, #1
  404842:	d03c      	beq.n	4048be <drv_gpio_config+0xbe>
  404844:	4d2c      	ldr	r5, [pc, #176]	; (4048f8 <drv_gpio_config+0xf8>)
  404846:	4e2d      	ldr	r6, [pc, #180]	; (4048fc <drv_gpio_config+0xfc>)
			Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);
			uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
			pio_set_debounce_filter(p_pio, PinMask, DEBOUNCE_PERIOD);
		}
		
		pmc_enable_periph_clk(gpioConfig->pinId);	
  404848:	4b28      	ldr	r3, [pc, #160]	; (4048ec <drv_gpio_config+0xec>)
  40484a:	6820      	ldr	r0, [r4, #0]
  40484c:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  40484e:	4b28      	ldr	r3, [pc, #160]	; (4048f0 <drv_gpio_config+0xf0>)
  404850:	6820      	ldr	r0, [r4, #0]
  404852:	4639      	mov	r1, r7
  404854:	4798      	blx	r3
		 
		PinFlag = 0;	//Reset the PinFlag to use it to configure interrupt
		switch(gpioConfig->interruptType)	//set interrupt configuration flag
  404856:	79a3      	ldrb	r3, [r4, #6]
  404858:	2b03      	cmp	r3, #3
  40485a:	d829      	bhi.n	4048b0 <drv_gpio_config+0xb0>
  40485c:	4a28      	ldr	r2, [pc, #160]	; (404900 <drv_gpio_config+0x100>)
				break;
			case DRV_GPIO_INTERRUPT_NONE :
			default:
				break;
		}
		Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);	//peripheral ID
  40485e:	6820      	ldr	r0, [r4, #0]
  404860:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
  404864:	47a8      	blx	r5
  404866:	4605      	mov	r5, r0
		uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  404868:	6820      	ldr	r0, [r4, #0]
  40486a:	47b0      	blx	r6
		if (PinFlag & (PIO_IT_RISE_EDGE | PIO_IT_FALL_EDGE | PIO_IT_HIGH_LEVEL | PIO_IT_LOW_LEVEL))	//if set as interrupt, enable and configure it
  40486c:	f017 0f70 	tst.w	r7, #112	; 0x70
			case DRV_GPIO_INTERRUPT_NONE :
			default:
				break;
		}
		Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);	//peripheral ID
		uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  404870:	4606      	mov	r6, r0
		if (PinFlag & (PIO_IT_RISE_EDGE | PIO_IT_FALL_EDGE | PIO_IT_HIGH_LEVEL | PIO_IT_LOW_LEVEL))	//if set as interrupt, enable and configure it
  404872:	d014      	beq.n	40489e <drv_gpio_config+0x9e>
		{			
			uint32_t PinPio = pio_get_pin_group_id(gpioConfig->pinId);	//Pin ID
  404874:	6820      	ldr	r0, [r4, #0]
  404876:	4b23      	ldr	r3, [pc, #140]	; (404904 <drv_gpio_config+0x104>)
  404878:	4798      	blx	r3
			pio_handler_set(p_pio, PinPio, PinMask, PinFlag, gpioConfig->interruptHandler);
  40487a:	68a3      	ldr	r3, [r4, #8]
  40487c:	9300      	str	r3, [sp, #0]
		}
		Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);	//peripheral ID
		uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
		if (PinFlag & (PIO_IT_RISE_EDGE | PIO_IT_FALL_EDGE | PIO_IT_HIGH_LEVEL | PIO_IT_LOW_LEVEL))	//if set as interrupt, enable and configure it
		{			
			uint32_t PinPio = pio_get_pin_group_id(gpioConfig->pinId);	//Pin ID
  40487e:	4601      	mov	r1, r0
			pio_handler_set(p_pio, PinPio, PinMask, PinFlag, gpioConfig->interruptHandler);
  404880:	463b      	mov	r3, r7
  404882:	4632      	mov	r2, r6
  404884:	4628      	mov	r0, r5
  404886:	4c20      	ldr	r4, [pc, #128]	; (404908 <drv_gpio_config+0x108>)
  404888:	47a0      	blx	r4
			pio_enable_interrupt(p_pio, PinMask);
  40488a:	4b20      	ldr	r3, [pc, #128]	; (40490c <drv_gpio_config+0x10c>)
  40488c:	4628      	mov	r0, r5
  40488e:	4631      	mov	r1, r6
  404890:	4798      	blx	r3
			if (p_pio == PIOA)
  404892:	4b1f      	ldr	r3, [pc, #124]	; (404910 <drv_gpio_config+0x110>)
  404894:	429d      	cmp	r5, r3
  404896:	d024      	beq.n	4048e2 <drv_gpio_config+0xe2>
			{
				NVIC_EnableIRQ(PIOA_IRQn);
			}
			else if (p_pio == PIOB)
  404898:	4b1e      	ldr	r3, [pc, #120]	; (404914 <drv_gpio_config+0x114>)
  40489a:	429d      	cmp	r5, r3
  40489c:	d01c      	beq.n	4048d8 <drv_gpio_config+0xd8>
			{
				NVIC_EnableIRQ(PIOB_IRQn);
			}
		}
		//turn off any pulldown resistors
		p_pio->PIO_PPDDR |= PinMask; 
  40489e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
		pmc_enable_periph_clk(gpioConfig->pinId);
		pio_configure_pin(gpioConfig->pinId, PinFlag);
	}
	
	return status;
}
  4048a2:	2000      	movs	r0, #0
			{
				NVIC_EnableIRQ(PIOB_IRQn);
			}
		}
		//turn off any pulldown resistors
		p_pio->PIO_PPDDR |= PinMask; 
  4048a4:	431e      	orrs	r6, r3
  4048a6:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		pmc_enable_periph_clk(gpioConfig->pinId);
		pio_configure_pin(gpioConfig->pinId, PinFlag);
	}
	
	return status;
}
  4048aa:	b002      	add	sp, #8
  4048ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				break;
			case DRV_GPIO_INTERRUPT_NONE :
			default:
				break;
		}
		Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);	//peripheral ID
  4048b0:	6820      	ldr	r0, [r4, #0]
  4048b2:	47a8      	blx	r5
  4048b4:	4605      	mov	r5, r0
		uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  4048b6:	6820      	ldr	r0, [r4, #0]
  4048b8:	47b0      	blx	r6
  4048ba:	4606      	mov	r6, r0
  4048bc:	e7ef      	b.n	40489e <drv_gpio_config+0x9e>
		}
		
		if (gpioConfig->debounceEnabled == TRUE)
		{
			//PinFlag |= PIO_DEBOUNCE;	//enable debounce filter
			Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);
  4048be:	4d0e      	ldr	r5, [pc, #56]	; (4048f8 <drv_gpio_config+0xf8>)
  4048c0:	6800      	ldr	r0, [r0, #0]
			uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  4048c2:	4e0e      	ldr	r6, [pc, #56]	; (4048fc <drv_gpio_config+0xfc>)
		}
		
		if (gpioConfig->debounceEnabled == TRUE)
		{
			//PinFlag |= PIO_DEBOUNCE;	//enable debounce filter
			Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);
  4048c4:	47a8      	blx	r5
  4048c6:	4680      	mov	r8, r0
			uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  4048c8:	6820      	ldr	r0, [r4, #0]
  4048ca:	47b0      	blx	r6
			pio_set_debounce_filter(p_pio, PinMask, DEBOUNCE_PERIOD);
  4048cc:	2205      	movs	r2, #5
		
		if (gpioConfig->debounceEnabled == TRUE)
		{
			//PinFlag |= PIO_DEBOUNCE;	//enable debounce filter
			Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);
			uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  4048ce:	4601      	mov	r1, r0
			pio_set_debounce_filter(p_pio, PinMask, DEBOUNCE_PERIOD);
  4048d0:	4b11      	ldr	r3, [pc, #68]	; (404918 <drv_gpio_config+0x118>)
  4048d2:	4640      	mov	r0, r8
  4048d4:	4798      	blx	r3
  4048d6:	e7b7      	b.n	404848 <drv_gpio_config+0x48>
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4048d8:	4b10      	ldr	r3, [pc, #64]	; (40491c <drv_gpio_config+0x11c>)
  4048da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4048de:	601a      	str	r2, [r3, #0]
  4048e0:	e7dd      	b.n	40489e <drv_gpio_config+0x9e>
  4048e2:	4b0e      	ldr	r3, [pc, #56]	; (40491c <drv_gpio_config+0x11c>)
  4048e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4048e8:	601a      	str	r2, [r3, #0]
  4048ea:	e7d8      	b.n	40489e <drv_gpio_config+0x9e>
  4048ec:	004052d5 	.word	0x004052d5
  4048f0:	00404fa1 	.word	0x00404fa1
  4048f4:	28000001 	.word	0x28000001
  4048f8:	004050e5 	.word	0x004050e5
  4048fc:	004050fd 	.word	0x004050fd
  404900:	00406d54 	.word	0x00406d54
  404904:	004050f5 	.word	0x004050f5
  404908:	00405181 	.word	0x00405181
  40490c:	00404f31 	.word	0x00404f31
  404910:	400e0e00 	.word	0x400e0e00
  404914:	400e1000 	.word	0x400e1000
  404918:	00404e2d 	.word	0x00404e2d
  40491c:	e000e100 	.word	0xe000e100

00404920 <drv_gpio_initializeAll>:
 * @brief initialize all GPIO
 * @param 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_gpio_initializeAll(void)
{
  404920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	status_t status = STATUS_PASS; 
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
	int i = 0; 
	//Change the PB10 and PB11 to be configured as GPIO and not USB DDM and DDP 
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO10 | CCFG_SYSIO_SYSIO11;	
  404922:	4b0b      	ldr	r3, [pc, #44]	; (404950 <drv_gpio_initializeAll+0x30>)
  404924:	4c0b      	ldr	r4, [pc, #44]	; (404954 <drv_gpio_initializeAll+0x34>)
  404926:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  40492a:	4f0b      	ldr	r7, [pc, #44]	; (404958 <drv_gpio_initializeAll+0x38>)
  40492c:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
  404930:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  404934:	f504 7698 	add.w	r6, r4, #304	; 0x130
 * @param 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_gpio_initializeAll(void)
{
	status_t status = STATUS_PASS; 
  404938:	2500      	movs	r5, #0
	int i = 0; 
	//Change the PB10 and PB11 to be configured as GPIO and not USB DDM and DDP 
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO10 | CCFG_SYSIO_SYSIO11;	
	for(i = 0; i < numGpio ; i++)
	{
		if(drv_gpio_config(&gpioConfig[i]) != STATUS_PASS)
  40493a:	4620      	mov	r0, r4
  40493c:	47b8      	blx	r7
  40493e:	3410      	adds	r4, #16
		{
			//printf("failed to initialize GPIO at index %d", i);
			status |= STATUS_FAIL;
  404940:	2800      	cmp	r0, #0
  404942:	bf18      	it	ne
  404944:	2501      	movne	r5, #1
	status_t status = STATUS_PASS; 
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
	int i = 0; 
	//Change the PB10 and PB11 to be configured as GPIO and not USB DDM and DDP 
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO10 | CCFG_SYSIO_SYSIO11;	
	for(i = 0; i < numGpio ; i++)
  404946:	42b4      	cmp	r4, r6
  404948:	d1f7      	bne.n	40493a <drv_gpio_initializeAll+0x1a>
	//drv_gpio_config(&gpioConfig[DRV_GPIO_PIN_BLE_RST2]);
	//drv_gpio_config(&gpioConfig[DRV_GPIO_PIN_BLE_RST3]);
	
	
	return status; 
}
  40494a:	4628      	mov	r0, r5
  40494c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40494e:	bf00      	nop
  404950:	400e0200 	.word	0x400e0200
  404954:	20000118 	.word	0x20000118
  404958:	00404801 	.word	0x00404801

0040495c <drv_gpio_setPinState>:
 * @brief Set a GPIO to HIGH or LOW
 * @param drv_gpio_pins_t pin, drv_gpio_pin_state_t state
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_setPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t state)
{
  40495c:	b538      	push	{r3, r4, r5, lr}
	status_t status = STATUS_PASS;
	uint32_t pinFlag = 0x00; 
	if(gpioConfig[pin].pinMode != DRV_GPIO_PIN_MODE_OUTPUT)
  40495e:	4c18      	ldr	r4, [pc, #96]	; (4049c0 <drv_gpio_setPinState+0x64>)
  404960:	0105      	lsls	r5, r0, #4
  404962:	1963      	adds	r3, r4, r5
  404964:	791a      	ldrb	r2, [r3, #4]
  404966:	b972      	cbnz	r2, 404986 <drv_gpio_setPinState+0x2a>
	{
		return STATUS_FAIL;
	}
	if(gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_HIGH || gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_LOW)
  404968:	7bdb      	ldrb	r3, [r3, #15]
  40496a:	3b02      	subs	r3, #2
  40496c:	2b01      	cmp	r3, #1
  40496e:	d90c      	bls.n	40498a <drv_gpio_setPinState+0x2e>
			pio_configure_pin(gpioConfig->pinId, pinFlag);			
		}
	}
	//the output should be in the right state. 
	
	switch(state)
  404970:	2901      	cmp	r1, #1
  404972:	d01f      	beq.n	4049b4 <drv_gpio_setPinState+0x58>
  404974:	d312      	bcc.n	40499c <drv_gpio_setPinState+0x40>
  404976:	2902      	cmp	r1, #2
  404978:	d115      	bne.n	4049a6 <drv_gpio_setPinState+0x4a>
		case DRV_GPIO_PIN_STATE_LOW:
			pio_set_pin_low(gpioConfig[pin].pinId);
		break;
		case DRV_GPIO_PIN_STATE_PULLED_HIGH:
			pinFlag |= PIO_TYPE_PIO_INPUT | PIO_PULLUP;	//Set as input with pull up. 
			pio_configure_pin(gpioConfig->pinId, pinFlag);
  40497a:	6820      	ldr	r0, [r4, #0]
  40497c:	4911      	ldr	r1, [pc, #68]	; (4049c4 <drv_gpio_setPinState+0x68>)
  40497e:	4b12      	ldr	r3, [pc, #72]	; (4049c8 <drv_gpio_setPinState+0x6c>)
  404980:	4798      	blx	r3
	}
	
	


	return status;
  404982:	2000      	movs	r0, #0
			pio_set_pin_low(gpioConfig[pin].pinId);
		break;
		case DRV_GPIO_PIN_STATE_PULLED_HIGH:
			pinFlag |= PIO_TYPE_PIO_INPUT | PIO_PULLUP;	//Set as input with pull up. 
			pio_configure_pin(gpioConfig->pinId, pinFlag);
		break;
  404984:	bd38      	pop	{r3, r4, r5, pc}
{
	status_t status = STATUS_PASS;
	uint32_t pinFlag = 0x00; 
	if(gpioConfig[pin].pinMode != DRV_GPIO_PIN_MODE_OUTPUT)
	{
		return STATUS_FAIL;
  404986:	2001      	movs	r0, #1
  404988:	bd38      	pop	{r3, r4, r5, pc}
	}
	if(gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_HIGH || gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_LOW)
	{
		if(state == DRV_GPIO_PIN_STATE_HIGH )
  40498a:	2901      	cmp	r1, #1
  40498c:	d00d      	beq.n	4049aa <drv_gpio_setPinState+0x4e>
		{
			//we have to set the pin back to an output
			pinFlag |= PIO_TYPE_PIO_OUTPUT_1;
			pio_configure_pin(gpioConfig->pinId, pinFlag);
		}
		else if(state == DRV_GPIO_PIN_STATE_LOW)
  40498e:	2900      	cmp	r1, #0
  404990:	d1ee      	bne.n	404970 <drv_gpio_setPinState+0x14>
		{
			pinFlag |= PIO_TYPE_PIO_OUTPUT_0;
			pio_configure_pin(gpioConfig->pinId, pinFlag);			
  404992:	6820      	ldr	r0, [r4, #0]
  404994:	4b0c      	ldr	r3, [pc, #48]	; (4049c8 <drv_gpio_setPinState+0x6c>)
  404996:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40499a:	4798      	blx	r3
	{
		case DRV_GPIO_PIN_STATE_HIGH:
			pio_set_pin_high(gpioConfig[pin].pinId);
		break;
		case DRV_GPIO_PIN_STATE_LOW:
			pio_set_pin_low(gpioConfig[pin].pinId);
  40499c:	5960      	ldr	r0, [r4, r5]
  40499e:	4b0b      	ldr	r3, [pc, #44]	; (4049cc <drv_gpio_setPinState+0x70>)
  4049a0:	4798      	blx	r3
	}
	
	


	return status;
  4049a2:	2000      	movs	r0, #0
		case DRV_GPIO_PIN_STATE_HIGH:
			pio_set_pin_high(gpioConfig[pin].pinId);
		break;
		case DRV_GPIO_PIN_STATE_LOW:
			pio_set_pin_low(gpioConfig[pin].pinId);
		break;
  4049a4:	bd38      	pop	{r3, r4, r5, pc}
	}
	
	


	return status;
  4049a6:	2000      	movs	r0, #0
}
  4049a8:	bd38      	pop	{r3, r4, r5, pc}
	{
		if(state == DRV_GPIO_PIN_STATE_HIGH )
		{
			//we have to set the pin back to an output
			pinFlag |= PIO_TYPE_PIO_OUTPUT_1;
			pio_configure_pin(gpioConfig->pinId, pinFlag);
  4049aa:	6820      	ldr	r0, [r4, #0]
  4049ac:	4b06      	ldr	r3, [pc, #24]	; (4049c8 <drv_gpio_setPinState+0x6c>)
  4049ae:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4049b2:	4798      	blx	r3
	//the output should be in the right state. 
	
	switch(state)
	{
		case DRV_GPIO_PIN_STATE_HIGH:
			pio_set_pin_high(gpioConfig[pin].pinId);
  4049b4:	5960      	ldr	r0, [r4, r5]
  4049b6:	4b06      	ldr	r3, [pc, #24]	; (4049d0 <drv_gpio_setPinState+0x74>)
  4049b8:	4798      	blx	r3
	}
	
	


	return status;
  4049ba:	2000      	movs	r0, #0
	
	switch(state)
	{
		case DRV_GPIO_PIN_STATE_HIGH:
			pio_set_pin_high(gpioConfig[pin].pinId);
		break;
  4049bc:	bd38      	pop	{r3, r4, r5, pc}
  4049be:	bf00      	nop
  4049c0:	20000118 	.word	0x20000118
  4049c4:	28000001 	.word	0x28000001
  4049c8:	00404fa1 	.word	0x00404fa1
  4049cc:	00404f61 	.word	0x00404f61
  4049d0:	00404f45 	.word	0x00404f45

004049d4 <drv_gpio_getPinState>:
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_getPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t* state)
{
	status_t status = STATUS_PASS;
	bool value = ioport_get_pin_level(gpioConfig[pin].pinId);
  4049d4:	4b0a      	ldr	r3, [pc, #40]	; (404a00 <drv_gpio_getPinState+0x2c>)
  4049d6:	0100      	lsls	r0, r0, #4
  4049d8:	5818      	ldr	r0, [r3, r0]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4049da:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4049dc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4049e0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4049e4:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4049e6:	f000 001f 	and.w	r0, r0, #31
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4049ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4049ec:	2301      	movs	r3, #1
  4049ee:	fa03 f000 	lsl.w	r0, r3, r0
	if (value == false)
  4049f2:	4002      	ands	r2, r0
	{
		*state = DRV_GPIO_PIN_STATE_LOW;
  4049f4:	bf08      	it	eq
  4049f6:	4613      	moveq	r3, r2
  4049f8:	700b      	strb	r3, [r1, #0]
	else
	{
		*state = DRV_GPIO_PIN_STATE_HIGH;
	}
	return status;
}
  4049fa:	2000      	movs	r0, #0
  4049fc:	4770      	bx	lr
  4049fe:	bf00      	nop
  404a00:	20000118 	.word	0x20000118

00404a04 <drv_gpio_togglePin>:
 * @brief Toggle a GPIO level
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_togglePin(drv_gpio_pins_t pin)
{
  404a04:	b508      	push	{r3, lr}
	status_t status = STATUS_PASS;
	pio_toggle_pin(gpioConfig[pin].pinId);
  404a06:	4a03      	ldr	r2, [pc, #12]	; (404a14 <drv_gpio_togglePin+0x10>)
  404a08:	4b03      	ldr	r3, [pc, #12]	; (404a18 <drv_gpio_togglePin+0x14>)
  404a0a:	0100      	lsls	r0, r0, #4
  404a0c:	5810      	ldr	r0, [r2, r0]
  404a0e:	4798      	blx	r3
	return status;
}
  404a10:	2000      	movs	r0, #0
  404a12:	bd08      	pop	{r3, pc}
  404a14:	20000118 	.word	0x20000118
  404a18:	00404f7d 	.word	0x00404f7d

00404a1c <uart_process_byte>:
	}		
	return status;
}

static void uart_process_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  404a1c:	b510      	push	{r4, lr}
	uint32_t val = 0;
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  404a1e:	f8b1 3204 	ldrh.w	r3, [r1, #516]	; 0x204
	}		
	return status;
}

static void uart_process_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  404a22:	b082      	sub	sp, #8
	uint32_t val = 0;
  404a24:	2200      	movs	r2, #0
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  404a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	}		
	return status;
}

static void uart_process_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  404a2a:	460c      	mov	r4, r1
	uint32_t val = 0;
  404a2c:	9201      	str	r2, [sp, #4]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  404a2e:	d028      	beq.n	404a82 <uart_process_byte+0x66>
		memBuf->uart_rx_fifo_ovf_flag = 1;                     // set the overflow flag
		//the buffer is full, but we have to clear the interrupt
		memBuf->uart_rx_fifo_dropped_bytes++; //our data stream will be out of sync now...
		usart_getchar(p_usart,&val);		
	}
	else if(memBuf->rx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  404a30:	d30c      	bcc.n	404a4c <uart_process_byte+0x30>
	}
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
	{      // if sw buffer just filled up
		memBuf->uart_rx_fifo_full_flag = 1;                    // set the RX FIFO full flag
	}
	if(memBuf->rx_fifo.i_last == FIFO_BUFFER_SIZE)
  404a32:	f8b4 3202 	ldrh.w	r3, [r4, #514]	; 0x202
  404a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	{         // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_last = 0;                            // roll over the index counter
  404a3a:	bf04      	itt	eq
  404a3c:	2300      	moveq	r3, #0
  404a3e:	f8a4 3202 	strheq.w	r3, [r4, #514]	; 0x202
	}
	memBuf->uart_rx_fifo_not_empty_flag = 1;                 // set received-data flag	
  404a42:	2301      	movs	r3, #1
  404a44:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
}
  404a48:	b002      	add	sp, #8
  404a4a:	bd10      	pop	{r4, pc}
		usart_getchar(p_usart,&val);		
	}
	else if(memBuf->rx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
	{		
		//while((UART0->UART_SR & UART_SR_RXRDY) == 0);
		if(usart_getchar(p_usart,&val) == STATUS_PASS)
  404a4c:	a901      	add	r1, sp, #4
  404a4e:	4b14      	ldr	r3, [pc, #80]	; (404aa0 <uart_process_byte+0x84>)
  404a50:	4798      	blx	r3
  404a52:	b140      	cbz	r0, 404a66 <uart_process_byte+0x4a>
  404a54:	f8b4 3204 	ldrh.w	r3, [r4, #516]	; 0x204
		//if(p_usart == UART1)
		//{
			//usart_putchar(UART0, val);
		//}
	}
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  404a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	{      // if sw buffer just filled up
		memBuf->uart_rx_fifo_full_flag = 1;                    // set the RX FIFO full flag
  404a5c:	bf04      	itt	eq
  404a5e:	2301      	moveq	r3, #1
  404a60:	f884 3208 	strbeq.w	r3, [r4, #520]	; 0x208
  404a64:	e7e5      	b.n	404a32 <uart_process_byte+0x16>
	else if(memBuf->rx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
	{		
		//while((UART0->UART_SR & UART_SR_RXRDY) == 0);
		if(usart_getchar(p_usart,&val) == STATUS_PASS)
		{		
			memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_last] = (uint8_t)val;
  404a66:	f8b4 2202 	ldrh.w	r2, [r4, #514]	; 0x202
  404a6a:	9b01      	ldr	r3, [sp, #4]
  404a6c:	54a3      	strb	r3, [r4, r2]
			memBuf->rx_fifo.i_last++;                              // increment the index of the most recently added element
			memBuf->rx_fifo.num_bytes++;                           // increment the bytes counter
  404a6e:	f8b4 3204 	ldrh.w	r3, [r4, #516]	; 0x204
  404a72:	3301      	adds	r3, #1
	{		
		//while((UART0->UART_SR & UART_SR_RXRDY) == 0);
		if(usart_getchar(p_usart,&val) == STATUS_PASS)
		{		
			memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_last] = (uint8_t)val;
			memBuf->rx_fifo.i_last++;                              // increment the index of the most recently added element
  404a74:	3201      	adds	r2, #1
			memBuf->rx_fifo.num_bytes++;                           // increment the bytes counter
  404a76:	b29b      	uxth	r3, r3
	{		
		//while((UART0->UART_SR & UART_SR_RXRDY) == 0);
		if(usart_getchar(p_usart,&val) == STATUS_PASS)
		{		
			memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_last] = (uint8_t)val;
			memBuf->rx_fifo.i_last++;                              // increment the index of the most recently added element
  404a78:	f8a4 2202 	strh.w	r2, [r4, #514]	; 0x202
			memBuf->rx_fifo.num_bytes++;                           // increment the bytes counter
  404a7c:	f8a4 3204 	strh.w	r3, [r4, #516]	; 0x204
  404a80:	e7ea      	b.n	404a58 <uart_process_byte+0x3c>
	uint32_t val = 0;
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
	{
		memBuf->uart_rx_fifo_ovf_flag = 1;                     // set the overflow flag
		//the buffer is full, but we have to clear the interrupt
		memBuf->uart_rx_fifo_dropped_bytes++; //our data stream will be out of sync now...
  404a82:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
		usart_getchar(p_usart,&val);		
  404a86:	4a06      	ldr	r2, [pc, #24]	; (404aa0 <uart_process_byte+0x84>)
	uint32_t val = 0;
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
	{
		memBuf->uart_rx_fifo_ovf_flag = 1;                     // set the overflow flag
		//the buffer is full, but we have to clear the interrupt
		memBuf->uart_rx_fifo_dropped_bytes++; //our data stream will be out of sync now...
  404a88:	3301      	adds	r3, #1
static void uart_process_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
	uint32_t val = 0;
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
	{
		memBuf->uart_rx_fifo_ovf_flag = 1;                     // set the overflow flag
  404a8a:	2101      	movs	r1, #1
		//the buffer is full, but we have to clear the interrupt
		memBuf->uart_rx_fifo_dropped_bytes++; //our data stream will be out of sync now...
  404a8c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
static void uart_process_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
	uint32_t val = 0;
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
	{
		memBuf->uart_rx_fifo_ovf_flag = 1;                     // set the overflow flag
  404a90:	f884 1209 	strb.w	r1, [r4, #521]	; 0x209
		//the buffer is full, but we have to clear the interrupt
		memBuf->uart_rx_fifo_dropped_bytes++; //our data stream will be out of sync now...
		usart_getchar(p_usart,&val);		
  404a94:	a901      	add	r1, sp, #4
  404a96:	4790      	blx	r2
  404a98:	f8b4 3204 	ldrh.w	r3, [r4, #516]	; 0x204
  404a9c:	e7dc      	b.n	404a58 <uart_process_byte+0x3c>
  404a9e:	bf00      	nop
  404aa0:	0040209d 	.word	0x0040209d

00404aa4 <uart_process_tx_byte>:
	}
	memBuf->uart_rx_fifo_not_empty_flag = 1;                 // set received-data flag	
}

static void uart_process_tx_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  404aa4:	b570      	push	{r4, r5, r6, lr}
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  404aa6:	f8b1 3414 	ldrh.w	r3, [r1, #1044]	; 0x414
  404aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	}
	memBuf->uart_rx_fifo_not_empty_flag = 1;                 // set received-data flag	
}

static void uart_process_tx_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  404aae:	460c      	mov	r4, r1
  404ab0:	4602      	mov	r2, r0
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  404ab2:	d00f      	beq.n	404ad4 <uart_process_tx_byte+0x30>
	{ // if the sw buffer is full
		memBuf->uart_tx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
	}
	if(memBuf->tx_fifo.num_bytes > 0)
  404ab4:	b98b      	cbnz	r3, 404ada <uart_process_tx_byte+0x36>
		memBuf->tx_fifo.i_first++;                        // increment the index of the oldest element
		memBuf->tx_fifo.num_bytes--;                      // decrement the bytes counter
	}
	else
	{   // tx sw buffer is empty
		memBuf->uart_tx_fifo_not_empty_flag = 0;          // clear the tx flag
  404ab6:	f881 3416 	strb.w	r3, [r1, #1046]	; 0x416
		uart_disable_interrupt(p_usart,UART_IER_TXEMPTY); //the buffer is empty, stop the interrupt. 
  404aba:	f44f 7100 	mov.w	r1, #512	; 0x200
  404abe:	4b23      	ldr	r3, [pc, #140]	; (404b4c <uart_process_tx_byte+0xa8>)
  404ac0:	4798      	blx	r3
  404ac2:	f8b4 2410 	ldrh.w	r2, [r4, #1040]	; 0x410
	}
	if(memBuf->tx_fifo.i_first == FIFO_BUFFER_SIZE)
  404ac6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
	{   // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_first = 0;                      // roll over the index counter
  404aca:	bf04      	itt	eq
  404acc:	2300      	moveq	r3, #0
  404ace:	f8a4 3410 	strheq.w	r3, [r4, #1040]	; 0x410
  404ad2:	bd70      	pop	{r4, r5, r6, pc}

static void uart_process_tx_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
	{ // if the sw buffer is full
		memBuf->uart_tx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  404ad4:	2100      	movs	r1, #0
  404ad6:	f884 1417 	strb.w	r1, [r4, #1047]	; 0x417
	}
	if(memBuf->tx_fifo.num_bytes > 0)
	{
		// if data exists in the sw buffer
		usart_serial_putchar(p_usart,memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_first]); // send the next value from buffer
  404ada:	f8b4 1410 	ldrh.w	r1, [r4, #1040]	; 0x410
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  404ade:	481c      	ldr	r0, [pc, #112]	; (404b50 <uart_process_tx_byte+0xac>)
  404ae0:	1865      	adds	r5, r4, r1
  404ae2:	4282      	cmp	r2, r0
  404ae4:	f895 5210 	ldrb.w	r5, [r5, #528]	; 0x210
  404ae8:	d010      	beq.n	404b0c <uart_process_tx_byte+0x68>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404aea:	481a      	ldr	r0, [pc, #104]	; (404b54 <uart_process_tx_byte+0xb0>)
  404aec:	4282      	cmp	r2, r0
  404aee:	d01f      	beq.n	404b30 <uart_process_tx_byte+0x8c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404af0:	4819      	ldr	r0, [pc, #100]	; (404b58 <uart_process_tx_byte+0xb4>)
  404af2:	4282      	cmp	r2, r0
  404af4:	d023      	beq.n	404b3e <uart_process_tx_byte+0x9a>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  404af6:	4819      	ldr	r0, [pc, #100]	; (404b5c <uart_process_tx_byte+0xb8>)
  404af8:	4282      	cmp	r2, r0
  404afa:	d012      	beq.n	404b22 <uart_process_tx_byte+0x7e>
		memBuf->tx_fifo.i_first++;                        // increment the index of the oldest element
  404afc:	1c4a      	adds	r2, r1, #1
  404afe:	b292      	uxth	r2, r2
		memBuf->tx_fifo.num_bytes--;                      // decrement the bytes counter
  404b00:	3b01      	subs	r3, #1
	}
	if(memBuf->tx_fifo.num_bytes > 0)
	{
		// if data exists in the sw buffer
		usart_serial_putchar(p_usart,memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_first]); // send the next value from buffer
		memBuf->tx_fifo.i_first++;                        // increment the index of the oldest element
  404b02:	f8a4 2410 	strh.w	r2, [r4, #1040]	; 0x410
		memBuf->tx_fifo.num_bytes--;                      // decrement the bytes counter
  404b06:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
  404b0a:	e7dc      	b.n	404ac6 <uart_process_tx_byte+0x22>
  404b0c:	4e14      	ldr	r6, [pc, #80]	; (404b60 <uart_process_tx_byte+0xbc>)
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
  404b0e:	4810      	ldr	r0, [pc, #64]	; (404b50 <uart_process_tx_byte+0xac>)
  404b10:	4629      	mov	r1, r5
  404b12:	47b0      	blx	r6
  404b14:	2800      	cmp	r0, #0
  404b16:	d1fa      	bne.n	404b0e <uart_process_tx_byte+0x6a>
  404b18:	f8b4 1410 	ldrh.w	r1, [r4, #1040]	; 0x410
  404b1c:	f8b4 3414 	ldrh.w	r3, [r4, #1044]	; 0x414
  404b20:	e7ec      	b.n	404afc <uart_process_tx_byte+0x58>
  404b22:	4e10      	ldr	r6, [pc, #64]	; (404b64 <uart_process_tx_byte+0xc0>)
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
  404b24:	480d      	ldr	r0, [pc, #52]	; (404b5c <uart_process_tx_byte+0xb8>)
  404b26:	4629      	mov	r1, r5
  404b28:	47b0      	blx	r6
  404b2a:	2800      	cmp	r0, #0
  404b2c:	d1fa      	bne.n	404b24 <uart_process_tx_byte+0x80>
  404b2e:	e7f3      	b.n	404b18 <uart_process_tx_byte+0x74>
  404b30:	4e0b      	ldr	r6, [pc, #44]	; (404b60 <uart_process_tx_byte+0xbc>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
  404b32:	4808      	ldr	r0, [pc, #32]	; (404b54 <uart_process_tx_byte+0xb0>)
  404b34:	4629      	mov	r1, r5
  404b36:	47b0      	blx	r6
  404b38:	2800      	cmp	r0, #0
  404b3a:	d1fa      	bne.n	404b32 <uart_process_tx_byte+0x8e>
  404b3c:	e7ec      	b.n	404b18 <uart_process_tx_byte+0x74>
  404b3e:	4e09      	ldr	r6, [pc, #36]	; (404b64 <uart_process_tx_byte+0xc0>)
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
  404b40:	4805      	ldr	r0, [pc, #20]	; (404b58 <uart_process_tx_byte+0xb4>)
  404b42:	4629      	mov	r1, r5
  404b44:	47b0      	blx	r6
  404b46:	2800      	cmp	r0, #0
  404b48:	d1fa      	bne.n	404b40 <uart_process_tx_byte+0x9c>
  404b4a:	e7e5      	b.n	404b18 <uart_process_tx_byte+0x74>
  404b4c:	00402069 	.word	0x00402069
  404b50:	400e0600 	.word	0x400e0600
  404b54:	400e0800 	.word	0x400e0800
  404b58:	40024000 	.word	0x40024000
  404b5c:	40028000 	.word	0x40028000
  404b60:	00402071 	.word	0x00402071
  404b64:	00402089 	.word	0x00402089

00404b68 <drv_uart_putChar>:
 * the character
 * @param c, the character that will be sent through the uart. 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_putChar(drv_uart_config_t* uartConfig, char c)
{
  404b68:	b538      	push	{r3, r4, r5, lr}
  404b6a:	4604      	mov	r4, r0
	status_t status = STATUS_PASS;
	//disable the interrupts so we don't fuck up the pointers	
	usart_disable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);	
  404b6c:	4b1f      	ldr	r3, [pc, #124]	; (404bec <drv_uart_putChar+0x84>)
  404b6e:	6800      	ldr	r0, [r0, #0]
 * the character
 * @param c, the character that will be sent through the uart. 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_putChar(drv_uart_config_t* uartConfig, char c)
{
  404b70:	460d      	mov	r5, r1
	status_t status = STATUS_PASS;
	//disable the interrupts so we don't fuck up the pointers	
	usart_disable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);	
  404b72:	f44f 7100 	mov.w	r1, #512	; 0x200
  404b76:	4798      	blx	r3
	uint32_t val = 0;
	drv_uart_memory_buf_t* memBuf = &uartMemBuf[uartConfig->mem_index]; 
  404b78:	6962      	ldr	r2, [r4, #20]
  404b7a:	481d      	ldr	r0, [pc, #116]	; (404bf0 <drv_uart_putChar+0x88>)
  404b7c:	eb02 1242 	add.w	r2, r2, r2, lsl #5
  404b80:	eb00 1342 	add.w	r3, r0, r2, lsl #5
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  404b84:	f8b3 2414 	ldrh.w	r2, [r3, #1044]	; 0x414
  404b88:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404b8c:	d021      	beq.n	404bd2 <drv_uart_putChar+0x6a>
	{
		memBuf->uart_tx_fifo_ovf_flag = 1;                     // set the overflow flag
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
	}
	else if(memBuf->tx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  404b8e:	d20e      	bcs.n	404bae <drv_uart_putChar+0x46>
	{
		memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_last] = c;
  404b90:	f8b3 1412 	ldrh.w	r1, [r3, #1042]	; 0x412
		memBuf->tx_fifo.i_last++;                              // increment the index of the most recently added element
		memBuf->tx_fifo.num_bytes++;                           // increment the bytes counter
  404b94:	3201      	adds	r2, #1
		memBuf->uart_tx_fifo_ovf_flag = 1;                     // set the overflow flag
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
	}
	else if(memBuf->tx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
	{
		memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_last] = c;
  404b96:	1858      	adds	r0, r3, r1
		memBuf->tx_fifo.i_last++;                              // increment the index of the most recently added element
		memBuf->tx_fifo.num_bytes++;                           // increment the bytes counter
  404b98:	b292      	uxth	r2, r2
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
	}
	else if(memBuf->tx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
	{
		memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_last] = c;
		memBuf->tx_fifo.i_last++;                              // increment the index of the most recently added element
  404b9a:	3101      	adds	r1, #1
		//if(uartConfig->p_usart == UART1)
		//{
			//usart_putchar(UART0, c);
		//}
	}
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  404b9c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
		memBuf->uart_tx_fifo_ovf_flag = 1;                     // set the overflow flag
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
	}
	else if(memBuf->tx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
	{
		memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_last] = c;
  404ba0:	f880 5210 	strb.w	r5, [r0, #528]	; 0x210
		memBuf->tx_fifo.i_last++;                              // increment the index of the most recently added element
		memBuf->tx_fifo.num_bytes++;                           // increment the bytes counter
  404ba4:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
	}
	else if(memBuf->tx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
	{
		memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_last] = c;
		memBuf->tx_fifo.i_last++;                              // increment the index of the most recently added element
  404ba8:	f8a3 1412 	strh.w	r1, [r3, #1042]	; 0x412
		//if(uartConfig->p_usart == UART1)
		//{
			//usart_putchar(UART0, c);
		//}
	}
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  404bac:	d019      	beq.n	404be2 <drv_uart_putChar+0x7a>
	{      // if sw buffer just filled up
		memBuf->uart_tx_fifo_full_flag = 1;                    // set the tx FIFO full flag
	}
	if(memBuf->tx_fifo.i_last == FIFO_BUFFER_SIZE)
  404bae:	f8b3 2412 	ldrh.w	r2, [r3, #1042]	; 0x412
  404bb2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
	{         // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_last = 0;                            // roll over the index counter
  404bb6:	bf04      	itt	eq
  404bb8:	2200      	moveq	r2, #0
  404bba:	f8a3 2412 	strheq.w	r2, [r3, #1042]	; 0x412
	}
	memBuf->uart_tx_fifo_not_empty_flag = 1;                 // set tx-data ready flag	
  404bbe:	2201      	movs	r2, #1
  404bc0:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	//re-enable the interrupts
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);		
  404bc4:	6820      	ldr	r0, [r4, #0]
  404bc6:	4b0b      	ldr	r3, [pc, #44]	; (404bf4 <drv_uart_putChar+0x8c>)
  404bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
  404bcc:	4798      	blx	r3
	return status;	
}
  404bce:	2000      	movs	r0, #0
  404bd0:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t val = 0;
	drv_uart_memory_buf_t* memBuf = &uartMemBuf[uartConfig->mem_index]; 
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
	{
		memBuf->uart_tx_fifo_ovf_flag = 1;                     // set the overflow flag
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
  404bd2:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
	usart_disable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);	
	uint32_t val = 0;
	drv_uart_memory_buf_t* memBuf = &uartMemBuf[uartConfig->mem_index]; 
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
	{
		memBuf->uart_tx_fifo_ovf_flag = 1;                     // set the overflow flag
  404bd6:	2101      	movs	r1, #1
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
  404bd8:	440a      	add	r2, r1
  404bda:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	usart_disable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);	
	uint32_t val = 0;
	drv_uart_memory_buf_t* memBuf = &uartMemBuf[uartConfig->mem_index]; 
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
	{
		memBuf->uart_tx_fifo_ovf_flag = 1;                     // set the overflow flag
  404bde:	f883 1418 	strb.w	r1, [r3, #1048]	; 0x418
			//usart_putchar(UART0, c);
		//}
	}
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
	{      // if sw buffer just filled up
		memBuf->uart_tx_fifo_full_flag = 1;                    // set the tx FIFO full flag
  404be2:	2201      	movs	r2, #1
  404be4:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
  404be8:	e7e1      	b.n	404bae <drv_uart_putChar+0x46>
  404bea:	bf00      	nop
  404bec:	00402085 	.word	0x00402085
  404bf0:	20001330 	.word	0x20001330
  404bf4:	00402081 	.word	0x00402081

00404bf8 <drv_uart_putData>:
		}		
	}
}

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
  404bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i=0;
	for (i=0;i<length;)
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  404bfc:	4f09      	ldr	r7, [pc, #36]	; (404c24 <drv_uart_putData+0x2c>)
		}		
	}
}

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
  404bfe:	4606      	mov	r6, r0
  404c00:	4688      	mov	r8, r1
  404c02:	4615      	mov	r5, r2
	int i=0;
	for (i=0;i<length;)
  404c04:	2400      	movs	r4, #0
  404c06:	42ac      	cmp	r4, r5
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  404c08:	4630      	mov	r0, r6
}

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
	int i=0;
	for (i=0;i<length;)
  404c0a:	d208      	bcs.n	404c1e <drv_uart_putData+0x26>
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  404c0c:	f818 1004 	ldrb.w	r1, [r8, r4]
  404c10:	47b8      	blx	r7
  404c12:	2800      	cmp	r0, #0
  404c14:	d1f7      	bne.n	404c06 <drv_uart_putData+0xe>
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
  404c16:	3401      	adds	r4, #1
}

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
	int i=0;
	for (i=0;i<length;)
  404c18:	42ac      	cmp	r4, r5
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  404c1a:	4630      	mov	r0, r6
}

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
	int i=0;
	for (i=0;i<length;)
  404c1c:	d3f6      	bcc.n	404c0c <drv_uart_putData+0x14>
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
		}
	}
}
  404c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c22:	bf00      	nop
  404c24:	00404b69 	.word	0x00404b69

00404c28 <UART0_Handler>:
	}
}

// interrupt handlers
void UART0_Handler()
{	
  404c28:	b510      	push	{r4, lr}
	//if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized. 
	//{
		//uart_process_byte(UART0, &(uartMemBuf[0]));	
	//}
	uint32_t status = uart_get_status(UART0); 
  404c2a:	480c      	ldr	r0, [pc, #48]	; (404c5c <UART0_Handler+0x34>)
  404c2c:	4b0c      	ldr	r3, [pc, #48]	; (404c60 <UART0_Handler+0x38>)
  404c2e:	4798      	blx	r3
	if(status & UART_SR_RXRDY > 0)
  404c30:	07c2      	lsls	r2, r0, #31
{	
	//if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized. 
	//{
		//uart_process_byte(UART0, &(uartMemBuf[0]));	
	//}
	uint32_t status = uart_get_status(UART0); 
  404c32:	4604      	mov	r4, r0
	if(status & UART_SR_RXRDY > 0)
  404c34:	d503      	bpl.n	404c3e <UART0_Handler+0x16>
	{	
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  404c36:	490b      	ldr	r1, [pc, #44]	; (404c64 <UART0_Handler+0x3c>)
  404c38:	f891 3206 	ldrb.w	r3, [r1, #518]	; 0x206
  404c3c:	b953      	cbnz	r3, 404c54 <UART0_Handler+0x2c>
		{
			uart_process_byte(UART0, &(uartMemBuf[0]));
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  404c3e:	05a3      	lsls	r3, r4, #22
  404c40:	d503      	bpl.n	404c4a <UART0_Handler+0x22>
	{
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  404c42:	4908      	ldr	r1, [pc, #32]	; (404c64 <UART0_Handler+0x3c>)
  404c44:	f891 3206 	ldrb.w	r3, [r1, #518]	; 0x206
  404c48:	b903      	cbnz	r3, 404c4c <UART0_Handler+0x24>
  404c4a:	bd10      	pop	{r4, pc}
		{
			uart_process_tx_byte(UART0, &(uartMemBuf[0])); 	
  404c4c:	4803      	ldr	r0, [pc, #12]	; (404c5c <UART0_Handler+0x34>)
  404c4e:	4b06      	ldr	r3, [pc, #24]	; (404c68 <UART0_Handler+0x40>)
  404c50:	4798      	blx	r3
  404c52:	bd10      	pop	{r4, pc}
	uint32_t status = uart_get_status(UART0); 
	if(status & UART_SR_RXRDY > 0)
	{	
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
		{
			uart_process_byte(UART0, &(uartMemBuf[0]));
  404c54:	4801      	ldr	r0, [pc, #4]	; (404c5c <UART0_Handler+0x34>)
  404c56:	4b05      	ldr	r3, [pc, #20]	; (404c6c <UART0_Handler+0x44>)
  404c58:	4798      	blx	r3
  404c5a:	e7f0      	b.n	404c3e <UART0_Handler+0x16>
  404c5c:	400e0600 	.word	0x400e0600
  404c60:	0040206d 	.word	0x0040206d
  404c64:	20001330 	.word	0x20001330
  404c68:	00404aa5 	.word	0x00404aa5
  404c6c:	00404a1d 	.word	0x00404a1d

00404c70 <UART1_Handler>:
		}
	}	
}

void UART1_Handler()
{
  404c70:	b510      	push	{r4, lr}
	uint32_t status = uart_get_status(UART1); 
  404c72:	480e      	ldr	r0, [pc, #56]	; (404cac <UART1_Handler+0x3c>)
  404c74:	4b0e      	ldr	r3, [pc, #56]	; (404cb0 <UART1_Handler+0x40>)
  404c76:	4798      	blx	r3
	if(status & UART_SR_RXRDY > 0)
  404c78:	07c2      	lsls	r2, r0, #31
	}	
}

void UART1_Handler()
{
	uint32_t status = uart_get_status(UART1); 
  404c7a:	4604      	mov	r4, r0
	if(status & UART_SR_RXRDY > 0)
  404c7c:	d503      	bpl.n	404c86 <UART1_Handler+0x16>
	{	
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  404c7e:	490d      	ldr	r1, [pc, #52]	; (404cb4 <UART1_Handler+0x44>)
  404c80:	f891 3626 	ldrb.w	r3, [r1, #1574]	; 0x626
  404c84:	b963      	cbnz	r3, 404ca0 <UART1_Handler+0x30>
		{
			uart_process_byte(UART1, &(uartMemBuf[1]));
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  404c86:	05a3      	lsls	r3, r4, #22
  404c88:	d503      	bpl.n	404c92 <UART1_Handler+0x22>
	{
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  404c8a:	490a      	ldr	r1, [pc, #40]	; (404cb4 <UART1_Handler+0x44>)
  404c8c:	f891 3626 	ldrb.w	r3, [r1, #1574]	; 0x626
  404c90:	b903      	cbnz	r3, 404c94 <UART1_Handler+0x24>
  404c92:	bd10      	pop	{r4, pc}
		{
			uart_process_tx_byte(UART1, &(uartMemBuf[1])); 	
  404c94:	f501 6184 	add.w	r1, r1, #1056	; 0x420
  404c98:	4804      	ldr	r0, [pc, #16]	; (404cac <UART1_Handler+0x3c>)
  404c9a:	4b07      	ldr	r3, [pc, #28]	; (404cb8 <UART1_Handler+0x48>)
  404c9c:	4798      	blx	r3
  404c9e:	bd10      	pop	{r4, pc}
	uint32_t status = uart_get_status(UART1); 
	if(status & UART_SR_RXRDY > 0)
	{	
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
		{
			uart_process_byte(UART1, &(uartMemBuf[1]));
  404ca0:	f501 6184 	add.w	r1, r1, #1056	; 0x420
  404ca4:	4801      	ldr	r0, [pc, #4]	; (404cac <UART1_Handler+0x3c>)
  404ca6:	4b05      	ldr	r3, [pc, #20]	; (404cbc <UART1_Handler+0x4c>)
  404ca8:	4798      	blx	r3
  404caa:	e7ec      	b.n	404c86 <UART1_Handler+0x16>
  404cac:	400e0800 	.word	0x400e0800
  404cb0:	0040206d 	.word	0x0040206d
  404cb4:	20001330 	.word	0x20001330
  404cb8:	00404aa5 	.word	0x00404aa5
  404cbc:	00404a1d 	.word	0x00404a1d

00404cc0 <USART0_Handler>:
		}
	}
}

void USART0_Handler()
{
  404cc0:	b510      	push	{r4, lr}
	//if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART0, &(uartMemBuf[2]));
	//}
	uint32_t status = uart_get_status(USART0); 
  404cc2:	480e      	ldr	r0, [pc, #56]	; (404cfc <USART0_Handler+0x3c>)
  404cc4:	4b0e      	ldr	r3, [pc, #56]	; (404d00 <USART0_Handler+0x40>)
  404cc6:	4798      	blx	r3
	if(status & UART_SR_RXRDY > 0)
  404cc8:	07c2      	lsls	r2, r0, #31
{
	//if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART0, &(uartMemBuf[2]));
	//}
	uint32_t status = uart_get_status(USART0); 
  404cca:	4604      	mov	r4, r0
	if(status & UART_SR_RXRDY > 0)
  404ccc:	d503      	bpl.n	404cd6 <USART0_Handler+0x16>
	{	
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  404cce:	490d      	ldr	r1, [pc, #52]	; (404d04 <USART0_Handler+0x44>)
  404cd0:	f891 3a46 	ldrb.w	r3, [r1, #2630]	; 0xa46
  404cd4:	b963      	cbnz	r3, 404cf0 <USART0_Handler+0x30>
		{
			uart_process_byte(USART0, &(uartMemBuf[2]));
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  404cd6:	05a3      	lsls	r3, r4, #22
  404cd8:	d503      	bpl.n	404ce2 <USART0_Handler+0x22>
	{
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  404cda:	490a      	ldr	r1, [pc, #40]	; (404d04 <USART0_Handler+0x44>)
  404cdc:	f891 3a46 	ldrb.w	r3, [r1, #2630]	; 0xa46
  404ce0:	b903      	cbnz	r3, 404ce4 <USART0_Handler+0x24>
  404ce2:	bd10      	pop	{r4, pc}
		{
			uart_process_tx_byte(USART0, &(uartMemBuf[2])); 	
  404ce4:	f501 6104 	add.w	r1, r1, #2112	; 0x840
  404ce8:	4804      	ldr	r0, [pc, #16]	; (404cfc <USART0_Handler+0x3c>)
  404cea:	4b07      	ldr	r3, [pc, #28]	; (404d08 <USART0_Handler+0x48>)
  404cec:	4798      	blx	r3
  404cee:	bd10      	pop	{r4, pc}
	uint32_t status = uart_get_status(USART0); 
	if(status & UART_SR_RXRDY > 0)
	{	
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
		{
			uart_process_byte(USART0, &(uartMemBuf[2]));
  404cf0:	f501 6104 	add.w	r1, r1, #2112	; 0x840
  404cf4:	4801      	ldr	r0, [pc, #4]	; (404cfc <USART0_Handler+0x3c>)
  404cf6:	4b05      	ldr	r3, [pc, #20]	; (404d0c <USART0_Handler+0x4c>)
  404cf8:	4798      	blx	r3
  404cfa:	e7ec      	b.n	404cd6 <USART0_Handler+0x16>
  404cfc:	40024000 	.word	0x40024000
  404d00:	0040206d 	.word	0x0040206d
  404d04:	20001330 	.word	0x20001330
  404d08:	00404aa5 	.word	0x00404aa5
  404d0c:	00404a1d 	.word	0x00404a1d

00404d10 <USART1_Handler>:
		}
	}	
}

void USART1_Handler()
{
  404d10:	b510      	push	{r4, lr}
	//if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART1, &(uartMemBuf[3]));
	//}
	uint32_t status = uart_get_status(USART1); 
  404d12:	480e      	ldr	r0, [pc, #56]	; (404d4c <USART1_Handler+0x3c>)
  404d14:	4b0e      	ldr	r3, [pc, #56]	; (404d50 <USART1_Handler+0x40>)
  404d16:	4798      	blx	r3
	if(status & UART_SR_RXRDY > 0)
  404d18:	07c2      	lsls	r2, r0, #31
{
	//if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART1, &(uartMemBuf[3]));
	//}
	uint32_t status = uart_get_status(USART1); 
  404d1a:	4604      	mov	r4, r0
	if(status & UART_SR_RXRDY > 0)
  404d1c:	d503      	bpl.n	404d26 <USART1_Handler+0x16>
	{	
		if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
  404d1e:	490d      	ldr	r1, [pc, #52]	; (404d54 <USART1_Handler+0x44>)
  404d20:	f891 3e66 	ldrb.w	r3, [r1, #3686]	; 0xe66
  404d24:	b963      	cbnz	r3, 404d40 <USART1_Handler+0x30>
		{
			uart_process_byte(USART1, &(uartMemBuf[3]));
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  404d26:	05a3      	lsls	r3, r4, #22
  404d28:	d503      	bpl.n	404d32 <USART1_Handler+0x22>
	{
		if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
  404d2a:	490a      	ldr	r1, [pc, #40]	; (404d54 <USART1_Handler+0x44>)
  404d2c:	f891 3e66 	ldrb.w	r3, [r1, #3686]	; 0xe66
  404d30:	b903      	cbnz	r3, 404d34 <USART1_Handler+0x24>
  404d32:	bd10      	pop	{r4, pc}
		{
			uart_process_tx_byte(USART1, &(uartMemBuf[3])); 	
  404d34:	f501 6146 	add.w	r1, r1, #3168	; 0xc60
  404d38:	4804      	ldr	r0, [pc, #16]	; (404d4c <USART1_Handler+0x3c>)
  404d3a:	4b07      	ldr	r3, [pc, #28]	; (404d58 <USART1_Handler+0x48>)
  404d3c:	4798      	blx	r3
  404d3e:	bd10      	pop	{r4, pc}
	uint32_t status = uart_get_status(USART1); 
	if(status & UART_SR_RXRDY > 0)
	{	
		if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
		{
			uart_process_byte(USART1, &(uartMemBuf[3]));
  404d40:	f501 6146 	add.w	r1, r1, #3168	; 0xc60
  404d44:	4801      	ldr	r0, [pc, #4]	; (404d4c <USART1_Handler+0x3c>)
  404d46:	4b05      	ldr	r3, [pc, #20]	; (404d5c <USART1_Handler+0x4c>)
  404d48:	4798      	blx	r3
  404d4a:	e7ec      	b.n	404d26 <USART1_Handler+0x16>
  404d4c:	40028000 	.word	0x40028000
  404d50:	0040206d 	.word	0x0040206d
  404d54:	20001330 	.word	0x20001330
  404d58:	00404aa5 	.word	0x00404aa5
  404d5c:	00404a1d 	.word	0x00404a1d

00404d60 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404d60:	b538      	push	{r3, r4, r5, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  404d62:	480e      	ldr	r0, [pc, #56]	; (404d9c <sysclk_init+0x3c>)
  404d64:	4d0e      	ldr	r5, [pc, #56]	; (404da0 <sysclk_init+0x40>)
  404d66:	4c0f      	ldr	r4, [pc, #60]	; (404da4 <sysclk_init+0x44>)
  404d68:	47a8      	blx	r5
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  404d6a:	2000      	movs	r0, #0
  404d6c:	213e      	movs	r1, #62	; 0x3e
  404d6e:	4b0e      	ldr	r3, [pc, #56]	; (404da8 <sysclk_init+0x48>)
  404d70:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  404d72:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  404d74:	2800      	cmp	r0, #0
  404d76:	d0fc      	beq.n	404d72 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  404d78:	4b0c      	ldr	r3, [pc, #48]	; (404dac <sysclk_init+0x4c>)
  404d7a:	4c0d      	ldr	r4, [pc, #52]	; (404db0 <sysclk_init+0x50>)
  404d7c:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404d7e:	4b0d      	ldr	r3, [pc, #52]	; (404db4 <sysclk_init+0x54>)
  404d80:	4a0d      	ldr	r2, [pc, #52]	; (404db8 <sysclk_init+0x58>)
  404d82:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  404d84:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  404d86:	2800      	cmp	r0, #0
  404d88:	d0fc      	beq.n	404d84 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  404d8a:	4b0c      	ldr	r3, [pc, #48]	; (404dbc <sysclk_init+0x5c>)
  404d8c:	2010      	movs	r0, #16
  404d8e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  404d90:	4b0b      	ldr	r3, [pc, #44]	; (404dc0 <sysclk_init+0x60>)
  404d92:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404d94:	4801      	ldr	r0, [pc, #4]	; (404d9c <sysclk_init+0x3c>)
  404d96:	47a8      	blx	r5
  404d98:	bd38      	pop	{r3, r4, r5, pc}
  404d9a:	bf00      	nop
  404d9c:	07270e00 	.word	0x07270e00
  404da0:	004054a9 	.word	0x004054a9
  404da4:	004052a5 	.word	0x004052a5
  404da8:	00405251 	.word	0x00405251
  404dac:	004052b5 	.word	0x004052b5
  404db0:	004052c5 	.word	0x004052c5
  404db4:	400e0400 	.word	0x400e0400
  404db8:	200e3f01 	.word	0x200e3f01
  404dbc:	004051f9 	.word	0x004051f9
  404dc0:	004053c1 	.word	0x004053c1

00404dc4 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  404dc4:	b538      	push	{r3, r4, r5, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  404dc6:	200b      	movs	r0, #11
  404dc8:	4d13      	ldr	r5, [pc, #76]	; (404e18 <board_init+0x54>)
// 	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
// 	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);
	
	
	/* Configure HSMCI pins */
	gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
  404dca:	4c14      	ldr	r4, [pc, #80]	; (404e1c <board_init+0x58>)
  404dcc:	47a8      	blx	r5
  404dce:	200c      	movs	r0, #12
  404dd0:	47a8      	blx	r5
  404dd2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404dd6:	201c      	movs	r0, #28
  404dd8:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
  404dda:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404dde:	201d      	movs	r0, #29
  404de0:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
  404de2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404de6:	201e      	movs	r0, #30
  404de8:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
  404dea:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404dee:	201f      	movs	r0, #31
  404df0:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
  404df2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404df6:	201a      	movs	r0, #26
  404df8:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
  404dfa:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404dfe:	201b      	movs	r0, #27
  404e00:	47a0      	blx	r4

	/* Configure SD/MMC card detect pin */
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  404e02:	4907      	ldr	r1, [pc, #28]	; (404e20 <board_init+0x5c>)
  404e04:	202b      	movs	r0, #43	; 0x2b
  404e06:	47a0      	blx	r4

//#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  404e08:	4b06      	ldr	r3, [pc, #24]	; (404e24 <board_init+0x60>)
  404e0a:	4807      	ldr	r0, [pc, #28]	; (404e28 <board_init+0x64>)
  404e0c:	210c      	movs	r1, #12
  404e0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  404e12:	4798      	blx	r3
  404e14:	bd38      	pop	{r3, r4, r5, pc}
  404e16:	bf00      	nop
  404e18:	004052d5 	.word	0x004052d5
  404e1c:	00404fa1 	.word	0x00404fa1
  404e20:	28000001 	.word	0x28000001
  404e24:	00405059 	.word	0x00405059
  404e28:	400e1000 	.word	0x400e1000

00404e2c <pio_set_debounce_filter>:
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  404e2c:	0052      	lsls	r2, r2, #1
  404e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404e32:	fbb3 f2f2 	udiv	r2, r3, r2
  404e36:	3a01      	subs	r2, #1
  404e38:	f3c2 020d 	ubfx	r2, r2, #0, #14
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  404e3c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  404e40:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  404e44:	4770      	bx	lr
  404e46:	bf00      	nop

00404e48 <pio_set_peripheral>:

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404e48:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  404e4c:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  404e4e:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404e50:	d030      	beq.n	404eb4 <pio_set_peripheral+0x6c>
  404e52:	d812      	bhi.n	404e7a <pio_set_peripheral+0x32>
  404e54:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  404e58:	d020      	beq.n	404e9c <pio_set_peripheral+0x54>
  404e5a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  404e5e:	d11a      	bne.n	404e96 <pio_set_peripheral+0x4e>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404e60:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404e62:	4313      	orrs	r3, r2
  404e64:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404e66:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404e68:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404e6a:	400b      	ands	r3, r1
  404e6c:	ea23 0302 	bic.w	r3, r3, r2
  404e70:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  404e72:	6042      	str	r2, [r0, #4]
}
  404e74:	f85d 4b04 	ldr.w	r4, [sp], #4
  404e78:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404e7a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  404e7e:	d0f9      	beq.n	404e74 <pio_set_peripheral+0x2c>
  404e80:	d822      	bhi.n	404ec8 <pio_set_peripheral+0x80>
  404e82:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  404e86:	d1f4      	bne.n	404e72 <pio_set_peripheral+0x2a>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
		break;
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404e88:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404e8a:	4313      	orrs	r3, r2
  404e8c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404e8e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404e90:	4313      	orrs	r3, r2
  404e92:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404e94:	e7ed      	b.n	404e72 <pio_set_peripheral+0x2a>

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404e96:	2900      	cmp	r1, #0
  404e98:	d1eb      	bne.n	404e72 <pio_set_peripheral+0x2a>
  404e9a:	e7eb      	b.n	404e74 <pio_set_peripheral+0x2c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404e9c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404e9e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  404ea0:	43d3      	mvns	r3, r2
  404ea2:	4021      	ands	r1, r4
  404ea4:	4019      	ands	r1, r3
  404ea6:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404ea8:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404eaa:	6f44      	ldr	r4, [r0, #116]	; 0x74
  404eac:	4021      	ands	r1, r4
  404eae:	400b      	ands	r3, r1
  404eb0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404eb2:	e7de      	b.n	404e72 <pio_set_peripheral+0x2a>
		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404eb4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404eb6:	6f01      	ldr	r1, [r0, #112]	; 0x70
  404eb8:	400b      	ands	r3, r1
  404eba:	ea23 0302 	bic.w	r3, r3, r2
  404ebe:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404ec0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404ec2:	4313      	orrs	r3, r2
  404ec4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404ec6:	e7d4      	b.n	404e72 <pio_set_peripheral+0x2a>

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404ec8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  404ecc:	d0d2      	beq.n	404e74 <pio_set_peripheral+0x2c>
  404ece:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  404ed2:	d0cf      	beq.n	404e74 <pio_set_peripheral+0x2c>
  404ed4:	e7cd      	b.n	404e72 <pio_set_peripheral+0x2a>
  404ed6:	bf00      	nop

00404ed8 <pio_set_input>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404ed8:	07d3      	lsls	r3, r2, #31
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  404eda:	6441      	str	r1, [r0, #68]	; 0x44
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
  404edc:	bf4c      	ite	mi
  404ede:	6641      	strmi	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404ee0:	6601      	strpl	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  404ee2:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  404ee6:	bf14      	ite	ne
  404ee8:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  404eea:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  404eec:	0793      	lsls	r3, r2, #30
  404eee:	d406      	bmi.n	404efe <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  404ef0:	0713      	lsls	r3, r2, #28
			p_pio->PIO_IFSCER = ul_mask;
  404ef2:	bf48      	it	mi
  404ef4:	f8c0 1084 	strmi.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  404ef8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  404efa:	6001      	str	r1, [r0, #0]
  404efc:	4770      	bx	lr
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
		p_pio->PIO_IFSCDR = ul_mask;
  404efe:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  404f02:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  404f04:	6001      	str	r1, [r0, #0]
  404f06:	4770      	bx	lr

00404f08 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  404f08:	06d3      	lsls	r3, r2, #27
  404f0a:	d50e      	bpl.n	404f2a <pio_configure_interrupt+0x22>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  404f0c:	0693      	lsls	r3, r2, #26
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  404f0e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  404f12:	bf4c      	ite	mi
  404f14:	f8c0 10d4 	strmi.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  404f18:	f8c0 10d0 	strpl.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  404f1c:	0653      	lsls	r3, r2, #25
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  404f1e:	bf4c      	ite	mi
  404f20:	f8c0 10c0 	strmi.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  404f24:	f8c0 10c4 	strpl.w	r1, [r0, #196]	; 0xc4
  404f28:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  404f2a:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  404f2e:	4770      	bx	lr

00404f30 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  404f30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  404f32:	6401      	str	r1, [r0, #64]	; 0x40
  404f34:	4770      	bx	lr
  404f36:	bf00      	nop

00404f38 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  404f38:	6441      	str	r1, [r0, #68]	; 0x44
  404f3a:	4770      	bx	lr

00404f3c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  404f3c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  404f3e:	4770      	bx	lr

00404f40 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  404f40:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  404f42:	4770      	bx	lr

00404f44 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404f44:	0943      	lsrs	r3, r0, #5
  404f46:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404f4a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404f4e:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  404f50:	f000 001f 	and.w	r0, r0, #31
  404f54:	2201      	movs	r2, #1
  404f56:	fa02 f000 	lsl.w	r0, r2, r0
  404f5a:	6318      	str	r0, [r3, #48]	; 0x30
  404f5c:	4770      	bx	lr
  404f5e:	bf00      	nop

00404f60 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404f60:	0943      	lsrs	r3, r0, #5
  404f62:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404f66:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404f6a:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  404f6c:	f000 001f 	and.w	r0, r0, #31
  404f70:	2201      	movs	r2, #1
  404f72:	fa02 f000 	lsl.w	r0, r2, r0
  404f76:	6358      	str	r0, [r3, #52]	; 0x34
  404f78:	4770      	bx	lr
  404f7a:	bf00      	nop

00404f7c <pio_toggle_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404f7c:	0943      	lsrs	r3, r0, #5
  404f7e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404f82:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404f86:	025b      	lsls	r3, r3, #9
 */
void pio_toggle_pin(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  404f88:	f000 001f 	and.w	r0, r0, #31
  404f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  404f8e:	2101      	movs	r1, #1
  404f90:	fa01 f000 	lsl.w	r0, r1, r0
  404f94:	4210      	tst	r0, r2
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  404f96:	bf14      	ite	ne
  404f98:	6358      	strne	r0, [r3, #52]	; 0x34
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  404f9a:	6318      	streq	r0, [r3, #48]	; 0x30
  404f9c:	4770      	bx	lr
  404f9e:	bf00      	nop

00404fa0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  404fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404fa2:	0944      	lsrs	r4, r0, #5
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  404fa4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404fa6:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  404faa:	f001 41f0 	and.w	r1, r1, #2013265920	; 0x78000000
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404fae:	f204 7407 	addw	r4, r4, #1799	; 0x707
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  404fb2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404fb6:	ea4f 2444 	mov.w	r4, r4, lsl #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  404fba:	d00b      	beq.n	404fd4 <pio_configure_pin+0x34>
  404fbc:	d819      	bhi.n	404ff2 <pio_configure_pin+0x52>
  404fbe:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  404fc2:	d007      	beq.n	404fd4 <pio_configure_pin+0x34>
  404fc4:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  404fc8:	d004      	beq.n	404fd4 <pio_configure_pin+0x34>
  404fca:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  404fce:	d001      	beq.n	404fd4 <pio_configure_pin+0x34>
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;

	default:
		return 0;
  404fd0:	2000      	movs	r0, #0
	}

	return 1;
}
  404fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  404fd4:	2601      	movs	r6, #1
  404fd6:	f000 001f 	and.w	r0, r0, #31
  404fda:	fa06 f700 	lsl.w	r7, r6, r0
  404fde:	463a      	mov	r2, r7
  404fe0:	4620      	mov	r0, r4
  404fe2:	4b1b      	ldr	r3, [pc, #108]	; (405050 <pio_configure_pin+0xb0>)
  404fe4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404fe6:	07ed      	lsls	r5, r5, #31
		p_pio->PIO_PUER = ul_mask;
  404fe8:	bf4c      	ite	mi
  404fea:	6667      	strmi	r7, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404fec:	6627      	strpl	r7, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  404fee:	4630      	mov	r0, r6
  404ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  404ff2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  404ff6:	d010      	beq.n	40501a <pio_configure_pin+0x7a>
  404ff8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  404ffc:	d00d      	beq.n	40501a <pio_configure_pin+0x7a>
  404ffe:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  405002:	d1e5      	bne.n	404fd0 <pio_configure_pin+0x30>
				(ul_flags & PIO_PULLUP));
		break;
//#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  405004:	2601      	movs	r6, #1
  405006:	f000 011f 	and.w	r1, r0, #31
  40500a:	462a      	mov	r2, r5
  40500c:	4620      	mov	r0, r4
  40500e:	fa06 f101 	lsl.w	r1, r6, r1
  405012:	4b10      	ldr	r3, [pc, #64]	; (405054 <pio_configure_pin+0xb4>)
  405014:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  405016:	4630      	mov	r0, r6
		break;
//#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  405018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40501a:	f000 001f 	and.w	r0, r0, #31
  40501e:	2301      	movs	r3, #1
  405020:	4083      	lsls	r3, r0
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  405022:	f005 0104 	and.w	r1, r5, #4
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  405026:	07e8      	lsls	r0, r5, #31
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  405028:	6463      	str	r3, [r4, #68]	; 0x44
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40502a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
  40502e:	bf4c      	ite	mi
  405030:	6663      	strmi	r3, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  405032:	6623      	strpl	r3, [r4, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  405034:	b149      	cbz	r1, 40504a <pio_configure_pin+0xaa>
		p_pio->PIO_MDER = ul_mask;
  405036:	6523      	str	r3, [r4, #80]	; 0x50
	} else {
		p_pio->PIO_MDDR = ul_mask;
	}

	/* Set default value */
	if (ul_default_level) {
  405038:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
  40503c:	bf0c      	ite	eq
  40503e:	6323      	streq	r3, [r4, #48]	; 0x30
	} else {
		p_pio->PIO_CODR = ul_mask;
  405040:	6363      	strne	r3, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  405042:	6123      	str	r3, [r4, #16]
	p_pio->PIO_PER = ul_mask;
  405044:	6023      	str	r3, [r4, #0]

	default:
		return 0;
	}

	return 1;
  405046:	2001      	movs	r0, #1
  405048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
		p_pio->PIO_MDER = ul_mask;
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40504a:	6563      	str	r3, [r4, #84]	; 0x54
  40504c:	e7f4      	b.n	405038 <pio_configure_pin+0x98>
  40504e:	bf00      	nop
  405050:	00404e49 	.word	0x00404e49
  405054:	00404ed9 	.word	0x00404ed9

00405058 <pio_configure_pin_group>:
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  405058:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  40505c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  405060:	b570      	push	{r4, r5, r6, lr}
  405062:	4614      	mov	r4, r2
  405064:	4606      	mov	r6, r0
  405066:	460d      	mov	r5, r1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  405068:	d00b      	beq.n	405082 <pio_configure_pin_group+0x2a>
  40506a:	d814      	bhi.n	405096 <pio_configure_pin_group+0x3e>
  40506c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  405070:	d007      	beq.n	405082 <pio_configure_pin_group+0x2a>
  405072:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  405076:	d004      	beq.n	405082 <pio_configure_pin_group+0x2a>
  405078:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40507c:	d001      	beq.n	405082 <pio_configure_pin_group+0x2a>
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;

	default:
		return 0;
  40507e:	2000      	movs	r0, #0
	}

	return 1;
}
  405080:	bd70      	pop	{r4, r5, r6, pc}
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  405082:	4619      	mov	r1, r3
  405084:	462a      	mov	r2, r5
  405086:	4b15      	ldr	r3, [pc, #84]	; (4050dc <pio_configure_pin_group+0x84>)
  405088:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40508a:	07e0      	lsls	r0, r4, #31
		p_pio->PIO_PUER = ul_mask;
  40508c:	bf4c      	ite	mi
  40508e:	6675      	strmi	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  405090:	6635      	strpl	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  405092:	2001      	movs	r0, #1
  405094:	bd70      	pop	{r4, r5, r6, pc}
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  405096:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40509a:	d009      	beq.n	4050b0 <pio_configure_pin_group+0x58>
  40509c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4050a0:	d006      	beq.n	4050b0 <pio_configure_pin_group+0x58>
  4050a2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4050a6:	d1ea      	bne.n	40507e <pio_configure_pin_group+0x26>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4050a8:	4b0d      	ldr	r3, [pc, #52]	; (4050e0 <pio_configure_pin_group+0x88>)
  4050aa:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4050ac:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4050ae:	bd70      	pop	{r4, r5, r6, pc}
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4050b0:	07e1      	lsls	r1, r4, #31
	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4050b2:	f004 0204 	and.w	r2, r4, #4
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4050b6:	6475      	str	r5, [r6, #68]	; 0x44
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4050b8:	f004 5360 	and.w	r3, r4, #939524096	; 0x38000000
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
  4050bc:	bf4c      	ite	mi
  4050be:	6675      	strmi	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4050c0:	6635      	strpl	r5, [r6, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4050c2:	b14a      	cbz	r2, 4050d8 <pio_configure_pin_group+0x80>
		p_pio->PIO_MDER = ul_mask;
  4050c4:	6535      	str	r5, [r6, #80]	; 0x50
	} else {
		p_pio->PIO_MDDR = ul_mask;
	}

	/* Set default value */
	if (ul_default_level) {
  4050c6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
  4050ca:	bf0c      	ite	eq
  4050cc:	6335      	streq	r5, [r6, #48]	; 0x30
	} else {
		p_pio->PIO_CODR = ul_mask;
  4050ce:	6375      	strne	r5, [r6, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4050d0:	6135      	str	r5, [r6, #16]
	p_pio->PIO_PER = ul_mask;
  4050d2:	6035      	str	r5, [r6, #0]

	default:
		return 0;
	}

	return 1;
  4050d4:	2001      	movs	r0, #1
  4050d6:	bd70      	pop	{r4, r5, r6, pc}

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
		p_pio->PIO_MDER = ul_mask;
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4050d8:	6575      	str	r5, [r6, #84]	; 0x54
  4050da:	e7f4      	b.n	4050c6 <pio_configure_pin_group+0x6e>
  4050dc:	00404e49 	.word	0x00404e49
  4050e0:	00404ed9 	.word	0x00404ed9

004050e4 <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4050e4:	0940      	lsrs	r0, r0, #5
  4050e6:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
  4050ea:	f200 7007 	addw	r0, r0, #1799	; 0x707
#endif
	return p_pio;
}
  4050ee:	0240      	lsls	r0, r0, #9
  4050f0:	4770      	bx	lr
  4050f2:	bf00      	nop

004050f4 <pio_get_pin_group_id>:
		ul_id = ID_PIOC;
	} else {
		ul_id = ID_PIOA + (ul_pin >> 5);
	}
#else
	ul_id = ID_PIOA + (ul_pin >> 5);
  4050f4:	0940      	lsrs	r0, r0, #5
#endif
	return ul_id;
}
  4050f6:	300b      	adds	r0, #11
  4050f8:	4770      	bx	lr
  4050fa:	bf00      	nop

004050fc <pio_get_pin_group_mask>:
 *
 * \return GPIO port pin mask.
 */
uint32_t pio_get_pin_group_mask(uint32_t ul_pin)
{
	uint32_t ul_mask = 1 << (ul_pin & 0x1F);
  4050fc:	2301      	movs	r3, #1
  4050fe:	f000 001f 	and.w	r0, r0, #31
	return ul_mask;
}
  405102:	fa03 f000 	lsl.w	r0, r3, r0
  405106:	4770      	bx	lr

00405108 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  405108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40510c:	4b17      	ldr	r3, [pc, #92]	; (40516c <pio_handler_process+0x64>)
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40510e:	4680      	mov	r8, r0
  405110:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  405112:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
  405114:	4b16      	ldr	r3, [pc, #88]	; (405170 <pio_handler_process+0x68>)
{
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  405116:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  405118:	4640      	mov	r0, r8
  40511a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40511c:	4005      	ands	r5, r0
  40511e:	d018      	beq.n	405152 <pio_handler_process+0x4a>
  405120:	4c14      	ldr	r4, [pc, #80]	; (405174 <pio_handler_process+0x6c>)
  405122:	f104 07b0 	add.w	r7, r4, #176	; 0xb0
  405126:	e003      	b.n	405130 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  405128:	42bc      	cmp	r4, r7
  40512a:	d012      	beq.n	405152 <pio_handler_process+0x4a>
  40512c:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40512e:	b185      	cbz	r5, 405152 <pio_handler_process+0x4a>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  405130:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  405134:	42b3      	cmp	r3, r6
  405136:	d1f7      	bne.n	405128 <pio_handler_process+0x20>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  405138:	f854 1c08 	ldr.w	r1, [r4, #-8]
  40513c:	4229      	tst	r1, r5
  40513e:	d0f3      	beq.n	405128 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  405140:	6823      	ldr	r3, [r4, #0]
  405142:	4630      	mov	r0, r6
  405144:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  405146:	f854 3c08 	ldr.w	r3, [r4, #-8]
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40514a:	42bc      	cmp	r4, r7
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40514c:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  405150:	d1ec      	bne.n	40512c <pio_handler_process+0x24>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  405152:	4b09      	ldr	r3, [pc, #36]	; (405178 <pio_handler_process+0x70>)
  405154:	681b      	ldr	r3, [r3, #0]
  405156:	b133      	cbz	r3, 405166 <pio_handler_process+0x5e>
		if (pio_capture_handler) {
  405158:	4b08      	ldr	r3, [pc, #32]	; (40517c <pio_handler_process+0x74>)
  40515a:	681b      	ldr	r3, [r3, #0]
  40515c:	b10b      	cbz	r3, 405162 <pio_handler_process+0x5a>
			pio_capture_handler(p_pio);
  40515e:	4640      	mov	r0, r8
  405160:	4798      	blx	r3
  405162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40516a:	bf00      	nop
  40516c:	00404f3d 	.word	0x00404f3d
  405170:	00404f41 	.word	0x00404f41
  405174:	20001010 	.word	0x20001010
  405178:	200023b0 	.word	0x200023b0
  40517c:	20001000 	.word	0x20001000

00405180 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  405180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  405184:	4d0f      	ldr	r5, [pc, #60]	; (4051c4 <pio_handler_set+0x44>)
  405186:	682c      	ldr	r4, [r5, #0]
  405188:	2c0b      	cmp	r4, #11
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40518a:	468c      	mov	ip, r1
  40518c:	4616      	mov	r6, r2
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40518e:	d902      	bls.n	405196 <pio_handler_set+0x16>
		return 1;
  405190:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  405192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  405196:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4051c8 <pio_handler_set+0x48>
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
	gs_ul_nb_sources++;

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40519a:	f8df 9030 	ldr.w	r9, [pc, #48]	; 4051cc <pio_handler_set+0x4c>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  40519e:	ea4f 1e04 	mov.w	lr, r4, lsl #4
  4051a2:	eb08 070e 	add.w	r7, r8, lr
	pSource->id = ul_id;
  4051a6:	f848 c00e 	str.w	ip, [r8, lr]
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
	gs_ul_nb_sources++;

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4051aa:	4611      	mov	r1, r2

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
	pSource->mask = ul_mask;
	pSource->attr = ul_attr;
  4051ac:	60bb      	str	r3, [r7, #8]
	pSource->handler = p_handler;
	gs_ul_nb_sources++;

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4051ae:	461a      	mov	r2, r3
	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
	pSource->mask = ul_mask;
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
  4051b0:	9b08      	ldr	r3, [sp, #32]
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
	pSource->mask = ul_mask;
  4051b2:	607e      	str	r6, [r7, #4]
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
	gs_ul_nb_sources++;
  4051b4:	3401      	adds	r4, #1
	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
	pSource->mask = ul_mask;
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
  4051b6:	60fb      	str	r3, [r7, #12]
	gs_ul_nb_sources++;
  4051b8:	602c      	str	r4, [r5, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4051ba:	47c8      	blx	r9

	return 0;
  4051bc:	2000      	movs	r0, #0
  4051be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4051c2:	bf00      	nop
  4051c4:	20000ffc 	.word	0x20000ffc
  4051c8:	20001004 	.word	0x20001004
  4051cc:	00404f09 	.word	0x00404f09

004051d0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4051d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4051d2:	4802      	ldr	r0, [pc, #8]	; (4051dc <PIOA_Handler+0xc>)
  4051d4:	4b02      	ldr	r3, [pc, #8]	; (4051e0 <PIOA_Handler+0x10>)
  4051d6:	210b      	movs	r1, #11
  4051d8:	4798      	blx	r3
  4051da:	bd08      	pop	{r3, pc}
  4051dc:	400e0e00 	.word	0x400e0e00
  4051e0:	00405109 	.word	0x00405109

004051e4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4051e4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4051e6:	4802      	ldr	r0, [pc, #8]	; (4051f0 <PIOB_Handler+0xc>)
  4051e8:	4b02      	ldr	r3, [pc, #8]	; (4051f4 <PIOB_Handler+0x10>)
  4051ea:	210c      	movs	r1, #12
  4051ec:	4798      	blx	r3
  4051ee:	bd08      	pop	{r3, pc}
  4051f0:	400e1000 	.word	0x400e1000
  4051f4:	00405109 	.word	0x00405109

004051f8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4051f8:	4914      	ldr	r1, [pc, #80]	; (40524c <pmc_switch_mck_to_pllack+0x54>)
  4051fa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4051fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  405200:	4318      	orrs	r0, r3
  405202:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405204:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  405206:	071b      	lsls	r3, r3, #28
  405208:	d407      	bmi.n	40521a <pmc_switch_mck_to_pllack+0x22>
  40520a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40520e:	e001      	b.n	405214 <pmc_switch_mck_to_pllack+0x1c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405210:	3b01      	subs	r3, #1
  405212:	d016      	beq.n	405242 <pmc_switch_mck_to_pllack+0x4a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405214:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405216:	0710      	lsls	r0, r2, #28
  405218:	d5fa      	bpl.n	405210 <pmc_switch_mck_to_pllack+0x18>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40521a:	490c      	ldr	r1, [pc, #48]	; (40524c <pmc_switch_mck_to_pllack+0x54>)
  40521c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40521e:	f023 0303 	bic.w	r3, r3, #3
  405222:	f043 0302 	orr.w	r3, r3, #2
  405226:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405228:	6e88      	ldr	r0, [r1, #104]	; 0x68
  40522a:	f010 0008 	ands.w	r0, r0, #8
  40522e:	d10a      	bne.n	405246 <pmc_switch_mck_to_pllack+0x4e>
  405230:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405234:	e001      	b.n	40523a <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405236:	3b01      	subs	r3, #1
  405238:	d003      	beq.n	405242 <pmc_switch_mck_to_pllack+0x4a>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40523a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40523c:	0712      	lsls	r2, r2, #28
  40523e:	d5fa      	bpl.n	405236 <pmc_switch_mck_to_pllack+0x3e>
  405240:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  405242:	2001      	movs	r0, #1
  405244:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  405246:	2000      	movs	r0, #0
}
  405248:	4770      	bx	lr
  40524a:	bf00      	nop
  40524c:	400e0400 	.word	0x400e0400

00405250 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  405250:	b9c8      	cbnz	r0, 405286 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405252:	4b11      	ldr	r3, [pc, #68]	; (405298 <pmc_switch_mainck_to_xtal+0x48>)
  405254:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  405256:	f422 125c 	bic.w	r2, r2, #3604480	; 0x370000
  40525a:	f022 0203 	bic.w	r2, r2, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40525e:	0209      	lsls	r1, r1, #8
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  405260:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  405264:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  405266:	f042 0201 	orr.w	r2, r2, #1
  40526a:	430a      	orrs	r2, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40526c:	621a      	str	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40526e:	4619      	mov	r1, r3
  405270:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  405272:	4a09      	ldr	r2, [pc, #36]	; (405298 <pmc_switch_mainck_to_xtal+0x48>)
  405274:	07db      	lsls	r3, r3, #31
  405276:	d5fb      	bpl.n	405270 <pmc_switch_mainck_to_xtal+0x20>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  405278:	6a13      	ldr	r3, [r2, #32]
  40527a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40527e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  405282:	6213      	str	r3, [r2, #32]
  405284:	4770      	bx	lr
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405286:	4904      	ldr	r1, [pc, #16]	; (405298 <pmc_switch_mainck_to_xtal+0x48>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  405288:	4a04      	ldr	r2, [pc, #16]	; (40529c <pmc_switch_mainck_to_xtal+0x4c>)
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40528a:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40528c:	4b04      	ldr	r3, [pc, #16]	; (4052a0 <pmc_switch_mainck_to_xtal+0x50>)
  40528e:	4002      	ands	r2, r0
  405290:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405292:	620b      	str	r3, [r1, #32]
  405294:	4770      	bx	lr
  405296:	bf00      	nop
  405298:	400e0400 	.word	0x400e0400
  40529c:	fec8fffc 	.word	0xfec8fffc
  4052a0:	01370002 	.word	0x01370002

004052a4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4052a4:	4b02      	ldr	r3, [pc, #8]	; (4052b0 <pmc_osc_is_ready_mainck+0xc>)
  4052a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4052a8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4052ac:	4770      	bx	lr
  4052ae:	bf00      	nop
  4052b0:	400e0400 	.word	0x400e0400

004052b4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4052b4:	4b02      	ldr	r3, [pc, #8]	; (4052c0 <pmc_disable_pllack+0xc>)
  4052b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4052ba:	629a      	str	r2, [r3, #40]	; 0x28
  4052bc:	4770      	bx	lr
  4052be:	bf00      	nop
  4052c0:	400e0400 	.word	0x400e0400

004052c4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4052c4:	4b02      	ldr	r3, [pc, #8]	; (4052d0 <pmc_is_locked_pllack+0xc>)
  4052c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4052c8:	f000 0002 	and.w	r0, r0, #2
  4052cc:	4770      	bx	lr
  4052ce:	bf00      	nop
  4052d0:	400e0400 	.word	0x400e0400

004052d4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4052d4:	2822      	cmp	r0, #34	; 0x22
  4052d6:	d819      	bhi.n	40530c <pmc_enable_periph_clk+0x38>
		return 1;
	}

	if (ul_id < 32) {
  4052d8:	281f      	cmp	r0, #31
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4052da:	4b0e      	ldr	r3, [pc, #56]	; (405314 <pmc_enable_periph_clk+0x40>)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
	}

	if (ul_id < 32) {
  4052dc:	d809      	bhi.n	4052f2 <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4052de:	2101      	movs	r1, #1
  4052e0:	699a      	ldr	r2, [r3, #24]
  4052e2:	fa01 f000 	lsl.w	r0, r1, r0
  4052e6:	4002      	ands	r2, r0
  4052e8:	4290      	cmp	r0, r2
  4052ea:	d011      	beq.n	405310 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
  4052ec:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4052ee:	2000      	movs	r0, #0
  4052f0:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4052f2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4052f4:	2101      	movs	r1, #1
  4052f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4052fa:	fa01 f000 	lsl.w	r0, r1, r0
  4052fe:	4002      	ands	r2, r0
  405300:	4290      	cmp	r0, r2
  405302:	d005      	beq.n	405310 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER1 = 1 << ul_id;
  405304:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  405308:	2000      	movs	r0, #0
  40530a:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40530c:	2001      	movs	r0, #1
  40530e:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  405310:	2000      	movs	r0, #0
}
  405312:	4770      	bx	lr
  405314:	400e0400 	.word	0x400e0400

00405318 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  405318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40531c:	6043      	str	r3, [r0, #4]
  40531e:	4770      	bx	lr

00405320 <wdt_get_status>:
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
	return p_wdt->WDT_SR;
  405320:	6880      	ldr	r0, [r0, #8]
}
  405322:	4770      	bx	lr

00405324 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  405324:	e7fe      	b.n	405324 <Dummy_Handler>
  405326:	bf00      	nop

00405328 <Reset_Handler>:

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  405328:	481c      	ldr	r0, [pc, #112]	; (40539c <Reset_Handler+0x74>)
  40532a:	4b1d      	ldr	r3, [pc, #116]	; (4053a0 <Reset_Handler+0x78>)
  40532c:	4298      	cmp	r0, r3
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40532e:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  405330:	d925      	bls.n	40537e <Reset_Handler+0x56>
		for (; pDest < &_erelocate;) {
  405332:	4a1c      	ldr	r2, [pc, #112]	; (4053a4 <Reset_Handler+0x7c>)
  405334:	4293      	cmp	r3, r2
  405336:	d20a      	bcs.n	40534e <Reset_Handler+0x26>
  405338:	43d9      	mvns	r1, r3
  40533a:	440a      	add	r2, r1
  40533c:	f022 0403 	bic.w	r4, r2, #3
  405340:	3404      	adds	r4, #4
  405342:	2200      	movs	r2, #0
			*pDest++ = *pSrc++;
  405344:	5881      	ldr	r1, [r0, r2]
  405346:	5099      	str	r1, [r3, r2]
  405348:	3204      	adds	r2, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40534a:	42a2      	cmp	r2, r4
  40534c:	d1fa      	bne.n	405344 <Reset_Handler+0x1c>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40534e:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  405350:	4b15      	ldr	r3, [pc, #84]	; (4053a8 <Reset_Handler+0x80>)
  405352:	4a16      	ldr	r2, [pc, #88]	; (4053ac <Reset_Handler+0x84>)
  405354:	4293      	cmp	r3, r2
  405356:	d20a      	bcs.n	40536e <Reset_Handler+0x46>
  405358:	43d9      	mvns	r1, r3
  40535a:	440a      	add	r2, r1
  40535c:	f022 0103 	bic.w	r1, r2, #3
  405360:	4419      	add	r1, r3
		*pDest++ = 0;
  405362:	2200      	movs	r2, #0
  405364:	3b04      	subs	r3, #4
  405366:	f843 2f04 	str.w	r2, [r3, #4]!
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40536a:	428b      	cmp	r3, r1
  40536c:	d1fb      	bne.n	405366 <Reset_Handler+0x3e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  40536e:	4b10      	ldr	r3, [pc, #64]	; (4053b0 <Reset_Handler+0x88>)
  405370:	4a10      	ldr	r2, [pc, #64]	; (4053b4 <Reset_Handler+0x8c>)
  405372:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  405374:	4b10      	ldr	r3, [pc, #64]	; (4053b8 <Reset_Handler+0x90>)
  405376:	4798      	blx	r3

	/* Branch to main function */
	main();
  405378:	4b10      	ldr	r3, [pc, #64]	; (4053bc <Reset_Handler+0x94>)
  40537a:	4798      	blx	r3
  40537c:	e7fe      	b.n	40537c <Reset_Handler+0x54>

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40537e:	d2e6      	bcs.n	40534e <Reset_Handler+0x26>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  405380:	4908      	ldr	r1, [pc, #32]	; (4053a4 <Reset_Handler+0x7c>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  405382:	3804      	subs	r0, #4
	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  405384:	1aca      	subs	r2, r1, r3
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  405386:	4410      	add	r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  405388:	2a00      	cmp	r2, #0
  40538a:	d0e0      	beq.n	40534e <Reset_Handler+0x26>
  40538c:	460a      	mov	r2, r1
  40538e:	1a54      	subs	r4, r2, r1
			*pDest-- = *pSrc--;
  405390:	5824      	ldr	r4, [r4, r0]
  405392:	f842 4d04 	str.w	r4, [r2, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  405396:	4293      	cmp	r3, r2
  405398:	d1f9      	bne.n	40538e <Reset_Handler+0x66>
  40539a:	e7d8      	b.n	40534e <Reset_Handler+0x26>
  40539c:	00406d98 	.word	0x00406d98
  4053a0:	20000000 	.word	0x20000000
  4053a4:	20000a8c 	.word	0x20000a8c
  4053a8:	20000a8c 	.word	0x20000a8c
  4053ac:	200023b8 	.word	0x200023b8
  4053b0:	e000ed00 	.word	0xe000ed00
  4053b4:	00400000 	.word	0x00400000
  4053b8:	00405b3d 	.word	0x00405b3d
  4053bc:	0040555d 	.word	0x0040555d

004053c0 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4053c0:	4b32      	ldr	r3, [pc, #200]	; (40548c <SystemCoreClockUpdate+0xcc>)
  4053c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4053c4:	f002 0203 	and.w	r2, r2, #3
  4053c8:	2a01      	cmp	r2, #1
  4053ca:	d03a      	beq.n	405442 <SystemCoreClockUpdate+0x82>
  4053cc:	d323      	bcc.n	405416 <SystemCoreClockUpdate+0x56>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4053ce:	6a1a      	ldr	r2, [r3, #32]
  4053d0:	01d2      	lsls	r2, r2, #7
  4053d2:	d547      	bpl.n	405464 <SystemCoreClockUpdate+0xa4>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4053d4:	4a2e      	ldr	r2, [pc, #184]	; (405490 <SystemCoreClockUpdate+0xd0>)
  4053d6:	482f      	ldr	r0, [pc, #188]	; (405494 <SystemCoreClockUpdate+0xd4>)
  4053d8:	6010      	str	r0, [r2, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4053da:	4b2c      	ldr	r3, [pc, #176]	; (40548c <SystemCoreClockUpdate+0xcc>)
  4053dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4053de:	f001 0103 	and.w	r1, r1, #3
  4053e2:	2902      	cmp	r1, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4053e4:	bf0b      	itete	eq
  4053e6:	6a99      	ldreq	r1, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4053e8:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4053ea:	6a9b      	ldreq	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4053ec:	6adb      	ldrne	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4053ee:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4053f2:	fb01 0000 	mla	r0, r1, r0, r0
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  4053f6:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4053f8:	fbb0 f0f3 	udiv	r0, r0, r3
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4053fc:	4b23      	ldr	r3, [pc, #140]	; (40548c <SystemCoreClockUpdate+0xcc>)
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4053fe:	6010      	str	r0, [r2, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  405400:	6b19      	ldr	r1, [r3, #48]	; 0x30
  405402:	f001 0170 	and.w	r1, r1, #112	; 0x70
  405406:	2970      	cmp	r1, #112	; 0x70
  405408:	d115      	bne.n	405436 <SystemCoreClockUpdate+0x76>
		SystemCoreClock /= 3U;
  40540a:	4b23      	ldr	r3, [pc, #140]	; (405498 <SystemCoreClockUpdate+0xd8>)
  40540c:	fba3 1000 	umull	r1, r0, r3, r0
  405410:	0840      	lsrs	r0, r0, #1
  405412:	6010      	str	r0, [r2, #0]
  405414:	4770      	bx	lr
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  405416:	4b21      	ldr	r3, [pc, #132]	; (40549c <SystemCoreClockUpdate+0xdc>)
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  405418:	4a1d      	ldr	r2, [pc, #116]	; (405490 <SystemCoreClockUpdate+0xd0>)
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40541a:	695b      	ldr	r3, [r3, #20]
  40541c:	061b      	lsls	r3, r3, #24
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40541e:	bf4c      	ite	mi
  405420:	f44f 4000 	movmi.w	r0, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  405424:	f44f 40fa 	movpl.w	r0, #32000	; 0x7d00
  405428:	6010      	str	r0, [r2, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40542a:	4b18      	ldr	r3, [pc, #96]	; (40548c <SystemCoreClockUpdate+0xcc>)
  40542c:	6b19      	ldr	r1, [r3, #48]	; 0x30
  40542e:	f001 0170 	and.w	r1, r1, #112	; 0x70
  405432:	2970      	cmp	r1, #112	; 0x70
  405434:	d0e9      	beq.n	40540a <SystemCoreClockUpdate+0x4a>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  405436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405438:	f3c3 1302 	ubfx	r3, r3, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40543c:	40d8      	lsrs	r0, r3
  40543e:	6010      	str	r0, [r2, #0]
  405440:	4770      	bx	lr
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  405442:	6a1a      	ldr	r2, [r3, #32]
  405444:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
			SystemCoreClock = CHIP_FREQ_XTAL;
  405448:	4a11      	ldr	r2, [pc, #68]	; (405490 <SystemCoreClockUpdate+0xd0>)
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40544a:	d108      	bne.n	40545e <SystemCoreClockUpdate+0x9e>
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40544c:	4814      	ldr	r0, [pc, #80]	; (4054a0 <SystemCoreClockUpdate+0xe0>)
  40544e:	6010      	str	r0, [r2, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  405450:	6a1b      	ldr	r3, [r3, #32]
  405452:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405456:	2b10      	cmp	r3, #16
  405458:	d014      	beq.n	405484 <SystemCoreClockUpdate+0xc4>
  40545a:	2b20      	cmp	r3, #32
  40545c:	d1e5      	bne.n	40542a <SystemCoreClockUpdate+0x6a>
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40545e:	480d      	ldr	r0, [pc, #52]	; (405494 <SystemCoreClockUpdate+0xd4>)
  405460:	6010      	str	r0, [r2, #0]
			break;
  405462:	e7e2      	b.n	40542a <SystemCoreClockUpdate+0x6a>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL;
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405464:	4a0a      	ldr	r2, [pc, #40]	; (405490 <SystemCoreClockUpdate+0xd0>)
  405466:	480e      	ldr	r0, [pc, #56]	; (4054a0 <SystemCoreClockUpdate+0xe0>)
  405468:	6010      	str	r0, [r2, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40546a:	6a1b      	ldr	r3, [r3, #32]
  40546c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405470:	2b10      	cmp	r3, #16
  405472:	d004      	beq.n	40547e <SystemCoreClockUpdate+0xbe>
  405474:	2b20      	cmp	r3, #32
  405476:	d1b0      	bne.n	4053da <SystemCoreClockUpdate+0x1a>
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  405478:	4806      	ldr	r0, [pc, #24]	; (405494 <SystemCoreClockUpdate+0xd4>)
  40547a:	6010      	str	r0, [r2, #0]
					break;
  40547c:	e7ad      	b.n	4053da <SystemCoreClockUpdate+0x1a>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40547e:	4809      	ldr	r0, [pc, #36]	; (4054a4 <SystemCoreClockUpdate+0xe4>)
  405480:	6010      	str	r0, [r2, #0]
					break;
  405482:	e7aa      	b.n	4053da <SystemCoreClockUpdate+0x1a>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  405484:	4807      	ldr	r0, [pc, #28]	; (4054a4 <SystemCoreClockUpdate+0xe4>)
  405486:	6010      	str	r0, [r2, #0]
			break;
  405488:	e7cf      	b.n	40542a <SystemCoreClockUpdate+0x6a>
  40548a:	bf00      	nop
  40548c:	400e0400 	.word	0x400e0400
  405490:	2000024c 	.word	0x2000024c
  405494:	00b71b00 	.word	0x00b71b00
  405498:	aaaaaaab 	.word	0xaaaaaaab
  40549c:	400e1410 	.word	0x400e1410
  4054a0:	003d0900 	.word	0x003d0900
  4054a4:	007a1200 	.word	0x007a1200

004054a8 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4054a8:	4b0f      	ldr	r3, [pc, #60]	; (4054e8 <system_init_flash+0x40>)
  4054aa:	4298      	cmp	r0, r3
  4054ac:	d912      	bls.n	4054d4 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4054ae:	4b0f      	ldr	r3, [pc, #60]	; (4054ec <system_init_flash+0x44>)
  4054b0:	4298      	cmp	r0, r3
  4054b2:	d90b      	bls.n	4054cc <system_init_flash+0x24>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4054b4:	4b0e      	ldr	r3, [pc, #56]	; (4054f0 <system_init_flash+0x48>)
  4054b6:	4298      	cmp	r0, r3
  4054b8:	d911      	bls.n	4054de <system_init_flash+0x36>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4054ba:	4b0e      	ldr	r3, [pc, #56]	; (4054f4 <system_init_flash+0x4c>)
  4054bc:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4054be:	4b0e      	ldr	r3, [pc, #56]	; (4054f8 <system_init_flash+0x50>)
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4054c0:	bf8c      	ite	hi
  4054c2:	4a0e      	ldrhi	r2, [pc, #56]	; (4054fc <system_init_flash+0x54>)
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4054c4:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4054c8:	601a      	str	r2, [r3, #0]
  4054ca:	4770      	bx	lr
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4054cc:	4b0a      	ldr	r3, [pc, #40]	; (4054f8 <system_init_flash+0x50>)
  4054ce:	4a0c      	ldr	r2, [pc, #48]	; (405500 <system_init_flash+0x58>)
  4054d0:	601a      	str	r2, [r3, #0]
  4054d2:	4770      	bx	lr
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4054d4:	4b08      	ldr	r3, [pc, #32]	; (4054f8 <system_init_flash+0x50>)
  4054d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4054da:	601a      	str	r2, [r3, #0]
  4054dc:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4054de:	4b06      	ldr	r3, [pc, #24]	; (4054f8 <system_init_flash+0x50>)
  4054e0:	4a08      	ldr	r2, [pc, #32]	; (405504 <system_init_flash+0x5c>)
  4054e2:	601a      	str	r2, [r3, #0]
  4054e4:	4770      	bx	lr
  4054e6:	bf00      	nop
  4054e8:	01ba813f 	.word	0x01ba813f
  4054ec:	0375027f 	.word	0x0375027f
  4054f0:	053ec5ff 	.word	0x053ec5ff
  4054f4:	07270dff 	.word	0x07270dff
  4054f8:	400e0a00 	.word	0x400e0a00
  4054fc:	04000500 	.word	0x04000500
  405500:	04000100 	.word	0x04000100
  405504:	04000200 	.word	0x04000200

00405508 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  405508:	4a07      	ldr	r2, [pc, #28]	; (405528 <_sbrk+0x20>)

extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40550a:	4908      	ldr	r1, [pc, #32]	; (40552c <_sbrk+0x24>)

	if (heap == NULL) {
  40550c:	6813      	ldr	r3, [r2, #0]
  40550e:	b13b      	cbz	r3, 405520 <_sbrk+0x18>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  405510:	4418      	add	r0, r3
  405512:	4281      	cmp	r1, r0
		return (caddr_t) -1;	
	}

	heap += incr;
  405514:	bfa6      	itte	ge
  405516:	6010      	strge	r0, [r2, #0]

	return (caddr_t) prev_heap;
  405518:	4618      	movge	r0, r3
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  40551a:	f04f 30ff 	movlt.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40551e:	4770      	bx	lr
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
		heap = (unsigned char *)&_end;
  405520:	4b03      	ldr	r3, [pc, #12]	; (405530 <_sbrk+0x28>)
  405522:	6013      	str	r3, [r2, #0]
  405524:	e7f4      	b.n	405510 <_sbrk+0x8>
  405526:	bf00      	nop
  405528:	200010c4 	.word	0x200010c4
  40552c:	2000fffc 	.word	0x2000fffc
  405530:	200053b8 	.word	0x200053b8

00405534 <HardFault_Handler>:
extern drv_uart_config_t usart1Config;
extern brainSettings_t brainSettings; 
volatile unsigned long sgSysTickCount = 0;

void HardFault_Handler()
{
  405534:	e7fe      	b.n	405534 <HardFault_Handler>
  405536:	bf00      	nop

00405538 <MemManage_Handler>:
	while(1); 
}
void MemManage_Handler()
{
  405538:	e7fe      	b.n	405538 <MemManage_Handler>
  40553a:	bf00      	nop

0040553c <BusFault_Handler>:
	while(1); 
}
void BusFault_Handler()
{
  40553c:	e7fe      	b.n	40553c <BusFault_Handler>
  40553e:	bf00      	nop

00405540 <UsageFault_Handler>:
	while(1); 
}
void UsageFault_Handler()
{
  405540:	e7fe      	b.n	405540 <UsageFault_Handler>
  405542:	bf00      	nop

00405544 <SysTick_Handler>:

/**
 * \brief Handler for System Tick interrupt.
 */
void SysTick_Handler(void)
{
  405544:	b508      	push	{r3, lr}
	sgSysTickCount++;
  405546:	4b03      	ldr	r3, [pc, #12]	; (405554 <SysTick_Handler+0x10>)
	xPortSysTickHandler();
  405548:	4a03      	ldr	r2, [pc, #12]	; (405558 <SysTick_Handler+0x14>)
/**
 * \brief Handler for System Tick interrupt.
 */
void SysTick_Handler(void)
{
	sgSysTickCount++;
  40554a:	6819      	ldr	r1, [r3, #0]
  40554c:	3101      	adds	r1, #1
  40554e:	6019      	str	r1, [r3, #0]
	xPortSysTickHandler();
  405550:	4790      	blx	r2
  405552:	bd08      	pop	{r3, pc}
  405554:	200010c8 	.word	0x200010c8
  405558:	00403bdd 	.word	0x00403bdd

0040555c <main>:
}


int main (void)
{
  40555c:	b508      	push	{r3, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
  40555e:	4b07      	ldr	r3, [pc, #28]	; (40557c <main+0x20>)
  405560:	2201      	movs	r2, #1
  405562:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  405564:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  405568:	b662      	cpsie	i
	//Initialize system clock and peripherals
	sysclk_init();
  40556a:	4b05      	ldr	r3, [pc, #20]	; (405580 <main+0x24>)
  40556c:	4c05      	ldr	r4, [pc, #20]	; (405584 <main+0x28>)
  40556e:	4798      	blx	r3
	#ifdef COMPILE_AS_BOOTLOADER
	runBootloader(); 
  405570:	4b05      	ldr	r3, [pc, #20]	; (405588 <main+0x2c>)
  405572:	4798      	blx	r3
	#endif
	//we should never get here. 
	/*	Debug code */
	while (1) 
	{		
		delay_ms(1000);
  405574:	4805      	ldr	r0, [pc, #20]	; (40558c <main+0x30>)
  405576:	47a0      	blx	r4
  405578:	e7fc      	b.n	405574 <main+0x18>
  40557a:	bf00      	nop
  40557c:	20000248 	.word	0x20000248
  405580:	00404d61 	.word	0x00404d61
  405584:	20000085 	.word	0x20000085
  405588:	00400961 	.word	0x00400961
  40558c:	0082ca25 	.word	0x0082ca25

00405590 <__aeabi_uldivmod>:
  405590:	b94b      	cbnz	r3, 4055a6 <__aeabi_uldivmod+0x16>
  405592:	b942      	cbnz	r2, 4055a6 <__aeabi_uldivmod+0x16>
  405594:	2900      	cmp	r1, #0
  405596:	bf08      	it	eq
  405598:	2800      	cmpeq	r0, #0
  40559a:	d002      	beq.n	4055a2 <__aeabi_uldivmod+0x12>
  40559c:	f04f 31ff 	mov.w	r1, #4294967295
  4055a0:	4608      	mov	r0, r1
  4055a2:	f000 b83b 	b.w	40561c <__aeabi_idiv0>
  4055a6:	b082      	sub	sp, #8
  4055a8:	46ec      	mov	ip, sp
  4055aa:	e92d 5000 	stmdb	sp!, {ip, lr}
  4055ae:	f000 f81d 	bl	4055ec <__gnu_uldivmod_helper>
  4055b2:	f8dd e004 	ldr.w	lr, [sp, #4]
  4055b6:	b002      	add	sp, #8
  4055b8:	bc0c      	pop	{r2, r3}
  4055ba:	4770      	bx	lr

004055bc <__gnu_ldivmod_helper>:
  4055bc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  4055c0:	9e06      	ldr	r6, [sp, #24]
  4055c2:	4614      	mov	r4, r2
  4055c4:	461d      	mov	r5, r3
  4055c6:	4680      	mov	r8, r0
  4055c8:	4689      	mov	r9, r1
  4055ca:	f000 f829 	bl	405620 <__divdi3>
  4055ce:	fb04 f301 	mul.w	r3, r4, r1
  4055d2:	fb00 3305 	mla	r3, r0, r5, r3
  4055d6:	fba4 4500 	umull	r4, r5, r4, r0
  4055da:	441d      	add	r5, r3
  4055dc:	ebb8 0404 	subs.w	r4, r8, r4
  4055e0:	eb69 0505 	sbc.w	r5, r9, r5
  4055e4:	e9c6 4500 	strd	r4, r5, [r6]
  4055e8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

004055ec <__gnu_uldivmod_helper>:
  4055ec:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  4055f0:	9e06      	ldr	r6, [sp, #24]
  4055f2:	4614      	mov	r4, r2
  4055f4:	4680      	mov	r8, r0
  4055f6:	4689      	mov	r9, r1
  4055f8:	461d      	mov	r5, r3
  4055fa:	f000 f95d 	bl	4058b8 <__udivdi3>
  4055fe:	fb00 f505 	mul.w	r5, r0, r5
  405602:	fb04 5301 	mla	r3, r4, r1, r5
  405606:	fba0 4504 	umull	r4, r5, r0, r4
  40560a:	441d      	add	r5, r3
  40560c:	ebb8 0404 	subs.w	r4, r8, r4
  405610:	eb69 0505 	sbc.w	r5, r9, r5
  405614:	e9c6 4500 	strd	r4, r5, [r6]
  405618:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0040561c <__aeabi_idiv0>:
  40561c:	4770      	bx	lr
  40561e:	bf00      	nop

00405620 <__divdi3>:
  405620:	2900      	cmp	r1, #0
  405622:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405626:	f2c0 809f 	blt.w	405768 <__divdi3+0x148>
  40562a:	2400      	movs	r4, #0
  40562c:	2b00      	cmp	r3, #0
  40562e:	f2c0 8096 	blt.w	40575e <__divdi3+0x13e>
  405632:	4615      	mov	r5, r2
  405634:	4606      	mov	r6, r0
  405636:	460f      	mov	r7, r1
  405638:	2b00      	cmp	r3, #0
  40563a:	d13e      	bne.n	4056ba <__divdi3+0x9a>
  40563c:	428a      	cmp	r2, r1
  40563e:	d957      	bls.n	4056f0 <__divdi3+0xd0>
  405640:	fab2 f382 	clz	r3, r2
  405644:	b14b      	cbz	r3, 40565a <__divdi3+0x3a>
  405646:	f1c3 0220 	rsb	r2, r3, #32
  40564a:	fa01 f703 	lsl.w	r7, r1, r3
  40564e:	fa20 f202 	lsr.w	r2, r0, r2
  405652:	409d      	lsls	r5, r3
  405654:	4317      	orrs	r7, r2
  405656:	fa00 f603 	lsl.w	r6, r0, r3
  40565a:	0c29      	lsrs	r1, r5, #16
  40565c:	fbb7 f2f1 	udiv	r2, r7, r1
  405660:	0c33      	lsrs	r3, r6, #16
  405662:	fb01 7c12 	mls	ip, r1, r2, r7
  405666:	b2a8      	uxth	r0, r5
  405668:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  40566c:	fb00 f302 	mul.w	r3, r0, r2
  405670:	42bb      	cmp	r3, r7
  405672:	d909      	bls.n	405688 <__divdi3+0x68>
  405674:	197f      	adds	r7, r7, r5
  405676:	f102 3cff 	add.w	ip, r2, #4294967295
  40567a:	f080 8101 	bcs.w	405880 <__divdi3+0x260>
  40567e:	42bb      	cmp	r3, r7
  405680:	f240 80fe 	bls.w	405880 <__divdi3+0x260>
  405684:	3a02      	subs	r2, #2
  405686:	442f      	add	r7, r5
  405688:	1aff      	subs	r7, r7, r3
  40568a:	fbb7 f3f1 	udiv	r3, r7, r1
  40568e:	b2b6      	uxth	r6, r6
  405690:	fb01 7113 	mls	r1, r1, r3, r7
  405694:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  405698:	fb00 f003 	mul.w	r0, r0, r3
  40569c:	4288      	cmp	r0, r1
  40569e:	d908      	bls.n	4056b2 <__divdi3+0x92>
  4056a0:	1949      	adds	r1, r1, r5
  4056a2:	f103 37ff 	add.w	r7, r3, #4294967295
  4056a6:	f080 80ed 	bcs.w	405884 <__divdi3+0x264>
  4056aa:	4288      	cmp	r0, r1
  4056ac:	f240 80ea 	bls.w	405884 <__divdi3+0x264>
  4056b0:	3b02      	subs	r3, #2
  4056b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4056b6:	2300      	movs	r3, #0
  4056b8:	e003      	b.n	4056c2 <__divdi3+0xa2>
  4056ba:	428b      	cmp	r3, r1
  4056bc:	d90a      	bls.n	4056d4 <__divdi3+0xb4>
  4056be:	2300      	movs	r3, #0
  4056c0:	461a      	mov	r2, r3
  4056c2:	4610      	mov	r0, r2
  4056c4:	4619      	mov	r1, r3
  4056c6:	b114      	cbz	r4, 4056ce <__divdi3+0xae>
  4056c8:	4240      	negs	r0, r0
  4056ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4056ce:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4056d2:	4770      	bx	lr
  4056d4:	fab3 f883 	clz	r8, r3
  4056d8:	f1b8 0f00 	cmp.w	r8, #0
  4056dc:	f040 8084 	bne.w	4057e8 <__divdi3+0x1c8>
  4056e0:	428b      	cmp	r3, r1
  4056e2:	d302      	bcc.n	4056ea <__divdi3+0xca>
  4056e4:	4282      	cmp	r2, r0
  4056e6:	f200 80de 	bhi.w	4058a6 <__divdi3+0x286>
  4056ea:	2300      	movs	r3, #0
  4056ec:	2201      	movs	r2, #1
  4056ee:	e7e8      	b.n	4056c2 <__divdi3+0xa2>
  4056f0:	b912      	cbnz	r2, 4056f8 <__divdi3+0xd8>
  4056f2:	2301      	movs	r3, #1
  4056f4:	fbb3 f5f2 	udiv	r5, r3, r2
  4056f8:	fab5 f285 	clz	r2, r5
  4056fc:	2a00      	cmp	r2, #0
  4056fe:	d139      	bne.n	405774 <__divdi3+0x154>
  405700:	1b7f      	subs	r7, r7, r5
  405702:	0c28      	lsrs	r0, r5, #16
  405704:	fa1f fc85 	uxth.w	ip, r5
  405708:	2301      	movs	r3, #1
  40570a:	fbb7 f1f0 	udiv	r1, r7, r0
  40570e:	0c32      	lsrs	r2, r6, #16
  405710:	fb00 7711 	mls	r7, r0, r1, r7
  405714:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  405718:	fb0c f201 	mul.w	r2, ip, r1
  40571c:	42ba      	cmp	r2, r7
  40571e:	d907      	bls.n	405730 <__divdi3+0x110>
  405720:	197f      	adds	r7, r7, r5
  405722:	f101 38ff 	add.w	r8, r1, #4294967295
  405726:	d202      	bcs.n	40572e <__divdi3+0x10e>
  405728:	42ba      	cmp	r2, r7
  40572a:	f200 80c1 	bhi.w	4058b0 <__divdi3+0x290>
  40572e:	4641      	mov	r1, r8
  405730:	1abf      	subs	r7, r7, r2
  405732:	fbb7 f2f0 	udiv	r2, r7, r0
  405736:	b2b6      	uxth	r6, r6
  405738:	fb00 7012 	mls	r0, r0, r2, r7
  40573c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  405740:	fb0c fc02 	mul.w	ip, ip, r2
  405744:	4584      	cmp	ip, r0
  405746:	d907      	bls.n	405758 <__divdi3+0x138>
  405748:	1940      	adds	r0, r0, r5
  40574a:	f102 37ff 	add.w	r7, r2, #4294967295
  40574e:	d202      	bcs.n	405756 <__divdi3+0x136>
  405750:	4584      	cmp	ip, r0
  405752:	f200 80ab 	bhi.w	4058ac <__divdi3+0x28c>
  405756:	463a      	mov	r2, r7
  405758:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  40575c:	e7b1      	b.n	4056c2 <__divdi3+0xa2>
  40575e:	43e4      	mvns	r4, r4
  405760:	4252      	negs	r2, r2
  405762:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405766:	e764      	b.n	405632 <__divdi3+0x12>
  405768:	4240      	negs	r0, r0
  40576a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40576e:	f04f 34ff 	mov.w	r4, #4294967295
  405772:	e75b      	b.n	40562c <__divdi3+0xc>
  405774:	4095      	lsls	r5, r2
  405776:	f1c2 0320 	rsb	r3, r2, #32
  40577a:	fa27 f103 	lsr.w	r1, r7, r3
  40577e:	0c28      	lsrs	r0, r5, #16
  405780:	fa26 f303 	lsr.w	r3, r6, r3
  405784:	4097      	lsls	r7, r2
  405786:	fbb1 f8f0 	udiv	r8, r1, r0
  40578a:	431f      	orrs	r7, r3
  40578c:	0c3b      	lsrs	r3, r7, #16
  40578e:	fb00 1118 	mls	r1, r0, r8, r1
  405792:	fa1f fc85 	uxth.w	ip, r5
  405796:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40579a:	fb0c f308 	mul.w	r3, ip, r8
  40579e:	428b      	cmp	r3, r1
  4057a0:	fa06 f602 	lsl.w	r6, r6, r2
  4057a4:	d908      	bls.n	4057b8 <__divdi3+0x198>
  4057a6:	1949      	adds	r1, r1, r5
  4057a8:	f108 32ff 	add.w	r2, r8, #4294967295
  4057ac:	d279      	bcs.n	4058a2 <__divdi3+0x282>
  4057ae:	428b      	cmp	r3, r1
  4057b0:	d977      	bls.n	4058a2 <__divdi3+0x282>
  4057b2:	f1a8 0802 	sub.w	r8, r8, #2
  4057b6:	4429      	add	r1, r5
  4057b8:	1ac9      	subs	r1, r1, r3
  4057ba:	fbb1 f3f0 	udiv	r3, r1, r0
  4057be:	b2bf      	uxth	r7, r7
  4057c0:	fb00 1113 	mls	r1, r0, r3, r1
  4057c4:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  4057c8:	fb0c f203 	mul.w	r2, ip, r3
  4057cc:	42ba      	cmp	r2, r7
  4057ce:	d907      	bls.n	4057e0 <__divdi3+0x1c0>
  4057d0:	197f      	adds	r7, r7, r5
  4057d2:	f103 31ff 	add.w	r1, r3, #4294967295
  4057d6:	d260      	bcs.n	40589a <__divdi3+0x27a>
  4057d8:	42ba      	cmp	r2, r7
  4057da:	d95e      	bls.n	40589a <__divdi3+0x27a>
  4057dc:	3b02      	subs	r3, #2
  4057de:	442f      	add	r7, r5
  4057e0:	1abf      	subs	r7, r7, r2
  4057e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4057e6:	e790      	b.n	40570a <__divdi3+0xea>
  4057e8:	f1c8 0220 	rsb	r2, r8, #32
  4057ec:	fa03 fc08 	lsl.w	ip, r3, r8
  4057f0:	fa25 f302 	lsr.w	r3, r5, r2
  4057f4:	ea43 0c0c 	orr.w	ip, r3, ip
  4057f8:	ea4f 491c 	mov.w	r9, ip, lsr #16
  4057fc:	fa21 f302 	lsr.w	r3, r1, r2
  405800:	fa01 f708 	lsl.w	r7, r1, r8
  405804:	fa20 f202 	lsr.w	r2, r0, r2
  405808:	fbb3 f1f9 	udiv	r1, r3, r9
  40580c:	4317      	orrs	r7, r2
  40580e:	fb09 3311 	mls	r3, r9, r1, r3
  405812:	0c3a      	lsrs	r2, r7, #16
  405814:	fa1f fb8c 	uxth.w	fp, ip
  405818:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  40581c:	fb0b fa01 	mul.w	sl, fp, r1
  405820:	459a      	cmp	sl, r3
  405822:	fa05 f008 	lsl.w	r0, r5, r8
  405826:	d908      	bls.n	40583a <__divdi3+0x21a>
  405828:	eb13 030c 	adds.w	r3, r3, ip
  40582c:	f101 32ff 	add.w	r2, r1, #4294967295
  405830:	d235      	bcs.n	40589e <__divdi3+0x27e>
  405832:	459a      	cmp	sl, r3
  405834:	d933      	bls.n	40589e <__divdi3+0x27e>
  405836:	3902      	subs	r1, #2
  405838:	4463      	add	r3, ip
  40583a:	ebca 0303 	rsb	r3, sl, r3
  40583e:	fbb3 f2f9 	udiv	r2, r3, r9
  405842:	fb09 3312 	mls	r3, r9, r2, r3
  405846:	b2bf      	uxth	r7, r7
  405848:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40584c:	fb0b f902 	mul.w	r9, fp, r2
  405850:	45b9      	cmp	r9, r7
  405852:	d908      	bls.n	405866 <__divdi3+0x246>
  405854:	eb17 070c 	adds.w	r7, r7, ip
  405858:	f102 33ff 	add.w	r3, r2, #4294967295
  40585c:	d21b      	bcs.n	405896 <__divdi3+0x276>
  40585e:	45b9      	cmp	r9, r7
  405860:	d919      	bls.n	405896 <__divdi3+0x276>
  405862:	3a02      	subs	r2, #2
  405864:	4467      	add	r7, ip
  405866:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  40586a:	fba5 0100 	umull	r0, r1, r5, r0
  40586e:	ebc9 0707 	rsb	r7, r9, r7
  405872:	428f      	cmp	r7, r1
  405874:	f04f 0300 	mov.w	r3, #0
  405878:	d30a      	bcc.n	405890 <__divdi3+0x270>
  40587a:	d005      	beq.n	405888 <__divdi3+0x268>
  40587c:	462a      	mov	r2, r5
  40587e:	e720      	b.n	4056c2 <__divdi3+0xa2>
  405880:	4662      	mov	r2, ip
  405882:	e701      	b.n	405688 <__divdi3+0x68>
  405884:	463b      	mov	r3, r7
  405886:	e714      	b.n	4056b2 <__divdi3+0x92>
  405888:	fa06 f608 	lsl.w	r6, r6, r8
  40588c:	4286      	cmp	r6, r0
  40588e:	d2f5      	bcs.n	40587c <__divdi3+0x25c>
  405890:	1e6a      	subs	r2, r5, #1
  405892:	2300      	movs	r3, #0
  405894:	e715      	b.n	4056c2 <__divdi3+0xa2>
  405896:	461a      	mov	r2, r3
  405898:	e7e5      	b.n	405866 <__divdi3+0x246>
  40589a:	460b      	mov	r3, r1
  40589c:	e7a0      	b.n	4057e0 <__divdi3+0x1c0>
  40589e:	4611      	mov	r1, r2
  4058a0:	e7cb      	b.n	40583a <__divdi3+0x21a>
  4058a2:	4690      	mov	r8, r2
  4058a4:	e788      	b.n	4057b8 <__divdi3+0x198>
  4058a6:	4643      	mov	r3, r8
  4058a8:	4642      	mov	r2, r8
  4058aa:	e70a      	b.n	4056c2 <__divdi3+0xa2>
  4058ac:	3a02      	subs	r2, #2
  4058ae:	e753      	b.n	405758 <__divdi3+0x138>
  4058b0:	3902      	subs	r1, #2
  4058b2:	442f      	add	r7, r5
  4058b4:	e73c      	b.n	405730 <__divdi3+0x110>
  4058b6:	bf00      	nop

004058b8 <__udivdi3>:
  4058b8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4058bc:	4614      	mov	r4, r2
  4058be:	4605      	mov	r5, r0
  4058c0:	460e      	mov	r6, r1
  4058c2:	2b00      	cmp	r3, #0
  4058c4:	d143      	bne.n	40594e <__udivdi3+0x96>
  4058c6:	428a      	cmp	r2, r1
  4058c8:	d953      	bls.n	405972 <__udivdi3+0xba>
  4058ca:	fab2 f782 	clz	r7, r2
  4058ce:	b157      	cbz	r7, 4058e6 <__udivdi3+0x2e>
  4058d0:	f1c7 0620 	rsb	r6, r7, #32
  4058d4:	fa20 f606 	lsr.w	r6, r0, r6
  4058d8:	fa01 f307 	lsl.w	r3, r1, r7
  4058dc:	fa02 f407 	lsl.w	r4, r2, r7
  4058e0:	431e      	orrs	r6, r3
  4058e2:	fa00 f507 	lsl.w	r5, r0, r7
  4058e6:	0c21      	lsrs	r1, r4, #16
  4058e8:	fbb6 f2f1 	udiv	r2, r6, r1
  4058ec:	0c2b      	lsrs	r3, r5, #16
  4058ee:	fb01 6712 	mls	r7, r1, r2, r6
  4058f2:	b2a0      	uxth	r0, r4
  4058f4:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  4058f8:	fb00 f302 	mul.w	r3, r0, r2
  4058fc:	42b3      	cmp	r3, r6
  4058fe:	d909      	bls.n	405914 <__udivdi3+0x5c>
  405900:	1936      	adds	r6, r6, r4
  405902:	f102 37ff 	add.w	r7, r2, #4294967295
  405906:	f080 80f6 	bcs.w	405af6 <__udivdi3+0x23e>
  40590a:	42b3      	cmp	r3, r6
  40590c:	f240 80f3 	bls.w	405af6 <__udivdi3+0x23e>
  405910:	3a02      	subs	r2, #2
  405912:	4426      	add	r6, r4
  405914:	1af6      	subs	r6, r6, r3
  405916:	fbb6 f3f1 	udiv	r3, r6, r1
  40591a:	b2ad      	uxth	r5, r5
  40591c:	fb01 6113 	mls	r1, r1, r3, r6
  405920:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  405924:	fb00 f003 	mul.w	r0, r0, r3
  405928:	4288      	cmp	r0, r1
  40592a:	d908      	bls.n	40593e <__udivdi3+0x86>
  40592c:	1909      	adds	r1, r1, r4
  40592e:	f103 36ff 	add.w	r6, r3, #4294967295
  405932:	f080 80e2 	bcs.w	405afa <__udivdi3+0x242>
  405936:	4288      	cmp	r0, r1
  405938:	f240 80df 	bls.w	405afa <__udivdi3+0x242>
  40593c:	3b02      	subs	r3, #2
  40593e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  405942:	2300      	movs	r3, #0
  405944:	4610      	mov	r0, r2
  405946:	4619      	mov	r1, r3
  405948:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40594c:	4770      	bx	lr
  40594e:	428b      	cmp	r3, r1
  405950:	d84a      	bhi.n	4059e8 <__udivdi3+0x130>
  405952:	fab3 f683 	clz	r6, r3
  405956:	2e00      	cmp	r6, #0
  405958:	d14d      	bne.n	4059f6 <__udivdi3+0x13e>
  40595a:	428b      	cmp	r3, r1
  40595c:	d302      	bcc.n	405964 <__udivdi3+0xac>
  40595e:	4282      	cmp	r2, r0
  405960:	f200 80d6 	bhi.w	405b10 <__udivdi3+0x258>
  405964:	2300      	movs	r3, #0
  405966:	2201      	movs	r2, #1
  405968:	4610      	mov	r0, r2
  40596a:	4619      	mov	r1, r3
  40596c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405970:	4770      	bx	lr
  405972:	b912      	cbnz	r2, 40597a <__udivdi3+0xc2>
  405974:	2401      	movs	r4, #1
  405976:	fbb4 f4f2 	udiv	r4, r4, r2
  40597a:	fab4 f284 	clz	r2, r4
  40597e:	2a00      	cmp	r2, #0
  405980:	d17c      	bne.n	405a7c <__udivdi3+0x1c4>
  405982:	1b09      	subs	r1, r1, r4
  405984:	0c26      	lsrs	r6, r4, #16
  405986:	b2a7      	uxth	r7, r4
  405988:	2301      	movs	r3, #1
  40598a:	fbb1 f0f6 	udiv	r0, r1, r6
  40598e:	0c2a      	lsrs	r2, r5, #16
  405990:	fb06 1110 	mls	r1, r6, r0, r1
  405994:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  405998:	fb07 f200 	mul.w	r2, r7, r0
  40599c:	428a      	cmp	r2, r1
  40599e:	d907      	bls.n	4059b0 <__udivdi3+0xf8>
  4059a0:	1909      	adds	r1, r1, r4
  4059a2:	f100 3cff 	add.w	ip, r0, #4294967295
  4059a6:	d202      	bcs.n	4059ae <__udivdi3+0xf6>
  4059a8:	428a      	cmp	r2, r1
  4059aa:	f200 80c3 	bhi.w	405b34 <__udivdi3+0x27c>
  4059ae:	4660      	mov	r0, ip
  4059b0:	1a89      	subs	r1, r1, r2
  4059b2:	fbb1 f2f6 	udiv	r2, r1, r6
  4059b6:	b2ad      	uxth	r5, r5
  4059b8:	fb06 1112 	mls	r1, r6, r2, r1
  4059bc:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  4059c0:	fb07 f702 	mul.w	r7, r7, r2
  4059c4:	42af      	cmp	r7, r5
  4059c6:	d908      	bls.n	4059da <__udivdi3+0x122>
  4059c8:	192c      	adds	r4, r5, r4
  4059ca:	f102 31ff 	add.w	r1, r2, #4294967295
  4059ce:	f080 8096 	bcs.w	405afe <__udivdi3+0x246>
  4059d2:	42a7      	cmp	r7, r4
  4059d4:	f240 8093 	bls.w	405afe <__udivdi3+0x246>
  4059d8:	3a02      	subs	r2, #2
  4059da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  4059de:	4610      	mov	r0, r2
  4059e0:	4619      	mov	r1, r3
  4059e2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4059e6:	4770      	bx	lr
  4059e8:	2300      	movs	r3, #0
  4059ea:	461a      	mov	r2, r3
  4059ec:	4610      	mov	r0, r2
  4059ee:	4619      	mov	r1, r3
  4059f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4059f4:	4770      	bx	lr
  4059f6:	f1c6 0520 	rsb	r5, r6, #32
  4059fa:	fa22 f405 	lsr.w	r4, r2, r5
  4059fe:	40b3      	lsls	r3, r6
  405a00:	431c      	orrs	r4, r3
  405a02:	ea4f 4814 	mov.w	r8, r4, lsr #16
  405a06:	fa21 f305 	lsr.w	r3, r1, r5
  405a0a:	fa01 f706 	lsl.w	r7, r1, r6
  405a0e:	fa20 f505 	lsr.w	r5, r0, r5
  405a12:	fbb3 fcf8 	udiv	ip, r3, r8
  405a16:	432f      	orrs	r7, r5
  405a18:	fb08 331c 	mls	r3, r8, ip, r3
  405a1c:	0c3d      	lsrs	r5, r7, #16
  405a1e:	fa1f fa84 	uxth.w	sl, r4
  405a22:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  405a26:	fb0a f90c 	mul.w	r9, sl, ip
  405a2a:	4599      	cmp	r9, r3
  405a2c:	fa02 fb06 	lsl.w	fp, r2, r6
  405a30:	d904      	bls.n	405a3c <__udivdi3+0x184>
  405a32:	191b      	adds	r3, r3, r4
  405a34:	f10c 32ff 	add.w	r2, ip, #4294967295
  405a38:	d36d      	bcc.n	405b16 <__udivdi3+0x25e>
  405a3a:	4694      	mov	ip, r2
  405a3c:	ebc9 0303 	rsb	r3, r9, r3
  405a40:	fbb3 f5f8 	udiv	r5, r3, r8
  405a44:	fb08 3315 	mls	r3, r8, r5, r3
  405a48:	b2bf      	uxth	r7, r7
  405a4a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  405a4e:	fb0a f805 	mul.w	r8, sl, r5
  405a52:	45b8      	cmp	r8, r7
  405a54:	d904      	bls.n	405a60 <__udivdi3+0x1a8>
  405a56:	193f      	adds	r7, r7, r4
  405a58:	f105 33ff 	add.w	r3, r5, #4294967295
  405a5c:	d361      	bcc.n	405b22 <__udivdi3+0x26a>
  405a5e:	461d      	mov	r5, r3
  405a60:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  405a64:	fbac 230b 	umull	r2, r3, ip, fp
  405a68:	ebc8 0707 	rsb	r7, r8, r7
  405a6c:	429f      	cmp	r7, r3
  405a6e:	f04f 0500 	mov.w	r5, #0
  405a72:	d349      	bcc.n	405b08 <__udivdi3+0x250>
  405a74:	d045      	beq.n	405b02 <__udivdi3+0x24a>
  405a76:	4662      	mov	r2, ip
  405a78:	462b      	mov	r3, r5
  405a7a:	e763      	b.n	405944 <__udivdi3+0x8c>
  405a7c:	4094      	lsls	r4, r2
  405a7e:	f1c2 0320 	rsb	r3, r2, #32
  405a82:	fa21 fc03 	lsr.w	ip, r1, r3
  405a86:	0c26      	lsrs	r6, r4, #16
  405a88:	fa20 f303 	lsr.w	r3, r0, r3
  405a8c:	fa01 f502 	lsl.w	r5, r1, r2
  405a90:	fbbc f8f6 	udiv	r8, ip, r6
  405a94:	ea43 0105 	orr.w	r1, r3, r5
  405a98:	0c0b      	lsrs	r3, r1, #16
  405a9a:	fb06 cc18 	mls	ip, r6, r8, ip
  405a9e:	b2a7      	uxth	r7, r4
  405aa0:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  405aa4:	fb07 f308 	mul.w	r3, r7, r8
  405aa8:	4563      	cmp	r3, ip
  405aaa:	fa00 f502 	lsl.w	r5, r0, r2
  405aae:	d909      	bls.n	405ac4 <__udivdi3+0x20c>
  405ab0:	eb1c 0c04 	adds.w	ip, ip, r4
  405ab4:	f108 32ff 	add.w	r2, r8, #4294967295
  405ab8:	d23a      	bcs.n	405b30 <__udivdi3+0x278>
  405aba:	4563      	cmp	r3, ip
  405abc:	d938      	bls.n	405b30 <__udivdi3+0x278>
  405abe:	f1a8 0802 	sub.w	r8, r8, #2
  405ac2:	44a4      	add	ip, r4
  405ac4:	ebc3 0c0c 	rsb	ip, r3, ip
  405ac8:	fbbc f3f6 	udiv	r3, ip, r6
  405acc:	b289      	uxth	r1, r1
  405ace:	fb06 cc13 	mls	ip, r6, r3, ip
  405ad2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  405ad6:	fb07 f203 	mul.w	r2, r7, r3
  405ada:	428a      	cmp	r2, r1
  405adc:	d907      	bls.n	405aee <__udivdi3+0x236>
  405ade:	1909      	adds	r1, r1, r4
  405ae0:	f103 30ff 	add.w	r0, r3, #4294967295
  405ae4:	d222      	bcs.n	405b2c <__udivdi3+0x274>
  405ae6:	428a      	cmp	r2, r1
  405ae8:	d920      	bls.n	405b2c <__udivdi3+0x274>
  405aea:	3b02      	subs	r3, #2
  405aec:	4421      	add	r1, r4
  405aee:	1a89      	subs	r1, r1, r2
  405af0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  405af4:	e749      	b.n	40598a <__udivdi3+0xd2>
  405af6:	463a      	mov	r2, r7
  405af8:	e70c      	b.n	405914 <__udivdi3+0x5c>
  405afa:	4633      	mov	r3, r6
  405afc:	e71f      	b.n	40593e <__udivdi3+0x86>
  405afe:	460a      	mov	r2, r1
  405b00:	e76b      	b.n	4059da <__udivdi3+0x122>
  405b02:	40b0      	lsls	r0, r6
  405b04:	4290      	cmp	r0, r2
  405b06:	d2b6      	bcs.n	405a76 <__udivdi3+0x1be>
  405b08:	f10c 32ff 	add.w	r2, ip, #4294967295
  405b0c:	2300      	movs	r3, #0
  405b0e:	e719      	b.n	405944 <__udivdi3+0x8c>
  405b10:	4633      	mov	r3, r6
  405b12:	4632      	mov	r2, r6
  405b14:	e716      	b.n	405944 <__udivdi3+0x8c>
  405b16:	4599      	cmp	r9, r3
  405b18:	d98f      	bls.n	405a3a <__udivdi3+0x182>
  405b1a:	f1ac 0c02 	sub.w	ip, ip, #2
  405b1e:	4423      	add	r3, r4
  405b20:	e78c      	b.n	405a3c <__udivdi3+0x184>
  405b22:	45b8      	cmp	r8, r7
  405b24:	d99b      	bls.n	405a5e <__udivdi3+0x1a6>
  405b26:	3d02      	subs	r5, #2
  405b28:	4427      	add	r7, r4
  405b2a:	e799      	b.n	405a60 <__udivdi3+0x1a8>
  405b2c:	4603      	mov	r3, r0
  405b2e:	e7de      	b.n	405aee <__udivdi3+0x236>
  405b30:	4690      	mov	r8, r2
  405b32:	e7c7      	b.n	405ac4 <__udivdi3+0x20c>
  405b34:	3802      	subs	r0, #2
  405b36:	4421      	add	r1, r4
  405b38:	e73a      	b.n	4059b0 <__udivdi3+0xf8>
  405b3a:	bf00      	nop

00405b3c <__libc_init_array>:
  405b3c:	b570      	push	{r4, r5, r6, lr}
  405b3e:	4e0f      	ldr	r6, [pc, #60]	; (405b7c <__libc_init_array+0x40>)
  405b40:	4d0f      	ldr	r5, [pc, #60]	; (405b80 <__libc_init_array+0x44>)
  405b42:	1b76      	subs	r6, r6, r5
  405b44:	10b6      	asrs	r6, r6, #2
  405b46:	d007      	beq.n	405b58 <__libc_init_array+0x1c>
  405b48:	3d04      	subs	r5, #4
  405b4a:	2400      	movs	r4, #0
  405b4c:	3401      	adds	r4, #1
  405b4e:	f855 3f04 	ldr.w	r3, [r5, #4]!
  405b52:	4798      	blx	r3
  405b54:	42a6      	cmp	r6, r4
  405b56:	d1f9      	bne.n	405b4c <__libc_init_array+0x10>
  405b58:	4e0a      	ldr	r6, [pc, #40]	; (405b84 <__libc_init_array+0x48>)
  405b5a:	4d0b      	ldr	r5, [pc, #44]	; (405b88 <__libc_init_array+0x4c>)
  405b5c:	1b76      	subs	r6, r6, r5
  405b5e:	f001 f905 	bl	406d6c <_init>
  405b62:	10b6      	asrs	r6, r6, #2
  405b64:	d008      	beq.n	405b78 <__libc_init_array+0x3c>
  405b66:	3d04      	subs	r5, #4
  405b68:	2400      	movs	r4, #0
  405b6a:	3401      	adds	r4, #1
  405b6c:	f855 3f04 	ldr.w	r3, [r5, #4]!
  405b70:	4798      	blx	r3
  405b72:	42a6      	cmp	r6, r4
  405b74:	d1f9      	bne.n	405b6a <__libc_init_array+0x2e>
  405b76:	bd70      	pop	{r4, r5, r6, pc}
  405b78:	bd70      	pop	{r4, r5, r6, pc}
  405b7a:	bf00      	nop
  405b7c:	00406d78 	.word	0x00406d78
  405b80:	00406d78 	.word	0x00406d78
  405b84:	00406d80 	.word	0x00406d80
  405b88:	00406d78 	.word	0x00406d78

00405b8c <malloc>:
  405b8c:	4b02      	ldr	r3, [pc, #8]	; (405b98 <malloc+0xc>)
  405b8e:	4601      	mov	r1, r0
  405b90:	6818      	ldr	r0, [r3, #0]
  405b92:	f000 b803 	b.w	405b9c <_malloc_r>
  405b96:	bf00      	nop
  405b98:	20000678 	.word	0x20000678

00405b9c <_malloc_r>:
  405b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405ba0:	f101 050b 	add.w	r5, r1, #11
  405ba4:	2d16      	cmp	r5, #22
  405ba6:	b083      	sub	sp, #12
  405ba8:	4606      	mov	r6, r0
  405baa:	d927      	bls.n	405bfc <_malloc_r+0x60>
  405bac:	f035 0507 	bics.w	r5, r5, #7
  405bb0:	d427      	bmi.n	405c02 <_malloc_r+0x66>
  405bb2:	42a9      	cmp	r1, r5
  405bb4:	d825      	bhi.n	405c02 <_malloc_r+0x66>
  405bb6:	4630      	mov	r0, r6
  405bb8:	f000 fb70 	bl	40629c <__malloc_lock>
  405bbc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  405bc0:	d226      	bcs.n	405c10 <_malloc_r+0x74>
  405bc2:	4fc1      	ldr	r7, [pc, #772]	; (405ec8 <_malloc_r+0x32c>)
  405bc4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  405bc8:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  405bcc:	68dc      	ldr	r4, [r3, #12]
  405bce:	429c      	cmp	r4, r3
  405bd0:	f000 81d2 	beq.w	405f78 <_malloc_r+0x3dc>
  405bd4:	6863      	ldr	r3, [r4, #4]
  405bd6:	68e2      	ldr	r2, [r4, #12]
  405bd8:	68a1      	ldr	r1, [r4, #8]
  405bda:	f023 0303 	bic.w	r3, r3, #3
  405bde:	4423      	add	r3, r4
  405be0:	4630      	mov	r0, r6
  405be2:	685d      	ldr	r5, [r3, #4]
  405be4:	60ca      	str	r2, [r1, #12]
  405be6:	f045 0501 	orr.w	r5, r5, #1
  405bea:	6091      	str	r1, [r2, #8]
  405bec:	605d      	str	r5, [r3, #4]
  405bee:	f000 fb57 	bl	4062a0 <__malloc_unlock>
  405bf2:	3408      	adds	r4, #8
  405bf4:	4620      	mov	r0, r4
  405bf6:	b003      	add	sp, #12
  405bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bfc:	2510      	movs	r5, #16
  405bfe:	42a9      	cmp	r1, r5
  405c00:	d9d9      	bls.n	405bb6 <_malloc_r+0x1a>
  405c02:	2400      	movs	r4, #0
  405c04:	230c      	movs	r3, #12
  405c06:	4620      	mov	r0, r4
  405c08:	6033      	str	r3, [r6, #0]
  405c0a:	b003      	add	sp, #12
  405c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c10:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  405c14:	f000 808a 	beq.w	405d2c <_malloc_r+0x190>
  405c18:	f1bc 0f04 	cmp.w	ip, #4
  405c1c:	f200 8160 	bhi.w	405ee0 <_malloc_r+0x344>
  405c20:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  405c24:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  405c28:	ea4f 014c 	mov.w	r1, ip, lsl #1
  405c2c:	4fa6      	ldr	r7, [pc, #664]	; (405ec8 <_malloc_r+0x32c>)
  405c2e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  405c32:	68cc      	ldr	r4, [r1, #12]
  405c34:	42a1      	cmp	r1, r4
  405c36:	d105      	bne.n	405c44 <_malloc_r+0xa8>
  405c38:	e00c      	b.n	405c54 <_malloc_r+0xb8>
  405c3a:	2b00      	cmp	r3, #0
  405c3c:	da7a      	bge.n	405d34 <_malloc_r+0x198>
  405c3e:	68e4      	ldr	r4, [r4, #12]
  405c40:	42a1      	cmp	r1, r4
  405c42:	d007      	beq.n	405c54 <_malloc_r+0xb8>
  405c44:	6862      	ldr	r2, [r4, #4]
  405c46:	f022 0203 	bic.w	r2, r2, #3
  405c4a:	1b53      	subs	r3, r2, r5
  405c4c:	2b0f      	cmp	r3, #15
  405c4e:	ddf4      	ble.n	405c3a <_malloc_r+0x9e>
  405c50:	f10c 3cff 	add.w	ip, ip, #4294967295
  405c54:	f10c 0c01 	add.w	ip, ip, #1
  405c58:	4b9b      	ldr	r3, [pc, #620]	; (405ec8 <_malloc_r+0x32c>)
  405c5a:	693c      	ldr	r4, [r7, #16]
  405c5c:	f103 0e08 	add.w	lr, r3, #8
  405c60:	4574      	cmp	r4, lr
  405c62:	f000 817e 	beq.w	405f62 <_malloc_r+0x3c6>
  405c66:	6861      	ldr	r1, [r4, #4]
  405c68:	f021 0103 	bic.w	r1, r1, #3
  405c6c:	1b4a      	subs	r2, r1, r5
  405c6e:	2a0f      	cmp	r2, #15
  405c70:	f300 8164 	bgt.w	405f3c <_malloc_r+0x3a0>
  405c74:	2a00      	cmp	r2, #0
  405c76:	f8c3 e014 	str.w	lr, [r3, #20]
  405c7a:	f8c3 e010 	str.w	lr, [r3, #16]
  405c7e:	da6a      	bge.n	405d56 <_malloc_r+0x1ba>
  405c80:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  405c84:	f080 813a 	bcs.w	405efc <_malloc_r+0x360>
  405c88:	08c9      	lsrs	r1, r1, #3
  405c8a:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  405c8e:	ea4f 08a1 	mov.w	r8, r1, asr #2
  405c92:	685a      	ldr	r2, [r3, #4]
  405c94:	6881      	ldr	r1, [r0, #8]
  405c96:	60a1      	str	r1, [r4, #8]
  405c98:	f04f 0901 	mov.w	r9, #1
  405c9c:	fa09 f808 	lsl.w	r8, r9, r8
  405ca0:	ea48 0202 	orr.w	r2, r8, r2
  405ca4:	60e0      	str	r0, [r4, #12]
  405ca6:	605a      	str	r2, [r3, #4]
  405ca8:	6084      	str	r4, [r0, #8]
  405caa:	60cc      	str	r4, [r1, #12]
  405cac:	ea4f 03ac 	mov.w	r3, ip, asr #2
  405cb0:	2001      	movs	r0, #1
  405cb2:	4098      	lsls	r0, r3
  405cb4:	4290      	cmp	r0, r2
  405cb6:	d85b      	bhi.n	405d70 <_malloc_r+0x1d4>
  405cb8:	4202      	tst	r2, r0
  405cba:	d106      	bne.n	405cca <_malloc_r+0x12e>
  405cbc:	f02c 0c03 	bic.w	ip, ip, #3
  405cc0:	0040      	lsls	r0, r0, #1
  405cc2:	4202      	tst	r2, r0
  405cc4:	f10c 0c04 	add.w	ip, ip, #4
  405cc8:	d0fa      	beq.n	405cc0 <_malloc_r+0x124>
  405cca:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  405cce:	4644      	mov	r4, r8
  405cd0:	46e1      	mov	r9, ip
  405cd2:	68e3      	ldr	r3, [r4, #12]
  405cd4:	429c      	cmp	r4, r3
  405cd6:	d107      	bne.n	405ce8 <_malloc_r+0x14c>
  405cd8:	e145      	b.n	405f66 <_malloc_r+0x3ca>
  405cda:	2a00      	cmp	r2, #0
  405cdc:	f280 8156 	bge.w	405f8c <_malloc_r+0x3f0>
  405ce0:	68db      	ldr	r3, [r3, #12]
  405ce2:	429c      	cmp	r4, r3
  405ce4:	f000 813f 	beq.w	405f66 <_malloc_r+0x3ca>
  405ce8:	6859      	ldr	r1, [r3, #4]
  405cea:	f021 0103 	bic.w	r1, r1, #3
  405cee:	1b4a      	subs	r2, r1, r5
  405cf0:	2a0f      	cmp	r2, #15
  405cf2:	ddf2      	ble.n	405cda <_malloc_r+0x13e>
  405cf4:	461c      	mov	r4, r3
  405cf6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405cfa:	f854 8f08 	ldr.w	r8, [r4, #8]!
  405cfe:	1959      	adds	r1, r3, r5
  405d00:	f045 0901 	orr.w	r9, r5, #1
  405d04:	f042 0501 	orr.w	r5, r2, #1
  405d08:	f8c3 9004 	str.w	r9, [r3, #4]
  405d0c:	4630      	mov	r0, r6
  405d0e:	f8c8 c00c 	str.w	ip, [r8, #12]
  405d12:	f8cc 8008 	str.w	r8, [ip, #8]
  405d16:	6179      	str	r1, [r7, #20]
  405d18:	6139      	str	r1, [r7, #16]
  405d1a:	f8c1 e00c 	str.w	lr, [r1, #12]
  405d1e:	f8c1 e008 	str.w	lr, [r1, #8]
  405d22:	604d      	str	r5, [r1, #4]
  405d24:	508a      	str	r2, [r1, r2]
  405d26:	f000 fabb 	bl	4062a0 <__malloc_unlock>
  405d2a:	e763      	b.n	405bf4 <_malloc_r+0x58>
  405d2c:	217e      	movs	r1, #126	; 0x7e
  405d2e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  405d32:	e77b      	b.n	405c2c <_malloc_r+0x90>
  405d34:	4422      	add	r2, r4
  405d36:	68e3      	ldr	r3, [r4, #12]
  405d38:	6850      	ldr	r0, [r2, #4]
  405d3a:	68a1      	ldr	r1, [r4, #8]
  405d3c:	f040 0501 	orr.w	r5, r0, #1
  405d40:	60cb      	str	r3, [r1, #12]
  405d42:	4630      	mov	r0, r6
  405d44:	6099      	str	r1, [r3, #8]
  405d46:	6055      	str	r5, [r2, #4]
  405d48:	f000 faaa 	bl	4062a0 <__malloc_unlock>
  405d4c:	3408      	adds	r4, #8
  405d4e:	4620      	mov	r0, r4
  405d50:	b003      	add	sp, #12
  405d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d56:	4421      	add	r1, r4
  405d58:	4630      	mov	r0, r6
  405d5a:	684b      	ldr	r3, [r1, #4]
  405d5c:	f043 0301 	orr.w	r3, r3, #1
  405d60:	604b      	str	r3, [r1, #4]
  405d62:	f000 fa9d 	bl	4062a0 <__malloc_unlock>
  405d66:	3408      	adds	r4, #8
  405d68:	4620      	mov	r0, r4
  405d6a:	b003      	add	sp, #12
  405d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d70:	68bc      	ldr	r4, [r7, #8]
  405d72:	6863      	ldr	r3, [r4, #4]
  405d74:	f023 0903 	bic.w	r9, r3, #3
  405d78:	45a9      	cmp	r9, r5
  405d7a:	d304      	bcc.n	405d86 <_malloc_r+0x1ea>
  405d7c:	ebc5 0309 	rsb	r3, r5, r9
  405d80:	2b0f      	cmp	r3, #15
  405d82:	f300 8091 	bgt.w	405ea8 <_malloc_r+0x30c>
  405d86:	4b51      	ldr	r3, [pc, #324]	; (405ecc <_malloc_r+0x330>)
  405d88:	4a51      	ldr	r2, [pc, #324]	; (405ed0 <_malloc_r+0x334>)
  405d8a:	6819      	ldr	r1, [r3, #0]
  405d8c:	6813      	ldr	r3, [r2, #0]
  405d8e:	3301      	adds	r3, #1
  405d90:	eb05 0a01 	add.w	sl, r5, r1
  405d94:	eb04 0b09 	add.w	fp, r4, r9
  405d98:	f000 8161 	beq.w	40605e <_malloc_r+0x4c2>
  405d9c:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  405da0:	f10a 0a0f 	add.w	sl, sl, #15
  405da4:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  405da8:	f02a 0a0f 	bic.w	sl, sl, #15
  405dac:	4630      	mov	r0, r6
  405dae:	4651      	mov	r1, sl
  405db0:	9201      	str	r2, [sp, #4]
  405db2:	f000 fa77 	bl	4062a4 <_sbrk_r>
  405db6:	f1b0 3fff 	cmp.w	r0, #4294967295
  405dba:	4680      	mov	r8, r0
  405dbc:	9a01      	ldr	r2, [sp, #4]
  405dbe:	f000 8100 	beq.w	405fc2 <_malloc_r+0x426>
  405dc2:	4583      	cmp	fp, r0
  405dc4:	f200 80fa 	bhi.w	405fbc <_malloc_r+0x420>
  405dc8:	f8df c110 	ldr.w	ip, [pc, #272]	; 405edc <_malloc_r+0x340>
  405dcc:	f8dc 3000 	ldr.w	r3, [ip]
  405dd0:	45c3      	cmp	fp, r8
  405dd2:	4453      	add	r3, sl
  405dd4:	f8cc 3000 	str.w	r3, [ip]
  405dd8:	f000 814a 	beq.w	406070 <_malloc_r+0x4d4>
  405ddc:	6812      	ldr	r2, [r2, #0]
  405dde:	493c      	ldr	r1, [pc, #240]	; (405ed0 <_malloc_r+0x334>)
  405de0:	3201      	adds	r2, #1
  405de2:	bf1b      	ittet	ne
  405de4:	ebcb 0b08 	rsbne	fp, fp, r8
  405de8:	445b      	addne	r3, fp
  405dea:	f8c1 8000 	streq.w	r8, [r1]
  405dee:	f8cc 3000 	strne.w	r3, [ip]
  405df2:	f018 0307 	ands.w	r3, r8, #7
  405df6:	f000 8113 	beq.w	406020 <_malloc_r+0x484>
  405dfa:	f1c3 0208 	rsb	r2, r3, #8
  405dfe:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  405e02:	4490      	add	r8, r2
  405e04:	3308      	adds	r3, #8
  405e06:	44c2      	add	sl, r8
  405e08:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  405e0c:	ebca 0a03 	rsb	sl, sl, r3
  405e10:	4651      	mov	r1, sl
  405e12:	4630      	mov	r0, r6
  405e14:	f8cd c004 	str.w	ip, [sp, #4]
  405e18:	f000 fa44 	bl	4062a4 <_sbrk_r>
  405e1c:	1c43      	adds	r3, r0, #1
  405e1e:	f8dd c004 	ldr.w	ip, [sp, #4]
  405e22:	f000 8135 	beq.w	406090 <_malloc_r+0x4f4>
  405e26:	ebc8 0200 	rsb	r2, r8, r0
  405e2a:	4452      	add	r2, sl
  405e2c:	f042 0201 	orr.w	r2, r2, #1
  405e30:	f8dc 3000 	ldr.w	r3, [ip]
  405e34:	f8c7 8008 	str.w	r8, [r7, #8]
  405e38:	4453      	add	r3, sl
  405e3a:	42bc      	cmp	r4, r7
  405e3c:	f8c8 2004 	str.w	r2, [r8, #4]
  405e40:	f8cc 3000 	str.w	r3, [ip]
  405e44:	f8df a094 	ldr.w	sl, [pc, #148]	; 405edc <_malloc_r+0x340>
  405e48:	d015      	beq.n	405e76 <_malloc_r+0x2da>
  405e4a:	f1b9 0f0f 	cmp.w	r9, #15
  405e4e:	f240 80ea 	bls.w	406026 <_malloc_r+0x48a>
  405e52:	6861      	ldr	r1, [r4, #4]
  405e54:	f1a9 020c 	sub.w	r2, r9, #12
  405e58:	f022 0207 	bic.w	r2, r2, #7
  405e5c:	f001 0e01 	and.w	lr, r1, #1
  405e60:	18a1      	adds	r1, r4, r2
  405e62:	2005      	movs	r0, #5
  405e64:	ea42 0e0e 	orr.w	lr, r2, lr
  405e68:	2a0f      	cmp	r2, #15
  405e6a:	f8c4 e004 	str.w	lr, [r4, #4]
  405e6e:	6048      	str	r0, [r1, #4]
  405e70:	6088      	str	r0, [r1, #8]
  405e72:	f200 8111 	bhi.w	406098 <_malloc_r+0x4fc>
  405e76:	4a17      	ldr	r2, [pc, #92]	; (405ed4 <_malloc_r+0x338>)
  405e78:	68bc      	ldr	r4, [r7, #8]
  405e7a:	6811      	ldr	r1, [r2, #0]
  405e7c:	428b      	cmp	r3, r1
  405e7e:	bf88      	it	hi
  405e80:	6013      	strhi	r3, [r2, #0]
  405e82:	4a15      	ldr	r2, [pc, #84]	; (405ed8 <_malloc_r+0x33c>)
  405e84:	6811      	ldr	r1, [r2, #0]
  405e86:	428b      	cmp	r3, r1
  405e88:	bf88      	it	hi
  405e8a:	6013      	strhi	r3, [r2, #0]
  405e8c:	6862      	ldr	r2, [r4, #4]
  405e8e:	f022 0203 	bic.w	r2, r2, #3
  405e92:	4295      	cmp	r5, r2
  405e94:	ebc5 0302 	rsb	r3, r5, r2
  405e98:	d801      	bhi.n	405e9e <_malloc_r+0x302>
  405e9a:	2b0f      	cmp	r3, #15
  405e9c:	dc04      	bgt.n	405ea8 <_malloc_r+0x30c>
  405e9e:	4630      	mov	r0, r6
  405ea0:	f000 f9fe 	bl	4062a0 <__malloc_unlock>
  405ea4:	2400      	movs	r4, #0
  405ea6:	e6a5      	b.n	405bf4 <_malloc_r+0x58>
  405ea8:	1962      	adds	r2, r4, r5
  405eaa:	f043 0301 	orr.w	r3, r3, #1
  405eae:	f045 0501 	orr.w	r5, r5, #1
  405eb2:	6065      	str	r5, [r4, #4]
  405eb4:	4630      	mov	r0, r6
  405eb6:	60ba      	str	r2, [r7, #8]
  405eb8:	6053      	str	r3, [r2, #4]
  405eba:	f000 f9f1 	bl	4062a0 <__malloc_unlock>
  405ebe:	3408      	adds	r4, #8
  405ec0:	4620      	mov	r0, r4
  405ec2:	b003      	add	sp, #12
  405ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ec8:	2000067c 	.word	0x2000067c
  405ecc:	200010d4 	.word	0x200010d4
  405ed0:	20000a88 	.word	0x20000a88
  405ed4:	200010d0 	.word	0x200010d0
  405ed8:	200010cc 	.word	0x200010cc
  405edc:	200010d8 	.word	0x200010d8
  405ee0:	f1bc 0f14 	cmp.w	ip, #20
  405ee4:	d961      	bls.n	405faa <_malloc_r+0x40e>
  405ee6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  405eea:	f200 808f 	bhi.w	40600c <_malloc_r+0x470>
  405eee:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  405ef2:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  405ef6:	ea4f 014c 	mov.w	r1, ip, lsl #1
  405efa:	e697      	b.n	405c2c <_malloc_r+0x90>
  405efc:	0a4b      	lsrs	r3, r1, #9
  405efe:	2b04      	cmp	r3, #4
  405f00:	d958      	bls.n	405fb4 <_malloc_r+0x418>
  405f02:	2b14      	cmp	r3, #20
  405f04:	f200 80ae 	bhi.w	406064 <_malloc_r+0x4c8>
  405f08:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  405f0c:	0050      	lsls	r0, r2, #1
  405f0e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  405f12:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 4060d0 <_malloc_r+0x534>
  405f16:	6883      	ldr	r3, [r0, #8]
  405f18:	4283      	cmp	r3, r0
  405f1a:	f000 808a 	beq.w	406032 <_malloc_r+0x496>
  405f1e:	685a      	ldr	r2, [r3, #4]
  405f20:	f022 0203 	bic.w	r2, r2, #3
  405f24:	4291      	cmp	r1, r2
  405f26:	d202      	bcs.n	405f2e <_malloc_r+0x392>
  405f28:	689b      	ldr	r3, [r3, #8]
  405f2a:	4298      	cmp	r0, r3
  405f2c:	d1f7      	bne.n	405f1e <_malloc_r+0x382>
  405f2e:	68d9      	ldr	r1, [r3, #12]
  405f30:	687a      	ldr	r2, [r7, #4]
  405f32:	60e1      	str	r1, [r4, #12]
  405f34:	60a3      	str	r3, [r4, #8]
  405f36:	608c      	str	r4, [r1, #8]
  405f38:	60dc      	str	r4, [r3, #12]
  405f3a:	e6b7      	b.n	405cac <_malloc_r+0x110>
  405f3c:	1961      	adds	r1, r4, r5
  405f3e:	f042 0701 	orr.w	r7, r2, #1
  405f42:	f045 0501 	orr.w	r5, r5, #1
  405f46:	6065      	str	r5, [r4, #4]
  405f48:	4630      	mov	r0, r6
  405f4a:	6159      	str	r1, [r3, #20]
  405f4c:	6119      	str	r1, [r3, #16]
  405f4e:	f8c1 e00c 	str.w	lr, [r1, #12]
  405f52:	f8c1 e008 	str.w	lr, [r1, #8]
  405f56:	604f      	str	r7, [r1, #4]
  405f58:	508a      	str	r2, [r1, r2]
  405f5a:	3408      	adds	r4, #8
  405f5c:	f000 f9a0 	bl	4062a0 <__malloc_unlock>
  405f60:	e648      	b.n	405bf4 <_malloc_r+0x58>
  405f62:	685a      	ldr	r2, [r3, #4]
  405f64:	e6a2      	b.n	405cac <_malloc_r+0x110>
  405f66:	f109 0901 	add.w	r9, r9, #1
  405f6a:	f019 0f03 	tst.w	r9, #3
  405f6e:	f104 0408 	add.w	r4, r4, #8
  405f72:	f47f aeae 	bne.w	405cd2 <_malloc_r+0x136>
  405f76:	e02d      	b.n	405fd4 <_malloc_r+0x438>
  405f78:	f104 0308 	add.w	r3, r4, #8
  405f7c:	6964      	ldr	r4, [r4, #20]
  405f7e:	42a3      	cmp	r3, r4
  405f80:	bf08      	it	eq
  405f82:	f10c 0c02 	addeq.w	ip, ip, #2
  405f86:	f43f ae67 	beq.w	405c58 <_malloc_r+0xbc>
  405f8a:	e623      	b.n	405bd4 <_malloc_r+0x38>
  405f8c:	4419      	add	r1, r3
  405f8e:	461c      	mov	r4, r3
  405f90:	6848      	ldr	r0, [r1, #4]
  405f92:	68db      	ldr	r3, [r3, #12]
  405f94:	f854 2f08 	ldr.w	r2, [r4, #8]!
  405f98:	f040 0501 	orr.w	r5, r0, #1
  405f9c:	604d      	str	r5, [r1, #4]
  405f9e:	4630      	mov	r0, r6
  405fa0:	60d3      	str	r3, [r2, #12]
  405fa2:	609a      	str	r2, [r3, #8]
  405fa4:	f000 f97c 	bl	4062a0 <__malloc_unlock>
  405fa8:	e624      	b.n	405bf4 <_malloc_r+0x58>
  405faa:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  405fae:	ea4f 014c 	mov.w	r1, ip, lsl #1
  405fb2:	e63b      	b.n	405c2c <_malloc_r+0x90>
  405fb4:	098a      	lsrs	r2, r1, #6
  405fb6:	3238      	adds	r2, #56	; 0x38
  405fb8:	0050      	lsls	r0, r2, #1
  405fba:	e7a8      	b.n	405f0e <_malloc_r+0x372>
  405fbc:	42bc      	cmp	r4, r7
  405fbe:	f43f af03 	beq.w	405dc8 <_malloc_r+0x22c>
  405fc2:	68bc      	ldr	r4, [r7, #8]
  405fc4:	6862      	ldr	r2, [r4, #4]
  405fc6:	f022 0203 	bic.w	r2, r2, #3
  405fca:	e762      	b.n	405e92 <_malloc_r+0x2f6>
  405fcc:	f8d8 8000 	ldr.w	r8, [r8]
  405fd0:	4598      	cmp	r8, r3
  405fd2:	d17b      	bne.n	4060cc <_malloc_r+0x530>
  405fd4:	f01c 0f03 	tst.w	ip, #3
  405fd8:	f1a8 0308 	sub.w	r3, r8, #8
  405fdc:	f10c 3cff 	add.w	ip, ip, #4294967295
  405fe0:	d1f4      	bne.n	405fcc <_malloc_r+0x430>
  405fe2:	687b      	ldr	r3, [r7, #4]
  405fe4:	ea23 0300 	bic.w	r3, r3, r0
  405fe8:	607b      	str	r3, [r7, #4]
  405fea:	0040      	lsls	r0, r0, #1
  405fec:	4298      	cmp	r0, r3
  405fee:	f63f aebf 	bhi.w	405d70 <_malloc_r+0x1d4>
  405ff2:	2800      	cmp	r0, #0
  405ff4:	f43f aebc 	beq.w	405d70 <_malloc_r+0x1d4>
  405ff8:	4203      	tst	r3, r0
  405ffa:	46cc      	mov	ip, r9
  405ffc:	f47f ae65 	bne.w	405cca <_malloc_r+0x12e>
  406000:	0040      	lsls	r0, r0, #1
  406002:	4203      	tst	r3, r0
  406004:	f10c 0c04 	add.w	ip, ip, #4
  406008:	d0fa      	beq.n	406000 <_malloc_r+0x464>
  40600a:	e65e      	b.n	405cca <_malloc_r+0x12e>
  40600c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  406010:	d81a      	bhi.n	406048 <_malloc_r+0x4ac>
  406012:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  406016:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  40601a:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40601e:	e605      	b.n	405c2c <_malloc_r+0x90>
  406020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  406024:	e6ef      	b.n	405e06 <_malloc_r+0x26a>
  406026:	2301      	movs	r3, #1
  406028:	f8c8 3004 	str.w	r3, [r8, #4]
  40602c:	4644      	mov	r4, r8
  40602e:	2200      	movs	r2, #0
  406030:	e72f      	b.n	405e92 <_malloc_r+0x2f6>
  406032:	1091      	asrs	r1, r2, #2
  406034:	2001      	movs	r0, #1
  406036:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40603a:	fa00 f101 	lsl.w	r1, r0, r1
  40603e:	430a      	orrs	r2, r1
  406040:	f8c8 2004 	str.w	r2, [r8, #4]
  406044:	4619      	mov	r1, r3
  406046:	e774      	b.n	405f32 <_malloc_r+0x396>
  406048:	f240 5354 	movw	r3, #1364	; 0x554
  40604c:	459c      	cmp	ip, r3
  40604e:	d81b      	bhi.n	406088 <_malloc_r+0x4ec>
  406050:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  406054:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  406058:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40605c:	e5e6      	b.n	405c2c <_malloc_r+0x90>
  40605e:	f10a 0a10 	add.w	sl, sl, #16
  406062:	e6a3      	b.n	405dac <_malloc_r+0x210>
  406064:	2b54      	cmp	r3, #84	; 0x54
  406066:	d81f      	bhi.n	4060a8 <_malloc_r+0x50c>
  406068:	0b0a      	lsrs	r2, r1, #12
  40606a:	326e      	adds	r2, #110	; 0x6e
  40606c:	0050      	lsls	r0, r2, #1
  40606e:	e74e      	b.n	405f0e <_malloc_r+0x372>
  406070:	f3cb 010b 	ubfx	r1, fp, #0, #12
  406074:	2900      	cmp	r1, #0
  406076:	f47f aeb1 	bne.w	405ddc <_malloc_r+0x240>
  40607a:	eb0a 0109 	add.w	r1, sl, r9
  40607e:	68ba      	ldr	r2, [r7, #8]
  406080:	f041 0101 	orr.w	r1, r1, #1
  406084:	6051      	str	r1, [r2, #4]
  406086:	e6f6      	b.n	405e76 <_malloc_r+0x2da>
  406088:	21fc      	movs	r1, #252	; 0xfc
  40608a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40608e:	e5cd      	b.n	405c2c <_malloc_r+0x90>
  406090:	2201      	movs	r2, #1
  406092:	f04f 0a00 	mov.w	sl, #0
  406096:	e6cb      	b.n	405e30 <_malloc_r+0x294>
  406098:	f104 0108 	add.w	r1, r4, #8
  40609c:	4630      	mov	r0, r6
  40609e:	f000 f9eb 	bl	406478 <_free_r>
  4060a2:	f8da 3000 	ldr.w	r3, [sl]
  4060a6:	e6e6      	b.n	405e76 <_malloc_r+0x2da>
  4060a8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4060ac:	d803      	bhi.n	4060b6 <_malloc_r+0x51a>
  4060ae:	0bca      	lsrs	r2, r1, #15
  4060b0:	3277      	adds	r2, #119	; 0x77
  4060b2:	0050      	lsls	r0, r2, #1
  4060b4:	e72b      	b.n	405f0e <_malloc_r+0x372>
  4060b6:	f240 5254 	movw	r2, #1364	; 0x554
  4060ba:	4293      	cmp	r3, r2
  4060bc:	d803      	bhi.n	4060c6 <_malloc_r+0x52a>
  4060be:	0c8a      	lsrs	r2, r1, #18
  4060c0:	327c      	adds	r2, #124	; 0x7c
  4060c2:	0050      	lsls	r0, r2, #1
  4060c4:	e723      	b.n	405f0e <_malloc_r+0x372>
  4060c6:	20fc      	movs	r0, #252	; 0xfc
  4060c8:	227e      	movs	r2, #126	; 0x7e
  4060ca:	e720      	b.n	405f0e <_malloc_r+0x372>
  4060cc:	687b      	ldr	r3, [r7, #4]
  4060ce:	e78c      	b.n	405fea <_malloc_r+0x44e>
  4060d0:	2000067c 	.word	0x2000067c

004060d4 <memcpy>:
  4060d4:	4684      	mov	ip, r0
  4060d6:	ea41 0300 	orr.w	r3, r1, r0
  4060da:	f013 0303 	ands.w	r3, r3, #3
  4060de:	d16d      	bne.n	4061bc <memcpy+0xe8>
  4060e0:	3a40      	subs	r2, #64	; 0x40
  4060e2:	d341      	bcc.n	406168 <memcpy+0x94>
  4060e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4060e8:	f840 3b04 	str.w	r3, [r0], #4
  4060ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4060f0:	f840 3b04 	str.w	r3, [r0], #4
  4060f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4060f8:	f840 3b04 	str.w	r3, [r0], #4
  4060fc:	f851 3b04 	ldr.w	r3, [r1], #4
  406100:	f840 3b04 	str.w	r3, [r0], #4
  406104:	f851 3b04 	ldr.w	r3, [r1], #4
  406108:	f840 3b04 	str.w	r3, [r0], #4
  40610c:	f851 3b04 	ldr.w	r3, [r1], #4
  406110:	f840 3b04 	str.w	r3, [r0], #4
  406114:	f851 3b04 	ldr.w	r3, [r1], #4
  406118:	f840 3b04 	str.w	r3, [r0], #4
  40611c:	f851 3b04 	ldr.w	r3, [r1], #4
  406120:	f840 3b04 	str.w	r3, [r0], #4
  406124:	f851 3b04 	ldr.w	r3, [r1], #4
  406128:	f840 3b04 	str.w	r3, [r0], #4
  40612c:	f851 3b04 	ldr.w	r3, [r1], #4
  406130:	f840 3b04 	str.w	r3, [r0], #4
  406134:	f851 3b04 	ldr.w	r3, [r1], #4
  406138:	f840 3b04 	str.w	r3, [r0], #4
  40613c:	f851 3b04 	ldr.w	r3, [r1], #4
  406140:	f840 3b04 	str.w	r3, [r0], #4
  406144:	f851 3b04 	ldr.w	r3, [r1], #4
  406148:	f840 3b04 	str.w	r3, [r0], #4
  40614c:	f851 3b04 	ldr.w	r3, [r1], #4
  406150:	f840 3b04 	str.w	r3, [r0], #4
  406154:	f851 3b04 	ldr.w	r3, [r1], #4
  406158:	f840 3b04 	str.w	r3, [r0], #4
  40615c:	f851 3b04 	ldr.w	r3, [r1], #4
  406160:	f840 3b04 	str.w	r3, [r0], #4
  406164:	3a40      	subs	r2, #64	; 0x40
  406166:	d2bd      	bcs.n	4060e4 <memcpy+0x10>
  406168:	3230      	adds	r2, #48	; 0x30
  40616a:	d311      	bcc.n	406190 <memcpy+0xbc>
  40616c:	f851 3b04 	ldr.w	r3, [r1], #4
  406170:	f840 3b04 	str.w	r3, [r0], #4
  406174:	f851 3b04 	ldr.w	r3, [r1], #4
  406178:	f840 3b04 	str.w	r3, [r0], #4
  40617c:	f851 3b04 	ldr.w	r3, [r1], #4
  406180:	f840 3b04 	str.w	r3, [r0], #4
  406184:	f851 3b04 	ldr.w	r3, [r1], #4
  406188:	f840 3b04 	str.w	r3, [r0], #4
  40618c:	3a10      	subs	r2, #16
  40618e:	d2ed      	bcs.n	40616c <memcpy+0x98>
  406190:	320c      	adds	r2, #12
  406192:	d305      	bcc.n	4061a0 <memcpy+0xcc>
  406194:	f851 3b04 	ldr.w	r3, [r1], #4
  406198:	f840 3b04 	str.w	r3, [r0], #4
  40619c:	3a04      	subs	r2, #4
  40619e:	d2f9      	bcs.n	406194 <memcpy+0xc0>
  4061a0:	3204      	adds	r2, #4
  4061a2:	d008      	beq.n	4061b6 <memcpy+0xe2>
  4061a4:	07d2      	lsls	r2, r2, #31
  4061a6:	bf1c      	itt	ne
  4061a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4061ac:	f800 3b01 	strbne.w	r3, [r0], #1
  4061b0:	d301      	bcc.n	4061b6 <memcpy+0xe2>
  4061b2:	880b      	ldrh	r3, [r1, #0]
  4061b4:	8003      	strh	r3, [r0, #0]
  4061b6:	4660      	mov	r0, ip
  4061b8:	4770      	bx	lr
  4061ba:	bf00      	nop
  4061bc:	2a08      	cmp	r2, #8
  4061be:	d313      	bcc.n	4061e8 <memcpy+0x114>
  4061c0:	078b      	lsls	r3, r1, #30
  4061c2:	d08d      	beq.n	4060e0 <memcpy+0xc>
  4061c4:	f010 0303 	ands.w	r3, r0, #3
  4061c8:	d08a      	beq.n	4060e0 <memcpy+0xc>
  4061ca:	f1c3 0304 	rsb	r3, r3, #4
  4061ce:	1ad2      	subs	r2, r2, r3
  4061d0:	07db      	lsls	r3, r3, #31
  4061d2:	bf1c      	itt	ne
  4061d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4061d8:	f800 3b01 	strbne.w	r3, [r0], #1
  4061dc:	d380      	bcc.n	4060e0 <memcpy+0xc>
  4061de:	f831 3b02 	ldrh.w	r3, [r1], #2
  4061e2:	f820 3b02 	strh.w	r3, [r0], #2
  4061e6:	e77b      	b.n	4060e0 <memcpy+0xc>
  4061e8:	3a04      	subs	r2, #4
  4061ea:	d3d9      	bcc.n	4061a0 <memcpy+0xcc>
  4061ec:	3a01      	subs	r2, #1
  4061ee:	f811 3b01 	ldrb.w	r3, [r1], #1
  4061f2:	f800 3b01 	strb.w	r3, [r0], #1
  4061f6:	d2f9      	bcs.n	4061ec <memcpy+0x118>
  4061f8:	780b      	ldrb	r3, [r1, #0]
  4061fa:	7003      	strb	r3, [r0, #0]
  4061fc:	784b      	ldrb	r3, [r1, #1]
  4061fe:	7043      	strb	r3, [r0, #1]
  406200:	788b      	ldrb	r3, [r1, #2]
  406202:	7083      	strb	r3, [r0, #2]
  406204:	4660      	mov	r0, ip
  406206:	4770      	bx	lr

00406208 <memset>:
  406208:	b4f0      	push	{r4, r5, r6, r7}
  40620a:	0784      	lsls	r4, r0, #30
  40620c:	d043      	beq.n	406296 <memset+0x8e>
  40620e:	1e54      	subs	r4, r2, #1
  406210:	2a00      	cmp	r2, #0
  406212:	d03e      	beq.n	406292 <memset+0x8a>
  406214:	b2cd      	uxtb	r5, r1
  406216:	4603      	mov	r3, r0
  406218:	e003      	b.n	406222 <memset+0x1a>
  40621a:	1e62      	subs	r2, r4, #1
  40621c:	2c00      	cmp	r4, #0
  40621e:	d038      	beq.n	406292 <memset+0x8a>
  406220:	4614      	mov	r4, r2
  406222:	f803 5b01 	strb.w	r5, [r3], #1
  406226:	079a      	lsls	r2, r3, #30
  406228:	d1f7      	bne.n	40621a <memset+0x12>
  40622a:	2c03      	cmp	r4, #3
  40622c:	d92a      	bls.n	406284 <memset+0x7c>
  40622e:	b2cd      	uxtb	r5, r1
  406230:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406234:	2c0f      	cmp	r4, #15
  406236:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40623a:	d915      	bls.n	406268 <memset+0x60>
  40623c:	f1a4 0710 	sub.w	r7, r4, #16
  406240:	093f      	lsrs	r7, r7, #4
  406242:	f103 0610 	add.w	r6, r3, #16
  406246:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  40624a:	461a      	mov	r2, r3
  40624c:	6015      	str	r5, [r2, #0]
  40624e:	6055      	str	r5, [r2, #4]
  406250:	6095      	str	r5, [r2, #8]
  406252:	60d5      	str	r5, [r2, #12]
  406254:	3210      	adds	r2, #16
  406256:	42b2      	cmp	r2, r6
  406258:	d1f8      	bne.n	40624c <memset+0x44>
  40625a:	f004 040f 	and.w	r4, r4, #15
  40625e:	3701      	adds	r7, #1
  406260:	2c03      	cmp	r4, #3
  406262:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  406266:	d90d      	bls.n	406284 <memset+0x7c>
  406268:	461e      	mov	r6, r3
  40626a:	4622      	mov	r2, r4
  40626c:	3a04      	subs	r2, #4
  40626e:	2a03      	cmp	r2, #3
  406270:	f846 5b04 	str.w	r5, [r6], #4
  406274:	d8fa      	bhi.n	40626c <memset+0x64>
  406276:	1f22      	subs	r2, r4, #4
  406278:	f022 0203 	bic.w	r2, r2, #3
  40627c:	3204      	adds	r2, #4
  40627e:	4413      	add	r3, r2
  406280:	f004 0403 	and.w	r4, r4, #3
  406284:	b12c      	cbz	r4, 406292 <memset+0x8a>
  406286:	b2c9      	uxtb	r1, r1
  406288:	441c      	add	r4, r3
  40628a:	f803 1b01 	strb.w	r1, [r3], #1
  40628e:	42a3      	cmp	r3, r4
  406290:	d1fb      	bne.n	40628a <memset+0x82>
  406292:	bcf0      	pop	{r4, r5, r6, r7}
  406294:	4770      	bx	lr
  406296:	4614      	mov	r4, r2
  406298:	4603      	mov	r3, r0
  40629a:	e7c6      	b.n	40622a <memset+0x22>

0040629c <__malloc_lock>:
  40629c:	4770      	bx	lr
  40629e:	bf00      	nop

004062a0 <__malloc_unlock>:
  4062a0:	4770      	bx	lr
  4062a2:	bf00      	nop

004062a4 <_sbrk_r>:
  4062a4:	b538      	push	{r3, r4, r5, lr}
  4062a6:	4c07      	ldr	r4, [pc, #28]	; (4062c4 <_sbrk_r+0x20>)
  4062a8:	2300      	movs	r3, #0
  4062aa:	4605      	mov	r5, r0
  4062ac:	4608      	mov	r0, r1
  4062ae:	6023      	str	r3, [r4, #0]
  4062b0:	f7ff f92a 	bl	405508 <_sbrk>
  4062b4:	1c43      	adds	r3, r0, #1
  4062b6:	d000      	beq.n	4062ba <_sbrk_r+0x16>
  4062b8:	bd38      	pop	{r3, r4, r5, pc}
  4062ba:	6823      	ldr	r3, [r4, #0]
  4062bc:	2b00      	cmp	r3, #0
  4062be:	d0fb      	beq.n	4062b8 <_sbrk_r+0x14>
  4062c0:	602b      	str	r3, [r5, #0]
  4062c2:	bd38      	pop	{r3, r4, r5, pc}
  4062c4:	200023b4 	.word	0x200023b4

004062c8 <strlen>:
  4062c8:	f020 0103 	bic.w	r1, r0, #3
  4062cc:	f010 0003 	ands.w	r0, r0, #3
  4062d0:	f1c0 0000 	rsb	r0, r0, #0
  4062d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4062d8:	f100 0c04 	add.w	ip, r0, #4
  4062dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4062e0:	f06f 0200 	mvn.w	r2, #0
  4062e4:	bf1c      	itt	ne
  4062e6:	fa22 f20c 	lsrne.w	r2, r2, ip
  4062ea:	4313      	orrne	r3, r2
  4062ec:	f04f 0c01 	mov.w	ip, #1
  4062f0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4062f4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4062f8:	eba3 020c 	sub.w	r2, r3, ip
  4062fc:	ea22 0203 	bic.w	r2, r2, r3
  406300:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  406304:	bf04      	itt	eq
  406306:	f851 3b04 	ldreq.w	r3, [r1], #4
  40630a:	3004      	addeq	r0, #4
  40630c:	d0f4      	beq.n	4062f8 <strlen+0x30>
  40630e:	f013 0fff 	tst.w	r3, #255	; 0xff
  406312:	bf1f      	itttt	ne
  406314:	3001      	addne	r0, #1
  406316:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  40631a:	3001      	addne	r0, #1
  40631c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  406320:	bf18      	it	ne
  406322:	3001      	addne	r0, #1
  406324:	4770      	bx	lr
  406326:	bf00      	nop

00406328 <strncpy>:
  406328:	ea40 0301 	orr.w	r3, r0, r1
  40632c:	079b      	lsls	r3, r3, #30
  40632e:	b470      	push	{r4, r5, r6}
  406330:	d12a      	bne.n	406388 <strncpy+0x60>
  406332:	2a03      	cmp	r2, #3
  406334:	d928      	bls.n	406388 <strncpy+0x60>
  406336:	460c      	mov	r4, r1
  406338:	4603      	mov	r3, r0
  40633a:	4621      	mov	r1, r4
  40633c:	f854 5b04 	ldr.w	r5, [r4], #4
  406340:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
  406344:	ea26 0605 	bic.w	r6, r6, r5
  406348:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
  40634c:	d105      	bne.n	40635a <strncpy+0x32>
  40634e:	3a04      	subs	r2, #4
  406350:	2a03      	cmp	r2, #3
  406352:	f843 5b04 	str.w	r5, [r3], #4
  406356:	4621      	mov	r1, r4
  406358:	d8ef      	bhi.n	40633a <strncpy+0x12>
  40635a:	b19a      	cbz	r2, 406384 <strncpy+0x5c>
  40635c:	780c      	ldrb	r4, [r1, #0]
  40635e:	701c      	strb	r4, [r3, #0]
  406360:	3a01      	subs	r2, #1
  406362:	3301      	adds	r3, #1
  406364:	b13c      	cbz	r4, 406376 <strncpy+0x4e>
  406366:	b16a      	cbz	r2, 406384 <strncpy+0x5c>
  406368:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  40636c:	f803 4b01 	strb.w	r4, [r3], #1
  406370:	3a01      	subs	r2, #1
  406372:	2c00      	cmp	r4, #0
  406374:	d1f7      	bne.n	406366 <strncpy+0x3e>
  406376:	b12a      	cbz	r2, 406384 <strncpy+0x5c>
  406378:	441a      	add	r2, r3
  40637a:	2100      	movs	r1, #0
  40637c:	f803 1b01 	strb.w	r1, [r3], #1
  406380:	4293      	cmp	r3, r2
  406382:	d1fb      	bne.n	40637c <strncpy+0x54>
  406384:	bc70      	pop	{r4, r5, r6}
  406386:	4770      	bx	lr
  406388:	4603      	mov	r3, r0
  40638a:	e7e6      	b.n	40635a <strncpy+0x32>

0040638c <register_fini>:
  40638c:	4b02      	ldr	r3, [pc, #8]	; (406398 <register_fini+0xc>)
  40638e:	b113      	cbz	r3, 406396 <register_fini+0xa>
  406390:	4802      	ldr	r0, [pc, #8]	; (40639c <register_fini+0x10>)
  406392:	f000 b805 	b.w	4063a0 <atexit>
  406396:	4770      	bx	lr
  406398:	00000000 	.word	0x00000000
  40639c:	004063ad 	.word	0x004063ad

004063a0 <atexit>:
  4063a0:	4601      	mov	r1, r0
  4063a2:	2000      	movs	r0, #0
  4063a4:	4602      	mov	r2, r0
  4063a6:	4603      	mov	r3, r0
  4063a8:	f000 b934 	b.w	406614 <__register_exitproc>

004063ac <__libc_fini_array>:
  4063ac:	b538      	push	{r3, r4, r5, lr}
  4063ae:	4d09      	ldr	r5, [pc, #36]	; (4063d4 <__libc_fini_array+0x28>)
  4063b0:	4c09      	ldr	r4, [pc, #36]	; (4063d8 <__libc_fini_array+0x2c>)
  4063b2:	1b64      	subs	r4, r4, r5
  4063b4:	10a4      	asrs	r4, r4, #2
  4063b6:	bf18      	it	ne
  4063b8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  4063bc:	d005      	beq.n	4063ca <__libc_fini_array+0x1e>
  4063be:	3c01      	subs	r4, #1
  4063c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4063c4:	4798      	blx	r3
  4063c6:	2c00      	cmp	r4, #0
  4063c8:	d1f9      	bne.n	4063be <__libc_fini_array+0x12>
  4063ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4063ce:	f000 bcd7 	b.w	406d80 <_fini>
  4063d2:	bf00      	nop
  4063d4:	00406d8c 	.word	0x00406d8c
  4063d8:	00406d90 	.word	0x00406d90

004063dc <_malloc_trim_r>:
  4063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4063de:	4d23      	ldr	r5, [pc, #140]	; (40646c <_malloc_trim_r+0x90>)
  4063e0:	460f      	mov	r7, r1
  4063e2:	4604      	mov	r4, r0
  4063e4:	f7ff ff5a 	bl	40629c <__malloc_lock>
  4063e8:	68ab      	ldr	r3, [r5, #8]
  4063ea:	685e      	ldr	r6, [r3, #4]
  4063ec:	f026 0603 	bic.w	r6, r6, #3
  4063f0:	1bf1      	subs	r1, r6, r7
  4063f2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4063f6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4063fa:	f021 010f 	bic.w	r1, r1, #15
  4063fe:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  406402:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  406406:	db07      	blt.n	406418 <_malloc_trim_r+0x3c>
  406408:	4620      	mov	r0, r4
  40640a:	2100      	movs	r1, #0
  40640c:	f7ff ff4a 	bl	4062a4 <_sbrk_r>
  406410:	68ab      	ldr	r3, [r5, #8]
  406412:	4433      	add	r3, r6
  406414:	4298      	cmp	r0, r3
  406416:	d004      	beq.n	406422 <_malloc_trim_r+0x46>
  406418:	4620      	mov	r0, r4
  40641a:	f7ff ff41 	bl	4062a0 <__malloc_unlock>
  40641e:	2000      	movs	r0, #0
  406420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406422:	4620      	mov	r0, r4
  406424:	4279      	negs	r1, r7
  406426:	f7ff ff3d 	bl	4062a4 <_sbrk_r>
  40642a:	3001      	adds	r0, #1
  40642c:	d00d      	beq.n	40644a <_malloc_trim_r+0x6e>
  40642e:	4b10      	ldr	r3, [pc, #64]	; (406470 <_malloc_trim_r+0x94>)
  406430:	68aa      	ldr	r2, [r5, #8]
  406432:	6819      	ldr	r1, [r3, #0]
  406434:	1bf6      	subs	r6, r6, r7
  406436:	f046 0601 	orr.w	r6, r6, #1
  40643a:	4620      	mov	r0, r4
  40643c:	1bc9      	subs	r1, r1, r7
  40643e:	6056      	str	r6, [r2, #4]
  406440:	6019      	str	r1, [r3, #0]
  406442:	f7ff ff2d 	bl	4062a0 <__malloc_unlock>
  406446:	2001      	movs	r0, #1
  406448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40644a:	4620      	mov	r0, r4
  40644c:	2100      	movs	r1, #0
  40644e:	f7ff ff29 	bl	4062a4 <_sbrk_r>
  406452:	68ab      	ldr	r3, [r5, #8]
  406454:	1ac2      	subs	r2, r0, r3
  406456:	2a0f      	cmp	r2, #15
  406458:	ddde      	ble.n	406418 <_malloc_trim_r+0x3c>
  40645a:	4d06      	ldr	r5, [pc, #24]	; (406474 <_malloc_trim_r+0x98>)
  40645c:	4904      	ldr	r1, [pc, #16]	; (406470 <_malloc_trim_r+0x94>)
  40645e:	682d      	ldr	r5, [r5, #0]
  406460:	f042 0201 	orr.w	r2, r2, #1
  406464:	1b40      	subs	r0, r0, r5
  406466:	605a      	str	r2, [r3, #4]
  406468:	6008      	str	r0, [r1, #0]
  40646a:	e7d5      	b.n	406418 <_malloc_trim_r+0x3c>
  40646c:	2000067c 	.word	0x2000067c
  406470:	200010d8 	.word	0x200010d8
  406474:	20000a88 	.word	0x20000a88

00406478 <_free_r>:
  406478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40647c:	460d      	mov	r5, r1
  40647e:	4606      	mov	r6, r0
  406480:	2900      	cmp	r1, #0
  406482:	d055      	beq.n	406530 <_free_r+0xb8>
  406484:	f7ff ff0a 	bl	40629c <__malloc_lock>
  406488:	f855 1c04 	ldr.w	r1, [r5, #-4]
  40648c:	f8df c174 	ldr.w	ip, [pc, #372]	; 406604 <_free_r+0x18c>
  406490:	f021 0301 	bic.w	r3, r1, #1
  406494:	f1a5 0408 	sub.w	r4, r5, #8
  406498:	18e2      	adds	r2, r4, r3
  40649a:	f8dc 0008 	ldr.w	r0, [ip, #8]
  40649e:	6857      	ldr	r7, [r2, #4]
  4064a0:	4290      	cmp	r0, r2
  4064a2:	f027 0703 	bic.w	r7, r7, #3
  4064a6:	d069      	beq.n	40657c <_free_r+0x104>
  4064a8:	f011 0101 	ands.w	r1, r1, #1
  4064ac:	6057      	str	r7, [r2, #4]
  4064ae:	d032      	beq.n	406516 <_free_r+0x9e>
  4064b0:	2100      	movs	r1, #0
  4064b2:	19d0      	adds	r0, r2, r7
  4064b4:	6840      	ldr	r0, [r0, #4]
  4064b6:	07c0      	lsls	r0, r0, #31
  4064b8:	d406      	bmi.n	4064c8 <_free_r+0x50>
  4064ba:	443b      	add	r3, r7
  4064bc:	6890      	ldr	r0, [r2, #8]
  4064be:	2900      	cmp	r1, #0
  4064c0:	d04e      	beq.n	406560 <_free_r+0xe8>
  4064c2:	68d2      	ldr	r2, [r2, #12]
  4064c4:	60c2      	str	r2, [r0, #12]
  4064c6:	6090      	str	r0, [r2, #8]
  4064c8:	f043 0201 	orr.w	r2, r3, #1
  4064cc:	6062      	str	r2, [r4, #4]
  4064ce:	50e3      	str	r3, [r4, r3]
  4064d0:	b9e1      	cbnz	r1, 40650c <_free_r+0x94>
  4064d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4064d6:	d32d      	bcc.n	406534 <_free_r+0xbc>
  4064d8:	0a5a      	lsrs	r2, r3, #9
  4064da:	2a04      	cmp	r2, #4
  4064dc:	d86a      	bhi.n	4065b4 <_free_r+0x13c>
  4064de:	0998      	lsrs	r0, r3, #6
  4064e0:	3038      	adds	r0, #56	; 0x38
  4064e2:	0041      	lsls	r1, r0, #1
  4064e4:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  4064e8:	4946      	ldr	r1, [pc, #280]	; (406604 <_free_r+0x18c>)
  4064ea:	f8dc 2008 	ldr.w	r2, [ip, #8]
  4064ee:	4562      	cmp	r2, ip
  4064f0:	d066      	beq.n	4065c0 <_free_r+0x148>
  4064f2:	6851      	ldr	r1, [r2, #4]
  4064f4:	f021 0103 	bic.w	r1, r1, #3
  4064f8:	428b      	cmp	r3, r1
  4064fa:	d202      	bcs.n	406502 <_free_r+0x8a>
  4064fc:	6892      	ldr	r2, [r2, #8]
  4064fe:	4594      	cmp	ip, r2
  406500:	d1f7      	bne.n	4064f2 <_free_r+0x7a>
  406502:	68d3      	ldr	r3, [r2, #12]
  406504:	60e3      	str	r3, [r4, #12]
  406506:	60a2      	str	r2, [r4, #8]
  406508:	609c      	str	r4, [r3, #8]
  40650a:	60d4      	str	r4, [r2, #12]
  40650c:	4630      	mov	r0, r6
  40650e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406512:	f7ff bec5 	b.w	4062a0 <__malloc_unlock>
  406516:	f855 5c08 	ldr.w	r5, [r5, #-8]
  40651a:	1b64      	subs	r4, r4, r5
  40651c:	f10c 0808 	add.w	r8, ip, #8
  406520:	68a0      	ldr	r0, [r4, #8]
  406522:	4540      	cmp	r0, r8
  406524:	442b      	add	r3, r5
  406526:	d043      	beq.n	4065b0 <_free_r+0x138>
  406528:	68e5      	ldr	r5, [r4, #12]
  40652a:	60c5      	str	r5, [r0, #12]
  40652c:	60a8      	str	r0, [r5, #8]
  40652e:	e7c0      	b.n	4064b2 <_free_r+0x3a>
  406530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406534:	08db      	lsrs	r3, r3, #3
  406536:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  40653a:	2501      	movs	r5, #1
  40653c:	f8dc 0004 	ldr.w	r0, [ip, #4]
  406540:	6891      	ldr	r1, [r2, #8]
  406542:	60a1      	str	r1, [r4, #8]
  406544:	109b      	asrs	r3, r3, #2
  406546:	fa05 f303 	lsl.w	r3, r5, r3
  40654a:	4318      	orrs	r0, r3
  40654c:	60e2      	str	r2, [r4, #12]
  40654e:	f8cc 0004 	str.w	r0, [ip, #4]
  406552:	6094      	str	r4, [r2, #8]
  406554:	4630      	mov	r0, r6
  406556:	60cc      	str	r4, [r1, #12]
  406558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40655c:	f7ff bea0 	b.w	4062a0 <__malloc_unlock>
  406560:	4d29      	ldr	r5, [pc, #164]	; (406608 <_free_r+0x190>)
  406562:	42a8      	cmp	r0, r5
  406564:	d1ad      	bne.n	4064c2 <_free_r+0x4a>
  406566:	f043 0201 	orr.w	r2, r3, #1
  40656a:	f8cc 4014 	str.w	r4, [ip, #20]
  40656e:	f8cc 4010 	str.w	r4, [ip, #16]
  406572:	60e0      	str	r0, [r4, #12]
  406574:	60a0      	str	r0, [r4, #8]
  406576:	6062      	str	r2, [r4, #4]
  406578:	50e3      	str	r3, [r4, r3]
  40657a:	e7c7      	b.n	40650c <_free_r+0x94>
  40657c:	441f      	add	r7, r3
  40657e:	07cb      	lsls	r3, r1, #31
  406580:	d407      	bmi.n	406592 <_free_r+0x11a>
  406582:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406586:	1ae4      	subs	r4, r4, r3
  406588:	441f      	add	r7, r3
  40658a:	68a2      	ldr	r2, [r4, #8]
  40658c:	68e3      	ldr	r3, [r4, #12]
  40658e:	60d3      	str	r3, [r2, #12]
  406590:	609a      	str	r2, [r3, #8]
  406592:	4b1e      	ldr	r3, [pc, #120]	; (40660c <_free_r+0x194>)
  406594:	681b      	ldr	r3, [r3, #0]
  406596:	f047 0201 	orr.w	r2, r7, #1
  40659a:	429f      	cmp	r7, r3
  40659c:	6062      	str	r2, [r4, #4]
  40659e:	f8cc 4008 	str.w	r4, [ip, #8]
  4065a2:	d3b3      	bcc.n	40650c <_free_r+0x94>
  4065a4:	4b1a      	ldr	r3, [pc, #104]	; (406610 <_free_r+0x198>)
  4065a6:	4630      	mov	r0, r6
  4065a8:	6819      	ldr	r1, [r3, #0]
  4065aa:	f7ff ff17 	bl	4063dc <_malloc_trim_r>
  4065ae:	e7ad      	b.n	40650c <_free_r+0x94>
  4065b0:	2101      	movs	r1, #1
  4065b2:	e77e      	b.n	4064b2 <_free_r+0x3a>
  4065b4:	2a14      	cmp	r2, #20
  4065b6:	d80c      	bhi.n	4065d2 <_free_r+0x15a>
  4065b8:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  4065bc:	0041      	lsls	r1, r0, #1
  4065be:	e791      	b.n	4064e4 <_free_r+0x6c>
  4065c0:	684b      	ldr	r3, [r1, #4]
  4065c2:	1080      	asrs	r0, r0, #2
  4065c4:	2501      	movs	r5, #1
  4065c6:	fa05 f000 	lsl.w	r0, r5, r0
  4065ca:	4303      	orrs	r3, r0
  4065cc:	604b      	str	r3, [r1, #4]
  4065ce:	4613      	mov	r3, r2
  4065d0:	e798      	b.n	406504 <_free_r+0x8c>
  4065d2:	2a54      	cmp	r2, #84	; 0x54
  4065d4:	d803      	bhi.n	4065de <_free_r+0x166>
  4065d6:	0b18      	lsrs	r0, r3, #12
  4065d8:	306e      	adds	r0, #110	; 0x6e
  4065da:	0041      	lsls	r1, r0, #1
  4065dc:	e782      	b.n	4064e4 <_free_r+0x6c>
  4065de:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4065e2:	d803      	bhi.n	4065ec <_free_r+0x174>
  4065e4:	0bd8      	lsrs	r0, r3, #15
  4065e6:	3077      	adds	r0, #119	; 0x77
  4065e8:	0041      	lsls	r1, r0, #1
  4065ea:	e77b      	b.n	4064e4 <_free_r+0x6c>
  4065ec:	f240 5154 	movw	r1, #1364	; 0x554
  4065f0:	428a      	cmp	r2, r1
  4065f2:	d803      	bhi.n	4065fc <_free_r+0x184>
  4065f4:	0c98      	lsrs	r0, r3, #18
  4065f6:	307c      	adds	r0, #124	; 0x7c
  4065f8:	0041      	lsls	r1, r0, #1
  4065fa:	e773      	b.n	4064e4 <_free_r+0x6c>
  4065fc:	21fc      	movs	r1, #252	; 0xfc
  4065fe:	207e      	movs	r0, #126	; 0x7e
  406600:	e770      	b.n	4064e4 <_free_r+0x6c>
  406602:	bf00      	nop
  406604:	2000067c 	.word	0x2000067c
  406608:	20000684 	.word	0x20000684
  40660c:	20000a84 	.word	0x20000a84
  406610:	200010d4 	.word	0x200010d4

00406614 <__register_exitproc>:
  406614:	b5f0      	push	{r4, r5, r6, r7, lr}
  406616:	4c27      	ldr	r4, [pc, #156]	; (4066b4 <__register_exitproc+0xa0>)
  406618:	6826      	ldr	r6, [r4, #0]
  40661a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  40661e:	b085      	sub	sp, #20
  406620:	4607      	mov	r7, r0
  406622:	2c00      	cmp	r4, #0
  406624:	d041      	beq.n	4066aa <__register_exitproc+0x96>
  406626:	6865      	ldr	r5, [r4, #4]
  406628:	2d1f      	cmp	r5, #31
  40662a:	dd1e      	ble.n	40666a <__register_exitproc+0x56>
  40662c:	4822      	ldr	r0, [pc, #136]	; (4066b8 <__register_exitproc+0xa4>)
  40662e:	b918      	cbnz	r0, 406638 <__register_exitproc+0x24>
  406630:	f04f 30ff 	mov.w	r0, #4294967295
  406634:	b005      	add	sp, #20
  406636:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406638:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40663c:	9103      	str	r1, [sp, #12]
  40663e:	9202      	str	r2, [sp, #8]
  406640:	9301      	str	r3, [sp, #4]
  406642:	f7ff faa3 	bl	405b8c <malloc>
  406646:	9903      	ldr	r1, [sp, #12]
  406648:	9a02      	ldr	r2, [sp, #8]
  40664a:	9b01      	ldr	r3, [sp, #4]
  40664c:	4604      	mov	r4, r0
  40664e:	2800      	cmp	r0, #0
  406650:	d0ee      	beq.n	406630 <__register_exitproc+0x1c>
  406652:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  406656:	6025      	str	r5, [r4, #0]
  406658:	2000      	movs	r0, #0
  40665a:	6060      	str	r0, [r4, #4]
  40665c:	4605      	mov	r5, r0
  40665e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  406662:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  406666:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  40666a:	b93f      	cbnz	r7, 40667c <__register_exitproc+0x68>
  40666c:	1cab      	adds	r3, r5, #2
  40666e:	2000      	movs	r0, #0
  406670:	3501      	adds	r5, #1
  406672:	6065      	str	r5, [r4, #4]
  406674:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  406678:	b005      	add	sp, #20
  40667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40667c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  406680:	f04f 0c01 	mov.w	ip, #1
  406684:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  406688:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  40668c:	fa0c f205 	lsl.w	r2, ip, r5
  406690:	4316      	orrs	r6, r2
  406692:	2f02      	cmp	r7, #2
  406694:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  406698:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  40669c:	d1e6      	bne.n	40666c <__register_exitproc+0x58>
  40669e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  4066a2:	431a      	orrs	r2, r3
  4066a4:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4066a8:	e7e0      	b.n	40666c <__register_exitproc+0x58>
  4066aa:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  4066ae:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  4066b2:	e7b8      	b.n	406626 <__register_exitproc+0x12>
  4066b4:	00406d68 	.word	0x00406d68
  4066b8:	00405b8d 	.word	0x00405b8d
  4066bc:	69663a30 	.word	0x69663a30
  4066c0:	61776d72 	.word	0x61776d72
  4066c4:	622e6572 	.word	0x622e6572
  4066c8:	00006e69 	.word	0x00006e69

004066cc <sd_trans_multipliers>:
  4066cc:	00000000 0000000a 0000000c 0000000d     ................
  4066dc:	0000000f 00000014 00000019 0000001e     ................
  4066ec:	00000023 00000028 0000002d 00000032     #...(...-...2...
  4066fc:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040670c <sd_mmc_trans_units>:
  40670c:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00406728 <mmc_trans_multipliers>:
  406728:	00000000 0000000a 0000000c 0000000d     ................
  406738:	0000000f 00000014 0000001a 0000001e     ................
  406748:	00000023 00000028 0000002d 00000034     #...(...-...4...
  406758:	00000037 0000003c 00000046 00000050     7...<...F...P...

00406768 <lun_desc>:
  406768:	004017ed 0040182d 0040184d 00401865     ..@.-.@.M.@.e.@.
  406778:	00401885 004018c9 0040192d 004067a8     ..@...@.-.@..g@.
  406788:	004017fd 0040183d 00401859 00401875     ..@.=.@.Y.@.u.@.
  406798:	00401889 004018dd 00401941 004067c0     ..@...@.A.@..g@.
  4067a8:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
  4067b8:	22302074 00000000 2f445322 20434d4d     t 0"...."SD/MMC 
  4067c8:	64726143 6f6c5320 22312074 00000000     Card Slot 1"....

004067d8 <excvt.4554>:
  4067d8:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
  4067e8:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
  4067f8:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
  406808:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  406818:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
  406828:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  406838:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
  406848:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
  406858:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
  406868:	00005d5b                                []..

0040686c <LfnOfs>:
  40686c:	07050301 12100e09 1c181614 0000001e     ................

0040687c <tbl_lower.4258>:
  40687c:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
  40688c:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
  40689c:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
  4068ac:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
  4068bc:	00e100e0 00e300e2 00e500e4 00e700e6     ................
  4068cc:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
  4068dc:	00f100f0 00f300f2 00f500f4 00f800f6     ................
  4068ec:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
  4068fc:	01050103 01090107 010d010b 0111010f     ................
  40690c:	01150113 01190117 011d011b 0121011f     ..............!.
  40691c:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
  40692c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
  40693c:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
  40694c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
  40695c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
  40696c:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
  40697c:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
  40698c:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
  40699c:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
  4069ac:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
  4069bc:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
  4069cc:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
  4069dc:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
  4069ec:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
  4069fc:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
  406a0c:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
  406a1c:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
  406a2c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
  406a3c:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
  406a4c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00406a5c <Tbl>:
  406a5c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
  406a6c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
  406a7c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
  406a8c:	00d600ff 00f800dc 00d800a3 019200d7     ................
  406a9c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
  406aac:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
  406abc:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
  406acc:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
  406adc:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
  406aec:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
  406afc:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
  406b0c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
  406b1c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
  406b2c:	00da00de 00d900db 00dd00fd 00b400af     ................
  406b3c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
  406b4c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00406b5c <tbl_upper.4259>:
  406b5c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
  406b6c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
  406b7c:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
  406b8c:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
  406b9c:	00c100c0 00c300c2 00c500c4 00c700c6     ................
  406bac:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
  406bbc:	00d100d0 00d300d2 00d500d4 00d800d6     ................
  406bcc:	00da00d9 00dc00db 00de00dd 01000178     ............x...
  406bdc:	01040102 01080106 010c010a 0110010e     ................
  406bec:	01140112 01180116 011c011a 0120011e     .............. .
  406bfc:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
  406c0c:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
  406c1c:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
  406c2c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
  406c3c:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
  406c4c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
  406c5c:	03940393 03960395 03980397 039a0399     ................
  406c6c:	039c039b 039e039d 03a0039f 03a303a1     ................
  406c7c:	03a503a4 03a703a6 03a903a8 041003aa     ................
  406c8c:	04120411 04140413 04160415 04180417     ................
  406c9c:	041a0419 041c041b 041e041d 0420041f     .............. .
  406cac:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
  406cbc:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
  406ccc:	04030402 04050404 04070406 04090408     ................
  406cdc:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
  406cec:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
  406cfc:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
  406d0c:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
  406d1c:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
  406d2c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
  406d3c:	74736552 69747261 7320676e 65747379     Restarting syste
  406d4c:	2121216d 0000000d                       m!!!....

00406d54 <CSWTCH.21>:
  406d54:	00000070 00000050 00000030 00000010     p...P...0.......
  406d64:	00000043                                C...

00406d68 <_global_impure_ptr>:
  406d68:	20000250                                P.. 

00406d6c <_init>:
  406d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406d6e:	bf00      	nop
  406d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406d72:	bc08      	pop	{r3}
  406d74:	469e      	mov	lr, r3
  406d76:	4770      	bx	lr

00406d78 <__init_array_start>:
  406d78:	0040638d 	.word	0x0040638d

00406d7c <__frame_dummy_init_array_entry>:
  406d7c:	004000f1                                ..@.

00406d80 <_fini>:
  406d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406d82:	bf00      	nop
  406d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406d86:	bc08      	pop	{r3}
  406d88:	469e      	mov	lr, r3
  406d8a:	4770      	bx	lr

00406d8c <__fini_array_start>:
  406d8c:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b470      	push	{r4, r5, r6}
20000002:	b083      	sub	sp, #12
20000004:	9e06      	ldr	r6, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b343      	cbz	r3, 2000005a <efc_perform_read_sequence+0x5a>
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20000008:	6804      	ldr	r4, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000000a:	b2c9      	uxtb	r1, r1
2000000c:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000

	if (p_ul_buf == NULL) {
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20000010:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
20000014:	6004      	str	r4, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000016:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000018:	6881      	ldr	r1, [r0, #8]
2000001a:	9101      	str	r1, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001c:	9901      	ldr	r1, [sp, #4]
2000001e:	f011 0101 	ands.w	r1, r1, #1
20000022:	d1f9      	bne.n	20000018 <efc_perform_read_sequence+0x18>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000024:	b146      	cbz	r6, 20000038 <efc_perform_read_sequence+0x38>
20000026:	4c0f      	ldr	r4, [pc, #60]	; (20000064 <efc_perform_read_sequence+0x64>)
20000028:	eb03 0686 	add.w	r6, r3, r6, lsl #2
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000002c:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000030:	f843 5b04 	str.w	r5, [r3], #4
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000034:	42b3      	cmp	r3, r6
20000036:	d1f9      	bne.n	2000002c <efc_perform_read_sequence+0x2c>

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000038:	b2d2      	uxtb	r2, r2
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000003a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
2000003e:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000040:	6883      	ldr	r3, [r0, #8]
20000042:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000044:	9b01      	ldr	r3, [sp, #4]
20000046:	07db      	lsls	r3, r3, #31
20000048:	d5fa      	bpl.n	20000040 <efc_perform_read_sequence+0x40>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000004a:	6803      	ldr	r3, [r0, #0]
2000004c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000050:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
}
20000052:	4608      	mov	r0, r1
20000054:	b003      	add	sp, #12
20000056:	bc70      	pop	{r4, r5, r6}
20000058:	4770      	bx	lr
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
		return EFC_RC_INVALID;
2000005a:	2102      	movs	r1, #2
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);

	p_efc->EEFC_FMR &= ~(0x1u << 16);

	return EFC_RC_OK;
}
2000005c:	4608      	mov	r0, r1
2000005e:	b003      	add	sp, #12
20000060:	bc70      	pop	{r4, r5, r6}
20000062:	4770      	bx	lr
20000064:	003ffffc 	.word	0x003ffffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	07db      	lsls	r3, r3, #31
20000078:	d5fa      	bpl.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007a:	9801      	ldr	r0, [sp, #4]
}
2000007c:	f000 000e 	and.w	r0, r0, #14
20000080:	b002      	add	sp, #8
20000082:	4770      	bx	lr

20000084 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000084:	f3bf 8f5f 	dmb	sy
20000088:	3801      	subs	r0, #1
2000008a:	d1fb      	bne.n	20000084 <portable_delay_cycles>
2000008c:	4770      	bx	lr
2000008e:	bf00      	nop

20000090 <sd_mmc_cards>:
	...
20000098:	002b 0000 0000 0000 0000 0000 0000 0000     +...............
	...

200000b4 <uxCriticalNesting>:
200000b4:	aaaa aaaa                                   ....

200000b8 <uxPreviousTask>:
200000b8:	00ff 0000                                   ....

200000bc <xNextTaskUnblockTime>:
200000bc:	ffff ffff                                   ....

200000c0 <brainSettings>:
	...
200000f8:	0000 0100 0000 0000 0000 0000 0000 0000     ................
	...

20000118 <gpioConfig>:
20000118:	0000 0000 0001 0001 47c1 0040 0101 0000     .........G@.....
20000128:	0001 0000 0001 0001 4781 0040 0101 0000     .........G@.....
20000138:	0014 0000 0001 0001 473d 0040 0101 0000     ........=G@.....
20000148:	0010 0000 0001 0001 46f9 0040 0101 0000     .........F@.....
20000158:	000f 0000 0001 0001 46b5 0040 0101 0000     .........F@.....
20000168:	0018 0000 0001 0001 4671 0040 0100 0000     ........qF@.....
20000178:	0019 0000 0001 0001 462d 0040 0100 0000     ........-F@.....
20000188:	0013 0000 0100 0004 0000 0000 0000 0100     ................
20000198:	0017 0000 0100 0004 0000 0000 0000 0100     ................
200001a8:	002a 0000 0100 0004 0000 0000 0100 0100     *...............
200001b8:	0011 0000 0100 0004 0000 0000 0100 0100     ................
200001c8:	0012 0000 0100 0004 0000 0000 0100 0100     ................
200001d8:	002d 0000 0100 0004 0000 0000 0000 0100     -...............
200001e8:	0020 0000 0100 0004 0000 0000 0000 0100      ...............
200001f8:	0021 0000 0100 0004 0000 0000 0000 0100     !...............
20000208:	000b 0000 0001 0001 45e9 0040 0101 0000     .........E@.....
20000218:	002b 0000 0001 0001 45a5 0040 0101 0000     +........E@.....
20000228:	000c 0000 0000 0004 0000 0000 0000 0000     ................
20000238:	0002 0000 0000 0004 0000 0000 0000 0100     ................

20000248 <g_interrupt_enabled>:
20000248:	0001 0000                                   ....

2000024c <SystemCoreClock>:
2000024c:	0900 003d                                   ..=.

20000250 <impure_data>:
20000250:	0000 0000 053c 2000 05a4 2000 060c 2000     ....<.. ... ... 
	...
20000284:	6d64 0040 0000 0000 0000 0000 0000 0000     dm@.............
	...
200002f8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000308:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000678 <_impure_ptr>:
20000678:	0250 2000                                   P.. 

2000067c <__malloc_av_>:
	...
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 
20000904:	08fc 2000 08fc 2000 0904 2000 0904 2000     ... ... ... ... 
20000914:	090c 2000 090c 2000 0914 2000 0914 2000     ... ... ... ... 
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 
20000994:	098c 2000 098c 2000 0994 2000 0994 2000     ... ... ... ... 
200009a4:	099c 2000 099c 2000 09a4 2000 09a4 2000     ... ... ... ... 
200009b4:	09ac 2000 09ac 2000 09b4 2000 09b4 2000     ... ... ... ... 
200009c4:	09bc 2000 09bc 2000 09c4 2000 09c4 2000     ... ... ... ... 
200009d4:	09cc 2000 09cc 2000 09d4 2000 09d4 2000     ... ... ... ... 
200009e4:	09dc 2000 09dc 2000 09e4 2000 09e4 2000     ... ... ... ... 
200009f4:	09ec 2000 09ec 2000 09f4 2000 09f4 2000     ... ... ... ... 
20000a04:	09fc 2000 09fc 2000 0a04 2000 0a04 2000     ... ... ... ... 
20000a14:	0a0c 2000 0a0c 2000 0a14 2000 0a14 2000     ... ... ... ... 
20000a24:	0a1c 2000 0a1c 2000 0a24 2000 0a24 2000     ... ... $.. $.. 
20000a34:	0a2c 2000 0a2c 2000 0a34 2000 0a34 2000     ,.. ,.. 4.. 4.. 
20000a44:	0a3c 2000 0a3c 2000 0a44 2000 0a44 2000     <.. <.. D.. D.. 
20000a54:	0a4c 2000 0a4c 2000 0a54 2000 0a54 2000     L.. L.. T.. T.. 
20000a64:	0a5c 2000 0a5c 2000 0a64 2000 0a64 2000     \.. \.. d.. d.. 
20000a74:	0a6c 2000 0a6c 2000 0a74 2000 0a74 2000     l.. l.. t.. t.. 

20000a84 <__malloc_trim_threshold>:
20000a84:	0000 0002                                   ....

20000a88 <__malloc_sbrk_base>:
20000a88:	ffff ffff                                   ....
