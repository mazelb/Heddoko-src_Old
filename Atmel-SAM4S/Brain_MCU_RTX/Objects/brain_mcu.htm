<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\brain_mcu.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\brain_mcu.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Fri Sep 11 17:44:51 2015
<BR><P>
<H3>Maximum Stack Usage =        568 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f0]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[32]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ACC_IRQHandler</a><BR>
 <LI><a href="#[34]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">rt_alloc_box</a><BR>
 <LI><a href="#[78]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ACC_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[2e]">ADC_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[51]">BusMode</a> from mci_sam4s.o(.text) referenced from mci_sam4s.o(.constdata)
 <LI><a href="#[53]">BusSpeed</a> from mci_sam4s.o(.text) referenced from mci_sam4s.o(.constdata)
 <LI><a href="#[52]">BusWidth</a> from mci_sam4s.o(.text) referenced from mci_sam4s.o(.constdata)
 <LI><a href="#[31]">CRCCU_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[58]">CheckMedia</a> from mci_sam4s.o(.text) referenced from mci_sam4s.o(.constdata)
 <LI><a href="#[54]">Command</a> from mci_sam4s.o(.text) referenced from mci_sam4s.o(.constdata)
 <LI><a href="#[2f]">DACC_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[50]">Delay</a> from mci_sam4s.o(.text) referenced from mci_sam4s.o(.constdata)
 <LI><a href="#[19]">EEFC0_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[1a]">EEFC1_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[23]">HSMCI_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[4e]">Init</a> from mci_sam4s.o(.text) referenced from mci_sam4s.o(.constdata)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[1e]">PIOA_IRQHandler</a> from tasks.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[1f]">PIOB_IRQHandler</a> from tasks.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[20]">PIOC_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[18]">PMC_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[30]">PWM_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[14]">RSTC_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[15]">RTC_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[16]">RTT_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[55]">ReadBlock</a> from mci_sam4s.o(.text) referenced from mci_sam4s.o(.constdata)
 <LI><a href="#[9]">Reset_Handler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[1d]">SMC_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[26]">SPI_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[27]">SSC_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[13]">SUPC_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[57]">SetDma</a> from mci_sam4s.o(.text) referenced from mci_sam4s.o(.constdata)
 <LI><a href="#[12]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[38]">SystemInit</a> from system_sam4s.o(.text) referenced from startup_sam4s.o(.text)
 <LI><a href="#[28]">TC0_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[29]">TC1_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[2a]">TC2_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[2b]">TC3_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[2c]">TC4_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[2d]">TC5_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[24]">TWI0_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[25]">TWI1_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[1b]">UART0_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[1c]">UART1_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[33]">UDP_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[21]">USART0_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[22]">USART1_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[4f]">UnInit</a> from mci_sam4s.o(.text) referenced from mci_sam4s.o(.constdata)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[17]">WDT_IRQHandler</a> from startup_sam4s.o(.text) referenced from startup_sam4s.o(RESET)
 <LI><a href="#[56]">WriteBlock</a> from mci_sam4s.o(.text) referenced from mci_sam4s.o(.constdata)
 <LI><a href="#[59]">__main</a> from __main.o(!!!main) referenced from startup_sam4s.o(.text)
 <LI><a href="#[45]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[46]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[44]">fputc</a> from retarget.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[4d]">mc0_DevCtrl</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[48]">mc0_Init</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[4c]">mc0_RdInfo</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[4a]">mc0_RdSect</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[49]">mc0_UnInit</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[4b]">mc0_WrSect</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[47]">os_idle_demon</a> from rtx_conf_armcm4.o(.text) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[34]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[3a]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced 2 times from led.o(.text)
 <LI><a href="#[3d]">rt_evt_set</a> from rt_event.o(i.rt_evt_set) referenced 2 times from tasks.o(.text)
 <LI><a href="#[3f]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced 2 times from tasks.o(.text)
 <LI><a href="#[35]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[37]">rt_mut_release</a> from rt_mutex.o(i.rt_mut_release) referenced from rtx_conf_armcm4.o(.text)
 <LI><a href="#[36]">rt_mut_wait</a> from rt_mutex.o(i.rt_mut_wait) referenced from rtx_conf_armcm4.o(.text)
 <LI><a href="#[3c]">rt_sys_init</a> from rt_task.o(i.rt_sys_init) referenced from main.o(.text)
 <LI><a href="#[40]">rt_tsk_create</a> from rt_task.o(i.rt_tsk_create) referenced 2 times from tasks.o(.text)
 <LI><a href="#[43]">rt_tsk_delete</a> from rt_task.o(i.rt_tsk_delete) referenced from tasks.o(.text)
 <LI><a href="#[41]">rt_tsk_pass</a> from rt_task.o(i.rt_tsk_pass) referenced from tasks.o(.text)
 <LI><a href="#[3e]">rt_tsk_prio</a> from rt_task.o(i.rt_tsk_prio) referenced 2 times from tasks.o(.text)
 <LI><a href="#[42]">rt_tsk_self</a> from rt_task.o(i.rt_tsk_self) referenced from tasks.o(.text)
 <LI><a href="#[3b]">task_idle</a> from tasks.o(.text) referenced from main.o(.text)
 <LI><a href="#[bc]">task_init</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[c1]">task_main</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[b8]">task_other</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[b7]">task_swdbutton</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[b9]">task_uart0</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[bb]">task_uart1</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[ba]">task_usart0</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[b6]">task_usart1</a> from tasks.o(.text) referenced from tasks.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[60]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[62]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[167]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[168]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[169]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[16a]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[16b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[c8]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[63]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[16c]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[71]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[16d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[65]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[16e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[67]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[170]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[171]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[172]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[69]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[173]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[174]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[175]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[176]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[177]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[178]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[179]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[17c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[180]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[181]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[76]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[6c]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[182]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[183]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[184]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[185]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[186]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[187]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[61]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[188]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[70]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[189]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[72]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[18a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[f1]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[75]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[18b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[77]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[160]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[165]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[b5]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18c]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[18d]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
</UL>

<P><STRONG><a name="[18e]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[18f]"></a>fs_config</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>efs_rename</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>efs_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[100]"></a>efs_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[191]"></a>efs_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>efs_format</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>efs_ffind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>efs_wclose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[103]"></a>efs_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[107]"></a>efs_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[f9]"></a>efs_ensure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[105]"></a>efs_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[fa]"></a>efs_fsize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[fe]"></a>efs_find</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[194]"></a>efs_analyse</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>efs_check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>efs_defrag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>elink_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>elink_init_path</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[198]"></a>elink_flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>elink_cmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[136]"></a>elink_insert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[199]"></a>elink_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>elink_scan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[b0]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 368 bytes, Stack size 0 bytes, system_sam4s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>SystemInit</STRONG> (Thumb, 294 bytes, Stack size 0 bytes, system_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[5a]"></a>os_tmr_call</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_armcm4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>

<P><STRONG><a name="[5b]"></a>os_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_armcm4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[5c]"></a>__user_perthread_libspace</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_conf_armcm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[5d]"></a>_mutex_initialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtx_conf_armcm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[5e]"></a>_mutex_acquire</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_conf_armcm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[5f]"></a>_mutex_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_conf_armcm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CRCCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EEFC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EEFC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>HSMCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PIOC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RSTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SUPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TC5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>UDP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_sam4s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b1]"></a>SerialInit</STRONG> (Thumb, 538 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>SerialPutCharUart1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUsart0
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUsart1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUart0
</UL>

<P><STRONG><a name="[9d]"></a>SerialGetCharUart1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[87]"></a>SerialPutCharUart0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_p
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>SerialGetCharUart0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnConAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnScanAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnAck
</UL>

<P><STRONG><a name="[86]"></a>SerialPutCharUsart1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_p
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>SerialGetCharUsart1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnConAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnScanAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnAck
</UL>

<P><STRONG><a name="[88]"></a>SerialPutCharUsart0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_p
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint
</UL>

<P><STRONG><a name="[90]"></a>SerialGetCharUsart0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnConAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnScanAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnAck
</UL>

<P><STRONG><a name="[19a]"></a>SerialGetCharUsart1nb</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>SerialGetCharUart1nb</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>SerialGetCharUsart0nb</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>SerialGetCharUart0nb</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>SerialPrint</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SerialPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUsart0
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUsart1
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUart0
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q3Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q2Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnStop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnStart
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q1Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_other
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_swdbutton
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_usart1
</UL>

<P><STRONG><a name="[89]"></a>SerialPrint_p</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUsart0
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUsart1
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUart0
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q3Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q2Init
</UL>

<P><STRONG><a name="[19e]"></a>StringLength</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>QnAck</STRONG> (Thumb, 186 bytes, Stack size 168 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = QnAck &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialGetCharUsart0
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialGetCharUsart1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialGetCharUart0
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q3Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q2Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q1Init
</UL>

<P><STRONG><a name="[91]"></a>QnScanAck</STRONG> (Thumb, 262 bytes, Stack size 192 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = QnScanAck &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialGetCharUsart0
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialGetCharUsart1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialGetCharUart0
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q3Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q2Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q1Init
</UL>

<P><STRONG><a name="[92]"></a>QnConAck</STRONG> (Thumb, 262 bytes, Stack size 192 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = QnConAck &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialGetCharUsart0
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialGetCharUsart1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialGetCharUart0
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q3Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q2Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q1Init
</UL>

<P><STRONG><a name="[b3]"></a>UartUsartInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uart_functionality.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>ReadUart0</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uart_functionality.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUart1
</UL>

<P><STRONG><a name="[95]"></a>ReadUsart1</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, uart_functionality.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadUsart1
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUart1
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_usart1
</UL>

<P><STRONG><a name="[96]"></a>ReadUsart0</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart_functionality.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUart1
</UL>

<P><STRONG><a name="[b2]"></a>ButtonInit</STRONG> (Thumb, 1118 bytes, Stack size 0 bytes, button.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>button_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, button.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>LED_off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_blink
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_out
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
</UL>

<P><STRONG><a name="[98]"></a>LED_on</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_blink
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_out
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
</UL>

<P><STRONG><a name="[97]"></a>LED_out</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_out
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_on
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_off
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
</UL>

<P><STRONG><a name="[9a]"></a>LedInit</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LedInit &rArr; LED_out
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_out
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>LED_blink</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_blink
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_on
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_off
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_swdbutton
</UL>

<P><STRONG><a name="[44]"></a>fputc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUart1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>fgetc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialGetCharUart1
</UL>

<P><STRONG><a name="[e0]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[9e]"></a>_ttywrch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUart1
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[78]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[9f]"></a>sendchar</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUart1
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[a0]"></a>getkey</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialGetCharUart1
</UL>

<P><STRONG><a name="[a1]"></a>_sys_open</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[a4]"></a>_sys_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _sys_close &rArr; __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[a6]"></a>_sys_write</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[a8]"></a>_sys_read</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialGetCharUart1
</UL>

<P><STRONG><a name="[e1]"></a>_sys_istty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[aa]"></a>_sys_seek</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _sys_seek &rArr; __sys_seek &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[ac]"></a>_sys_ensure</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[ae]"></a>_sys_flen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_flen &rArr; __sys_flen &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1a0]"></a>_sys_tmpnam</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>_sys_command_string</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>main</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartUsartInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUsart1
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPutCharUart0
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b9]"></a>task_uart0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>task_uart1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>task_usart0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>task_usart1</STRONG> (Thumb, 364 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = task_usart1 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUsart1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>task_swdbutton</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = task_swdbutton &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_blink
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>task_other</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = task_other &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>task_main</STRONG> (Thumb, 474 bytes, Stack size 0 bytes, tasks.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>task_init</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = task_init &rArr; Q1Init &rArr; QnConAck &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q1Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>task_idle</STRONG> (Thumb, 552 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task_idle &rArr; QnStop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_on
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_off
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnStop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>StartTimer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOA_IRQHandler
</UL>

<P><STRONG><a name="[1e]"></a>PIOA_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PIOA_IRQHandler &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PIOB_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam4s.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>Q1Init</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, commands.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Q1Init &rArr; QnConAck &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnConAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnScanAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnAck
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[c4]"></a>Q2Init</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, commands.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnConAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnScanAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnAck
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_p
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[c5]"></a>Q3Init</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, commands.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnConAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnScanAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnAck
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint_p
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[c0]"></a>QnStart</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, commands.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = QnStart &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
</UL>

<P><STRONG><a name="[bf]"></a>QnStop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, commands.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = QnStop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPrint
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
</UL>

<P><STRONG><a name="[1a2]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, commands.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a4]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q3Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q2Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnStop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnStart
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q1Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_other
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_swdbutton
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_usart1
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[dd]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1a6]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[ce]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[cf]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[8e]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnConAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnScanAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnAck
</UL>

<P><STRONG><a name="[d1]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[14b]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[d3]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1a7]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnConAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnScanAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnAck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuf
</UL>

<P><STRONG><a name="[d4]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1ab]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnConAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnScanAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QnAck
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[a2]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1ae]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[d0]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[da]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[cb]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[d2]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[dc]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[de]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[64]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[c6]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[cd]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[1af]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[e4]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[ca]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[e5]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[6b]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[6d]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[db]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[d9]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1b0]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[ea]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[66]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[ec]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[e2]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1b2]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setvbuf &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[e6]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[6f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[68]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[1b3]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[74]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ef]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ee]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[eb]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[f2]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[f3]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a5]"></a>__sys_close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_wclose
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[ad]"></a>__sys_ensure</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fs_sys.o(i.__sys_ensure), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_ensure
</UL>

<P><STRONG><a name="[af]"></a>__sys_flen</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fs_sys.o(i.__sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sys_flen &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_fsize
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[a3]"></a>__sys_open</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_find
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_fsize
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_create
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_efs_lock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[a9]"></a>__sys_read</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[ab]"></a>__sys_seek</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __sys_seek &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[a7]"></a>__sys_write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[15f]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[15e]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[164]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[15d]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[118]"></a>entry_pos_set</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fs_fat.o(i.entry_pos_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = entry_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[112]"></a>entry_read</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_fat.o(i.entry_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[f7]"></a>fat_close</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, fs_fat.o(i.fat_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[fd]"></a>fat_open</STRONG> (Thumb, 442 bytes, Stack size 64 bytes, fs_fat.o(i.fat_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init_path
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_drv
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_lock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_root_clus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[102]"></a>fat_read</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, fs_fat.o(i.fat_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[104]"></a>fat_seek</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, fs_fat.o(i.fat_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fat_seek &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[106]"></a>fat_write</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, fs_fat.o(i.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fat_write &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[11e]"></a>fs_chk_media</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fs_lib.o(i.fs_chk_media))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_chk_media
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[ff]"></a>fs_efs_lock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_lib.o(i.fs_efs_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_efs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[126]"></a>fs_fat_lock</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, fs_lib.o(i.fs_fat_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_fat_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[122]"></a>fs_find_drv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fs_lib.o(i.fs_find_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_find_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[fb]"></a>fs_find_iob</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_lib.o(i.fs_find_iob))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_find_iob &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[13a]"></a>fs_get_date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_date))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
</UL>

<P><STRONG><a name="[13c]"></a>fs_get_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[fc]"></a>fs_map_drive</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, fs_lib.o(i.fs_map_drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_map_drive
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[10d]"></a>fsj_write</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, fs_journal.o(i.fsj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[c2]"></a>isr_evt_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_event.o(i.isr_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOA_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>mci_DevCtrl</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_mci.o(i.mci_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mci_DevCtrl &rArr; mci_read_cid &rArr; mci_wait_for_tran &rArr; mci_send_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_DevCtrl
</UL>

<P><STRONG><a name="[7e]"></a>mci_Init</STRONG> (Thumb, 772 bytes, Stack size 80 bytes, fs_mci.o(i.mci_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mci_Init &rArr; mci_read_csd
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_acmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_select_card
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_csd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_Init
</UL>

<P><STRONG><a name="[82]"></a>mci_ReadInfo</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_mci.o(i.mci_ReadInfo))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdInfo
</UL>

<P><STRONG><a name="[80]"></a>mci_ReadSector</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, fs_mci.o(i.mci_ReadSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mci_ReadSector &rArr; mci_wait_for_tran &rArr; mci_send_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_wait_for_tran
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdSect
</UL>

<P><STRONG><a name="[7f]"></a>mci_UnInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_mci.o(i.mci_UnInit))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_UnInit
</UL>

<P><STRONG><a name="[81]"></a>mci_WriteSector</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, fs_mci.o(i.mci_WriteSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mci_WriteSector &rArr; mci_wait_for_tran &rArr; mci_send_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_wait_for_tran
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_WrSect
</UL>

<P><STRONG><a name="[162]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[7d]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[121]"></a>path_validate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs_fat.o(i.path_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = path_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[34]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[14c]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
</UL>

<P><STRONG><a name="[150]"></a>rt_chk_robin</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[152]"></a>rt_dec_dly</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[153]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[3a]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tasks.o(.text)
<LI> led.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>rt_evt_psh</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[3d]"></a>rt_evt_set</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>rt_evt_wait</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>rt_free_box</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[14e]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>

<P><STRONG><a name="[166]"></a>rt_get_same_rdy_prio</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_same_rdy_prio))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>

<P><STRONG><a name="[161]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[158]"></a>rt_init_stack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal_cm3.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[159]"></a>rt_mbx_psh</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[84]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[37]"></a>rt_mut_release</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_armcm4.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>rt_mut_wait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_armcm4.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[13e]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[13d]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[14d]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[151]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>

<P><STRONG><a name="[154]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[15a]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>

<P><STRONG><a name="[156]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[15c]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[15b]"></a>rt_sem_psh</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[79]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[14f]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>

<P><STRONG><a name="[3c]"></a>rt_sys_init</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_PSP
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_systick &rArr; rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[163]"></a>rt_tmr_tick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_timer.o(i.rt_tmr_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_tmr_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[40]"></a>rt_tsk_create</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>rt_tsk_delete</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>rt_tsk_pass</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_same_rdy_prio
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>rt_tsk_prio</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[48]"></a>mc0_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mc0_Init &rArr; mci_Init &rArr; mci_read_csd
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>mc0_UnInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_UnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>mc0_RdSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mc0_RdSect &rArr; mci_ReadSector &rArr; mci_wait_for_tran &rArr; mci_send_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_ReadSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>mc0_WrSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mc0_WrSect &rArr; mci_WriteSector &rArr; mci_wait_for_tran &rArr; mci_send_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_WriteSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>mc0_RdInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_ReadInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>mc0_DevCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mc0_DevCtrl &rArr; mci_DevCtrl &rArr; mci_read_cid &rArr; mci_wait_for_tran &rArr; mci_send_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_DevCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>Init</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, mci_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mci_sam4s.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>UnInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mci_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mci_sam4s.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mci_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mci_sam4s.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>BusMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mci_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mci_sam4s.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>BusWidth</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mci_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mci_sam4s.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>BusSpeed</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, mci_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mci_sam4s.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>Command</STRONG> (Thumb, 242 bytes, Stack size 20 bytes, mci_sam4s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_sam4s.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>ReadBlock</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, mci_sam4s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReadBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_sam4s.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>WriteBlock</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, mci_sam4s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_sam4s.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>SetDma</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, mci_sam4s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetDma
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_sam4s.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>CheckMedia</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mci_sam4s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mci_sam4s.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
</UL>

<P><STRONG><a name="[145]"></a>fill_cid</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, fs_mci.o(i.fill_cid))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_cid
</UL>

<P><STRONG><a name="[13f]"></a>mci_read_cid</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, fs_mci.o(i.mci_read_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mci_read_cid &rArr; mci_wait_for_tran &rArr; mci_send_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_wait_for_tran
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_select_card
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_DevCtrl
</UL>

<P><STRONG><a name="[141]"></a>mci_read_csd</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, fs_mci.o(i.mci_read_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mci_read_csd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_Init
</UL>

<P><STRONG><a name="[142]"></a>mci_select_card</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fs_mci.o(i.mci_select_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mci_select_card
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_cid
</UL>

<P><STRONG><a name="[140]"></a>mci_send_acmd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fs_mci.o(i.mci_send_acmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mci_send_acmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_Init
</UL>

<P><STRONG><a name="[144]"></a>mci_send_stop</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fs_mci.o(i.mci_send_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mci_send_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_WriteSector
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_ReadSector
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_wait_for_tran
</UL>

<P><STRONG><a name="[143]"></a>mci_wait_for_tran</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, fs_mci.o(i.mci_wait_for_tran))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mci_wait_for_tran &rArr; mci_send_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_WriteSector
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_ReadSector
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_cid
</UL>

<P><STRONG><a name="[157]"></a>rt_init_context</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[108]"></a>alloc_new_clus</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_new_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = alloc_new_clus &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[10c]"></a>cache_fat</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, fs_fat.o(i.cache_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[147]"></a>char_validate</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, fs_fat.o(i.char_validate))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
</UL>

<P><STRONG><a name="[10e]"></a>clear_clus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fs_fat.o(i.clear_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[10f]"></a>clus_to_sect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.clus_to_sect))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[111]"></a>create_dot_entries</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, fs_fat.o(i.create_dot_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = create_dot_entries &rArr; entry_flush &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[117]"></a>create_lfn_entry</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, fs_fat.o(i.create_lfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = create_lfn_entry &rArr; entry_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_set
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[119]"></a>create_sfn_entry</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, fs_fat.o(i.create_sfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = create_sfn_entry &rArr; entry_flush &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[116]"></a>entry_flush</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fs_fat.o(i.entry_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = entry_flush &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[12f]"></a>entry_pos_comp</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.entry_pos_comp))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[130]"></a>entry_type</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.entry_type))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[132]"></a>fat_crc32</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, fs_fat.o(i.fat_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[12d]"></a>frec_allocate</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, fs_fat.o(i.frec_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = frec_allocate &rArr; alloc_new_clus &rArr; write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[131]"></a>frec_find</STRONG> (Thumb, 546 bytes, Stack size 136 bytes, fs_fat.o(i.frec_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = frec_find &rArr; entry_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[137]"></a>frec_find_elink</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fs_fat.o(i.frec_find_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = frec_find_elink &rArr; entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[120]"></a>fsinfo_write</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fs_fat.o(i.fsinfo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[10a]"></a>get_EOC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fs_fat.o(i.get_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>

<P><STRONG><a name="[114]"></a>get_date</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fs_fat.o(i.get_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_date
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_date
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[13b]"></a>get_fat_sect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.get_fat_sect))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
</UL>

<P><STRONG><a name="[109]"></a>get_free_clus</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, fs_fat.o(i.get_free_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_free_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>

<P><STRONG><a name="[113]"></a>get_time</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fs_fat.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[127]"></a>get_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_fat.o(i.get_u16))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[12a]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_fat.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[11c]"></a>is_EOC</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fs_fat.o(i.is_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[146]"></a>name_analyse</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, fs_fat.o(i.name_analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_analyse
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[148]"></a>name_basis_gen</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, fs_fat.o(i.name_basis_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_basis_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[138]"></a>name_hash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.name_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[14a]"></a>name_nt_gen</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, fs_fat.o(i.name_nt_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_nt_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[149]"></a>name_strip</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, fs_fat.o(i.name_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_strip
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[129]"></a>path_create</STRONG> (Thumb, 524 bytes, Stack size 144 bytes, fs_fat.o(i.path_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = path_create &rArr; frec_find &rArr; entry_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_nt_gen
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[125]"></a>path_open</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, fs_fat.o(i.path_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = path_open &rArr; frec_find &rArr; entry_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[12b]"></a>read_cache</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fs_fat.o(i.read_cache), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[11d]"></a>read_sector</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_fat.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>

<P><STRONG><a name="[11b]"></a>set_next_clus</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, fs_fat.o(i.set_next_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_set
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[124]"></a>set_root_clus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fs_fat.o(i.set_root_clus))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[115]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.set_u16))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[11f]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[134]"></a>sfn_extract</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fs_fat.o(i.sfn_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sfn_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[135]"></a>short_ent_hash</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, fs_fat.o(i.short_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = short_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[133]"></a>sn_chksum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_fat.o(i.sn_chksum))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[128]"></a>unlink_clus_chain</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, fs_fat.o(i.unlink_clus_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = unlink_clus_chain &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[110]"></a>write_cache</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, fs_fat.o(i.write_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[10b]"></a>write_fat_link</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, fs_fat.o(i.write_fat_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write_fat_link &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>

<P><STRONG><a name="[11a]"></a>write_sector</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_fat.o(i.write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>

<P><STRONG><a name="[f4]"></a>SetBuf</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs_journal.o(i.SetBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>

<P><STRONG><a name="[f6]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_journal.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuf
</UL>

<P><STRONG><a name="[cc]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_set &rArr; set_next_clus &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[d7]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[46]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
