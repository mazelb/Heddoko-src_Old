
PowerBoardMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013824  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00413824  00413824  0001b824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000abc  20000000  0041382c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000b550  20000ac0  004142f0  00020ac0  2**3
                  ALLOC
  4 .stack        00003000  2000c010  0041f840  00020ac0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020abc  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00020ae6  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001c2e1  00000000  00000000  00020b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004a66  00000000  00000000  0003ce22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000088f2  00000000  00000000  00041888  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001818  00000000  00000000  0004a17a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000015b0  00000000  00000000  0004b992  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000d9a4  00000000  00000000  0004cf42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001f7c8  00000000  00000000  0005a8e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00057e45  00000000  00000000  0007a0ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000060d0  00000000  00000000  000d1ef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000f010 	.word	0x2000f010
  400004:	00409595 	.word	0x00409595
  400008:	0040965d 	.word	0x0040965d
  40000c:	00409a15 	.word	0x00409a15
  400010:	00409a1d 	.word	0x00409a1d
  400014:	00409a25 	.word	0x00409a25
  400018:	00409a2d 	.word	0x00409a2d
	...
  40002c:	00406029 	.word	0x00406029
  400030:	0040965d 	.word	0x0040965d
  400034:	00000000 	.word	0x00000000
  400038:	00406115 	.word	0x00406115
  40003c:	00406151 	.word	0x00406151
  400040:	0040965d 	.word	0x0040965d
  400044:	0040965d 	.word	0x0040965d
  400048:	0040965d 	.word	0x0040965d
  40004c:	0040965d 	.word	0x0040965d
  400050:	0040965d 	.word	0x0040965d
  400054:	0040965d 	.word	0x0040965d
  400058:	0040965d 	.word	0x0040965d
  40005c:	00000000 	.word	0x00000000
  400060:	00405aad 	.word	0x00405aad
  400064:	00405b11 	.word	0x00405b11
  400068:	00000000 	.word	0x00000000
  40006c:	00409149 	.word	0x00409149
  400070:	00409161 	.word	0x00409161
  400074:	00000000 	.word	0x00000000
  400078:	00405b79 	.word	0x00405b79
	...
  40008c:	0040044d 	.word	0x0040044d
  400090:	0040045d 	.word	0x0040045d
  400094:	0040965d 	.word	0x0040965d
  400098:	0040965d 	.word	0x0040965d
  40009c:	0040965d 	.word	0x0040965d
  4000a0:	0040965d 	.word	0x0040965d
  4000a4:	0040965d 	.word	0x0040965d
	...
  4000b4:	0040965d 	.word	0x0040965d
  4000b8:	00000000 	.word	0x00000000
  4000bc:	0040965d 	.word	0x0040965d
  4000c0:	0040965d 	.word	0x0040965d
  4000c4:	0040965d 	.word	0x0040965d
  4000c8:	00401d7d 	.word	0x00401d7d

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000ac0 	.word	0x20000ac0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0041382c 	.word	0x0041382c

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b06      	ldr	r3, [pc, #24]	; (40010c <frame_dummy+0x1c>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x20>)
  4000f8:	4906      	ldr	r1, [pc, #24]	; (400114 <frame_dummy+0x24>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4806      	ldr	r0, [pc, #24]	; (400118 <frame_dummy+0x28>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b113      	cbz	r3, 40010a <frame_dummy+0x1a>
  400104:	4b05      	ldr	r3, [pc, #20]	; (40011c <frame_dummy+0x2c>)
  400106:	b103      	cbz	r3, 40010a <frame_dummy+0x1a>
  400108:	4798      	blx	r3
  40010a:	bd08      	pop	{r3, pc}
  40010c:	00000000 	.word	0x00000000
  400110:	0041382c 	.word	0x0041382c
  400114:	20000ac4 	.word	0x20000ac4
  400118:	0041382c 	.word	0x0041382c
  40011c:	00000000 	.word	0x00000000

00400120 <local_twi_handler>:
/*
 * For internal use only.
 * A common TWI interrupt handler that is called for all TWI peripherals.
 */
static void local_twi_handler(const portBASE_TYPE twi_index)
{
  400120:	b590      	push	{r4, r7, lr}
  400122:	b08b      	sub	sp, #44	; 0x2c
  400124:	af00      	add	r7, sp, #0
  400126:	6078      	str	r0, [r7, #4]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  400128:	2300      	movs	r3, #0
  40012a:	60bb      	str	r3, [r7, #8]
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;
  40012c:	2300      	movs	r3, #0
  40012e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	twi_port = all_twi_definitions[twi_index].peripheral_base_address;
  400132:	4a81      	ldr	r2, [pc, #516]	; (400338 <local_twi_handler+0x218>)
  400134:	687b      	ldr	r3, [r7, #4]
  400136:	011b      	lsls	r3, r3, #4
  400138:	4413      	add	r3, r2
  40013a:	681b      	ldr	r3, [r3, #0]
  40013c:	61bb      	str	r3, [r7, #24]

	twi_status = twi_get_interrupt_status(twi_port);
  40013e:	69b8      	ldr	r0, [r7, #24]
  400140:	4b7e      	ldr	r3, [pc, #504]	; (40033c <local_twi_handler+0x21c>)
  400142:	4798      	blx	r3
  400144:	6178      	str	r0, [r7, #20]
	twi_status &= twi_get_interrupt_mask(twi_port);
  400146:	69b8      	ldr	r0, [r7, #24]
  400148:	4b7d      	ldr	r3, [pc, #500]	; (400340 <local_twi_handler+0x220>)
  40014a:	4798      	blx	r3
  40014c:	4603      	mov	r3, r0
  40014e:	697a      	ldr	r2, [r7, #20]
  400150:	4013      	ands	r3, r2
  400152:	617b      	str	r3, [r7, #20]

	/* Has the PDC completed a transmission? */
	if ((twi_status & TWI_SR_ENDTX) != 0UL) {
  400154:	697b      	ldr	r3, [r7, #20]
  400156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40015a:	2b00      	cmp	r3, #0
  40015c:	d076      	beq.n	40024c <local_twi_handler+0x12c>
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS);
  40015e:	4a76      	ldr	r2, [pc, #472]	; (400338 <local_twi_handler+0x218>)
  400160:	687b      	ldr	r3, [r7, #4]
  400162:	011b      	lsls	r3, r3, #4
  400164:	4413      	add	r3, r2
  400166:	685b      	ldr	r3, [r3, #4]
  400168:	4618      	mov	r0, r3
  40016a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40016e:	4b75      	ldr	r3, [pc, #468]	; (400344 <local_twi_handler+0x224>)
  400170:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  400172:	69b8      	ldr	r0, [r7, #24]
  400174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400178:	4b73      	ldr	r3, [pc, #460]	; (400348 <local_twi_handler+0x228>)
  40017a:	4798      	blx	r3

		uint8_t status;
		uint32_t timeout_counter = 0;
  40017c:	2300      	movs	r3, #0
  40017e:	623b      	str	r3, [r7, #32]

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  400180:	69bb      	ldr	r3, [r7, #24]
  400182:	6a1b      	ldr	r3, [r3, #32]
  400184:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXRDY) {
  400186:	7cfb      	ldrb	r3, [r7, #19]
  400188:	f003 0304 	and.w	r3, r3, #4
  40018c:	2b00      	cmp	r3, #0
  40018e:	d000      	beq.n	400192 <local_twi_handler+0x72>
				break;
  400190:	e00b      	b.n	4001aa <local_twi_handler+0x8a>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  400192:	6a3b      	ldr	r3, [r7, #32]
  400194:	3301      	adds	r3, #1
  400196:	623b      	str	r3, [r7, #32]
  400198:	6a3b      	ldr	r3, [r7, #32]
  40019a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40019e:	d103      	bne.n	4001a8 <local_twi_handler+0x88>
				transfer_timeout = true;
  4001a0:	2301      	movs	r3, #1
  4001a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  4001a6:	e000      	b.n	4001aa <local_twi_handler+0x8a>
			}
		}
  4001a8:	e7ea      	b.n	400180 <local_twi_handler+0x60>
		/* Complete the transfer - stop and last byte */
		twi_port->TWI_CR = TWI_CR_STOP;
  4001aa:	69bb      	ldr	r3, [r7, #24]
  4001ac:	2202      	movs	r2, #2
  4001ae:	601a      	str	r2, [r3, #0]
		twi_port->TWI_THR = twis[twi_index].buffer[twis[twi_index].length-1];
  4001b0:	4b66      	ldr	r3, [pc, #408]	; (40034c <local_twi_handler+0x22c>)
  4001b2:	687a      	ldr	r2, [r7, #4]
  4001b4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4001b8:	4964      	ldr	r1, [pc, #400]	; (40034c <local_twi_handler+0x22c>)
  4001ba:	687b      	ldr	r3, [r7, #4]
  4001bc:	00db      	lsls	r3, r3, #3
  4001be:	440b      	add	r3, r1
  4001c0:	685b      	ldr	r3, [r3, #4]
  4001c2:	3b01      	subs	r3, #1
  4001c4:	4413      	add	r3, r2
  4001c6:	781b      	ldrb	r3, [r3, #0]
  4001c8:	461a      	mov	r2, r3
  4001ca:	69bb      	ldr	r3, [r7, #24]
  4001cc:	635a      	str	r2, [r3, #52]	; 0x34

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
  4001ce:	69bb      	ldr	r3, [r7, #24]
  4001d0:	6a1b      	ldr	r3, [r3, #32]
  4001d2:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXCOMP) {
  4001d4:	7cfb      	ldrb	r3, [r7, #19]
  4001d6:	f003 0301 	and.w	r3, r3, #1
  4001da:	2b00      	cmp	r3, #0
  4001dc:	d000      	beq.n	4001e0 <local_twi_handler+0xc0>
				break;
  4001de:	e00b      	b.n	4001f8 <local_twi_handler+0xd8>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4001e0:	6a3b      	ldr	r3, [r7, #32]
  4001e2:	3301      	adds	r3, #1
  4001e4:	623b      	str	r3, [r7, #32]
  4001e6:	6a3b      	ldr	r3, [r7, #32]
  4001e8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4001ec:	d103      	bne.n	4001f6 <local_twi_handler+0xd6>
				transfer_timeout = true;
  4001ee:	2301      	movs	r3, #1
  4001f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  4001f4:	e000      	b.n	4001f8 <local_twi_handler+0xd8>
			}
		}
  4001f6:	e7ea      	b.n	4001ce <local_twi_handler+0xae>
		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  4001f8:	4a55      	ldr	r2, [pc, #340]	; (400350 <local_twi_handler+0x230>)
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	00db      	lsls	r3, r3, #3
  4001fe:	4413      	add	r3, r2
  400200:	685b      	ldr	r3, [r3, #4]
  400202:	2b00      	cmp	r3, #0
  400204:	d00c      	beq.n	400220 <local_twi_handler+0x100>
			xSemaphoreGiveFromISR(
  400206:	4a52      	ldr	r2, [pc, #328]	; (400350 <local_twi_handler+0x230>)
  400208:	687b      	ldr	r3, [r7, #4]
  40020a:	00db      	lsls	r3, r3, #3
  40020c:	4413      	add	r3, r2
  40020e:	685a      	ldr	r2, [r3, #4]
  400210:	f107 0308 	add.w	r3, r7, #8
  400214:	4610      	mov	r0, r2
  400216:	2100      	movs	r1, #0
  400218:	461a      	mov	r2, r3
  40021a:	2300      	movs	r3, #0
  40021c:	4c4d      	ldr	r4, [pc, #308]	; (400354 <local_twi_handler+0x234>)
  40021e:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  400220:	6a3b      	ldr	r3, [r7, #32]
  400222:	f1b3 3fff 	cmp.w	r3, #4294967295
  400226:	d011      	beq.n	40024c <local_twi_handler+0x12c>
			if (tx_dma_control[twi_index]. transaction_complete_notification_semaphore != NULL) {
  400228:	4b49      	ldr	r3, [pc, #292]	; (400350 <local_twi_handler+0x230>)
  40022a:	687a      	ldr	r2, [r7, #4]
  40022c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400230:	2b00      	cmp	r3, #0
  400232:	d00b      	beq.n	40024c <local_twi_handler+0x12c>
				xSemaphoreGiveFromISR(
  400234:	4b46      	ldr	r3, [pc, #280]	; (400350 <local_twi_handler+0x230>)
  400236:	687a      	ldr	r2, [r7, #4]
  400238:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  40023c:	f107 0308 	add.w	r3, r7, #8
  400240:	4610      	mov	r0, r2
  400242:	2100      	movs	r1, #0
  400244:	461a      	mov	r2, r3
  400246:	2300      	movs	r3, #0
  400248:	4c42      	ldr	r4, [pc, #264]	; (400354 <local_twi_handler+0x234>)
  40024a:	47a0      	blx	r4
			}
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
  40024c:	697b      	ldr	r3, [r7, #20]
  40024e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  400252:	2b00      	cmp	r3, #0
  400254:	f000 80aa 	beq.w	4003ac <local_twi_handler+0x28c>
		uint32_t timeout_counter = 0;
  400258:	2300      	movs	r3, #0
  40025a:	61fb      	str	r3, [r7, #28]
		uint32_t status;
		/* Must handle the two last bytes */
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_RXTDIS);
  40025c:	4a36      	ldr	r2, [pc, #216]	; (400338 <local_twi_handler+0x218>)
  40025e:	687b      	ldr	r3, [r7, #4]
  400260:	011b      	lsls	r3, r3, #4
  400262:	4413      	add	r3, r2
  400264:	685b      	ldr	r3, [r3, #4]
  400266:	4618      	mov	r0, r3
  400268:	2102      	movs	r1, #2
  40026a:	4b36      	ldr	r3, [pc, #216]	; (400344 <local_twi_handler+0x224>)
  40026c:	4798      	blx	r3

		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  40026e:	69b8      	ldr	r0, [r7, #24]
  400270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400274:	4b34      	ldr	r3, [pc, #208]	; (400348 <local_twi_handler+0x228>)
  400276:	4798      	blx	r3

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  400278:	69bb      	ldr	r3, [r7, #24]
  40027a:	6a1b      	ldr	r3, [r3, #32]
  40027c:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  40027e:	68fb      	ldr	r3, [r7, #12]
  400280:	f003 0302 	and.w	r3, r3, #2
  400284:	2b00      	cmp	r3, #0
  400286:	d000      	beq.n	40028a <local_twi_handler+0x16a>
				break;
  400288:	e008      	b.n	40029c <local_twi_handler+0x17c>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  40028a:	69fb      	ldr	r3, [r7, #28]
  40028c:	3301      	adds	r3, #1
  40028e:	61fb      	str	r3, [r7, #28]
  400290:	69fb      	ldr	r3, [r7, #28]
  400292:	f1b3 3fff 	cmp.w	r3, #4294967295
  400296:	d100      	bne.n	40029a <local_twi_handler+0x17a>
				break;
  400298:	e000      	b.n	40029c <local_twi_handler+0x17c>
			}
		}
  40029a:	e7ed      	b.n	400278 <local_twi_handler+0x158>
		/* Complete the transfer. */
		twi_port->TWI_CR = TWI_CR_STOP;
  40029c:	69bb      	ldr	r3, [r7, #24]
  40029e:	2202      	movs	r2, #2
  4002a0:	601a      	str	r2, [r3, #0]
		/* Read second last data */
		twis[twi_index].buffer[(twis[twi_index].length)-2] = twi_port->TWI_RHR;
  4002a2:	4b2a      	ldr	r3, [pc, #168]	; (40034c <local_twi_handler+0x22c>)
  4002a4:	687a      	ldr	r2, [r7, #4]
  4002a6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4002aa:	4928      	ldr	r1, [pc, #160]	; (40034c <local_twi_handler+0x22c>)
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	00db      	lsls	r3, r3, #3
  4002b0:	440b      	add	r3, r1
  4002b2:	685b      	ldr	r3, [r3, #4]
  4002b4:	3b02      	subs	r3, #2
  4002b6:	4413      	add	r3, r2
  4002b8:	69ba      	ldr	r2, [r7, #24]
  4002ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4002bc:	b2d2      	uxtb	r2, r2
  4002be:	701a      	strb	r2, [r3, #0]

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  4002c0:	69bb      	ldr	r3, [r7, #24]
  4002c2:	6a1b      	ldr	r3, [r3, #32]
  4002c4:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  4002c6:	68fb      	ldr	r3, [r7, #12]
  4002c8:	f003 0302 	and.w	r3, r3, #2
  4002cc:	2b00      	cmp	r3, #0
  4002ce:	d000      	beq.n	4002d2 <local_twi_handler+0x1b2>
				break;
  4002d0:	e008      	b.n	4002e4 <local_twi_handler+0x1c4>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4002d2:	69fb      	ldr	r3, [r7, #28]
  4002d4:	3301      	adds	r3, #1
  4002d6:	61fb      	str	r3, [r7, #28]
  4002d8:	69fb      	ldr	r3, [r7, #28]
  4002da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002de:	d100      	bne.n	4002e2 <local_twi_handler+0x1c2>
				break;
  4002e0:	e000      	b.n	4002e4 <local_twi_handler+0x1c4>
			}
		}
  4002e2:	e7ed      	b.n	4002c0 <local_twi_handler+0x1a0>

		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  4002e4:	69fb      	ldr	r3, [r7, #28]
  4002e6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002ea:	d035      	beq.n	400358 <local_twi_handler+0x238>
			/* Read last data */
			twis[twi_index].buffer[(twis[twi_index].length)-1] = twi_port->TWI_RHR;
  4002ec:	4b17      	ldr	r3, [pc, #92]	; (40034c <local_twi_handler+0x22c>)
  4002ee:	687a      	ldr	r2, [r7, #4]
  4002f0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4002f4:	4915      	ldr	r1, [pc, #84]	; (40034c <local_twi_handler+0x22c>)
  4002f6:	687b      	ldr	r3, [r7, #4]
  4002f8:	00db      	lsls	r3, r3, #3
  4002fa:	440b      	add	r3, r1
  4002fc:	685b      	ldr	r3, [r3, #4]
  4002fe:	3b01      	subs	r3, #1
  400300:	4413      	add	r3, r2
  400302:	69ba      	ldr	r2, [r7, #24]
  400304:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400306:	b2d2      	uxtb	r2, r2
  400308:	701a      	strb	r2, [r3, #0]
			timeout_counter = 0;
  40030a:	2300      	movs	r3, #0
  40030c:	61fb      	str	r3, [r7, #28]
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
  40030e:	69bb      	ldr	r3, [r7, #24]
  400310:	6a1b      	ldr	r3, [r3, #32]
  400312:	60fb      	str	r3, [r7, #12]
				if (status & TWI_SR_TXCOMP) {
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	f003 0301 	and.w	r3, r3, #1
  40031a:	2b00      	cmp	r3, #0
  40031c:	d000      	beq.n	400320 <local_twi_handler+0x200>
					break;
  40031e:	e01b      	b.n	400358 <local_twi_handler+0x238>
				}
				/* Check timeout condition. */
				if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  400320:	69fb      	ldr	r3, [r7, #28]
  400322:	3301      	adds	r3, #1
  400324:	61fb      	str	r3, [r7, #28]
  400326:	69fb      	ldr	r3, [r7, #28]
  400328:	f1b3 3fff 	cmp.w	r3, #4294967295
  40032c:	d103      	bne.n	400336 <local_twi_handler+0x216>
					transfer_timeout = true;
  40032e:	2301      	movs	r3, #1
  400330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
  400334:	e010      	b.n	400358 <local_twi_handler+0x238>
				}
			}
  400336:	e7ea      	b.n	40030e <local_twi_handler+0x1ee>
  400338:	00413284 	.word	0x00413284
  40033c:	00404ce1 	.word	0x00404ce1
  400340:	00404cf9 	.word	0x00404cf9
  400344:	00407ff1 	.word	0x00407ff1
  400348:	00404cc1 	.word	0x00404cc1
  40034c:	20000afc 	.word	0x20000afc
  400350:	20000adc 	.word	0x20000adc
  400354:	00406719 	.word	0x00406719
		}

		/* If the driver is supporting multi-threading, then return the access
		mutex.  NOTE: As the peripheral is half duplex there is only one
		access mutex, and the reception uses the tx access muted. */
		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  400358:	4a35      	ldr	r2, [pc, #212]	; (400430 <local_twi_handler+0x310>)
  40035a:	687b      	ldr	r3, [r7, #4]
  40035c:	00db      	lsls	r3, r3, #3
  40035e:	4413      	add	r3, r2
  400360:	685b      	ldr	r3, [r3, #4]
  400362:	2b00      	cmp	r3, #0
  400364:	d00c      	beq.n	400380 <local_twi_handler+0x260>
			xSemaphoreGiveFromISR(
  400366:	4a32      	ldr	r2, [pc, #200]	; (400430 <local_twi_handler+0x310>)
  400368:	687b      	ldr	r3, [r7, #4]
  40036a:	00db      	lsls	r3, r3, #3
  40036c:	4413      	add	r3, r2
  40036e:	685a      	ldr	r2, [r3, #4]
  400370:	f107 0308 	add.w	r3, r7, #8
  400374:	4610      	mov	r0, r2
  400376:	2100      	movs	r1, #0
  400378:	461a      	mov	r2, r3
  40037a:	2300      	movs	r3, #0
  40037c:	4c2d      	ldr	r4, [pc, #180]	; (400434 <local_twi_handler+0x314>)
  40037e:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the receiving task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if  (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  400380:	69fb      	ldr	r3, [r7, #28]
  400382:	f1b3 3fff 	cmp.w	r3, #4294967295
  400386:	d011      	beq.n	4003ac <local_twi_handler+0x28c>
			if (rx_dma_control[twi_index].transaction_complete_notification_semaphore != NULL) {
  400388:	4b2b      	ldr	r3, [pc, #172]	; (400438 <local_twi_handler+0x318>)
  40038a:	687a      	ldr	r2, [r7, #4]
  40038c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400390:	2b00      	cmp	r3, #0
  400392:	d00b      	beq.n	4003ac <local_twi_handler+0x28c>
				xSemaphoreGiveFromISR(
  400394:	4b28      	ldr	r3, [pc, #160]	; (400438 <local_twi_handler+0x318>)
  400396:	687a      	ldr	r2, [r7, #4]
  400398:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  40039c:	f107 0308 	add.w	r3, r7, #8
  4003a0:	4610      	mov	r0, r2
  4003a2:	2100      	movs	r1, #0
  4003a4:	461a      	mov	r2, r3
  4003a6:	2300      	movs	r3, #0
  4003a8:	4c22      	ldr	r4, [pc, #136]	; (400434 <local_twi_handler+0x314>)
  4003aa:	47a0      	blx	r4
						&higher_priority_task_woken);
			}
		}
	}

	if (((twi_status & SR_ERROR_INTERRUPTS) != 0) || (transfer_timeout == true)) {
  4003ac:	697b      	ldr	r3, [r7, #20]
  4003ae:	f403 7350 	and.w	r3, r3, #832	; 0x340
  4003b2:	2b00      	cmp	r3, #0
  4003b4:	d103      	bne.n	4003be <local_twi_handler+0x29e>
  4003b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4003ba:	2b00      	cmp	r3, #0
  4003bc:	d02f      	beq.n	40041e <local_twi_handler+0x2fe>
		Stop the transmission, disable interrupts used by the peripheral, and
		ensure the peripheral access mutex is made available to tasks.  As this
		peripheral is half duplex, only the Tx peripheral access mutex exits.*/

		/* Stop the PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  4003be:	4a1f      	ldr	r2, [pc, #124]	; (40043c <local_twi_handler+0x31c>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	011b      	lsls	r3, r3, #4
  4003c4:	4413      	add	r3, r2
  4003c6:	685b      	ldr	r3, [r3, #4]
  4003c8:	4618      	mov	r0, r3
  4003ca:	f240 2102 	movw	r1, #514	; 0x202
  4003ce:	4b1c      	ldr	r3, [pc, #112]	; (400440 <local_twi_handler+0x320>)
  4003d0:	4798      	blx	r3

		if (!(twi_status & TWI_SR_NACK)) {
  4003d2:	697b      	ldr	r3, [r7, #20]
  4003d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4003d8:	2b00      	cmp	r3, #0
  4003da:	d102      	bne.n	4003e2 <local_twi_handler+0x2c2>
			/* Do not send stop if NACK received. Handled by hardware */
			twi_port->TWI_CR = TWI_CR_STOP;
  4003dc:	69bb      	ldr	r3, [r7, #24]
  4003de:	2202      	movs	r2, #2
  4003e0:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  4003e2:	69b8      	ldr	r0, [r7, #24]
  4003e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4003e8:	4b16      	ldr	r3, [pc, #88]	; (400444 <local_twi_handler+0x324>)
  4003ea:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  4003ec:	69b8      	ldr	r0, [r7, #24]
  4003ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4003f2:	4b14      	ldr	r3, [pc, #80]	; (400444 <local_twi_handler+0x324>)
  4003f4:	4798      	blx	r3

		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  4003f6:	4a0e      	ldr	r2, [pc, #56]	; (400430 <local_twi_handler+0x310>)
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	00db      	lsls	r3, r3, #3
  4003fc:	4413      	add	r3, r2
  4003fe:	685b      	ldr	r3, [r3, #4]
  400400:	2b00      	cmp	r3, #0
  400402:	d00c      	beq.n	40041e <local_twi_handler+0x2fe>
			xSemaphoreGiveFromISR(
  400404:	4a0a      	ldr	r2, [pc, #40]	; (400430 <local_twi_handler+0x310>)
  400406:	687b      	ldr	r3, [r7, #4]
  400408:	00db      	lsls	r3, r3, #3
  40040a:	4413      	add	r3, r2
  40040c:	685a      	ldr	r2, [r3, #4]
  40040e:	f107 0308 	add.w	r3, r7, #8
  400412:	4610      	mov	r0, r2
  400414:	2100      	movs	r1, #0
  400416:	461a      	mov	r2, r3
  400418:	2300      	movs	r3, #0
  40041a:	4c06      	ldr	r4, [pc, #24]	; (400434 <local_twi_handler+0x314>)
  40041c:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  40041e:	68bb      	ldr	r3, [r7, #8]
  400420:	2b00      	cmp	r3, #0
  400422:	d001      	beq.n	400428 <local_twi_handler+0x308>
  400424:	4b08      	ldr	r3, [pc, #32]	; (400448 <local_twi_handler+0x328>)
  400426:	4798      	blx	r3
}
  400428:	372c      	adds	r7, #44	; 0x2c
  40042a:	46bd      	mov	sp, r7
  40042c:	bd90      	pop	{r4, r7, pc}
  40042e:	bf00      	nop
  400430:	20000adc 	.word	0x20000adc
  400434:	00406719 	.word	0x00406719
  400438:	20000aec 	.word	0x20000aec
  40043c:	00413284 	.word	0x00413284
  400440:	00407ff1 	.word	0x00407ff1
  400444:	00404cc1 	.word	0x00404cc1
  400448:	0040609d 	.word	0x0040609d

0040044c <TWI0_Handler>:
#endif /* TWI */

#ifdef TWI0

void TWI0_Handler(void)
{
  40044c:	b580      	push	{r7, lr}
  40044e:	af00      	add	r7, sp, #0
	local_twi_handler(0);
  400450:	2000      	movs	r0, #0
  400452:	4b01      	ldr	r3, [pc, #4]	; (400458 <TWI0_Handler+0xc>)
  400454:	4798      	blx	r3
}
  400456:	bd80      	pop	{r7, pc}
  400458:	00400121 	.word	0x00400121

0040045c <TWI1_Handler>:
#endif

#ifdef TWI1

void TWI1_Handler(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	local_twi_handler(1);
  400460:	2001      	movs	r0, #1
  400462:	4b01      	ldr	r3, [pc, #4]	; (400468 <TWI1_Handler+0xc>)
  400464:	4798      	blx	r3
}
  400466:	bd80      	pop	{r7, pc}
  400468:	00400121 	.word	0x00400121

0040046c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  40046c:	b480      	push	{r7}
  40046e:	b083      	sub	sp, #12
  400470:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400472:	f3ef 8310 	mrs	r3, PRIMASK
  400476:	603b      	str	r3, [r7, #0]
  return(result);
  400478:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  40047a:	2b00      	cmp	r3, #0
  40047c:	bf14      	ite	ne
  40047e:	2300      	movne	r3, #0
  400480:	2301      	moveq	r3, #1
  400482:	b2db      	uxtb	r3, r3
  400484:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400486:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400488:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40048c:	4b04      	ldr	r3, [pc, #16]	; (4004a0 <cpu_irq_save+0x34>)
  40048e:	2200      	movs	r2, #0
  400490:	701a      	strb	r2, [r3, #0]
	return flags;
  400492:	687b      	ldr	r3, [r7, #4]
}
  400494:	4618      	mov	r0, r3
  400496:	370c      	adds	r7, #12
  400498:	46bd      	mov	sp, r7
  40049a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40049e:	4770      	bx	lr
  4004a0:	2000020c 	.word	0x2000020c

004004a4 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4004a4:	b480      	push	{r7}
  4004a6:	b083      	sub	sp, #12
  4004a8:	af00      	add	r7, sp, #0
  4004aa:	6078      	str	r0, [r7, #4]
	return (flags);
  4004ac:	687b      	ldr	r3, [r7, #4]
  4004ae:	2b00      	cmp	r3, #0
  4004b0:	bf0c      	ite	eq
  4004b2:	2300      	moveq	r3, #0
  4004b4:	2301      	movne	r3, #1
  4004b6:	b2db      	uxtb	r3, r3
}
  4004b8:	4618      	mov	r0, r3
  4004ba:	370c      	adds	r7, #12
  4004bc:	46bd      	mov	sp, r7
  4004be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004c2:	4770      	bx	lr

004004c4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  4004c4:	b580      	push	{r7, lr}
  4004c6:	b082      	sub	sp, #8
  4004c8:	af00      	add	r7, sp, #0
  4004ca:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4004cc:	6878      	ldr	r0, [r7, #4]
  4004ce:	4b07      	ldr	r3, [pc, #28]	; (4004ec <cpu_irq_restore+0x28>)
  4004d0:	4798      	blx	r3
  4004d2:	4603      	mov	r3, r0
  4004d4:	2b00      	cmp	r3, #0
  4004d6:	d005      	beq.n	4004e4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4004d8:	4b05      	ldr	r3, [pc, #20]	; (4004f0 <cpu_irq_restore+0x2c>)
  4004da:	2201      	movs	r2, #1
  4004dc:	701a      	strb	r2, [r3, #0]
  4004de:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4004e2:	b662      	cpsie	i
}
  4004e4:	3708      	adds	r7, #8
  4004e6:	46bd      	mov	sp, r7
  4004e8:	bd80      	pop	{r7, pc}
  4004ea:	bf00      	nop
  4004ec:	004004a5 	.word	0x004004a5
  4004f0:	2000020c 	.word	0x2000020c

004004f4 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
  4004f4:	b480      	push	{r7}
  4004f6:	b083      	sub	sp, #12
  4004f8:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  4004fa:	2300      	movs	r3, #0
  4004fc:	71bb      	strb	r3, [r7, #6]
	udi_cdc_nb_comm_enabled = 0;
  4004fe:	4b41      	ldr	r3, [pc, #260]	; (400604 <udi_cdc_comm_enable+0x110>)
  400500:	2200      	movs	r2, #0
  400502:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  400504:	79ba      	ldrb	r2, [r7, #6]
  400506:	4b40      	ldr	r3, [pc, #256]	; (400608 <udi_cdc_comm_enable+0x114>)
  400508:	2100      	movs	r1, #0
  40050a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	uid_cdc_state_msg[port].header.bmRequestType =
  40050e:	79ba      	ldrb	r2, [r7, #6]
  400510:	493e      	ldr	r1, [pc, #248]	; (40060c <udi_cdc_comm_enable+0x118>)
  400512:	4613      	mov	r3, r2
  400514:	009b      	lsls	r3, r3, #2
  400516:	4413      	add	r3, r2
  400518:	005b      	lsls	r3, r3, #1
  40051a:	440b      	add	r3, r1
  40051c:	22a1      	movs	r2, #161	; 0xa1
  40051e:	701a      	strb	r2, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400520:	79ba      	ldrb	r2, [r7, #6]
  400522:	493a      	ldr	r1, [pc, #232]	; (40060c <udi_cdc_comm_enable+0x118>)
  400524:	4613      	mov	r3, r2
  400526:	009b      	lsls	r3, r3, #2
  400528:	4413      	add	r3, r2
  40052a:	005b      	lsls	r3, r3, #1
  40052c:	440b      	add	r3, r1
  40052e:	2220      	movs	r2, #32
  400530:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  400532:	79ba      	ldrb	r2, [r7, #6]
  400534:	4935      	ldr	r1, [pc, #212]	; (40060c <udi_cdc_comm_enable+0x118>)
  400536:	4613      	mov	r3, r2
  400538:	009b      	lsls	r3, r3, #2
  40053a:	4413      	add	r3, r2
  40053c:	005b      	lsls	r3, r3, #1
  40053e:	440b      	add	r3, r1
  400540:	2200      	movs	r2, #0
  400542:	805a      	strh	r2, [r3, #2]

	switch (port) {
  400544:	79bb      	ldrb	r3, [r7, #6]
  400546:	2b00      	cmp	r3, #0
  400548:	d102      	bne.n	400550 <udi_cdc_comm_enable+0x5c>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
  40054a:	2300      	movs	r3, #0
  40054c:	71fb      	strb	r3, [r7, #7]
  40054e:	e002      	b.n	400556 <udi_cdc_comm_enable+0x62>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
  400550:	2300      	movs	r3, #0
  400552:	71fb      	strb	r3, [r7, #7]
		break;
  400554:	bf00      	nop
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  400556:	79ba      	ldrb	r2, [r7, #6]
  400558:	79fb      	ldrb	r3, [r7, #7]
  40055a:	b299      	uxth	r1, r3
  40055c:	482b      	ldr	r0, [pc, #172]	; (40060c <udi_cdc_comm_enable+0x118>)
  40055e:	4613      	mov	r3, r2
  400560:	009b      	lsls	r3, r3, #2
  400562:	4413      	add	r3, r2
  400564:	005b      	lsls	r3, r3, #1
  400566:	4403      	add	r3, r0
  400568:	460a      	mov	r2, r1
  40056a:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  40056c:	79ba      	ldrb	r2, [r7, #6]
  40056e:	4927      	ldr	r1, [pc, #156]	; (40060c <udi_cdc_comm_enable+0x118>)
  400570:	4613      	mov	r3, r2
  400572:	009b      	lsls	r3, r3, #2
  400574:	4413      	add	r3, r2
  400576:	005b      	lsls	r3, r3, #1
  400578:	440b      	add	r3, r1
  40057a:	2202      	movs	r2, #2
  40057c:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  40057e:	79ba      	ldrb	r2, [r7, #6]
  400580:	4922      	ldr	r1, [pc, #136]	; (40060c <udi_cdc_comm_enable+0x118>)
  400582:	4613      	mov	r3, r2
  400584:	009b      	lsls	r3, r3, #2
  400586:	4413      	add	r3, r2
  400588:	005b      	lsls	r3, r3, #1
  40058a:	440b      	add	r3, r1
  40058c:	3308      	adds	r3, #8
  40058e:	2200      	movs	r2, #0
  400590:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400592:	79ba      	ldrb	r2, [r7, #6]
  400594:	491e      	ldr	r1, [pc, #120]	; (400610 <udi_cdc_comm_enable+0x11c>)
  400596:	4613      	mov	r3, r2
  400598:	00db      	lsls	r3, r3, #3
  40059a:	1a9b      	subs	r3, r3, r2
  40059c:	440b      	add	r3, r1
  40059e:	2200      	movs	r2, #0
  4005a0:	701a      	strb	r2, [r3, #0]
  4005a2:	2200      	movs	r2, #0
  4005a4:	f062 027b 	orn	r2, r2, #123	; 0x7b
  4005a8:	705a      	strb	r2, [r3, #1]
  4005aa:	2200      	movs	r2, #0
  4005ac:	f042 0203 	orr.w	r2, r2, #3
  4005b0:	709a      	strb	r2, [r3, #2]
  4005b2:	2200      	movs	r2, #0
  4005b4:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  4005b6:	79ba      	ldrb	r2, [r7, #6]
  4005b8:	4915      	ldr	r1, [pc, #84]	; (400610 <udi_cdc_comm_enable+0x11c>)
  4005ba:	4613      	mov	r3, r2
  4005bc:	00db      	lsls	r3, r3, #3
  4005be:	1a9b      	subs	r3, r3, r2
  4005c0:	440b      	add	r3, r1
  4005c2:	2200      	movs	r2, #0
  4005c4:	711a      	strb	r2, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  4005c6:	79ba      	ldrb	r2, [r7, #6]
  4005c8:	4911      	ldr	r1, [pc, #68]	; (400610 <udi_cdc_comm_enable+0x11c>)
  4005ca:	4613      	mov	r3, r2
  4005cc:	00db      	lsls	r3, r3, #3
  4005ce:	1a9b      	subs	r3, r3, r2
  4005d0:	440b      	add	r3, r1
  4005d2:	2200      	movs	r2, #0
  4005d4:	715a      	strb	r2, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  4005d6:	79ba      	ldrb	r2, [r7, #6]
  4005d8:	490d      	ldr	r1, [pc, #52]	; (400610 <udi_cdc_comm_enable+0x11c>)
  4005da:	4613      	mov	r3, r2
  4005dc:	00db      	lsls	r3, r3, #3
  4005de:	1a9b      	subs	r3, r3, r2
  4005e0:	440b      	add	r3, r1
  4005e2:	2208      	movs	r2, #8
  4005e4:	719a      	strb	r2, [r3, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  4005e6:	4b07      	ldr	r3, [pc, #28]	; (400604 <udi_cdc_comm_enable+0x110>)
  4005e8:	781b      	ldrb	r3, [r3, #0]
  4005ea:	b2db      	uxtb	r3, r3
  4005ec:	3301      	adds	r3, #1
  4005ee:	b2da      	uxtb	r2, r3
  4005f0:	4b04      	ldr	r3, [pc, #16]	; (400604 <udi_cdc_comm_enable+0x110>)
  4005f2:	701a      	strb	r2, [r3, #0]
	return true;
  4005f4:	2301      	movs	r3, #1
}
  4005f6:	4618      	mov	r0, r3
  4005f8:	370c      	adds	r7, #12
  4005fa:	46bd      	mov	sp, r7
  4005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400600:	4770      	bx	lr
  400602:	bf00      	nop
  400604:	20000b24 	.word	0x20000b24
  400608:	20000b14 	.word	0x20000b14
  40060c:	20000b18 	.word	0x20000b18
  400610:	20000b0c 	.word	0x20000b0c

00400614 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
  400614:	b580      	push	{r7, lr}
  400616:	b082      	sub	sp, #8
  400618:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  40061a:	2300      	movs	r3, #0
  40061c:	71fb      	strb	r3, [r7, #7]
	udi_cdc_nb_data_enabled = 0;
  40061e:	4b2a      	ldr	r3, [pc, #168]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  400620:	2200      	movs	r2, #0
  400622:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  400624:	79fb      	ldrb	r3, [r7, #7]
  400626:	4a29      	ldr	r2, [pc, #164]	; (4006cc <udi_cdc_data_enable+0xb8>)
  400628:	2100      	movs	r1, #0
  40062a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40062c:	79fb      	ldrb	r3, [r7, #7]
  40062e:	4a28      	ldr	r2, [pc, #160]	; (4006d0 <udi_cdc_data_enable+0xbc>)
  400630:	2100      	movs	r1, #0
  400632:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
  400634:	79fb      	ldrb	r3, [r7, #7]
  400636:	4a27      	ldr	r2, [pc, #156]	; (4006d4 <udi_cdc_data_enable+0xc0>)
  400638:	2100      	movs	r1, #0
  40063a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
  40063c:	79fa      	ldrb	r2, [r7, #7]
  40063e:	4b26      	ldr	r3, [pc, #152]	; (4006d8 <udi_cdc_data_enable+0xc4>)
  400640:	2100      	movs	r1, #0
  400642:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400646:	79fb      	ldrb	r3, [r7, #7]
  400648:	4a23      	ldr	r2, [pc, #140]	; (4006d8 <udi_cdc_data_enable+0xc4>)
  40064a:	009b      	lsls	r3, r3, #2
  40064c:	4413      	add	r3, r2
  40064e:	2200      	movs	r2, #0
  400650:	805a      	strh	r2, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  400652:	79fa      	ldrb	r2, [r7, #7]
  400654:	4b21      	ldr	r3, [pc, #132]	; (4006dc <udi_cdc_data_enable+0xc8>)
  400656:	2100      	movs	r1, #0
  400658:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_tx_send(port);
  40065c:	79fb      	ldrb	r3, [r7, #7]
  40065e:	4618      	mov	r0, r3
  400660:	4b1f      	ldr	r3, [pc, #124]	; (4006e0 <udi_cdc_data_enable+0xcc>)
  400662:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  400664:	79fb      	ldrb	r3, [r7, #7]
  400666:	4a1f      	ldr	r2, [pc, #124]	; (4006e4 <udi_cdc_data_enable+0xd0>)
  400668:	2100      	movs	r1, #0
  40066a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
  40066c:	79fb      	ldrb	r3, [r7, #7]
  40066e:	4a1e      	ldr	r2, [pc, #120]	; (4006e8 <udi_cdc_data_enable+0xd4>)
  400670:	2100      	movs	r1, #0
  400672:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
  400674:	79fa      	ldrb	r2, [r7, #7]
  400676:	4b1d      	ldr	r3, [pc, #116]	; (4006ec <udi_cdc_data_enable+0xd8>)
  400678:	2100      	movs	r1, #0
  40067a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
	udi_cdc_rx_pos[port] = 0;
  40067e:	79fa      	ldrb	r2, [r7, #7]
  400680:	4b1b      	ldr	r3, [pc, #108]	; (4006f0 <udi_cdc_data_enable+0xdc>)
  400682:	2100      	movs	r1, #0
  400684:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if (!udi_cdc_rx_start(port)) {
  400688:	79fb      	ldrb	r3, [r7, #7]
  40068a:	4618      	mov	r0, r3
  40068c:	4b19      	ldr	r3, [pc, #100]	; (4006f4 <udi_cdc_data_enable+0xe0>)
  40068e:	4798      	blx	r3
  400690:	4603      	mov	r3, r0
  400692:	f083 0301 	eor.w	r3, r3, #1
  400696:	b2db      	uxtb	r3, r3
  400698:	2b00      	cmp	r3, #0
  40069a:	d001      	beq.n	4006a0 <udi_cdc_data_enable+0x8c>
		return false;
  40069c:	2300      	movs	r3, #0
  40069e:	e00f      	b.n	4006c0 <udi_cdc_data_enable+0xac>
	}
	udi_cdc_nb_data_enabled++;
  4006a0:	4b09      	ldr	r3, [pc, #36]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  4006a2:	781b      	ldrb	r3, [r3, #0]
  4006a4:	b2db      	uxtb	r3, r3
  4006a6:	3301      	adds	r3, #1
  4006a8:	b2da      	uxtb	r2, r3
  4006aa:	4b07      	ldr	r3, [pc, #28]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  4006ac:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  4006ae:	4b06      	ldr	r3, [pc, #24]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  4006b0:	781b      	ldrb	r3, [r3, #0]
  4006b2:	b2db      	uxtb	r3, r3
  4006b4:	2b01      	cmp	r3, #1
  4006b6:	d102      	bne.n	4006be <udi_cdc_data_enable+0xaa>
		udi_cdc_data_running = true;
  4006b8:	4b0f      	ldr	r3, [pc, #60]	; (4006f8 <udi_cdc_data_enable+0xe4>)
  4006ba:	2201      	movs	r2, #1
  4006bc:	701a      	strb	r2, [r3, #0]
	}
	return true;
  4006be:	2301      	movs	r3, #1
}
  4006c0:	4618      	mov	r0, r3
  4006c2:	3708      	adds	r7, #8
  4006c4:	46bd      	mov	sp, r7
  4006c6:	bd80      	pop	{r7, pc}
  4006c8:	20000b25 	.word	0x20000b25
  4006cc:	20000c44 	.word	0x20000c44
  4006d0:	20000c48 	.word	0x20000c48
  4006d4:	20000c3c 	.word	0x20000c3c
  4006d8:	20000c38 	.word	0x20000c38
  4006dc:	20000c40 	.word	0x20000c40
  4006e0:	00400aa9 	.word	0x00400aa9
  4006e4:	20000bb4 	.word	0x20000bb4
  4006e8:	20000bac 	.word	0x20000bac
  4006ec:	20000ba8 	.word	0x20000ba8
  4006f0:	20000bb0 	.word	0x20000bb0
  4006f4:	00400895 	.word	0x00400895
  4006f8:	20000b26 	.word	0x20000b26

004006fc <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
  4006fc:	b480      	push	{r7}
  4006fe:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400700:	4b05      	ldr	r3, [pc, #20]	; (400718 <udi_cdc_comm_disable+0x1c>)
  400702:	781b      	ldrb	r3, [r3, #0]
  400704:	b2db      	uxtb	r3, r3
  400706:	3b01      	subs	r3, #1
  400708:	b2da      	uxtb	r2, r3
  40070a:	4b03      	ldr	r3, [pc, #12]	; (400718 <udi_cdc_comm_disable+0x1c>)
  40070c:	701a      	strb	r2, [r3, #0]
}
  40070e:	46bd      	mov	sp, r7
  400710:	f85d 7b04 	ldr.w	r7, [sp], #4
  400714:	4770      	bx	lr
  400716:	bf00      	nop
  400718:	20000b24 	.word	0x20000b24

0040071c <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
  40071c:	b480      	push	{r7}
  40071e:	b083      	sub	sp, #12
  400720:	af00      	add	r7, sp, #0
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400722:	4b09      	ldr	r3, [pc, #36]	; (400748 <udi_cdc_data_disable+0x2c>)
  400724:	781b      	ldrb	r3, [r3, #0]
  400726:	b2db      	uxtb	r3, r3
  400728:	3b01      	subs	r3, #1
  40072a:	b2da      	uxtb	r2, r3
  40072c:	4b06      	ldr	r3, [pc, #24]	; (400748 <udi_cdc_data_disable+0x2c>)
  40072e:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
  400730:	4b05      	ldr	r3, [pc, #20]	; (400748 <udi_cdc_data_disable+0x2c>)
  400732:	781b      	ldrb	r3, [r3, #0]
  400734:	71fb      	strb	r3, [r7, #7]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  400736:	4b05      	ldr	r3, [pc, #20]	; (40074c <udi_cdc_data_disable+0x30>)
  400738:	2200      	movs	r2, #0
  40073a:	701a      	strb	r2, [r3, #0]
}
  40073c:	370c      	adds	r7, #12
  40073e:	46bd      	mov	sp, r7
  400740:	f85d 7b04 	ldr.w	r7, [sp], #4
  400744:	4770      	bx	lr
  400746:	bf00      	nop
  400748:	20000b25 	.word	0x20000b25
  40074c:	20000b26 	.word	0x20000b26

00400750 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
  400750:	b580      	push	{r7, lr}
  400752:	b082      	sub	sp, #8
  400754:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
  400756:	4b2b      	ldr	r3, [pc, #172]	; (400804 <udi_cdc_comm_setup+0xb4>)
  400758:	4798      	blx	r3
  40075a:	4603      	mov	r3, r0
  40075c:	71fb      	strb	r3, [r7, #7]

	if (Udd_setup_is_in()) {
  40075e:	4b2a      	ldr	r3, [pc, #168]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400760:	781b      	ldrb	r3, [r3, #0]
  400762:	b2db      	uxtb	r3, r3
  400764:	b25b      	sxtb	r3, r3
  400766:	2b00      	cmp	r3, #0
  400768:	da1c      	bge.n	4007a4 <udi_cdc_comm_setup+0x54>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  40076a:	4b27      	ldr	r3, [pc, #156]	; (400808 <udi_cdc_comm_setup+0xb8>)
  40076c:	781b      	ldrb	r3, [r3, #0]
  40076e:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400772:	2b20      	cmp	r3, #32
  400774:	d116      	bne.n	4007a4 <udi_cdc_comm_setup+0x54>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  400776:	4b24      	ldr	r3, [pc, #144]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400778:	785b      	ldrb	r3, [r3, #1]
  40077a:	2b21      	cmp	r3, #33	; 0x21
  40077c:	d112      	bne.n	4007a4 <udi_cdc_comm_setup+0x54>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  40077e:	4b22      	ldr	r3, [pc, #136]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400780:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  400782:	2b07      	cmp	r3, #7
  400784:	d001      	beq.n	40078a <udi_cdc_comm_setup+0x3a>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  400786:	2300      	movs	r3, #0
  400788:	e038      	b.n	4007fc <udi_cdc_comm_setup+0xac>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
  40078a:	79fa      	ldrb	r2, [r7, #7]
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
  40078c:	4613      	mov	r3, r2
  40078e:	00db      	lsls	r3, r3, #3
  400790:	1a9b      	subs	r3, r3, r2
  400792:	4a1e      	ldr	r2, [pc, #120]	; (40080c <udi_cdc_comm_setup+0xbc>)
  400794:	441a      	add	r2, r3
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
  400796:	4b1c      	ldr	r3, [pc, #112]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400798:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  40079a:	4b1b      	ldr	r3, [pc, #108]	; (400808 <udi_cdc_comm_setup+0xb8>)
  40079c:	2207      	movs	r2, #7
  40079e:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4007a0:	2301      	movs	r3, #1
  4007a2:	e02b      	b.n	4007fc <udi_cdc_comm_setup+0xac>
			}
		}
	}
	if (Udd_setup_is_out()) {
  4007a4:	4b18      	ldr	r3, [pc, #96]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007a6:	781b      	ldrb	r3, [r3, #0]
  4007a8:	b2db      	uxtb	r3, r3
  4007aa:	b25b      	sxtb	r3, r3
  4007ac:	2b00      	cmp	r3, #0
  4007ae:	db24      	blt.n	4007fa <udi_cdc_comm_setup+0xaa>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4007b0:	4b15      	ldr	r3, [pc, #84]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007b2:	781b      	ldrb	r3, [r3, #0]
  4007b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4007b8:	2b20      	cmp	r3, #32
  4007ba:	d11e      	bne.n	4007fa <udi_cdc_comm_setup+0xaa>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  4007bc:	4b12      	ldr	r3, [pc, #72]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007be:	785b      	ldrb	r3, [r3, #1]
  4007c0:	2b20      	cmp	r3, #32
  4007c2:	d002      	beq.n	4007ca <udi_cdc_comm_setup+0x7a>
  4007c4:	2b22      	cmp	r3, #34	; 0x22
  4007c6:	d016      	beq.n	4007f6 <udi_cdc_comm_setup+0xa6>
  4007c8:	e017      	b.n	4007fa <udi_cdc_comm_setup+0xaa>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  4007ca:	4b0f      	ldr	r3, [pc, #60]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007cc:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  4007ce:	2b07      	cmp	r3, #7
  4007d0:	d001      	beq.n	4007d6 <udi_cdc_comm_setup+0x86>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4007d2:	2300      	movs	r3, #0
  4007d4:	e012      	b.n	4007fc <udi_cdc_comm_setup+0xac>
				udd_g_ctrlreq.callback =
  4007d6:	4b0c      	ldr	r3, [pc, #48]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007d8:	4a0d      	ldr	r2, [pc, #52]	; (400810 <udi_cdc_comm_setup+0xc0>)
  4007da:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
  4007dc:	79fa      	ldrb	r2, [r7, #7]
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
  4007de:	4613      	mov	r3, r2
  4007e0:	00db      	lsls	r3, r3, #3
  4007e2:	1a9b      	subs	r3, r3, r2
  4007e4:	4a09      	ldr	r2, [pc, #36]	; (40080c <udi_cdc_comm_setup+0xbc>)
  4007e6:	441a      	add	r2, r3
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
  4007e8:	4b07      	ldr	r3, [pc, #28]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007ea:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  4007ec:	4b06      	ldr	r3, [pc, #24]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007ee:	2207      	movs	r2, #7
  4007f0:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4007f2:	2301      	movs	r3, #1
  4007f4:	e002      	b.n	4007fc <udi_cdc_comm_setup+0xac>
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
  4007f6:	2301      	movs	r3, #1
  4007f8:	e000      	b.n	4007fc <udi_cdc_comm_setup+0xac>
			}
		}
	}
	return false;  // request Not supported
  4007fa:	2300      	movs	r3, #0
}
  4007fc:	4618      	mov	r0, r3
  4007fe:	3708      	adds	r7, #8
  400800:	46bd      	mov	sp, r7
  400802:	bd80      	pop	{r7, pc}
  400804:	0040084d 	.word	0x0040084d
  400808:	2000af50 	.word	0x2000af50
  40080c:	20000b0c 	.word	0x20000b0c
  400810:	0040087d 	.word	0x0040087d

00400814 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
  400814:	b480      	push	{r7}
  400816:	af00      	add	r7, sp, #0
	return false;  // request Not supported
  400818:	2300      	movs	r3, #0
}
  40081a:	4618      	mov	r0, r3
  40081c:	46bd      	mov	sp, r7
  40081e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400822:	4770      	bx	lr

00400824 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
  400824:	b480      	push	{r7}
  400826:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
  400828:	2300      	movs	r3, #0
}
  40082a:	4618      	mov	r0, r3
  40082c:	46bd      	mov	sp, r7
  40082e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400832:	4770      	bx	lr

00400834 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
  400834:	b580      	push	{r7, lr}
  400836:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  400838:	4b02      	ldr	r3, [pc, #8]	; (400844 <udi_cdc_data_sof_notify+0x10>)
  40083a:	781b      	ldrb	r3, [r3, #0]
  40083c:	4618      	mov	r0, r3
  40083e:	4b02      	ldr	r3, [pc, #8]	; (400848 <udi_cdc_data_sof_notify+0x14>)
  400840:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
  400842:	bd80      	pop	{r7, pc}
  400844:	20000c4c 	.word	0x20000c4c
  400848:	00400aa9 	.word	0x00400aa9

0040084c <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
  40084c:	b480      	push	{r7}
  40084e:	b083      	sub	sp, #12
  400850:	af00      	add	r7, sp, #0
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
  400852:	4b09      	ldr	r3, [pc, #36]	; (400878 <udi_cdc_setup_to_port+0x2c>)
  400854:	889b      	ldrh	r3, [r3, #4]
  400856:	b2db      	uxtb	r3, r3
  400858:	2b00      	cmp	r3, #0
  40085a:	d102      	bne.n	400862 <udi_cdc_setup_to_port+0x16>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
  40085c:	2300      	movs	r3, #0
  40085e:	71fb      	strb	r3, [r7, #7]
  400860:	e002      	b.n	400868 <udi_cdc_setup_to_port+0x1c>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
  400862:	2300      	movs	r3, #0
  400864:	71fb      	strb	r3, [r7, #7]
		break;
  400866:	bf00      	nop
	}
	return port;
  400868:	79fb      	ldrb	r3, [r7, #7]
}
  40086a:	4618      	mov	r0, r3
  40086c:	370c      	adds	r7, #12
  40086e:	46bd      	mov	sp, r7
  400870:	f85d 7b04 	ldr.w	r7, [sp], #4
  400874:	4770      	bx	lr
  400876:	bf00      	nop
  400878:	2000af50 	.word	0x2000af50

0040087c <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
  40087c:	b580      	push	{r7, lr}
  40087e:	b082      	sub	sp, #8
  400880:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
  400882:	4b03      	ldr	r3, [pc, #12]	; (400890 <udi_cdc_line_coding_received+0x14>)
  400884:	4798      	blx	r3
  400886:	4603      	mov	r3, r0
  400888:	71fb      	strb	r3, [r7, #7]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
  40088a:	3708      	adds	r7, #8
  40088c:	46bd      	mov	sp, r7
  40088e:	bd80      	pop	{r7, pc}
  400890:	0040084d 	.word	0x0040084d

00400894 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  400894:	b590      	push	{r4, r7, lr}
  400896:	b089      	sub	sp, #36	; 0x24
  400898:	af02      	add	r7, sp, #8
  40089a:	4603      	mov	r3, r0
  40089c:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  40089e:	2300      	movs	r3, #0
  4008a0:	75bb      	strb	r3, [r7, #22]
#endif

	flags = cpu_irq_save();
  4008a2:	4b2c      	ldr	r3, [pc, #176]	; (400954 <udi_cdc_rx_start+0xc0>)
  4008a4:	4798      	blx	r3
  4008a6:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  4008a8:	7dbb      	ldrb	r3, [r7, #22]
  4008aa:	4a2b      	ldr	r2, [pc, #172]	; (400958 <udi_cdc_rx_start+0xc4>)
  4008ac:	5cd3      	ldrb	r3, [r2, r3]
  4008ae:	73fb      	strb	r3, [r7, #15]
	if (udi_cdc_rx_trans_ongoing[port] ||
  4008b0:	7dbb      	ldrb	r3, [r7, #22]
  4008b2:	4a2a      	ldr	r2, [pc, #168]	; (40095c <udi_cdc_rx_start+0xc8>)
  4008b4:	5cd3      	ldrb	r3, [r2, r3]
  4008b6:	b2db      	uxtb	r3, r3
  4008b8:	2b00      	cmp	r3, #0
  4008ba:	d10d      	bne.n	4008d8 <udi_cdc_rx_start+0x44>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  4008bc:	7dba      	ldrb	r2, [r7, #22]
  4008be:	4b28      	ldr	r3, [pc, #160]	; (400960 <udi_cdc_rx_start+0xcc>)
  4008c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  4008c4:	b29a      	uxth	r2, r3
  4008c6:	7db8      	ldrb	r0, [r7, #22]
  4008c8:	7bf9      	ldrb	r1, [r7, #15]
  4008ca:	4b26      	ldr	r3, [pc, #152]	; (400964 <udi_cdc_rx_start+0xd0>)
  4008cc:	0040      	lsls	r0, r0, #1
  4008ce:	4401      	add	r1, r0
  4008d0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
  4008d4:	429a      	cmp	r2, r3
  4008d6:	d204      	bcs.n	4008e2 <udi_cdc_rx_start+0x4e>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
  4008d8:	6938      	ldr	r0, [r7, #16]
  4008da:	4b23      	ldr	r3, [pc, #140]	; (400968 <udi_cdc_rx_start+0xd4>)
  4008dc:	4798      	blx	r3
		return false;
  4008de:	2300      	movs	r3, #0
  4008e0:	e033      	b.n	40094a <udi_cdc_rx_start+0xb6>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  4008e2:	7dba      	ldrb	r2, [r7, #22]
  4008e4:	4b1e      	ldr	r3, [pc, #120]	; (400960 <udi_cdc_rx_start+0xcc>)
  4008e6:	2100      	movs	r1, #0
  4008e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4008ec:	7dbb      	ldrb	r3, [r7, #22]
  4008ee:	7bfa      	ldrb	r2, [r7, #15]
  4008f0:	2a00      	cmp	r2, #0
  4008f2:	bf14      	ite	ne
  4008f4:	2200      	movne	r2, #0
  4008f6:	2201      	moveq	r2, #1
  4008f8:	b2d2      	uxtb	r2, r2
  4008fa:	4611      	mov	r1, r2
  4008fc:	4a16      	ldr	r2, [pc, #88]	; (400958 <udi_cdc_rx_start+0xc4>)
  4008fe:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  400900:	7dbb      	ldrb	r3, [r7, #22]
  400902:	4a16      	ldr	r2, [pc, #88]	; (40095c <udi_cdc_rx_start+0xc8>)
  400904:	2101      	movs	r1, #1
  400906:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
  400908:	6938      	ldr	r0, [r7, #16]
  40090a:	4b17      	ldr	r3, [pc, #92]	; (400968 <udi_cdc_rx_start+0xd4>)
  40090c:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
  40090e:	7dbb      	ldrb	r3, [r7, #22]
  400910:	4618      	mov	r0, r3
  400912:	4b16      	ldr	r3, [pc, #88]	; (40096c <udi_cdc_rx_start+0xd8>)
  400914:	4798      	blx	r3
		UDI_CDC_RX_NOTIFY(port);
	}
	// Send the buffer with enable of short packet
	switch (port) {
  400916:	7dbb      	ldrb	r3, [r7, #22]
  400918:	2b00      	cmp	r3, #0
  40091a:	d102      	bne.n	400922 <udi_cdc_rx_start+0x8e>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
  40091c:	2302      	movs	r3, #2
  40091e:	75fb      	strb	r3, [r7, #23]
  400920:	e002      	b.n	400928 <udi_cdc_rx_start+0x94>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
  400922:	2302      	movs	r3, #2
  400924:	75fb      	strb	r3, [r7, #23]
		break;
  400926:	bf00      	nop
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
  400928:	7dba      	ldrb	r2, [r7, #22]
  40092a:	7bfb      	ldrb	r3, [r7, #15]
  40092c:	0052      	lsls	r2, r2, #1
  40092e:	4413      	add	r3, r2
  400930:	019a      	lsls	r2, r3, #6
  400932:	4b0f      	ldr	r3, [pc, #60]	; (400970 <udi_cdc_rx_start+0xdc>)
  400934:	4413      	add	r3, r2
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
  400936:	7dfa      	ldrb	r2, [r7, #23]
  400938:	490e      	ldr	r1, [pc, #56]	; (400974 <udi_cdc_rx_start+0xe0>)
  40093a:	9100      	str	r1, [sp, #0]
  40093c:	4610      	mov	r0, r2
  40093e:	2101      	movs	r1, #1
  400940:	461a      	mov	r2, r3
  400942:	2340      	movs	r3, #64	; 0x40
  400944:	4c0c      	ldr	r4, [pc, #48]	; (400978 <udi_cdc_rx_start+0xe4>)
  400946:	47a0      	blx	r4
  400948:	4603      	mov	r3, r0
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  40094a:	4618      	mov	r0, r3
  40094c:	371c      	adds	r7, #28
  40094e:	46bd      	mov	sp, r7
  400950:	bd90      	pop	{r4, r7, pc}
  400952:	bf00      	nop
  400954:	0040046d 	.word	0x0040046d
  400958:	20000bac 	.word	0x20000bac
  40095c:	20000bb4 	.word	0x20000bb4
  400960:	20000bb0 	.word	0x20000bb0
  400964:	20000ba8 	.word	0x20000ba8
  400968:	004004c5 	.word	0x004004c5
  40096c:	00400cd1 	.word	0x00400cd1
  400970:	20000b28 	.word	0x20000b28
  400974:	0040097d 	.word	0x0040097d
  400978:	00402571 	.word	0x00402571

0040097c <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  40097c:	b590      	push	{r4, r7, lr}
  40097e:	b087      	sub	sp, #28
  400980:	af02      	add	r7, sp, #8
  400982:	6039      	str	r1, [r7, #0]
  400984:	4613      	mov	r3, r2
  400986:	4602      	mov	r2, r0
  400988:	71fa      	strb	r2, [r7, #7]
  40098a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
  40098c:	79bb      	ldrb	r3, [r7, #6]
  40098e:	2b02      	cmp	r3, #2
  400990:	d102      	bne.n	400998 <udi_cdc_data_received+0x1c>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
  400992:	2300      	movs	r3, #0
  400994:	73fb      	strb	r3, [r7, #15]
  400996:	e002      	b.n	40099e <udi_cdc_data_received+0x22>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
  400998:	2300      	movs	r3, #0
  40099a:	73fb      	strb	r3, [r7, #15]
		break;
  40099c:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
  40099e:	79fb      	ldrb	r3, [r7, #7]
  4009a0:	2b00      	cmp	r3, #0
  4009a2:	d000      	beq.n	4009a6 <udi_cdc_data_received+0x2a>
		// Abort reception
		return;
  4009a4:	e02e      	b.n	400a04 <udi_cdc_data_received+0x88>
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  4009a6:	7bfb      	ldrb	r3, [r7, #15]
  4009a8:	4a18      	ldr	r2, [pc, #96]	; (400a0c <udi_cdc_data_received+0x90>)
  4009aa:	5cd3      	ldrb	r3, [r2, r3]
  4009ac:	b2db      	uxtb	r3, r3
  4009ae:	2b00      	cmp	r3, #0
  4009b0:	bf14      	ite	ne
  4009b2:	2300      	movne	r3, #0
  4009b4:	2301      	moveq	r3, #1
  4009b6:	b2db      	uxtb	r3, r3
  4009b8:	73bb      	strb	r3, [r7, #14]
	if (!n) {
  4009ba:	683b      	ldr	r3, [r7, #0]
  4009bc:	2b00      	cmp	r3, #0
  4009be:	d110      	bne.n	4009e2 <udi_cdc_data_received+0x66>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
  4009c0:	7bfa      	ldrb	r2, [r7, #15]
  4009c2:	7bbb      	ldrb	r3, [r7, #14]
  4009c4:	0052      	lsls	r2, r2, #1
  4009c6:	4413      	add	r3, r2
  4009c8:	019a      	lsls	r2, r3, #6
  4009ca:	4b11      	ldr	r3, [pc, #68]	; (400a10 <udi_cdc_data_received+0x94>)
  4009cc:	4413      	add	r3, r2
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
  4009ce:	79ba      	ldrb	r2, [r7, #6]
  4009d0:	4910      	ldr	r1, [pc, #64]	; (400a14 <udi_cdc_data_received+0x98>)
  4009d2:	9100      	str	r1, [sp, #0]
  4009d4:	4610      	mov	r0, r2
  4009d6:	2101      	movs	r1, #1
  4009d8:	461a      	mov	r2, r3
  4009da:	2340      	movs	r3, #64	; 0x40
  4009dc:	4c0e      	ldr	r4, [pc, #56]	; (400a18 <udi_cdc_data_received+0x9c>)
  4009de:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  4009e0:	e010      	b.n	400a04 <udi_cdc_data_received+0x88>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  4009e2:	7bf8      	ldrb	r0, [r7, #15]
  4009e4:	7bba      	ldrb	r2, [r7, #14]
  4009e6:	683b      	ldr	r3, [r7, #0]
  4009e8:	b299      	uxth	r1, r3
  4009ea:	4b0c      	ldr	r3, [pc, #48]	; (400a1c <udi_cdc_data_received+0xa0>)
  4009ec:	0040      	lsls	r0, r0, #1
  4009ee:	4402      	add	r2, r0
  4009f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4009f4:	7bfb      	ldrb	r3, [r7, #15]
  4009f6:	4a0a      	ldr	r2, [pc, #40]	; (400a20 <udi_cdc_data_received+0xa4>)
  4009f8:	2100      	movs	r1, #0
  4009fa:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
  4009fc:	7bfb      	ldrb	r3, [r7, #15]
  4009fe:	4618      	mov	r0, r3
  400a00:	4b08      	ldr	r3, [pc, #32]	; (400a24 <udi_cdc_data_received+0xa8>)
  400a02:	4798      	blx	r3
}
  400a04:	3714      	adds	r7, #20
  400a06:	46bd      	mov	sp, r7
  400a08:	bd90      	pop	{r4, r7, pc}
  400a0a:	bf00      	nop
  400a0c:	20000bac 	.word	0x20000bac
  400a10:	20000b28 	.word	0x20000b28
  400a14:	0040097d 	.word	0x0040097d
  400a18:	00402571 	.word	0x00402571
  400a1c:	20000ba8 	.word	0x20000ba8
  400a20:	20000bb4 	.word	0x20000bb4
  400a24:	00400895 	.word	0x00400895

00400a28 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  400a28:	b580      	push	{r7, lr}
  400a2a:	b084      	sub	sp, #16
  400a2c:	af00      	add	r7, sp, #0
  400a2e:	6039      	str	r1, [r7, #0]
  400a30:	4613      	mov	r3, r2
  400a32:	4602      	mov	r2, r0
  400a34:	71fa      	strb	r2, [r7, #7]
  400a36:	71bb      	strb	r3, [r7, #6]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
  400a38:	79bb      	ldrb	r3, [r7, #6]
  400a3a:	2b81      	cmp	r3, #129	; 0x81
  400a3c:	d102      	bne.n	400a44 <udi_cdc_data_sent+0x1c>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
  400a3e:	2300      	movs	r3, #0
  400a40:	73fb      	strb	r3, [r7, #15]
  400a42:	e002      	b.n	400a4a <udi_cdc_data_sent+0x22>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
  400a44:	2300      	movs	r3, #0
  400a46:	73fb      	strb	r3, [r7, #15]
		break;
  400a48:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
  400a4a:	79fb      	ldrb	r3, [r7, #7]
  400a4c:	2b00      	cmp	r3, #0
  400a4e:	d000      	beq.n	400a52 <udi_cdc_data_sent+0x2a>
		// Abort transfer
		return;
  400a50:	e01c      	b.n	400a8c <udi_cdc_data_sent+0x64>
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  400a52:	7bf9      	ldrb	r1, [r7, #15]
  400a54:	7bfb      	ldrb	r3, [r7, #15]
  400a56:	4a0f      	ldr	r2, [pc, #60]	; (400a94 <udi_cdc_data_sent+0x6c>)
  400a58:	5cd3      	ldrb	r3, [r2, r3]
  400a5a:	b2db      	uxtb	r3, r3
  400a5c:	2b00      	cmp	r3, #0
  400a5e:	bf14      	ite	ne
  400a60:	2300      	movne	r3, #0
  400a62:	2301      	moveq	r3, #1
  400a64:	b2db      	uxtb	r3, r3
  400a66:	461a      	mov	r2, r3
  400a68:	4b0b      	ldr	r3, [pc, #44]	; (400a98 <udi_cdc_data_sent+0x70>)
  400a6a:	0049      	lsls	r1, r1, #1
  400a6c:	440a      	add	r2, r1
  400a6e:	2100      	movs	r1, #0
  400a70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400a74:	7bfb      	ldrb	r3, [r7, #15]
  400a76:	4a09      	ldr	r2, [pc, #36]	; (400a9c <udi_cdc_data_sent+0x74>)
  400a78:	2100      	movs	r1, #0
  400a7a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
  400a7c:	7bfb      	ldrb	r3, [r7, #15]
  400a7e:	4a08      	ldr	r2, [pc, #32]	; (400aa0 <udi_cdc_data_sent+0x78>)
  400a80:	2100      	movs	r1, #0
  400a82:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  400a84:	7bfb      	ldrb	r3, [r7, #15]
  400a86:	4618      	mov	r0, r3
  400a88:	4b06      	ldr	r3, [pc, #24]	; (400aa4 <udi_cdc_data_sent+0x7c>)
  400a8a:	4798      	blx	r3
}
  400a8c:	3710      	adds	r7, #16
  400a8e:	46bd      	mov	sp, r7
  400a90:	bd80      	pop	{r7, pc}
  400a92:	bf00      	nop
  400a94:	20000c3c 	.word	0x20000c3c
  400a98:	20000c38 	.word	0x20000c38
  400a9c:	20000c48 	.word	0x20000c48
  400aa0:	20000c44 	.word	0x20000c44
  400aa4:	00400aa9 	.word	0x00400aa9

00400aa8 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
  400aa8:	b590      	push	{r4, r7, lr}
  400aaa:	b089      	sub	sp, #36	; 0x24
  400aac:	af02      	add	r7, sp, #8
  400aae:	4603      	mov	r3, r0
  400ab0:	71fb      	strb	r3, [r7, #7]
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400ab2:	2300      	movs	r3, #0
  400ab4:	757b      	strb	r3, [r7, #21]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400ab6:	7d7b      	ldrb	r3, [r7, #21]
  400ab8:	4a5f      	ldr	r2, [pc, #380]	; (400c38 <udi_cdc_tx_send+0x190>)
  400aba:	5cd3      	ldrb	r3, [r2, r3]
  400abc:	b2db      	uxtb	r3, r3
  400abe:	2b00      	cmp	r3, #0
  400ac0:	d000      	beq.n	400ac4 <udi_cdc_tx_send+0x1c>
		return; // Already on going or wait next SOF to send next data
  400ac2:	e0b5      	b.n	400c30 <udi_cdc_tx_send+0x188>
	}
	if (udd_is_high_speed()) {
  400ac4:	4b5d      	ldr	r3, [pc, #372]	; (400c3c <udi_cdc_tx_send+0x194>)
  400ac6:	4798      	blx	r3
  400ac8:	4603      	mov	r3, r0
  400aca:	2b00      	cmp	r3, #0
  400acc:	d009      	beq.n	400ae2 <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400ace:	7d7a      	ldrb	r2, [r7, #21]
  400ad0:	4b5b      	ldr	r3, [pc, #364]	; (400c40 <udi_cdc_tx_send+0x198>)
  400ad2:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
  400ad6:	4b5b      	ldr	r3, [pc, #364]	; (400c44 <udi_cdc_tx_send+0x19c>)
  400ad8:	4798      	blx	r3
  400ada:	4603      	mov	r3, r0
  400adc:	429c      	cmp	r4, r3
  400ade:	d10a      	bne.n	400af6 <udi_cdc_tx_send+0x4e>
			return; // Wait next SOF to send next data
  400ae0:	e0a6      	b.n	400c30 <udi_cdc_tx_send+0x188>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  400ae2:	7d7a      	ldrb	r2, [r7, #21]
  400ae4:	4b56      	ldr	r3, [pc, #344]	; (400c40 <udi_cdc_tx_send+0x198>)
  400ae6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
  400aea:	4b57      	ldr	r3, [pc, #348]	; (400c48 <udi_cdc_tx_send+0x1a0>)
  400aec:	4798      	blx	r3
  400aee:	4603      	mov	r3, r0
  400af0:	429c      	cmp	r4, r3
  400af2:	d100      	bne.n	400af6 <udi_cdc_tx_send+0x4e>
			return; // Wait next SOF to send next data
  400af4:	e09c      	b.n	400c30 <udi_cdc_tx_send+0x188>
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
  400af6:	4b55      	ldr	r3, [pc, #340]	; (400c4c <udi_cdc_tx_send+0x1a4>)
  400af8:	4798      	blx	r3
  400afa:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  400afc:	7d7b      	ldrb	r3, [r7, #21]
  400afe:	4a54      	ldr	r2, [pc, #336]	; (400c50 <udi_cdc_tx_send+0x1a8>)
  400b00:	5cd3      	ldrb	r3, [r2, r3]
  400b02:	75fb      	strb	r3, [r7, #23]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400b04:	7d79      	ldrb	r1, [r7, #21]
  400b06:	7dfa      	ldrb	r2, [r7, #23]
  400b08:	4b52      	ldr	r3, [pc, #328]	; (400c54 <udi_cdc_tx_send+0x1ac>)
  400b0a:	0049      	lsls	r1, r1, #1
  400b0c:	440a      	add	r2, r1
  400b0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400b12:	2b00      	cmp	r3, #0
  400b14:	d11f      	bne.n	400b56 <udi_cdc_tx_send+0xae>
		sof_zlp_counter++;
  400b16:	4b50      	ldr	r3, [pc, #320]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b18:	881b      	ldrh	r3, [r3, #0]
  400b1a:	3301      	adds	r3, #1
  400b1c:	b29a      	uxth	r2, r3
  400b1e:	4b4e      	ldr	r3, [pc, #312]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b20:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  400b22:	4b46      	ldr	r3, [pc, #280]	; (400c3c <udi_cdc_tx_send+0x194>)
  400b24:	4798      	blx	r3
  400b26:	4603      	mov	r3, r0
  400b28:	f083 0301 	eor.w	r3, r3, #1
  400b2c:	b2db      	uxtb	r3, r3
  400b2e:	2b00      	cmp	r3, #0
  400b30:	d003      	beq.n	400b3a <udi_cdc_tx_send+0x92>
  400b32:	4b49      	ldr	r3, [pc, #292]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b34:	881b      	ldrh	r3, [r3, #0]
  400b36:	2b63      	cmp	r3, #99	; 0x63
  400b38:	d909      	bls.n	400b4e <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  400b3a:	4b40      	ldr	r3, [pc, #256]	; (400c3c <udi_cdc_tx_send+0x194>)
  400b3c:	4798      	blx	r3
  400b3e:	4603      	mov	r3, r0
  400b40:	2b00      	cmp	r3, #0
  400b42:	d008      	beq.n	400b56 <udi_cdc_tx_send+0xae>
  400b44:	4b44      	ldr	r3, [pc, #272]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b46:	881b      	ldrh	r3, [r3, #0]
  400b48:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  400b4c:	d203      	bcs.n	400b56 <udi_cdc_tx_send+0xae>
			cpu_irq_restore(flags);
  400b4e:	6938      	ldr	r0, [r7, #16]
  400b50:	4b42      	ldr	r3, [pc, #264]	; (400c5c <udi_cdc_tx_send+0x1b4>)
  400b52:	4798      	blx	r3
			return;
  400b54:	e06c      	b.n	400c30 <udi_cdc_tx_send+0x188>
		}
	}
	sof_zlp_counter = 0;
  400b56:	4b40      	ldr	r3, [pc, #256]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b58:	2200      	movs	r2, #0
  400b5a:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400b5c:	7d7b      	ldrb	r3, [r7, #21]
  400b5e:	4a40      	ldr	r2, [pc, #256]	; (400c60 <udi_cdc_tx_send+0x1b8>)
  400b60:	5cd3      	ldrb	r3, [r2, r3]
  400b62:	b2db      	uxtb	r3, r3
  400b64:	f083 0301 	eor.w	r3, r3, #1
  400b68:	b2db      	uxtb	r3, r3
  400b6a:	2b00      	cmp	r3, #0
  400b6c:	d00a      	beq.n	400b84 <udi_cdc_tx_send+0xdc>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400b6e:	7d7b      	ldrb	r3, [r7, #21]
  400b70:	7dfa      	ldrb	r2, [r7, #23]
  400b72:	2a00      	cmp	r2, #0
  400b74:	bf14      	ite	ne
  400b76:	2200      	movne	r2, #0
  400b78:	2201      	moveq	r2, #1
  400b7a:	b2d2      	uxtb	r2, r2
  400b7c:	4611      	mov	r1, r2
  400b7e:	4a34      	ldr	r2, [pc, #208]	; (400c50 <udi_cdc_tx_send+0x1a8>)
  400b80:	54d1      	strb	r1, [r2, r3]
  400b82:	e006      	b.n	400b92 <udi_cdc_tx_send+0xea>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  400b84:	7dfb      	ldrb	r3, [r7, #23]
  400b86:	2b00      	cmp	r3, #0
  400b88:	bf14      	ite	ne
  400b8a:	2300      	movne	r3, #0
  400b8c:	2301      	moveq	r3, #1
  400b8e:	b2db      	uxtb	r3, r3
  400b90:	75fb      	strb	r3, [r7, #23]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  400b92:	7d7b      	ldrb	r3, [r7, #21]
  400b94:	4a28      	ldr	r2, [pc, #160]	; (400c38 <udi_cdc_tx_send+0x190>)
  400b96:	2101      	movs	r1, #1
  400b98:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
  400b9a:	6938      	ldr	r0, [r7, #16]
  400b9c:	4b2f      	ldr	r3, [pc, #188]	; (400c5c <udi_cdc_tx_send+0x1b4>)
  400b9e:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  400ba0:	7d79      	ldrb	r1, [r7, #21]
  400ba2:	7dfa      	ldrb	r2, [r7, #23]
  400ba4:	4b2b      	ldr	r3, [pc, #172]	; (400c54 <udi_cdc_tx_send+0x1ac>)
  400ba6:	0049      	lsls	r1, r1, #1
  400ba8:	440a      	add	r2, r1
  400baa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400bae:	2b40      	cmp	r3, #64	; 0x40
  400bb0:	bf0c      	ite	eq
  400bb2:	2300      	moveq	r3, #0
  400bb4:	2301      	movne	r3, #1
  400bb6:	73fb      	strb	r3, [r7, #15]
	if (b_short_packet) {
  400bb8:	7bfb      	ldrb	r3, [r7, #15]
  400bba:	2b00      	cmp	r3, #0
  400bbc:	d016      	beq.n	400bec <udi_cdc_tx_send+0x144>
		if (udd_is_high_speed()) {
  400bbe:	4b1f      	ldr	r3, [pc, #124]	; (400c3c <udi_cdc_tx_send+0x194>)
  400bc0:	4798      	blx	r3
  400bc2:	4603      	mov	r3, r0
  400bc4:	2b00      	cmp	r3, #0
  400bc6:	d008      	beq.n	400bda <udi_cdc_tx_send+0x132>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  400bc8:	7d7c      	ldrb	r4, [r7, #21]
  400bca:	4b1e      	ldr	r3, [pc, #120]	; (400c44 <udi_cdc_tx_send+0x19c>)
  400bcc:	4798      	blx	r3
  400bce:	4603      	mov	r3, r0
  400bd0:	461a      	mov	r2, r3
  400bd2:	4b1b      	ldr	r3, [pc, #108]	; (400c40 <udi_cdc_tx_send+0x198>)
  400bd4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  400bd8:	e00d      	b.n	400bf6 <udi_cdc_tx_send+0x14e>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400bda:	7d7c      	ldrb	r4, [r7, #21]
  400bdc:	4b1a      	ldr	r3, [pc, #104]	; (400c48 <udi_cdc_tx_send+0x1a0>)
  400bde:	4798      	blx	r3
  400be0:	4603      	mov	r3, r0
  400be2:	461a      	mov	r2, r3
  400be4:	4b16      	ldr	r3, [pc, #88]	; (400c40 <udi_cdc_tx_send+0x198>)
  400be6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  400bea:	e004      	b.n	400bf6 <udi_cdc_tx_send+0x14e>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400bec:	7d7a      	ldrb	r2, [r7, #21]
  400bee:	4b14      	ldr	r3, [pc, #80]	; (400c40 <udi_cdc_tx_send+0x198>)
  400bf0:	2100      	movs	r1, #0
  400bf2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	}

	// Send the buffer with enable of short packet
	switch (port) {
  400bf6:	7d7b      	ldrb	r3, [r7, #21]
  400bf8:	2b00      	cmp	r3, #0
  400bfa:	d102      	bne.n	400c02 <udi_cdc_tx_send+0x15a>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
  400bfc:	2381      	movs	r3, #129	; 0x81
  400bfe:	75bb      	strb	r3, [r7, #22]
  400c00:	e002      	b.n	400c08 <udi_cdc_tx_send+0x160>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
  400c02:	2381      	movs	r3, #129	; 0x81
  400c04:	75bb      	strb	r3, [r7, #22]
		break;
  400c06:	bf00      	nop
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
  400c08:	7d7a      	ldrb	r2, [r7, #21]
  400c0a:	7dfb      	ldrb	r3, [r7, #23]
  400c0c:	0052      	lsls	r2, r2, #1
  400c0e:	4413      	add	r3, r2
  400c10:	019a      	lsls	r2, r3, #6
  400c12:	4b14      	ldr	r3, [pc, #80]	; (400c64 <udi_cdc_tx_send+0x1bc>)
  400c14:	441a      	add	r2, r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400c16:	7d78      	ldrb	r0, [r7, #21]
  400c18:	7df9      	ldrb	r1, [r7, #23]
  400c1a:	4b0e      	ldr	r3, [pc, #56]	; (400c54 <udi_cdc_tx_send+0x1ac>)
  400c1c:	0040      	lsls	r0, r0, #1
  400c1e:	4401      	add	r1, r0
  400c20:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
  400c24:	7db8      	ldrb	r0, [r7, #22]
  400c26:	7bf9      	ldrb	r1, [r7, #15]
  400c28:	4c0f      	ldr	r4, [pc, #60]	; (400c68 <udi_cdc_tx_send+0x1c0>)
  400c2a:	9400      	str	r4, [sp, #0]
  400c2c:	4c0f      	ldr	r4, [pc, #60]	; (400c6c <udi_cdc_tx_send+0x1c4>)
  400c2e:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  400c30:	371c      	adds	r7, #28
  400c32:	46bd      	mov	sp, r7
  400c34:	bd90      	pop	{r4, r7, pc}
  400c36:	bf00      	nop
  400c38:	20000c44 	.word	0x20000c44
  400c3c:	0040202d 	.word	0x0040202d
  400c40:	20000c40 	.word	0x20000c40
  400c44:	004020f1 	.word	0x004020f1
  400c48:	004020d1 	.word	0x004020d1
  400c4c:	0040046d 	.word	0x0040046d
  400c50:	20000c3c 	.word	0x20000c3c
  400c54:	20000c38 	.word	0x20000c38
  400c58:	20000c4e 	.word	0x20000c4e
  400c5c:	004004c5 	.word	0x004004c5
  400c60:	20000c48 	.word	0x20000c48
  400c64:	20000bb8 	.word	0x20000bb8
  400c68:	00400a29 	.word	0x00400a29
  400c6c:	00402571 	.word	0x00402571

00400c70 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  400c70:	b580      	push	{r7, lr}
  400c72:	b086      	sub	sp, #24
  400c74:	af00      	add	r7, sp, #0
  400c76:	4603      	mov	r3, r0
  400c78:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400c7a:	2300      	movs	r3, #0
  400c7c:	75fb      	strb	r3, [r7, #23]
#endif
	flags = cpu_irq_save();
  400c7e:	4b0f      	ldr	r3, [pc, #60]	; (400cbc <udi_cdc_multi_get_nb_received_data+0x4c>)
  400c80:	4798      	blx	r3
  400c82:	6138      	str	r0, [r7, #16]
	pos = udi_cdc_rx_pos[port];
  400c84:	7dfa      	ldrb	r2, [r7, #23]
  400c86:	4b0e      	ldr	r3, [pc, #56]	; (400cc0 <udi_cdc_multi_get_nb_received_data+0x50>)
  400c88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400c8c:	81fb      	strh	r3, [r7, #14]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400c8e:	7df9      	ldrb	r1, [r7, #23]
  400c90:	7dfb      	ldrb	r3, [r7, #23]
  400c92:	4a0c      	ldr	r2, [pc, #48]	; (400cc4 <udi_cdc_multi_get_nb_received_data+0x54>)
  400c94:	5cd3      	ldrb	r3, [r2, r3]
  400c96:	b2db      	uxtb	r3, r3
  400c98:	461a      	mov	r2, r3
  400c9a:	4b0b      	ldr	r3, [pc, #44]	; (400cc8 <udi_cdc_multi_get_nb_received_data+0x58>)
  400c9c:	0049      	lsls	r1, r1, #1
  400c9e:	440a      	add	r2, r1
  400ca0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400ca4:	461a      	mov	r2, r3
  400ca6:	89fb      	ldrh	r3, [r7, #14]
  400ca8:	1ad3      	subs	r3, r2, r3
  400caa:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
  400cac:	6938      	ldr	r0, [r7, #16]
  400cae:	4b07      	ldr	r3, [pc, #28]	; (400ccc <udi_cdc_multi_get_nb_received_data+0x5c>)
  400cb0:	4798      	blx	r3
	return nb_received;
  400cb2:	68bb      	ldr	r3, [r7, #8]
}
  400cb4:	4618      	mov	r0, r3
  400cb6:	3718      	adds	r7, #24
  400cb8:	46bd      	mov	sp, r7
  400cba:	bd80      	pop	{r7, pc}
  400cbc:	0040046d 	.word	0x0040046d
  400cc0:	20000bb0 	.word	0x20000bb0
  400cc4:	20000bac 	.word	0x20000bac
  400cc8:	20000ba8 	.word	0x20000ba8
  400ccc:	004004c5 	.word	0x004004c5

00400cd0 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400cd0:	b580      	push	{r7, lr}
  400cd2:	b082      	sub	sp, #8
  400cd4:	af00      	add	r7, sp, #0
  400cd6:	4603      	mov	r3, r0
  400cd8:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400cda:	79fb      	ldrb	r3, [r7, #7]
  400cdc:	4618      	mov	r0, r3
  400cde:	4b06      	ldr	r3, [pc, #24]	; (400cf8 <udi_cdc_multi_is_rx_ready+0x28>)
  400ce0:	4798      	blx	r3
  400ce2:	4603      	mov	r3, r0
  400ce4:	2b00      	cmp	r3, #0
  400ce6:	bf0c      	ite	eq
  400ce8:	2300      	moveq	r3, #0
  400cea:	2301      	movne	r3, #1
  400cec:	b2db      	uxtb	r3, r3
}
  400cee:	4618      	mov	r0, r3
  400cf0:	3708      	adds	r7, #8
  400cf2:	46bd      	mov	sp, r7
  400cf4:	bd80      	pop	{r7, pc}
  400cf6:	bf00      	nop
  400cf8:	00400c71 	.word	0x00400c71

00400cfc <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
  400cfc:	b580      	push	{r7, lr}
  400cfe:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_rx_ready(0);
  400d00:	2000      	movs	r0, #0
  400d02:	4b02      	ldr	r3, [pc, #8]	; (400d0c <udi_cdc_is_rx_ready+0x10>)
  400d04:	4798      	blx	r3
  400d06:	4603      	mov	r3, r0
}
  400d08:	4618      	mov	r0, r3
  400d0a:	bd80      	pop	{r7, pc}
  400d0c:	00400cd1 	.word	0x00400cd1

00400d10 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
  400d10:	b580      	push	{r7, lr}
  400d12:	b086      	sub	sp, #24
  400d14:	af00      	add	r7, sp, #0
  400d16:	4603      	mov	r3, r0
  400d18:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	int rx_data = 0;
  400d1a:	2300      	movs	r3, #0
  400d1c:	617b      	str	r3, [r7, #20]
	bool b_databit_9;
	uint16_t pos;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400d1e:	2300      	movs	r3, #0
  400d20:	74bb      	strb	r3, [r7, #18]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400d22:	7cba      	ldrb	r2, [r7, #18]
  400d24:	492a      	ldr	r1, [pc, #168]	; (400dd0 <udi_cdc_multi_getc+0xc0>)
  400d26:	4613      	mov	r3, r2
  400d28:	00db      	lsls	r3, r3, #3
  400d2a:	1a9b      	subs	r3, r3, r2
  400d2c:	440b      	add	r3, r1
  400d2e:	799b      	ldrb	r3, [r3, #6]
  400d30:	2b09      	cmp	r3, #9
  400d32:	bf14      	ite	ne
  400d34:	2300      	movne	r3, #0
  400d36:	2301      	moveq	r3, #1
  400d38:	74fb      	strb	r3, [r7, #19]

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
  400d3a:	4b26      	ldr	r3, [pc, #152]	; (400dd4 <udi_cdc_multi_getc+0xc4>)
  400d3c:	4798      	blx	r3
  400d3e:	60f8      	str	r0, [r7, #12]
	pos = udi_cdc_rx_pos[port];
  400d40:	7cba      	ldrb	r2, [r7, #18]
  400d42:	4b25      	ldr	r3, [pc, #148]	; (400dd8 <udi_cdc_multi_getc+0xc8>)
  400d44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400d48:	817b      	strh	r3, [r7, #10]
	buf_sel = udi_cdc_rx_buf_sel[port];
  400d4a:	7cbb      	ldrb	r3, [r7, #18]
  400d4c:	4a23      	ldr	r2, [pc, #140]	; (400ddc <udi_cdc_multi_getc+0xcc>)
  400d4e:	5cd3      	ldrb	r3, [r2, r3]
  400d50:	727b      	strb	r3, [r7, #9]
	cpu_irq_restore(flags);
  400d52:	68f8      	ldr	r0, [r7, #12]
  400d54:	4b22      	ldr	r3, [pc, #136]	; (400de0 <udi_cdc_multi_getc+0xd0>)
  400d56:	4798      	blx	r3
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
  400d58:	bf00      	nop
  400d5a:	7cb9      	ldrb	r1, [r7, #18]
  400d5c:	7a7a      	ldrb	r2, [r7, #9]
  400d5e:	4b21      	ldr	r3, [pc, #132]	; (400de4 <udi_cdc_multi_getc+0xd4>)
  400d60:	0049      	lsls	r1, r1, #1
  400d62:	440a      	add	r2, r1
  400d64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400d68:	897a      	ldrh	r2, [r7, #10]
  400d6a:	429a      	cmp	r2, r3
  400d6c:	d30a      	bcc.n	400d84 <udi_cdc_multi_getc+0x74>
		if (!udi_cdc_data_running) {
  400d6e:	4b1e      	ldr	r3, [pc, #120]	; (400de8 <udi_cdc_multi_getc+0xd8>)
  400d70:	781b      	ldrb	r3, [r3, #0]
  400d72:	b2db      	uxtb	r3, r3
  400d74:	f083 0301 	eor.w	r3, r3, #1
  400d78:	b2db      	uxtb	r3, r3
  400d7a:	2b00      	cmp	r3, #0
  400d7c:	d001      	beq.n	400d82 <udi_cdc_multi_getc+0x72>
			return 0;
  400d7e:	2300      	movs	r3, #0
  400d80:	e022      	b.n	400dc8 <udi_cdc_multi_getc+0xb8>
		}
		goto udi_cdc_getc_process_one_byte;
  400d82:	e7da      	b.n	400d3a <udi_cdc_multi_getc+0x2a>
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400d84:	7cb8      	ldrb	r0, [r7, #18]
  400d86:	7a79      	ldrb	r1, [r7, #9]
  400d88:	897b      	ldrh	r3, [r7, #10]
  400d8a:	4a18      	ldr	r2, [pc, #96]	; (400dec <udi_cdc_multi_getc+0xdc>)
  400d8c:	0040      	lsls	r0, r0, #1
  400d8e:	4401      	add	r1, r0
  400d90:	0189      	lsls	r1, r1, #6
  400d92:	440b      	add	r3, r1
  400d94:	4413      	add	r3, r2
  400d96:	781b      	ldrb	r3, [r3, #0]
  400d98:	697a      	ldr	r2, [r7, #20]
  400d9a:	4313      	orrs	r3, r2
  400d9c:	617b      	str	r3, [r7, #20]
	udi_cdc_rx_pos[port] = pos+1;
  400d9e:	7cba      	ldrb	r2, [r7, #18]
  400da0:	897b      	ldrh	r3, [r7, #10]
  400da2:	3301      	adds	r3, #1
  400da4:	b299      	uxth	r1, r3
  400da6:	4b0c      	ldr	r3, [pc, #48]	; (400dd8 <udi_cdc_multi_getc+0xc8>)
  400da8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	udi_cdc_rx_start(port);
  400dac:	7cbb      	ldrb	r3, [r7, #18]
  400dae:	4618      	mov	r0, r3
  400db0:	4b0f      	ldr	r3, [pc, #60]	; (400df0 <udi_cdc_multi_getc+0xe0>)
  400db2:	4798      	blx	r3

	if (b_databit_9) {
  400db4:	7cfb      	ldrb	r3, [r7, #19]
  400db6:	2b00      	cmp	r3, #0
  400db8:	d005      	beq.n	400dc6 <udi_cdc_multi_getc+0xb6>
		// Receive MSB
		b_databit_9 = false;
  400dba:	2300      	movs	r3, #0
  400dbc:	74fb      	strb	r3, [r7, #19]
		rx_data = rx_data << 8;
  400dbe:	697b      	ldr	r3, [r7, #20]
  400dc0:	021b      	lsls	r3, r3, #8
  400dc2:	617b      	str	r3, [r7, #20]
		goto udi_cdc_getc_process_one_byte;
  400dc4:	e7b9      	b.n	400d3a <udi_cdc_multi_getc+0x2a>
	}
	return rx_data;
  400dc6:	697b      	ldr	r3, [r7, #20]
}
  400dc8:	4618      	mov	r0, r3
  400dca:	3718      	adds	r7, #24
  400dcc:	46bd      	mov	sp, r7
  400dce:	bd80      	pop	{r7, pc}
  400dd0:	20000b0c 	.word	0x20000b0c
  400dd4:	0040046d 	.word	0x0040046d
  400dd8:	20000bb0 	.word	0x20000bb0
  400ddc:	20000bac 	.word	0x20000bac
  400de0:	004004c5 	.word	0x004004c5
  400de4:	20000ba8 	.word	0x20000ba8
  400de8:	20000b26 	.word	0x20000b26
  400dec:	20000b28 	.word	0x20000b28
  400df0:	00400895 	.word	0x00400895

00400df4 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  400df4:	b580      	push	{r7, lr}
  400df6:	af00      	add	r7, sp, #0
	return udi_cdc_multi_getc(0);
  400df8:	2000      	movs	r0, #0
  400dfa:	4b02      	ldr	r3, [pc, #8]	; (400e04 <udi_cdc_getc+0x10>)
  400dfc:	4798      	blx	r3
  400dfe:	4603      	mov	r3, r0
}
  400e00:	4618      	mov	r0, r3
  400e02:	bd80      	pop	{r7, pc}
  400e04:	00400d11 	.word	0x00400d11

00400e08 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  400e08:	b580      	push	{r7, lr}
  400e0a:	b088      	sub	sp, #32
  400e0c:	af00      	add	r7, sp, #0
  400e0e:	4603      	mov	r3, r0
  400e10:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	iram_size_t buf_sel_nb, buf_nosel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400e12:	2300      	movs	r3, #0
  400e14:	76fb      	strb	r3, [r7, #27]
#endif

	flags = cpu_irq_save();
  400e16:	4b28      	ldr	r3, [pc, #160]	; (400eb8 <udi_cdc_multi_get_free_tx_buffer+0xb0>)
  400e18:	4798      	blx	r3
  400e1a:	6178      	str	r0, [r7, #20]
	buf_sel = udi_cdc_tx_buf_sel[port];
  400e1c:	7efb      	ldrb	r3, [r7, #27]
  400e1e:	4a27      	ldr	r2, [pc, #156]	; (400ebc <udi_cdc_multi_get_free_tx_buffer+0xb4>)
  400e20:	5cd3      	ldrb	r3, [r2, r3]
  400e22:	74fb      	strb	r3, [r7, #19]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400e24:	7ef9      	ldrb	r1, [r7, #27]
  400e26:	7cfa      	ldrb	r2, [r7, #19]
  400e28:	4b25      	ldr	r3, [pc, #148]	; (400ec0 <udi_cdc_multi_get_free_tx_buffer+0xb8>)
  400e2a:	0049      	lsls	r1, r1, #1
  400e2c:	440a      	add	r2, r1
  400e2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400e32:	61fb      	str	r3, [r7, #28]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
  400e34:	7ef9      	ldrb	r1, [r7, #27]
  400e36:	7cfb      	ldrb	r3, [r7, #19]
  400e38:	2b00      	cmp	r3, #0
  400e3a:	bf14      	ite	ne
  400e3c:	2300      	movne	r3, #0
  400e3e:	2301      	moveq	r3, #1
  400e40:	b2db      	uxtb	r3, r3
  400e42:	461a      	mov	r2, r3
  400e44:	4b1e      	ldr	r3, [pc, #120]	; (400ec0 <udi_cdc_multi_get_free_tx_buffer+0xb8>)
  400e46:	0049      	lsls	r1, r1, #1
  400e48:	440a      	add	r2, r1
  400e4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400e4e:	60fb      	str	r3, [r7, #12]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  400e50:	69fb      	ldr	r3, [r7, #28]
  400e52:	2b40      	cmp	r3, #64	; 0x40
  400e54:	d123      	bne.n	400e9e <udi_cdc_multi_get_free_tx_buffer+0x96>
		if ((!udi_cdc_tx_trans_ongoing[port])
  400e56:	7efb      	ldrb	r3, [r7, #27]
  400e58:	4a1a      	ldr	r2, [pc, #104]	; (400ec4 <udi_cdc_multi_get_free_tx_buffer+0xbc>)
  400e5a:	5cd3      	ldrb	r3, [r2, r3]
  400e5c:	b2db      	uxtb	r3, r3
  400e5e:	f083 0301 	eor.w	r3, r3, #1
  400e62:	b2db      	uxtb	r3, r3
  400e64:	2b00      	cmp	r3, #0
  400e66:	d01a      	beq.n	400e9e <udi_cdc_multi_get_free_tx_buffer+0x96>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  400e68:	7efb      	ldrb	r3, [r7, #27]
  400e6a:	4a17      	ldr	r2, [pc, #92]	; (400ec8 <udi_cdc_multi_get_free_tx_buffer+0xc0>)
  400e6c:	5cd3      	ldrb	r3, [r2, r3]
  400e6e:	b2db      	uxtb	r3, r3
  400e70:	f083 0301 	eor.w	r3, r3, #1
  400e74:	b2db      	uxtb	r3, r3
  400e76:	2b00      	cmp	r3, #0
  400e78:	d011      	beq.n	400e9e <udi_cdc_multi_get_free_tx_buffer+0x96>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
  400e7a:	7efb      	ldrb	r3, [r7, #27]
  400e7c:	4a12      	ldr	r2, [pc, #72]	; (400ec8 <udi_cdc_multi_get_free_tx_buffer+0xc0>)
  400e7e:	2101      	movs	r1, #1
  400e80:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400e82:	7efb      	ldrb	r3, [r7, #27]
  400e84:	7cfa      	ldrb	r2, [r7, #19]
  400e86:	2a00      	cmp	r2, #0
  400e88:	bf14      	ite	ne
  400e8a:	2200      	movne	r2, #0
  400e8c:	2201      	moveq	r2, #1
  400e8e:	b2d2      	uxtb	r2, r2
  400e90:	4611      	mov	r1, r2
  400e92:	4a0a      	ldr	r2, [pc, #40]	; (400ebc <udi_cdc_multi_get_free_tx_buffer+0xb4>)
  400e94:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
  400e96:	2300      	movs	r3, #0
  400e98:	61fb      	str	r3, [r7, #28]
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
  400e9a:	2340      	movs	r3, #64	; 0x40
  400e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  400e9e:	69fb      	ldr	r3, [r7, #28]
  400ea0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  400ea4:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
  400ea6:	6978      	ldr	r0, [r7, #20]
  400ea8:	4b08      	ldr	r3, [pc, #32]	; (400ecc <udi_cdc_multi_get_free_tx_buffer+0xc4>)
  400eaa:	4798      	blx	r3
	return retval;
  400eac:	68bb      	ldr	r3, [r7, #8]
}
  400eae:	4618      	mov	r0, r3
  400eb0:	3720      	adds	r7, #32
  400eb2:	46bd      	mov	sp, r7
  400eb4:	bd80      	pop	{r7, pc}
  400eb6:	bf00      	nop
  400eb8:	0040046d 	.word	0x0040046d
  400ebc:	20000c3c 	.word	0x20000c3c
  400ec0:	20000c38 	.word	0x20000c38
  400ec4:	20000c44 	.word	0x20000c44
  400ec8:	20000c48 	.word	0x20000c48
  400ecc:	004004c5 	.word	0x004004c5

00400ed0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  400ed0:	b580      	push	{r7, lr}
  400ed2:	b082      	sub	sp, #8
  400ed4:	af00      	add	r7, sp, #0
  400ed6:	4603      	mov	r3, r0
  400ed8:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  400eda:	79fb      	ldrb	r3, [r7, #7]
  400edc:	4618      	mov	r0, r3
  400ede:	4b06      	ldr	r3, [pc, #24]	; (400ef8 <udi_cdc_multi_is_tx_ready+0x28>)
  400ee0:	4798      	blx	r3
  400ee2:	4603      	mov	r3, r0
  400ee4:	2b00      	cmp	r3, #0
  400ee6:	bf0c      	ite	eq
  400ee8:	2300      	moveq	r3, #0
  400eea:	2301      	movne	r3, #1
  400eec:	b2db      	uxtb	r3, r3
}
  400eee:	4618      	mov	r0, r3
  400ef0:	3708      	adds	r7, #8
  400ef2:	46bd      	mov	sp, r7
  400ef4:	bd80      	pop	{r7, pc}
  400ef6:	bf00      	nop
  400ef8:	00400e09 	.word	0x00400e09

00400efc <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
  400efc:	b580      	push	{r7, lr}
  400efe:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_tx_ready(0);
  400f00:	2000      	movs	r0, #0
  400f02:	4b02      	ldr	r3, [pc, #8]	; (400f0c <udi_cdc_is_tx_ready+0x10>)
  400f04:	4798      	blx	r3
  400f06:	4603      	mov	r3, r0
}
  400f08:	4618      	mov	r0, r3
  400f0a:	bd80      	pop	{r7, pc}
  400f0c:	00400ed1 	.word	0x00400ed1

00400f10 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
  400f10:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f12:	b087      	sub	sp, #28
  400f14:	af00      	add	r7, sp, #0
  400f16:	4603      	mov	r3, r0
  400f18:	6039      	str	r1, [r7, #0]
  400f1a:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400f1c:	2300      	movs	r3, #0
  400f1e:	75bb      	strb	r3, [r7, #22]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400f20:	7dba      	ldrb	r2, [r7, #22]
  400f22:	4929      	ldr	r1, [pc, #164]	; (400fc8 <udi_cdc_multi_putc+0xb8>)
  400f24:	4613      	mov	r3, r2
  400f26:	00db      	lsls	r3, r3, #3
  400f28:	1a9b      	subs	r3, r3, r2
  400f2a:	440b      	add	r3, r1
  400f2c:	799b      	ldrb	r3, [r3, #6]
  400f2e:	2b09      	cmp	r3, #9
  400f30:	bf14      	ite	ne
  400f32:	2300      	movne	r3, #0
  400f34:	2301      	moveq	r3, #1
  400f36:	75fb      	strb	r3, [r7, #23]

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400f38:	7dbb      	ldrb	r3, [r7, #22]
  400f3a:	4618      	mov	r0, r3
  400f3c:	4b23      	ldr	r3, [pc, #140]	; (400fcc <udi_cdc_multi_putc+0xbc>)
  400f3e:	4798      	blx	r3
  400f40:	4603      	mov	r3, r0
  400f42:	f083 0301 	eor.w	r3, r3, #1
  400f46:	b2db      	uxtb	r3, r3
  400f48:	2b00      	cmp	r3, #0
  400f4a:	d00a      	beq.n	400f62 <udi_cdc_multi_putc+0x52>
		if (!udi_cdc_data_running) {
  400f4c:	4b20      	ldr	r3, [pc, #128]	; (400fd0 <udi_cdc_multi_putc+0xc0>)
  400f4e:	781b      	ldrb	r3, [r3, #0]
  400f50:	b2db      	uxtb	r3, r3
  400f52:	f083 0301 	eor.w	r3, r3, #1
  400f56:	b2db      	uxtb	r3, r3
  400f58:	2b00      	cmp	r3, #0
  400f5a:	d001      	beq.n	400f60 <udi_cdc_multi_putc+0x50>
			return false;
  400f5c:	2300      	movs	r3, #0
  400f5e:	e02e      	b.n	400fbe <udi_cdc_multi_putc+0xae>
		}
		goto udi_cdc_putc_process_one_byte;
  400f60:	e7ea      	b.n	400f38 <udi_cdc_multi_putc+0x28>
	}

	// Write value
	flags = cpu_irq_save();
  400f62:	4b1c      	ldr	r3, [pc, #112]	; (400fd4 <udi_cdc_multi_putc+0xc4>)
  400f64:	4798      	blx	r3
  400f66:	6138      	str	r0, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
  400f68:	7dbb      	ldrb	r3, [r7, #22]
  400f6a:	4a1b      	ldr	r2, [pc, #108]	; (400fd8 <udi_cdc_multi_putc+0xc8>)
  400f6c:	5cd3      	ldrb	r3, [r2, r3]
  400f6e:	73fb      	strb	r3, [r7, #15]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  400f70:	7dbc      	ldrb	r4, [r7, #22]
  400f72:	7bf8      	ldrb	r0, [r7, #15]
  400f74:	7db9      	ldrb	r1, [r7, #22]
  400f76:	7bfa      	ldrb	r2, [r7, #15]
  400f78:	4b18      	ldr	r3, [pc, #96]	; (400fdc <udi_cdc_multi_putc+0xcc>)
  400f7a:	004d      	lsls	r5, r1, #1
  400f7c:	4415      	add	r5, r2
  400f7e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  400f82:	1c5d      	adds	r5, r3, #1
  400f84:	b2ae      	uxth	r6, r5
  400f86:	4d15      	ldr	r5, [pc, #84]	; (400fdc <udi_cdc_multi_putc+0xcc>)
  400f88:	0049      	lsls	r1, r1, #1
  400f8a:	440a      	add	r2, r1
  400f8c:	4631      	mov	r1, r6
  400f8e:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
  400f92:	683a      	ldr	r2, [r7, #0]
  400f94:	b2d2      	uxtb	r2, r2
  400f96:	4912      	ldr	r1, [pc, #72]	; (400fe0 <udi_cdc_multi_putc+0xd0>)
  400f98:	0064      	lsls	r4, r4, #1
  400f9a:	4420      	add	r0, r4
  400f9c:	0180      	lsls	r0, r0, #6
  400f9e:	4403      	add	r3, r0
  400fa0:	440b      	add	r3, r1
  400fa2:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore(flags);
  400fa4:	6938      	ldr	r0, [r7, #16]
  400fa6:	4b0f      	ldr	r3, [pc, #60]	; (400fe4 <udi_cdc_multi_putc+0xd4>)
  400fa8:	4798      	blx	r3

	if (b_databit_9) {
  400faa:	7dfb      	ldrb	r3, [r7, #23]
  400fac:	2b00      	cmp	r3, #0
  400fae:	d005      	beq.n	400fbc <udi_cdc_multi_putc+0xac>
		// Send MSB
		b_databit_9 = false;
  400fb0:	2300      	movs	r3, #0
  400fb2:	75fb      	strb	r3, [r7, #23]
		value = value >> 8;
  400fb4:	683b      	ldr	r3, [r7, #0]
  400fb6:	121b      	asrs	r3, r3, #8
  400fb8:	603b      	str	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
  400fba:	e7bd      	b.n	400f38 <udi_cdc_multi_putc+0x28>
	}
	return true;
  400fbc:	2301      	movs	r3, #1
}
  400fbe:	4618      	mov	r0, r3
  400fc0:	371c      	adds	r7, #28
  400fc2:	46bd      	mov	sp, r7
  400fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400fc6:	bf00      	nop
  400fc8:	20000b0c 	.word	0x20000b0c
  400fcc:	00400ed1 	.word	0x00400ed1
  400fd0:	20000b26 	.word	0x20000b26
  400fd4:	0040046d 	.word	0x0040046d
  400fd8:	20000c3c 	.word	0x20000c3c
  400fdc:	20000c38 	.word	0x20000c38
  400fe0:	20000bb8 	.word	0x20000bb8
  400fe4:	004004c5 	.word	0x004004c5

00400fe8 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  400fe8:	b580      	push	{r7, lr}
  400fea:	b082      	sub	sp, #8
  400fec:	af00      	add	r7, sp, #0
  400fee:	6078      	str	r0, [r7, #4]
	return udi_cdc_multi_putc(0, value);
  400ff0:	2000      	movs	r0, #0
  400ff2:	6879      	ldr	r1, [r7, #4]
  400ff4:	4b03      	ldr	r3, [pc, #12]	; (401004 <udi_cdc_putc+0x1c>)
  400ff6:	4798      	blx	r3
  400ff8:	4603      	mov	r3, r0
}
  400ffa:	4618      	mov	r0, r3
  400ffc:	3708      	adds	r7, #8
  400ffe:	46bd      	mov	sp, r7
  401000:	bd80      	pop	{r7, pc}
  401002:	bf00      	nop
  401004:	00400f11 	.word	0x00400f11

00401008 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
  401008:	b480      	push	{r7}
  40100a:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  40100c:	4b06      	ldr	r3, [pc, #24]	; (401028 <udc_get_eof_conf+0x20>)
  40100e:	681b      	ldr	r3, [r3, #0]
  401010:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  401012:	4b05      	ldr	r3, [pc, #20]	; (401028 <udc_get_eof_conf+0x20>)
  401014:	681b      	ldr	r3, [r3, #0]
  401016:	681b      	ldr	r3, [r3, #0]
  401018:	885b      	ldrh	r3, [r3, #2]
  40101a:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  40101c:	4413      	add	r3, r2
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
  40101e:	4618      	mov	r0, r3
  401020:	46bd      	mov	sp, r7
  401022:	f85d 7b04 	ldr.w	r7, [sp], #4
  401026:	4770      	bx	lr
  401028:	20000c5c 	.word	0x20000c5c

0040102c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
  40102c:	b580      	push	{r7, lr}
  40102e:	b084      	sub	sp, #16
  401030:	af00      	add	r7, sp, #0
  401032:	6078      	str	r0, [r7, #4]
  401034:	460b      	mov	r3, r1
  401036:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
  401038:	4b11      	ldr	r3, [pc, #68]	; (401080 <udc_next_desc_in_iface+0x54>)
  40103a:	4798      	blx	r3
  40103c:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  40103e:	687b      	ldr	r3, [r7, #4]
  401040:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401042:	687a      	ldr	r2, [r7, #4]
  401044:	4413      	add	r3, r2
  401046:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  401048:	e010      	b.n	40106c <udc_next_desc_in_iface+0x40>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40104a:	687b      	ldr	r3, [r7, #4]
  40104c:	785b      	ldrb	r3, [r3, #1]
  40104e:	2b04      	cmp	r3, #4
  401050:	d100      	bne.n	401054 <udc_next_desc_in_iface+0x28>
			break; // End of global interface descriptor
  401052:	e00f      	b.n	401074 <udc_next_desc_in_iface+0x48>
		}
		if (desc_id == desc->bDescriptorType) {
  401054:	687b      	ldr	r3, [r7, #4]
  401056:	785b      	ldrb	r3, [r3, #1]
  401058:	78fa      	ldrb	r2, [r7, #3]
  40105a:	429a      	cmp	r2, r3
  40105c:	d101      	bne.n	401062 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
  40105e:	687b      	ldr	r3, [r7, #4]
  401060:	e009      	b.n	401076 <udc_next_desc_in_iface+0x4a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  401062:	687b      	ldr	r3, [r7, #4]
  401064:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401066:	687a      	ldr	r2, [r7, #4]
  401068:	4413      	add	r3, r2
  40106a:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  40106c:	68fa      	ldr	r2, [r7, #12]
  40106e:	687b      	ldr	r3, [r7, #4]
  401070:	429a      	cmp	r2, r3
  401072:	d8ea      	bhi.n	40104a <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  401074:	2300      	movs	r3, #0
}
  401076:	4618      	mov	r0, r3
  401078:	3710      	adds	r7, #16
  40107a:	46bd      	mov	sp, r7
  40107c:	bd80      	pop	{r7, pc}
  40107e:	bf00      	nop
  401080:	00401009 	.word	0x00401009

00401084 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  401084:	b580      	push	{r7, lr}
  401086:	b084      	sub	sp, #16
  401088:	af00      	add	r7, sp, #0
  40108a:	4602      	mov	r2, r0
  40108c:	460b      	mov	r3, r1
  40108e:	71fa      	strb	r2, [r7, #7]
  401090:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  401092:	4b1e      	ldr	r3, [pc, #120]	; (40110c <udc_update_iface_desc+0x88>)
  401094:	781b      	ldrb	r3, [r3, #0]
  401096:	2b00      	cmp	r3, #0
  401098:	d101      	bne.n	40109e <udc_update_iface_desc+0x1a>
		return false;
  40109a:	2300      	movs	r3, #0
  40109c:	e032      	b.n	401104 <udc_update_iface_desc+0x80>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40109e:	4b1c      	ldr	r3, [pc, #112]	; (401110 <udc_update_iface_desc+0x8c>)
  4010a0:	681b      	ldr	r3, [r3, #0]
  4010a2:	681b      	ldr	r3, [r3, #0]
  4010a4:	791b      	ldrb	r3, [r3, #4]
  4010a6:	79fa      	ldrb	r2, [r7, #7]
  4010a8:	429a      	cmp	r2, r3
  4010aa:	d301      	bcc.n	4010b0 <udc_update_iface_desc+0x2c>
		return false;
  4010ac:	2300      	movs	r3, #0
  4010ae:	e029      	b.n	401104 <udc_update_iface_desc+0x80>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
  4010b0:	4b17      	ldr	r3, [pc, #92]	; (401110 <udc_update_iface_desc+0x8c>)
  4010b2:	681b      	ldr	r3, [r3, #0]
  4010b4:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  4010b6:	4b17      	ldr	r3, [pc, #92]	; (401114 <udc_update_iface_desc+0x90>)
  4010b8:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
  4010ba:	4b17      	ldr	r3, [pc, #92]	; (401118 <udc_update_iface_desc+0x94>)
  4010bc:	4798      	blx	r3
  4010be:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
  4010c0:	e01a      	b.n	4010f8 <udc_update_iface_desc+0x74>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  4010c2:	4b14      	ldr	r3, [pc, #80]	; (401114 <udc_update_iface_desc+0x90>)
  4010c4:	681b      	ldr	r3, [r3, #0]
  4010c6:	785b      	ldrb	r3, [r3, #1]
  4010c8:	2b04      	cmp	r3, #4
  4010ca:	d10d      	bne.n	4010e8 <udc_update_iface_desc+0x64>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4010cc:	4b11      	ldr	r3, [pc, #68]	; (401114 <udc_update_iface_desc+0x90>)
  4010ce:	681b      	ldr	r3, [r3, #0]
  4010d0:	789b      	ldrb	r3, [r3, #2]
  4010d2:	79fa      	ldrb	r2, [r7, #7]
  4010d4:	429a      	cmp	r2, r3
  4010d6:	d107      	bne.n	4010e8 <udc_update_iface_desc+0x64>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
  4010d8:	4b0e      	ldr	r3, [pc, #56]	; (401114 <udc_update_iface_desc+0x90>)
  4010da:	681b      	ldr	r3, [r3, #0]
  4010dc:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4010de:	79ba      	ldrb	r2, [r7, #6]
  4010e0:	429a      	cmp	r2, r3
  4010e2:	d101      	bne.n	4010e8 <udc_update_iface_desc+0x64>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  4010e4:	2301      	movs	r3, #1
  4010e6:	e00d      	b.n	401104 <udc_update_iface_desc+0x80>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  4010e8:	4b0a      	ldr	r3, [pc, #40]	; (401114 <udc_update_iface_desc+0x90>)
  4010ea:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
  4010ec:	4b09      	ldr	r3, [pc, #36]	; (401114 <udc_update_iface_desc+0x90>)
  4010ee:	681b      	ldr	r3, [r3, #0]
  4010f0:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  4010f2:	441a      	add	r2, r3
  4010f4:	4b07      	ldr	r3, [pc, #28]	; (401114 <udc_update_iface_desc+0x90>)
  4010f6:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
  4010f8:	4b06      	ldr	r3, [pc, #24]	; (401114 <udc_update_iface_desc+0x90>)
  4010fa:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  4010fc:	68fa      	ldr	r2, [r7, #12]
  4010fe:	429a      	cmp	r2, r3
  401100:	d8df      	bhi.n	4010c2 <udc_update_iface_desc+0x3e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  401102:	2300      	movs	r3, #0
}
  401104:	4618      	mov	r0, r3
  401106:	3710      	adds	r7, #16
  401108:	46bd      	mov	sp, r7
  40110a:	bd80      	pop	{r7, pc}
  40110c:	20000c58 	.word	0x20000c58
  401110:	20000c5c 	.word	0x20000c5c
  401114:	20000c60 	.word	0x20000c60
  401118:	00401009 	.word	0x00401009

0040111c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  40111c:	b580      	push	{r7, lr}
  40111e:	b084      	sub	sp, #16
  401120:	af00      	add	r7, sp, #0
  401122:	4603      	mov	r3, r0
  401124:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401126:	79fb      	ldrb	r3, [r7, #7]
  401128:	4618      	mov	r0, r3
  40112a:	2100      	movs	r1, #0
  40112c:	4b1e      	ldr	r3, [pc, #120]	; (4011a8 <udc_iface_disable+0x8c>)
  40112e:	4798      	blx	r3
  401130:	4603      	mov	r3, r0
  401132:	f083 0301 	eor.w	r3, r3, #1
  401136:	b2db      	uxtb	r3, r3
  401138:	2b00      	cmp	r3, #0
  40113a:	d001      	beq.n	401140 <udc_iface_disable+0x24>
		return false;
  40113c:	2300      	movs	r3, #0
  40113e:	e02f      	b.n	4011a0 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401140:	4b1a      	ldr	r3, [pc, #104]	; (4011ac <udc_iface_disable+0x90>)
  401142:	681b      	ldr	r3, [r3, #0]
  401144:	685a      	ldr	r2, [r3, #4]
  401146:	79fb      	ldrb	r3, [r7, #7]
  401148:	009b      	lsls	r3, r3, #2
  40114a:	4413      	add	r3, r2
  40114c:	681b      	ldr	r3, [r3, #0]
  40114e:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401150:	68bb      	ldr	r3, [r7, #8]
  401152:	68db      	ldr	r3, [r3, #12]
  401154:	4798      	blx	r3
  401156:	4603      	mov	r3, r0
  401158:	79fa      	ldrb	r2, [r7, #7]
  40115a:	4610      	mov	r0, r2
  40115c:	4619      	mov	r1, r3
  40115e:	4b12      	ldr	r3, [pc, #72]	; (4011a8 <udc_iface_disable+0x8c>)
  401160:	4798      	blx	r3
  401162:	4603      	mov	r3, r0
  401164:	f083 0301 	eor.w	r3, r3, #1
  401168:	b2db      	uxtb	r3, r3
  40116a:	2b00      	cmp	r3, #0
  40116c:	d001      	beq.n	401172 <udc_iface_disable+0x56>
		return false;
  40116e:	2300      	movs	r3, #0
  401170:	e016      	b.n	4011a0 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  401172:	4b0f      	ldr	r3, [pc, #60]	; (4011b0 <udc_iface_disable+0x94>)
  401174:	681b      	ldr	r3, [r3, #0]
  401176:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  401178:	68f8      	ldr	r0, [r7, #12]
  40117a:	2105      	movs	r1, #5
  40117c:	4b0d      	ldr	r3, [pc, #52]	; (4011b4 <udc_iface_disable+0x98>)
  40117e:	4798      	blx	r3
  401180:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  401182:	68fb      	ldr	r3, [r7, #12]
  401184:	2b00      	cmp	r3, #0
  401186:	d105      	bne.n	401194 <udc_iface_disable+0x78>
				break;
  401188:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
  40118a:	68bb      	ldr	r3, [r7, #8]
  40118c:	685b      	ldr	r3, [r3, #4]
  40118e:	4798      	blx	r3
	return true;
  401190:	2301      	movs	r3, #1
  401192:	e005      	b.n	4011a0 <udc_iface_disable+0x84>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  401194:	68fb      	ldr	r3, [r7, #12]
  401196:	789b      	ldrb	r3, [r3, #2]
  401198:	4618      	mov	r0, r3
  40119a:	4b07      	ldr	r3, [pc, #28]	; (4011b8 <udc_iface_disable+0x9c>)
  40119c:	4798      	blx	r3
		}
  40119e:	e7eb      	b.n	401178 <udc_iface_disable+0x5c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
  4011a0:	4618      	mov	r0, r3
  4011a2:	3710      	adds	r7, #16
  4011a4:	46bd      	mov	sp, r7
  4011a6:	bd80      	pop	{r7, pc}
  4011a8:	00401085 	.word	0x00401085
  4011ac:	20000c5c 	.word	0x20000c5c
  4011b0:	20000c60 	.word	0x20000c60
  4011b4:	0040102d 	.word	0x0040102d
  4011b8:	004022a9 	.word	0x004022a9

004011bc <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  4011bc:	b580      	push	{r7, lr}
  4011be:	b084      	sub	sp, #16
  4011c0:	af00      	add	r7, sp, #0
  4011c2:	4602      	mov	r2, r0
  4011c4:	460b      	mov	r3, r1
  4011c6:	71fa      	strb	r2, [r7, #7]
  4011c8:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  4011ca:	79fa      	ldrb	r2, [r7, #7]
  4011cc:	79bb      	ldrb	r3, [r7, #6]
  4011ce:	4610      	mov	r0, r2
  4011d0:	4619      	mov	r1, r3
  4011d2:	4b1d      	ldr	r3, [pc, #116]	; (401248 <udc_iface_enable+0x8c>)
  4011d4:	4798      	blx	r3
  4011d6:	4603      	mov	r3, r0
  4011d8:	f083 0301 	eor.w	r3, r3, #1
  4011dc:	b2db      	uxtb	r3, r3
  4011de:	2b00      	cmp	r3, #0
  4011e0:	d001      	beq.n	4011e6 <udc_iface_enable+0x2a>
		return false;
  4011e2:	2300      	movs	r3, #0
  4011e4:	e02b      	b.n	40123e <udc_iface_enable+0x82>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4011e6:	4b19      	ldr	r3, [pc, #100]	; (40124c <udc_iface_enable+0x90>)
  4011e8:	681b      	ldr	r3, [r3, #0]
  4011ea:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4011ec:	68f8      	ldr	r0, [r7, #12]
  4011ee:	2105      	movs	r1, #5
  4011f0:	4b17      	ldr	r3, [pc, #92]	; (401250 <udc_iface_enable+0x94>)
  4011f2:	4798      	blx	r3
  4011f4:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  4011f6:	68fb      	ldr	r3, [r7, #12]
  4011f8:	2b00      	cmp	r3, #0
  4011fa:	d10b      	bne.n	401214 <udc_iface_enable+0x58>
			break;
  4011fc:	bf00      	nop
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  4011fe:	4b15      	ldr	r3, [pc, #84]	; (401254 <udc_iface_enable+0x98>)
  401200:	681b      	ldr	r3, [r3, #0]
  401202:	685a      	ldr	r2, [r3, #4]
  401204:	79fb      	ldrb	r3, [r7, #7]
  401206:	009b      	lsls	r3, r3, #2
  401208:	4413      	add	r3, r2
  40120a:	681b      	ldr	r3, [r3, #0]
  40120c:	681b      	ldr	r3, [r3, #0]
  40120e:	4798      	blx	r3
  401210:	4603      	mov	r3, r0
  401212:	e014      	b.n	40123e <udc_iface_enable+0x82>
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  401214:	68fb      	ldr	r3, [r7, #12]
  401216:	7899      	ldrb	r1, [r3, #2]
  401218:	68fb      	ldr	r3, [r7, #12]
  40121a:	78da      	ldrb	r2, [r3, #3]
  40121c:	68fb      	ldr	r3, [r7, #12]
  40121e:	889b      	ldrh	r3, [r3, #4]
  401220:	b29b      	uxth	r3, r3
  401222:	4608      	mov	r0, r1
  401224:	4611      	mov	r1, r2
  401226:	461a      	mov	r2, r3
  401228:	4b0b      	ldr	r3, [pc, #44]	; (401258 <udc_iface_enable+0x9c>)
  40122a:	4798      	blx	r3
  40122c:	4603      	mov	r3, r0
  40122e:	f083 0301 	eor.w	r3, r3, #1
  401232:	b2db      	uxtb	r3, r3
  401234:	2b00      	cmp	r3, #0
  401236:	d001      	beq.n	40123c <udc_iface_enable+0x80>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
  401238:	2300      	movs	r3, #0
  40123a:	e000      	b.n	40123e <udc_iface_enable+0x82>
		}
	}
  40123c:	e7d6      	b.n	4011ec <udc_iface_enable+0x30>
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
  40123e:	4618      	mov	r0, r3
  401240:	3710      	adds	r7, #16
  401242:	46bd      	mov	sp, r7
  401244:	bd80      	pop	{r7, pc}
  401246:	bf00      	nop
  401248:	00401085 	.word	0x00401085
  40124c:	20000c60 	.word	0x20000c60
  401250:	0040102d 	.word	0x0040102d
  401254:	20000c5c 	.word	0x20000c5c
  401258:	00402129 	.word	0x00402129

0040125c <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  40125c:	b580      	push	{r7, lr}
  40125e:	af00      	add	r7, sp, #0
	udd_enable();
  401260:	4b01      	ldr	r3, [pc, #4]	; (401268 <udc_start+0xc>)
  401262:	4798      	blx	r3
}
  401264:	bd80      	pop	{r7, pc}
  401266:	bf00      	nop
  401268:	00401f3d 	.word	0x00401f3d

0040126c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  40126c:	b580      	push	{r7, lr}
  40126e:	b082      	sub	sp, #8
  401270:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  401272:	4b0f      	ldr	r3, [pc, #60]	; (4012b0 <udc_reset+0x44>)
  401274:	781b      	ldrb	r3, [r3, #0]
  401276:	2b00      	cmp	r3, #0
  401278:	d010      	beq.n	40129c <udc_reset+0x30>
		for (iface_num = 0;
  40127a:	2300      	movs	r3, #0
  40127c:	71fb      	strb	r3, [r7, #7]
  40127e:	e006      	b.n	40128e <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  401280:	79fb      	ldrb	r3, [r7, #7]
  401282:	4618      	mov	r0, r3
  401284:	4b0b      	ldr	r3, [pc, #44]	; (4012b4 <udc_reset+0x48>)
  401286:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  401288:	79fb      	ldrb	r3, [r7, #7]
  40128a:	3301      	adds	r3, #1
  40128c:	71fb      	strb	r3, [r7, #7]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40128e:	4b0a      	ldr	r3, [pc, #40]	; (4012b8 <udc_reset+0x4c>)
  401290:	681b      	ldr	r3, [r3, #0]
  401292:	681b      	ldr	r3, [r3, #0]
  401294:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401296:	79fa      	ldrb	r2, [r7, #7]
  401298:	429a      	cmp	r2, r3
  40129a:	d3f1      	bcc.n	401280 <udc_reset+0x14>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  40129c:	4b04      	ldr	r3, [pc, #16]	; (4012b0 <udc_reset+0x44>)
  40129e:	2200      	movs	r2, #0
  4012a0:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  4012a2:	4b06      	ldr	r3, [pc, #24]	; (4012bc <udc_reset+0x50>)
  4012a4:	2201      	movs	r2, #1
  4012a6:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
  4012a8:	3708      	adds	r7, #8
  4012aa:	46bd      	mov	sp, r7
  4012ac:	bd80      	pop	{r7, pc}
  4012ae:	bf00      	nop
  4012b0:	20000c58 	.word	0x20000c58
  4012b4:	0040111d 	.word	0x0040111d
  4012b8:	20000c5c 	.word	0x20000c5c
  4012bc:	20000c50 	.word	0x20000c50

004012c0 <udc_sof_notify>:

void udc_sof_notify(void)
{
  4012c0:	b580      	push	{r7, lr}
  4012c2:	b082      	sub	sp, #8
  4012c4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  4012c6:	4b13      	ldr	r3, [pc, #76]	; (401314 <udc_sof_notify+0x54>)
  4012c8:	781b      	ldrb	r3, [r3, #0]
  4012ca:	2b00      	cmp	r3, #0
  4012cc:	d01f      	beq.n	40130e <udc_sof_notify+0x4e>
		for (iface_num = 0;
  4012ce:	2300      	movs	r3, #0
  4012d0:	71fb      	strb	r3, [r7, #7]
  4012d2:	e015      	b.n	401300 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  4012d4:	4b10      	ldr	r3, [pc, #64]	; (401318 <udc_sof_notify+0x58>)
  4012d6:	681b      	ldr	r3, [r3, #0]
  4012d8:	685a      	ldr	r2, [r3, #4]
  4012da:	79fb      	ldrb	r3, [r7, #7]
  4012dc:	009b      	lsls	r3, r3, #2
  4012de:	4413      	add	r3, r2
  4012e0:	681b      	ldr	r3, [r3, #0]
  4012e2:	691b      	ldr	r3, [r3, #16]
  4012e4:	2b00      	cmp	r3, #0
  4012e6:	d008      	beq.n	4012fa <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  4012e8:	4b0b      	ldr	r3, [pc, #44]	; (401318 <udc_sof_notify+0x58>)
  4012ea:	681b      	ldr	r3, [r3, #0]
  4012ec:	685a      	ldr	r2, [r3, #4]
  4012ee:	79fb      	ldrb	r3, [r7, #7]
  4012f0:	009b      	lsls	r3, r3, #2
  4012f2:	4413      	add	r3, r2
  4012f4:	681b      	ldr	r3, [r3, #0]
  4012f6:	691b      	ldr	r3, [r3, #16]
  4012f8:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  4012fa:	79fb      	ldrb	r3, [r7, #7]
  4012fc:	3301      	adds	r3, #1
  4012fe:	71fb      	strb	r3, [r7, #7]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401300:	4b05      	ldr	r3, [pc, #20]	; (401318 <udc_sof_notify+0x58>)
  401302:	681b      	ldr	r3, [r3, #0]
  401304:	681b      	ldr	r3, [r3, #0]
  401306:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401308:	79fa      	ldrb	r2, [r7, #7]
  40130a:	429a      	cmp	r2, r3
  40130c:	d3e2      	bcc.n	4012d4 <udc_sof_notify+0x14>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
  40130e:	3708      	adds	r7, #8
  401310:	46bd      	mov	sp, r7
  401312:	bd80      	pop	{r7, pc}
  401314:	20000c58 	.word	0x20000c58
  401318:	20000c5c 	.word	0x20000c5c

0040131c <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
  40131c:	b580      	push	{r7, lr}
  40131e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  401320:	4b06      	ldr	r3, [pc, #24]	; (40133c <udc_req_std_dev_get_status+0x20>)
  401322:	88db      	ldrh	r3, [r3, #6]
  401324:	2b02      	cmp	r3, #2
  401326:	d001      	beq.n	40132c <udc_req_std_dev_get_status+0x10>
		return false;
  401328:	2300      	movs	r3, #0
  40132a:	e004      	b.n	401336 <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  40132c:	4804      	ldr	r0, [pc, #16]	; (401340 <udc_req_std_dev_get_status+0x24>)
  40132e:	2102      	movs	r1, #2
  401330:	4b04      	ldr	r3, [pc, #16]	; (401344 <udc_req_std_dev_get_status+0x28>)
  401332:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  401334:	2301      	movs	r3, #1
}
  401336:	4618      	mov	r0, r3
  401338:	bd80      	pop	{r7, pc}
  40133a:	bf00      	nop
  40133c:	2000af50 	.word	0x2000af50
  401340:	20000c50 	.word	0x20000c50
  401344:	00402101 	.word	0x00402101

00401348 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
  401348:	b580      	push	{r7, lr}
  40134a:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  40134c:	4b0b      	ldr	r3, [pc, #44]	; (40137c <udc_req_std_ep_get_status+0x34>)
  40134e:	88db      	ldrh	r3, [r3, #6]
  401350:	2b02      	cmp	r3, #2
  401352:	d001      	beq.n	401358 <udc_req_std_ep_get_status+0x10>
		return false;
  401354:	2300      	movs	r3, #0
  401356:	e00e      	b.n	401376 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  401358:	4b08      	ldr	r3, [pc, #32]	; (40137c <udc_req_std_ep_get_status+0x34>)
  40135a:	889b      	ldrh	r3, [r3, #4]
  40135c:	b2db      	uxtb	r3, r3
  40135e:	4618      	mov	r0, r3
  401360:	4b07      	ldr	r3, [pc, #28]	; (401380 <udc_req_std_ep_get_status+0x38>)
  401362:	4798      	blx	r3
  401364:	4603      	mov	r3, r0
  401366:	461a      	mov	r2, r3
  401368:	4b06      	ldr	r3, [pc, #24]	; (401384 <udc_req_std_ep_get_status+0x3c>)
  40136a:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  40136c:	4805      	ldr	r0, [pc, #20]	; (401384 <udc_req_std_ep_get_status+0x3c>)
  40136e:	2102      	movs	r1, #2
  401370:	4b05      	ldr	r3, [pc, #20]	; (401388 <udc_req_std_ep_get_status+0x40>)
  401372:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
  401374:	2301      	movs	r3, #1
}
  401376:	4618      	mov	r0, r3
  401378:	bd80      	pop	{r7, pc}
  40137a:	bf00      	nop
  40137c:	2000af50 	.word	0x2000af50
  401380:	004022f1 	.word	0x004022f1
  401384:	20000c64 	.word	0x20000c64
  401388:	00402101 	.word	0x00402101

0040138c <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
  40138c:	b480      	push	{r7}
  40138e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401390:	4b0c      	ldr	r3, [pc, #48]	; (4013c4 <udc_req_std_dev_clear_feature+0x38>)
  401392:	88db      	ldrh	r3, [r3, #6]
  401394:	2b00      	cmp	r3, #0
  401396:	d001      	beq.n	40139c <udc_req_std_dev_clear_feature+0x10>
		return false;
  401398:	2300      	movs	r3, #0
  40139a:	e00d      	b.n	4013b8 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  40139c:	4b09      	ldr	r3, [pc, #36]	; (4013c4 <udc_req_std_dev_clear_feature+0x38>)
  40139e:	885b      	ldrh	r3, [r3, #2]
  4013a0:	2b01      	cmp	r3, #1
  4013a2:	d108      	bne.n	4013b6 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  4013a4:	4b08      	ldr	r3, [pc, #32]	; (4013c8 <udc_req_std_dev_clear_feature+0x3c>)
  4013a6:	881b      	ldrh	r3, [r3, #0]
  4013a8:	f023 0302 	bic.w	r3, r3, #2
  4013ac:	b29a      	uxth	r2, r3
  4013ae:	4b06      	ldr	r3, [pc, #24]	; (4013c8 <udc_req_std_dev_clear_feature+0x3c>)
  4013b0:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  4013b2:	2301      	movs	r3, #1
  4013b4:	e000      	b.n	4013b8 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
  4013b6:	2300      	movs	r3, #0
}
  4013b8:	4618      	mov	r0, r3
  4013ba:	46bd      	mov	sp, r7
  4013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013c0:	4770      	bx	lr
  4013c2:	bf00      	nop
  4013c4:	2000af50 	.word	0x2000af50
  4013c8:	20000c50 	.word	0x20000c50

004013cc <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
  4013cc:	b580      	push	{r7, lr}
  4013ce:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  4013d0:	4b0a      	ldr	r3, [pc, #40]	; (4013fc <udc_req_std_ep_clear_feature+0x30>)
  4013d2:	88db      	ldrh	r3, [r3, #6]
  4013d4:	2b00      	cmp	r3, #0
  4013d6:	d001      	beq.n	4013dc <udc_req_std_ep_clear_feature+0x10>
		return false;
  4013d8:	2300      	movs	r3, #0
  4013da:	e00c      	b.n	4013f6 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4013dc:	4b07      	ldr	r3, [pc, #28]	; (4013fc <udc_req_std_ep_clear_feature+0x30>)
  4013de:	885b      	ldrh	r3, [r3, #2]
  4013e0:	2b00      	cmp	r3, #0
  4013e2:	d107      	bne.n	4013f4 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4013e4:	4b05      	ldr	r3, [pc, #20]	; (4013fc <udc_req_std_ep_clear_feature+0x30>)
  4013e6:	889b      	ldrh	r3, [r3, #4]
  4013e8:	b2db      	uxtb	r3, r3
  4013ea:	4618      	mov	r0, r3
  4013ec:	4b04      	ldr	r3, [pc, #16]	; (401400 <udc_req_std_ep_clear_feature+0x34>)
  4013ee:	4798      	blx	r3
  4013f0:	4603      	mov	r3, r0
  4013f2:	e000      	b.n	4013f6 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
  4013f4:	2300      	movs	r3, #0
}
  4013f6:	4618      	mov	r0, r3
  4013f8:	bd80      	pop	{r7, pc}
  4013fa:	bf00      	nop
  4013fc:	2000af50 	.word	0x2000af50
  401400:	00402459 	.word	0x00402459

00401404 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
  401404:	b480      	push	{r7}
  401406:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401408:	4b09      	ldr	r3, [pc, #36]	; (401430 <udc_req_std_dev_set_feature+0x2c>)
  40140a:	88db      	ldrh	r3, [r3, #6]
  40140c:	2b00      	cmp	r3, #0
  40140e:	d001      	beq.n	401414 <udc_req_std_dev_set_feature+0x10>
		return false;
  401410:	2300      	movs	r3, #0
  401412:	e007      	b.n	401424 <udc_req_std_dev_set_feature+0x20>
	}

	switch (udd_g_ctrlreq.req.wValue) {
  401414:	4b06      	ldr	r3, [pc, #24]	; (401430 <udc_req_std_dev_set_feature+0x2c>)
  401416:	885b      	ldrh	r3, [r3, #2]
  401418:	2b01      	cmp	r3, #1
  40141a:	d002      	beq.n	401422 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
  40141c:	bf00      	nop
	}
	return false;
  40141e:	2300      	movs	r3, #0
  401420:	e000      	b.n	401424 <udc_req_std_dev_set_feature+0x20>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
  401422:	2300      	movs	r3, #0
#endif
	default:
		break;
	}
	return false;
}
  401424:	4618      	mov	r0, r3
  401426:	46bd      	mov	sp, r7
  401428:	f85d 7b04 	ldr.w	r7, [sp], #4
  40142c:	4770      	bx	lr
  40142e:	bf00      	nop
  401430:	2000af50 	.word	0x2000af50

00401434 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
  401434:	b580      	push	{r7, lr}
  401436:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401438:	4b0d      	ldr	r3, [pc, #52]	; (401470 <udc_req_std_ep_set_feature+0x3c>)
  40143a:	88db      	ldrh	r3, [r3, #6]
  40143c:	2b00      	cmp	r3, #0
  40143e:	d001      	beq.n	401444 <udc_req_std_ep_set_feature+0x10>
		return false;
  401440:	2300      	movs	r3, #0
  401442:	e012      	b.n	40146a <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401444:	4b0a      	ldr	r3, [pc, #40]	; (401470 <udc_req_std_ep_set_feature+0x3c>)
  401446:	885b      	ldrh	r3, [r3, #2]
  401448:	2b00      	cmp	r3, #0
  40144a:	d10d      	bne.n	401468 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  40144c:	4b08      	ldr	r3, [pc, #32]	; (401470 <udc_req_std_ep_set_feature+0x3c>)
  40144e:	889b      	ldrh	r3, [r3, #4]
  401450:	b2db      	uxtb	r3, r3
  401452:	4618      	mov	r0, r3
  401454:	4b07      	ldr	r3, [pc, #28]	; (401474 <udc_req_std_ep_set_feature+0x40>)
  401456:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401458:	4b05      	ldr	r3, [pc, #20]	; (401470 <udc_req_std_ep_set_feature+0x3c>)
  40145a:	889b      	ldrh	r3, [r3, #4]
  40145c:	b2db      	uxtb	r3, r3
  40145e:	4618      	mov	r0, r3
  401460:	4b05      	ldr	r3, [pc, #20]	; (401478 <udc_req_std_ep_set_feature+0x44>)
  401462:	4798      	blx	r3
  401464:	4603      	mov	r3, r0
  401466:	e000      	b.n	40146a <udc_req_std_ep_set_feature+0x36>
	}
	return false;
  401468:	2300      	movs	r3, #0
}
  40146a:	4618      	mov	r0, r3
  40146c:	bd80      	pop	{r7, pc}
  40146e:	bf00      	nop
  401470:	2000af50 	.word	0x2000af50
  401474:	004026c9 	.word	0x004026c9
  401478:	00402365 	.word	0x00402365

0040147c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  40147c:	b580      	push	{r7, lr}
  40147e:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  401480:	4b04      	ldr	r3, [pc, #16]	; (401494 <udc_valid_address+0x18>)
  401482:	885b      	ldrh	r3, [r3, #2]
  401484:	b2db      	uxtb	r3, r3
  401486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40148a:	b2db      	uxtb	r3, r3
  40148c:	4618      	mov	r0, r3
  40148e:	4b02      	ldr	r3, [pc, #8]	; (401498 <udc_valid_address+0x1c>)
  401490:	4798      	blx	r3
}
  401492:	bd80      	pop	{r7, pc}
  401494:	2000af50 	.word	0x2000af50
  401498:	0040203d 	.word	0x0040203d

0040149c <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
  40149c:	b480      	push	{r7}
  40149e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  4014a0:	4b07      	ldr	r3, [pc, #28]	; (4014c0 <udc_req_std_dev_set_address+0x24>)
  4014a2:	88db      	ldrh	r3, [r3, #6]
  4014a4:	2b00      	cmp	r3, #0
  4014a6:	d001      	beq.n	4014ac <udc_req_std_dev_set_address+0x10>
		return false;
  4014a8:	2300      	movs	r3, #0
  4014aa:	e003      	b.n	4014b4 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  4014ac:	4b04      	ldr	r3, [pc, #16]	; (4014c0 <udc_req_std_dev_set_address+0x24>)
  4014ae:	4a05      	ldr	r2, [pc, #20]	; (4014c4 <udc_req_std_dev_set_address+0x28>)
  4014b0:	611a      	str	r2, [r3, #16]
	return true;
  4014b2:	2301      	movs	r3, #1
}
  4014b4:	4618      	mov	r0, r3
  4014b6:	46bd      	mov	sp, r7
  4014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014bc:	4770      	bx	lr
  4014be:	bf00      	nop
  4014c0:	2000af50 	.word	0x2000af50
  4014c4:	0040147d 	.word	0x0040147d

004014c8 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
  4014c8:	b580      	push	{r7, lr}
  4014ca:	b084      	sub	sp, #16
  4014cc:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
  4014ce:	2300      	movs	r3, #0
  4014d0:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  4014d2:	4b21      	ldr	r3, [pc, #132]	; (401558 <udc_req_std_dev_get_str_desc+0x90>)
  4014d4:	885b      	ldrh	r3, [r3, #2]
  4014d6:	b2db      	uxtb	r3, r3
  4014d8:	2b01      	cmp	r3, #1
  4014da:	d008      	beq.n	4014ee <udc_req_std_dev_get_str_desc+0x26>
  4014dc:	2b02      	cmp	r3, #2
  4014de:	d00b      	beq.n	4014f8 <udc_req_std_dev_get_str_desc+0x30>
  4014e0:	2b00      	cmp	r3, #0
  4014e2:	d10e      	bne.n	401502 <udc_req_std_dev_get_str_desc+0x3a>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  4014e4:	481d      	ldr	r0, [pc, #116]	; (40155c <udc_req_std_dev_get_str_desc+0x94>)
  4014e6:	2104      	movs	r1, #4
  4014e8:	4b1d      	ldr	r3, [pc, #116]	; (401560 <udc_req_std_dev_get_str_desc+0x98>)
  4014ea:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
  4014ec:	e00b      	b.n	401506 <udc_req_std_dev_get_str_desc+0x3e>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  4014ee:	2307      	movs	r3, #7
  4014f0:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
  4014f2:	4b1c      	ldr	r3, [pc, #112]	; (401564 <udc_req_std_dev_get_str_desc+0x9c>)
  4014f4:	60bb      	str	r3, [r7, #8]
		break;
  4014f6:	e006      	b.n	401506 <udc_req_std_dev_get_str_desc+0x3e>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  4014f8:	230a      	movs	r3, #10
  4014fa:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
  4014fc:	4b1a      	ldr	r3, [pc, #104]	; (401568 <udc_req_std_dev_get_str_desc+0xa0>)
  4014fe:	60bb      	str	r3, [r7, #8]
		break;
  401500:	e001      	b.n	401506 <udc_req_std_dev_get_str_desc+0x3e>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
  401502:	2300      	movs	r3, #0
  401504:	e023      	b.n	40154e <udc_req_std_dev_get_str_desc+0x86>
	}

	if (str_length) {
  401506:	79fb      	ldrb	r3, [r7, #7]
  401508:	2b00      	cmp	r3, #0
  40150a:	d01f      	beq.n	40154c <udc_req_std_dev_get_str_desc+0x84>
		for(i = 0; i < str_length; i++) {
  40150c:	2300      	movs	r3, #0
  40150e:	73fb      	strb	r3, [r7, #15]
  401510:	e00b      	b.n	40152a <udc_req_std_dev_get_str_desc+0x62>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  401512:	7bfb      	ldrb	r3, [r7, #15]
  401514:	7bfa      	ldrb	r2, [r7, #15]
  401516:	68b9      	ldr	r1, [r7, #8]
  401518:	440a      	add	r2, r1
  40151a:	7812      	ldrb	r2, [r2, #0]
  40151c:	4913      	ldr	r1, [pc, #76]	; (40156c <udc_req_std_dev_get_str_desc+0xa4>)
  40151e:	005b      	lsls	r3, r3, #1
  401520:	440b      	add	r3, r1
  401522:	805a      	strh	r2, [r3, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
  401524:	7bfb      	ldrb	r3, [r7, #15]
  401526:	3301      	adds	r3, #1
  401528:	73fb      	strb	r3, [r7, #15]
  40152a:	7bfa      	ldrb	r2, [r7, #15]
  40152c:	79fb      	ldrb	r3, [r7, #7]
  40152e:	429a      	cmp	r2, r3
  401530:	d3ef      	bcc.n	401512 <udc_req_std_dev_get_str_desc+0x4a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  401532:	79fb      	ldrb	r3, [r7, #7]
  401534:	3301      	adds	r3, #1
  401536:	b2db      	uxtb	r3, r3
  401538:	005b      	lsls	r3, r3, #1
  40153a:	b2da      	uxtb	r2, r3
  40153c:	4b0b      	ldr	r3, [pc, #44]	; (40156c <udc_req_std_dev_get_str_desc+0xa4>)
  40153e:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
  401540:	4b0a      	ldr	r3, [pc, #40]	; (40156c <udc_req_std_dev_get_str_desc+0xa4>)
  401542:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
  401544:	4809      	ldr	r0, [pc, #36]	; (40156c <udc_req_std_dev_get_str_desc+0xa4>)
  401546:	4619      	mov	r1, r3
  401548:	4b05      	ldr	r3, [pc, #20]	; (401560 <udc_req_std_dev_get_str_desc+0x98>)
  40154a:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
  40154c:	2301      	movs	r3, #1
}
  40154e:	4618      	mov	r0, r3
  401550:	3710      	adds	r7, #16
  401552:	46bd      	mov	sp, r7
  401554:	bd80      	pop	{r7, pc}
  401556:	bf00      	nop
  401558:	2000af50 	.word	0x2000af50
  40155c:	20000028 	.word	0x20000028
  401560:	00402101 	.word	0x00402101
  401564:	2000002c 	.word	0x2000002c
  401568:	20000034 	.word	0x20000034
  40156c:	20000040 	.word	0x20000040

00401570 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
  401570:	b580      	push	{r7, lr}
  401572:	b082      	sub	sp, #8
  401574:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  401576:	4b41      	ldr	r3, [pc, #260]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  401578:	885b      	ldrh	r3, [r3, #2]
  40157a:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  40157c:	4b3f      	ldr	r3, [pc, #252]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  40157e:	885b      	ldrh	r3, [r3, #2]
  401580:	0a1b      	lsrs	r3, r3, #8
  401582:	b29b      	uxth	r3, r3
  401584:	b2db      	uxtb	r3, r3
  401586:	3b01      	subs	r3, #1
  401588:	2b0e      	cmp	r3, #14
  40158a:	d866      	bhi.n	40165a <udc_req_std_dev_get_descriptor+0xea>
  40158c:	a201      	add	r2, pc, #4	; (adr r2, 401594 <udc_req_std_dev_get_descriptor+0x24>)
  40158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401592:	bf00      	nop
  401594:	004015d1 	.word	0x004015d1
  401598:	004015e5 	.word	0x004015e5
  40159c:	00401645 	.word	0x00401645
  4015a0:	0040165b 	.word	0x0040165b
  4015a4:	0040165b 	.word	0x0040165b
  4015a8:	0040165b 	.word	0x0040165b
  4015ac:	0040165b 	.word	0x0040165b
  4015b0:	0040165b 	.word	0x0040165b
  4015b4:	0040165b 	.word	0x0040165b
  4015b8:	0040165b 	.word	0x0040165b
  4015bc:	0040165b 	.word	0x0040165b
  4015c0:	0040165b 	.word	0x0040165b
  4015c4:	0040165b 	.word	0x0040165b
  4015c8:	0040165b 	.word	0x0040165b
  4015cc:	00401623 	.word	0x00401623
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
  4015d0:	4b2b      	ldr	r3, [pc, #172]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  4015d2:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
  4015d4:	4b2a      	ldr	r3, [pc, #168]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  4015d6:	681b      	ldr	r3, [r3, #0]
  4015d8:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  4015da:	4610      	mov	r0, r2
  4015dc:	4619      	mov	r1, r3
  4015de:	4b29      	ldr	r3, [pc, #164]	; (401684 <udc_req_std_dev_get_descriptor+0x114>)
  4015e0:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
  4015e2:	e03c      	b.n	40165e <udc_req_std_dev_get_descriptor+0xee>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  4015e4:	4b26      	ldr	r3, [pc, #152]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  4015e6:	681b      	ldr	r3, [r3, #0]
  4015e8:	7c5b      	ldrb	r3, [r3, #17]
  4015ea:	79fa      	ldrb	r2, [r7, #7]
  4015ec:	429a      	cmp	r2, r3
  4015ee:	d301      	bcc.n	4015f4 <udc_req_std_dev_get_descriptor+0x84>
					bNumConfigurations) {
				return false;
  4015f0:	2300      	movs	r3, #0
  4015f2:	e03f      	b.n	401674 <udc_req_std_dev_get_descriptor+0x104>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  4015f4:	4b22      	ldr	r3, [pc, #136]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  4015f6:	685a      	ldr	r2, [r3, #4]
  4015f8:	79fb      	ldrb	r3, [r7, #7]
  4015fa:	00db      	lsls	r3, r3, #3
  4015fc:	4413      	add	r3, r2
  4015fe:	681a      	ldr	r2, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  401600:	4b1f      	ldr	r3, [pc, #124]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  401602:	6859      	ldr	r1, [r3, #4]
  401604:	79fb      	ldrb	r3, [r7, #7]
  401606:	00db      	lsls	r3, r3, #3
  401608:	440b      	add	r3, r1
  40160a:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  40160c:	885b      	ldrh	r3, [r3, #2]
  40160e:	b29b      	uxth	r3, r3
  401610:	4610      	mov	r0, r2
  401612:	4619      	mov	r1, r3
  401614:	4b1b      	ldr	r3, [pc, #108]	; (401684 <udc_req_std_dev_get_descriptor+0x114>)
  401616:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  401618:	4b18      	ldr	r3, [pc, #96]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  40161a:	689b      	ldr	r3, [r3, #8]
  40161c:	2202      	movs	r2, #2
  40161e:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
  401620:	e01d      	b.n	40165e <udc_req_std_dev_get_descriptor+0xee>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  401622:	4b17      	ldr	r3, [pc, #92]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  401624:	689b      	ldr	r3, [r3, #8]
  401626:	2b00      	cmp	r3, #0
  401628:	d101      	bne.n	40162e <udc_req_std_dev_get_descriptor+0xbe>
			return false;
  40162a:	2300      	movs	r3, #0
  40162c:	e022      	b.n	401674 <udc_req_std_dev_get_descriptor+0x104>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  40162e:	4b14      	ldr	r3, [pc, #80]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  401630:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
  401632:	4b13      	ldr	r3, [pc, #76]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  401634:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  401636:	885b      	ldrh	r3, [r3, #2]
  401638:	b29b      	uxth	r3, r3
  40163a:	4610      	mov	r0, r2
  40163c:	4619      	mov	r1, r3
  40163e:	4b11      	ldr	r3, [pc, #68]	; (401684 <udc_req_std_dev_get_descriptor+0x114>)
  401640:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
  401642:	e00c      	b.n	40165e <udc_req_std_dev_get_descriptor+0xee>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
  401644:	4b10      	ldr	r3, [pc, #64]	; (401688 <udc_req_std_dev_get_descriptor+0x118>)
  401646:	4798      	blx	r3
  401648:	4603      	mov	r3, r0
  40164a:	f083 0301 	eor.w	r3, r3, #1
  40164e:	b2db      	uxtb	r3, r3
  401650:	2b00      	cmp	r3, #0
  401652:	d001      	beq.n	401658 <udc_req_std_dev_get_descriptor+0xe8>
			return false;
  401654:	2300      	movs	r3, #0
  401656:	e00d      	b.n	401674 <udc_req_std_dev_get_descriptor+0x104>
		}
		break;
  401658:	e001      	b.n	40165e <udc_req_std_dev_get_descriptor+0xee>

	default:
		// Unknown descriptor requested
		return false;
  40165a:	2300      	movs	r3, #0
  40165c:	e00a      	b.n	401674 <udc_req_std_dev_get_descriptor+0x104>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  40165e:	4b07      	ldr	r3, [pc, #28]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  401660:	88da      	ldrh	r2, [r3, #6]
  401662:	4b06      	ldr	r3, [pc, #24]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  401664:	899b      	ldrh	r3, [r3, #12]
  401666:	429a      	cmp	r2, r3
  401668:	d203      	bcs.n	401672 <udc_req_std_dev_get_descriptor+0x102>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  40166a:	4b04      	ldr	r3, [pc, #16]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  40166c:	88da      	ldrh	r2, [r3, #6]
  40166e:	4b03      	ldr	r3, [pc, #12]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  401670:	819a      	strh	r2, [r3, #12]
	}
	return true;
  401672:	2301      	movs	r3, #1
}
  401674:	4618      	mov	r0, r3
  401676:	3708      	adds	r7, #8
  401678:	46bd      	mov	sp, r7
  40167a:	bd80      	pop	{r7, pc}
  40167c:	2000af50 	.word	0x2000af50
  401680:	200001f4 	.word	0x200001f4
  401684:	00402101 	.word	0x00402101
  401688:	004014c9 	.word	0x004014c9

0040168c <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
  40168c:	b580      	push	{r7, lr}
  40168e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
  401690:	4b06      	ldr	r3, [pc, #24]	; (4016ac <udc_req_std_dev_get_configuration+0x20>)
  401692:	88db      	ldrh	r3, [r3, #6]
  401694:	2b01      	cmp	r3, #1
  401696:	d001      	beq.n	40169c <udc_req_std_dev_get_configuration+0x10>
		return false;
  401698:	2300      	movs	r3, #0
  40169a:	e004      	b.n	4016a6 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  40169c:	4804      	ldr	r0, [pc, #16]	; (4016b0 <udc_req_std_dev_get_configuration+0x24>)
  40169e:	2101      	movs	r1, #1
  4016a0:	4b04      	ldr	r3, [pc, #16]	; (4016b4 <udc_req_std_dev_get_configuration+0x28>)
  4016a2:	4798      	blx	r3
	return true;
  4016a4:	2301      	movs	r3, #1
}
  4016a6:	4618      	mov	r0, r3
  4016a8:	bd80      	pop	{r7, pc}
  4016aa:	bf00      	nop
  4016ac:	2000af50 	.word	0x2000af50
  4016b0:	20000c58 	.word	0x20000c58
  4016b4:	00402101 	.word	0x00402101

004016b8 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
  4016b8:	b580      	push	{r7, lr}
  4016ba:	b082      	sub	sp, #8
  4016bc:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  4016be:	4b27      	ldr	r3, [pc, #156]	; (40175c <udc_req_std_dev_set_configuration+0xa4>)
  4016c0:	88db      	ldrh	r3, [r3, #6]
  4016c2:	2b00      	cmp	r3, #0
  4016c4:	d001      	beq.n	4016ca <udc_req_std_dev_set_configuration+0x12>
		return false;
  4016c6:	2300      	movs	r3, #0
  4016c8:	e043      	b.n	401752 <udc_req_std_dev_set_configuration+0x9a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  4016ca:	4b25      	ldr	r3, [pc, #148]	; (401760 <udc_req_std_dev_set_configuration+0xa8>)
  4016cc:	4798      	blx	r3
  4016ce:	4603      	mov	r3, r0
  4016d0:	2b00      	cmp	r3, #0
  4016d2:	d101      	bne.n	4016d8 <udc_req_std_dev_set_configuration+0x20>
		return false;
  4016d4:	2300      	movs	r3, #0
  4016d6:	e03c      	b.n	401752 <udc_req_std_dev_set_configuration+0x9a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  4016d8:	4b20      	ldr	r3, [pc, #128]	; (40175c <udc_req_std_dev_set_configuration+0xa4>)
  4016da:	885b      	ldrh	r3, [r3, #2]
  4016dc:	b2da      	uxtb	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
  4016de:	4b21      	ldr	r3, [pc, #132]	; (401764 <udc_req_std_dev_set_configuration+0xac>)
  4016e0:	681b      	ldr	r3, [r3, #0]
  4016e2:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  4016e4:	429a      	cmp	r2, r3
  4016e6:	dd01      	ble.n	4016ec <udc_req_std_dev_set_configuration+0x34>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
  4016e8:	2300      	movs	r3, #0
  4016ea:	e032      	b.n	401752 <udc_req_std_dev_set_configuration+0x9a>
		}
	}

	// Reset current configuration
	udc_reset();
  4016ec:	4b1e      	ldr	r3, [pc, #120]	; (401768 <udc_req_std_dev_set_configuration+0xb0>)
  4016ee:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  4016f0:	4b1a      	ldr	r3, [pc, #104]	; (40175c <udc_req_std_dev_set_configuration+0xa4>)
  4016f2:	885b      	ldrh	r3, [r3, #2]
  4016f4:	b2da      	uxtb	r2, r3
  4016f6:	4b1d      	ldr	r3, [pc, #116]	; (40176c <udc_req_std_dev_set_configuration+0xb4>)
  4016f8:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
  4016fa:	4b1c      	ldr	r3, [pc, #112]	; (40176c <udc_req_std_dev_set_configuration+0xb4>)
  4016fc:	781b      	ldrb	r3, [r3, #0]
  4016fe:	2b00      	cmp	r3, #0
  401700:	d101      	bne.n	401706 <udc_req_std_dev_set_configuration+0x4e>
		return true; // Default empty configuration requested
  401702:	2301      	movs	r3, #1
  401704:	e025      	b.n	401752 <udc_req_std_dev_set_configuration+0x9a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  401706:	4b17      	ldr	r3, [pc, #92]	; (401764 <udc_req_std_dev_set_configuration+0xac>)
  401708:	685a      	ldr	r2, [r3, #4]
  40170a:	4b18      	ldr	r3, [pc, #96]	; (40176c <udc_req_std_dev_set_configuration+0xb4>)
  40170c:	781b      	ldrb	r3, [r3, #0]
  40170e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  401712:	3b01      	subs	r3, #1
  401714:	00db      	lsls	r3, r3, #3
  401716:	441a      	add	r2, r3
  401718:	4b15      	ldr	r3, [pc, #84]	; (401770 <udc_req_std_dev_set_configuration+0xb8>)
  40171a:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40171c:	2300      	movs	r3, #0
  40171e:	71fb      	strb	r3, [r7, #7]
  401720:	e00f      	b.n	401742 <udc_req_std_dev_set_configuration+0x8a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  401722:	79fb      	ldrb	r3, [r7, #7]
  401724:	4618      	mov	r0, r3
  401726:	2100      	movs	r1, #0
  401728:	4b12      	ldr	r3, [pc, #72]	; (401774 <udc_req_std_dev_set_configuration+0xbc>)
  40172a:	4798      	blx	r3
  40172c:	4603      	mov	r3, r0
  40172e:	f083 0301 	eor.w	r3, r3, #1
  401732:	b2db      	uxtb	r3, r3
  401734:	2b00      	cmp	r3, #0
  401736:	d001      	beq.n	40173c <udc_req_std_dev_set_configuration+0x84>
			return false;
  401738:	2300      	movs	r3, #0
  40173a:	e00a      	b.n	401752 <udc_req_std_dev_set_configuration+0x9a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  40173c:	79fb      	ldrb	r3, [r7, #7]
  40173e:	3301      	adds	r3, #1
  401740:	71fb      	strb	r3, [r7, #7]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401742:	4b0b      	ldr	r3, [pc, #44]	; (401770 <udc_req_std_dev_set_configuration+0xb8>)
  401744:	681b      	ldr	r3, [r3, #0]
  401746:	681b      	ldr	r3, [r3, #0]
  401748:	791b      	ldrb	r3, [r3, #4]
  40174a:	79fa      	ldrb	r2, [r7, #7]
  40174c:	429a      	cmp	r2, r3
  40174e:	d3e8      	bcc.n	401722 <udc_req_std_dev_set_configuration+0x6a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
  401750:	2301      	movs	r3, #1
}
  401752:	4618      	mov	r0, r3
  401754:	3708      	adds	r7, #8
  401756:	46bd      	mov	sp, r7
  401758:	bd80      	pop	{r7, pc}
  40175a:	bf00      	nop
  40175c:	2000af50 	.word	0x2000af50
  401760:	004020a1 	.word	0x004020a1
  401764:	200001f4 	.word	0x200001f4
  401768:	0040126d 	.word	0x0040126d
  40176c:	20000c58 	.word	0x20000c58
  401770:	20000c5c 	.word	0x20000c5c
  401774:	004011bd 	.word	0x004011bd

00401778 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
  401778:	b580      	push	{r7, lr}
  40177a:	b082      	sub	sp, #8
  40177c:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  40177e:	4b1e      	ldr	r3, [pc, #120]	; (4017f8 <udc_req_std_iface_get_setting+0x80>)
  401780:	88db      	ldrh	r3, [r3, #6]
  401782:	2b01      	cmp	r3, #1
  401784:	d001      	beq.n	40178a <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
  401786:	2300      	movs	r3, #0
  401788:	e032      	b.n	4017f0 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
  40178a:	4b1c      	ldr	r3, [pc, #112]	; (4017fc <udc_req_std_iface_get_setting+0x84>)
  40178c:	781b      	ldrb	r3, [r3, #0]
  40178e:	2b00      	cmp	r3, #0
  401790:	d101      	bne.n	401796 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
  401792:	2300      	movs	r3, #0
  401794:	e02c      	b.n	4017f0 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401796:	4b18      	ldr	r3, [pc, #96]	; (4017f8 <udc_req_std_iface_get_setting+0x80>)
  401798:	889b      	ldrh	r3, [r3, #4]
  40179a:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40179c:	4b18      	ldr	r3, [pc, #96]	; (401800 <udc_req_std_iface_get_setting+0x88>)
  40179e:	681b      	ldr	r3, [r3, #0]
  4017a0:	681b      	ldr	r3, [r3, #0]
  4017a2:	791b      	ldrb	r3, [r3, #4]
  4017a4:	79fa      	ldrb	r2, [r7, #7]
  4017a6:	429a      	cmp	r2, r3
  4017a8:	d301      	bcc.n	4017ae <udc_req_std_iface_get_setting+0x36>
		return false;
  4017aa:	2300      	movs	r3, #0
  4017ac:	e020      	b.n	4017f0 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  4017ae:	79fb      	ldrb	r3, [r7, #7]
  4017b0:	4618      	mov	r0, r3
  4017b2:	2100      	movs	r1, #0
  4017b4:	4b13      	ldr	r3, [pc, #76]	; (401804 <udc_req_std_iface_get_setting+0x8c>)
  4017b6:	4798      	blx	r3
  4017b8:	4603      	mov	r3, r0
  4017ba:	f083 0301 	eor.w	r3, r3, #1
  4017be:	b2db      	uxtb	r3, r3
  4017c0:	2b00      	cmp	r3, #0
  4017c2:	d001      	beq.n	4017c8 <udc_req_std_iface_get_setting+0x50>
		return false;
  4017c4:	2300      	movs	r3, #0
  4017c6:	e013      	b.n	4017f0 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4017c8:	4b0d      	ldr	r3, [pc, #52]	; (401800 <udc_req_std_iface_get_setting+0x88>)
  4017ca:	681b      	ldr	r3, [r3, #0]
  4017cc:	685a      	ldr	r2, [r3, #4]
  4017ce:	79fb      	ldrb	r3, [r7, #7]
  4017d0:	009b      	lsls	r3, r3, #2
  4017d2:	4413      	add	r3, r2
  4017d4:	681b      	ldr	r3, [r3, #0]
  4017d6:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
  4017d8:	683b      	ldr	r3, [r7, #0]
  4017da:	68db      	ldr	r3, [r3, #12]
  4017dc:	4798      	blx	r3
  4017de:	4603      	mov	r3, r0
  4017e0:	461a      	mov	r2, r3
  4017e2:	4b09      	ldr	r3, [pc, #36]	; (401808 <udc_req_std_iface_get_setting+0x90>)
  4017e4:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  4017e6:	4808      	ldr	r0, [pc, #32]	; (401808 <udc_req_std_iface_get_setting+0x90>)
  4017e8:	2101      	movs	r1, #1
  4017ea:	4b08      	ldr	r3, [pc, #32]	; (40180c <udc_req_std_iface_get_setting+0x94>)
  4017ec:	4798      	blx	r3
	return true;
  4017ee:	2301      	movs	r3, #1
}
  4017f0:	4618      	mov	r0, r3
  4017f2:	3708      	adds	r7, #8
  4017f4:	46bd      	mov	sp, r7
  4017f6:	bd80      	pop	{r7, pc}
  4017f8:	2000af50 	.word	0x2000af50
  4017fc:	20000c58 	.word	0x20000c58
  401800:	20000c5c 	.word	0x20000c5c
  401804:	00401085 	.word	0x00401085
  401808:	20000c54 	.word	0x20000c54
  40180c:	00402101 	.word	0x00402101

00401810 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
  401810:	b580      	push	{r7, lr}
  401812:	b082      	sub	sp, #8
  401814:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  401816:	4b14      	ldr	r3, [pc, #80]	; (401868 <udc_req_std_iface_set_setting+0x58>)
  401818:	88db      	ldrh	r3, [r3, #6]
  40181a:	2b00      	cmp	r3, #0
  40181c:	d001      	beq.n	401822 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
  40181e:	2300      	movs	r3, #0
  401820:	e01e      	b.n	401860 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
  401822:	4b12      	ldr	r3, [pc, #72]	; (40186c <udc_req_std_iface_set_setting+0x5c>)
  401824:	781b      	ldrb	r3, [r3, #0]
  401826:	2b00      	cmp	r3, #0
  401828:	d101      	bne.n	40182e <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
  40182a:	2300      	movs	r3, #0
  40182c:	e018      	b.n	401860 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40182e:	4b0e      	ldr	r3, [pc, #56]	; (401868 <udc_req_std_iface_set_setting+0x58>)
  401830:	889b      	ldrh	r3, [r3, #4]
  401832:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  401834:	4b0c      	ldr	r3, [pc, #48]	; (401868 <udc_req_std_iface_set_setting+0x58>)
  401836:	885b      	ldrh	r3, [r3, #2]
  401838:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  40183a:	79fb      	ldrb	r3, [r7, #7]
  40183c:	4618      	mov	r0, r3
  40183e:	4b0c      	ldr	r3, [pc, #48]	; (401870 <udc_req_std_iface_set_setting+0x60>)
  401840:	4798      	blx	r3
  401842:	4603      	mov	r3, r0
  401844:	f083 0301 	eor.w	r3, r3, #1
  401848:	b2db      	uxtb	r3, r3
  40184a:	2b00      	cmp	r3, #0
  40184c:	d001      	beq.n	401852 <udc_req_std_iface_set_setting+0x42>
		return false;
  40184e:	2300      	movs	r3, #0
  401850:	e006      	b.n	401860 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  401852:	79fa      	ldrb	r2, [r7, #7]
  401854:	79bb      	ldrb	r3, [r7, #6]
  401856:	4610      	mov	r0, r2
  401858:	4619      	mov	r1, r3
  40185a:	4b06      	ldr	r3, [pc, #24]	; (401874 <udc_req_std_iface_set_setting+0x64>)
  40185c:	4798      	blx	r3
  40185e:	4603      	mov	r3, r0
}
  401860:	4618      	mov	r0, r3
  401862:	3708      	adds	r7, #8
  401864:	46bd      	mov	sp, r7
  401866:	bd80      	pop	{r7, pc}
  401868:	2000af50 	.word	0x2000af50
  40186c:	20000c58 	.word	0x20000c58
  401870:	0040111d 	.word	0x0040111d
  401874:	004011bd 	.word	0x004011bd

00401878 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
  401878:	b580      	push	{r7, lr}
  40187a:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
  40187c:	4b4e      	ldr	r3, [pc, #312]	; (4019b8 <udc_reqstd+0x140>)
  40187e:	781b      	ldrb	r3, [r3, #0]
  401880:	b2db      	uxtb	r3, r3
  401882:	b25b      	sxtb	r3, r3
  401884:	2b00      	cmp	r3, #0
  401886:	da3f      	bge.n	401908 <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
  401888:	4b4b      	ldr	r3, [pc, #300]	; (4019b8 <udc_reqstd+0x140>)
  40188a:	88db      	ldrh	r3, [r3, #6]
  40188c:	2b00      	cmp	r3, #0
  40188e:	d101      	bne.n	401894 <udc_reqstd+0x1c>
			return false; // Error for USB host
  401890:	2300      	movs	r3, #0
  401892:	e08f      	b.n	4019b4 <udc_reqstd+0x13c>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  401894:	4b48      	ldr	r3, [pc, #288]	; (4019b8 <udc_reqstd+0x140>)
  401896:	781b      	ldrb	r3, [r3, #0]
  401898:	f003 031f 	and.w	r3, r3, #31
  40189c:	2b00      	cmp	r3, #0
  40189e:	d114      	bne.n	4018ca <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  4018a0:	4b45      	ldr	r3, [pc, #276]	; (4019b8 <udc_reqstd+0x140>)
  4018a2:	785b      	ldrb	r3, [r3, #1]
  4018a4:	2b06      	cmp	r3, #6
  4018a6:	d008      	beq.n	4018ba <udc_reqstd+0x42>
  4018a8:	2b08      	cmp	r3, #8
  4018aa:	d00a      	beq.n	4018c2 <udc_reqstd+0x4a>
  4018ac:	2b00      	cmp	r3, #0
  4018ae:	d000      	beq.n	4018b2 <udc_reqstd+0x3a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
  4018b0:	e00b      	b.n	4018ca <udc_reqstd+0x52>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
  4018b2:	4b42      	ldr	r3, [pc, #264]	; (4019bc <udc_reqstd+0x144>)
  4018b4:	4798      	blx	r3
  4018b6:	4603      	mov	r3, r0
  4018b8:	e07c      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
  4018ba:	4b41      	ldr	r3, [pc, #260]	; (4019c0 <udc_reqstd+0x148>)
  4018bc:	4798      	blx	r3
  4018be:	4603      	mov	r3, r0
  4018c0:	e078      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
  4018c2:	4b40      	ldr	r3, [pc, #256]	; (4019c4 <udc_reqstd+0x14c>)
  4018c4:	4798      	blx	r3
  4018c6:	4603      	mov	r3, r0
  4018c8:	e074      	b.n	4019b4 <udc_reqstd+0x13c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4018ca:	4b3b      	ldr	r3, [pc, #236]	; (4019b8 <udc_reqstd+0x140>)
  4018cc:	781b      	ldrb	r3, [r3, #0]
  4018ce:	f003 031f 	and.w	r3, r3, #31
  4018d2:	2b01      	cmp	r3, #1
  4018d4:	d108      	bne.n	4018e8 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  4018d6:	4b38      	ldr	r3, [pc, #224]	; (4019b8 <udc_reqstd+0x140>)
  4018d8:	785b      	ldrb	r3, [r3, #1]
  4018da:	2b0a      	cmp	r3, #10
  4018dc:	d000      	beq.n	4018e0 <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
  4018de:	e003      	b.n	4018e8 <udc_reqstd+0x70>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
  4018e0:	4b39      	ldr	r3, [pc, #228]	; (4019c8 <udc_reqstd+0x150>)
  4018e2:	4798      	blx	r3
  4018e4:	4603      	mov	r3, r0
  4018e6:	e065      	b.n	4019b4 <udc_reqstd+0x13c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4018e8:	4b33      	ldr	r3, [pc, #204]	; (4019b8 <udc_reqstd+0x140>)
  4018ea:	781b      	ldrb	r3, [r3, #0]
  4018ec:	f003 031f 	and.w	r3, r3, #31
  4018f0:	2b02      	cmp	r3, #2
  4018f2:	d15e      	bne.n	4019b2 <udc_reqstd+0x13a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  4018f4:	4b30      	ldr	r3, [pc, #192]	; (4019b8 <udc_reqstd+0x140>)
  4018f6:	785b      	ldrb	r3, [r3, #1]
  4018f8:	2b00      	cmp	r3, #0
  4018fa:	d001      	beq.n	401900 <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
  4018fc:	bf00      	nop
  4018fe:	e058      	b.n	4019b2 <udc_reqstd+0x13a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
  401900:	4b32      	ldr	r3, [pc, #200]	; (4019cc <udc_reqstd+0x154>)
  401902:	4798      	blx	r3
  401904:	4603      	mov	r3, r0
  401906:	e055      	b.n	4019b4 <udc_reqstd+0x13c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  401908:	4b2b      	ldr	r3, [pc, #172]	; (4019b8 <udc_reqstd+0x140>)
  40190a:	781b      	ldrb	r3, [r3, #0]
  40190c:	f003 031f 	and.w	r3, r3, #31
  401910:	2b00      	cmp	r3, #0
  401912:	d12a      	bne.n	40196a <udc_reqstd+0xf2>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  401914:	4b28      	ldr	r3, [pc, #160]	; (4019b8 <udc_reqstd+0x140>)
  401916:	785b      	ldrb	r3, [r3, #1]
  401918:	3b01      	subs	r3, #1
  40191a:	2b08      	cmp	r3, #8
  40191c:	d824      	bhi.n	401968 <udc_reqstd+0xf0>
  40191e:	a201      	add	r2, pc, #4	; (adr r2, 401924 <udc_reqstd+0xac>)
  401920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401924:	00401951 	.word	0x00401951
  401928:	00401969 	.word	0x00401969
  40192c:	00401959 	.word	0x00401959
  401930:	00401969 	.word	0x00401969
  401934:	00401949 	.word	0x00401949
  401938:	00401969 	.word	0x00401969
  40193c:	00401969 	.word	0x00401969
  401940:	00401969 	.word	0x00401969
  401944:	00401961 	.word	0x00401961
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
  401948:	4b21      	ldr	r3, [pc, #132]	; (4019d0 <udc_reqstd+0x158>)
  40194a:	4798      	blx	r3
  40194c:	4603      	mov	r3, r0
  40194e:	e031      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
  401950:	4b20      	ldr	r3, [pc, #128]	; (4019d4 <udc_reqstd+0x15c>)
  401952:	4798      	blx	r3
  401954:	4603      	mov	r3, r0
  401956:	e02d      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  401958:	4b1f      	ldr	r3, [pc, #124]	; (4019d8 <udc_reqstd+0x160>)
  40195a:	4798      	blx	r3
  40195c:	4603      	mov	r3, r0
  40195e:	e029      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
  401960:	4b1e      	ldr	r3, [pc, #120]	; (4019dc <udc_reqstd+0x164>)
  401962:	4798      	blx	r3
  401964:	4603      	mov	r3, r0
  401966:	e025      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
  401968:	bf00      	nop
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40196a:	4b13      	ldr	r3, [pc, #76]	; (4019b8 <udc_reqstd+0x140>)
  40196c:	781b      	ldrb	r3, [r3, #0]
  40196e:	f003 031f 	and.w	r3, r3, #31
  401972:	2b01      	cmp	r3, #1
  401974:	d108      	bne.n	401988 <udc_reqstd+0x110>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  401976:	4b10      	ldr	r3, [pc, #64]	; (4019b8 <udc_reqstd+0x140>)
  401978:	785b      	ldrb	r3, [r3, #1]
  40197a:	2b0b      	cmp	r3, #11
  40197c:	d000      	beq.n	401980 <udc_reqstd+0x108>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
  40197e:	e003      	b.n	401988 <udc_reqstd+0x110>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
  401980:	4b17      	ldr	r3, [pc, #92]	; (4019e0 <udc_reqstd+0x168>)
  401982:	4798      	blx	r3
  401984:	4603      	mov	r3, r0
  401986:	e015      	b.n	4019b4 <udc_reqstd+0x13c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  401988:	4b0b      	ldr	r3, [pc, #44]	; (4019b8 <udc_reqstd+0x140>)
  40198a:	781b      	ldrb	r3, [r3, #0]
  40198c:	f003 031f 	and.w	r3, r3, #31
  401990:	2b02      	cmp	r3, #2
  401992:	d10e      	bne.n	4019b2 <udc_reqstd+0x13a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  401994:	4b08      	ldr	r3, [pc, #32]	; (4019b8 <udc_reqstd+0x140>)
  401996:	785b      	ldrb	r3, [r3, #1]
  401998:	2b01      	cmp	r3, #1
  40199a:	d002      	beq.n	4019a2 <udc_reqstd+0x12a>
  40199c:	2b03      	cmp	r3, #3
  40199e:	d004      	beq.n	4019aa <udc_reqstd+0x132>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
  4019a0:	e007      	b.n	4019b2 <udc_reqstd+0x13a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
  4019a2:	4b10      	ldr	r3, [pc, #64]	; (4019e4 <udc_reqstd+0x16c>)
  4019a4:	4798      	blx	r3
  4019a6:	4603      	mov	r3, r0
  4019a8:	e004      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
  4019aa:	4b0f      	ldr	r3, [pc, #60]	; (4019e8 <udc_reqstd+0x170>)
  4019ac:	4798      	blx	r3
  4019ae:	4603      	mov	r3, r0
  4019b0:	e000      	b.n	4019b4 <udc_reqstd+0x13c>
				break;
			}
		}
#endif
	}
	return false;
  4019b2:	2300      	movs	r3, #0
}
  4019b4:	4618      	mov	r0, r3
  4019b6:	bd80      	pop	{r7, pc}
  4019b8:	2000af50 	.word	0x2000af50
  4019bc:	0040131d 	.word	0x0040131d
  4019c0:	00401571 	.word	0x00401571
  4019c4:	0040168d 	.word	0x0040168d
  4019c8:	00401779 	.word	0x00401779
  4019cc:	00401349 	.word	0x00401349
  4019d0:	0040149d 	.word	0x0040149d
  4019d4:	0040138d 	.word	0x0040138d
  4019d8:	00401405 	.word	0x00401405
  4019dc:	004016b9 	.word	0x004016b9
  4019e0:	00401811 	.word	0x00401811
  4019e4:	004013cd 	.word	0x004013cd
  4019e8:	00401435 	.word	0x00401435

004019ec <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
  4019ec:	b580      	push	{r7, lr}
  4019ee:	b082      	sub	sp, #8
  4019f0:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  4019f2:	4b20      	ldr	r3, [pc, #128]	; (401a74 <udc_req_iface+0x88>)
  4019f4:	781b      	ldrb	r3, [r3, #0]
  4019f6:	2b00      	cmp	r3, #0
  4019f8:	d101      	bne.n	4019fe <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
  4019fa:	2300      	movs	r3, #0
  4019fc:	e035      	b.n	401a6a <udc_req_iface+0x7e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4019fe:	4b1e      	ldr	r3, [pc, #120]	; (401a78 <udc_req_iface+0x8c>)
  401a00:	889b      	ldrh	r3, [r3, #4]
  401a02:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401a04:	4b1d      	ldr	r3, [pc, #116]	; (401a7c <udc_req_iface+0x90>)
  401a06:	681b      	ldr	r3, [r3, #0]
  401a08:	681b      	ldr	r3, [r3, #0]
  401a0a:	791b      	ldrb	r3, [r3, #4]
  401a0c:	79fa      	ldrb	r2, [r7, #7]
  401a0e:	429a      	cmp	r2, r3
  401a10:	d301      	bcc.n	401a16 <udc_req_iface+0x2a>
		return false;
  401a12:	2300      	movs	r3, #0
  401a14:	e029      	b.n	401a6a <udc_req_iface+0x7e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401a16:	79fb      	ldrb	r3, [r7, #7]
  401a18:	4618      	mov	r0, r3
  401a1a:	2100      	movs	r1, #0
  401a1c:	4b18      	ldr	r3, [pc, #96]	; (401a80 <udc_req_iface+0x94>)
  401a1e:	4798      	blx	r3
  401a20:	4603      	mov	r3, r0
  401a22:	f083 0301 	eor.w	r3, r3, #1
  401a26:	b2db      	uxtb	r3, r3
  401a28:	2b00      	cmp	r3, #0
  401a2a:	d001      	beq.n	401a30 <udc_req_iface+0x44>
		return false;
  401a2c:	2300      	movs	r3, #0
  401a2e:	e01c      	b.n	401a6a <udc_req_iface+0x7e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401a30:	4b12      	ldr	r3, [pc, #72]	; (401a7c <udc_req_iface+0x90>)
  401a32:	681b      	ldr	r3, [r3, #0]
  401a34:	685a      	ldr	r2, [r3, #4]
  401a36:	79fb      	ldrb	r3, [r7, #7]
  401a38:	009b      	lsls	r3, r3, #2
  401a3a:	4413      	add	r3, r2
  401a3c:	681b      	ldr	r3, [r3, #0]
  401a3e:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401a40:	683b      	ldr	r3, [r7, #0]
  401a42:	68db      	ldr	r3, [r3, #12]
  401a44:	4798      	blx	r3
  401a46:	4603      	mov	r3, r0
  401a48:	79fa      	ldrb	r2, [r7, #7]
  401a4a:	4610      	mov	r0, r2
  401a4c:	4619      	mov	r1, r3
  401a4e:	4b0c      	ldr	r3, [pc, #48]	; (401a80 <udc_req_iface+0x94>)
  401a50:	4798      	blx	r3
  401a52:	4603      	mov	r3, r0
  401a54:	f083 0301 	eor.w	r3, r3, #1
  401a58:	b2db      	uxtb	r3, r3
  401a5a:	2b00      	cmp	r3, #0
  401a5c:	d001      	beq.n	401a62 <udc_req_iface+0x76>
		return false;
  401a5e:	2300      	movs	r3, #0
  401a60:	e003      	b.n	401a6a <udc_req_iface+0x7e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  401a62:	683b      	ldr	r3, [r7, #0]
  401a64:	689b      	ldr	r3, [r3, #8]
  401a66:	4798      	blx	r3
  401a68:	4603      	mov	r3, r0
}
  401a6a:	4618      	mov	r0, r3
  401a6c:	3708      	adds	r7, #8
  401a6e:	46bd      	mov	sp, r7
  401a70:	bd80      	pop	{r7, pc}
  401a72:	bf00      	nop
  401a74:	20000c58 	.word	0x20000c58
  401a78:	2000af50 	.word	0x2000af50
  401a7c:	20000c5c 	.word	0x20000c5c
  401a80:	00401085 	.word	0x00401085

00401a84 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
  401a84:	b580      	push	{r7, lr}
  401a86:	b082      	sub	sp, #8
  401a88:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  401a8a:	4b1e      	ldr	r3, [pc, #120]	; (401b04 <udc_req_ep+0x80>)
  401a8c:	781b      	ldrb	r3, [r3, #0]
  401a8e:	2b00      	cmp	r3, #0
  401a90:	d101      	bne.n	401a96 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
  401a92:	2300      	movs	r3, #0
  401a94:	e031      	b.n	401afa <udc_req_ep+0x76>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401a96:	4b1c      	ldr	r3, [pc, #112]	; (401b08 <udc_req_ep+0x84>)
  401a98:	889b      	ldrh	r3, [r3, #4]
  401a9a:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401a9c:	2300      	movs	r3, #0
  401a9e:	71fb      	strb	r3, [r7, #7]
  401aa0:	e023      	b.n	401aea <udc_req_ep+0x66>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  401aa2:	4b1a      	ldr	r3, [pc, #104]	; (401b0c <udc_req_ep+0x88>)
  401aa4:	681b      	ldr	r3, [r3, #0]
  401aa6:	685a      	ldr	r2, [r3, #4]
  401aa8:	79fb      	ldrb	r3, [r7, #7]
  401aaa:	009b      	lsls	r3, r3, #2
  401aac:	4413      	add	r3, r2
  401aae:	681b      	ldr	r3, [r3, #0]
  401ab0:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401ab2:	683b      	ldr	r3, [r7, #0]
  401ab4:	68db      	ldr	r3, [r3, #12]
  401ab6:	4798      	blx	r3
  401ab8:	4603      	mov	r3, r0
  401aba:	79fa      	ldrb	r2, [r7, #7]
  401abc:	4610      	mov	r0, r2
  401abe:	4619      	mov	r1, r3
  401ac0:	4b13      	ldr	r3, [pc, #76]	; (401b10 <udc_req_ep+0x8c>)
  401ac2:	4798      	blx	r3
  401ac4:	4603      	mov	r3, r0
  401ac6:	f083 0301 	eor.w	r3, r3, #1
  401aca:	b2db      	uxtb	r3, r3
  401acc:	2b00      	cmp	r3, #0
  401ace:	d001      	beq.n	401ad4 <udc_req_ep+0x50>
			return false;
  401ad0:	2300      	movs	r3, #0
  401ad2:	e012      	b.n	401afa <udc_req_ep+0x76>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  401ad4:	683b      	ldr	r3, [r7, #0]
  401ad6:	689b      	ldr	r3, [r3, #8]
  401ad8:	4798      	blx	r3
  401ada:	4603      	mov	r3, r0
  401adc:	2b00      	cmp	r3, #0
  401ade:	d001      	beq.n	401ae4 <udc_req_ep+0x60>
			return true;
  401ae0:	2301      	movs	r3, #1
  401ae2:	e00a      	b.n	401afa <udc_req_ep+0x76>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  401ae4:	79fb      	ldrb	r3, [r7, #7]
  401ae6:	3301      	adds	r3, #1
  401ae8:	71fb      	strb	r3, [r7, #7]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401aea:	4b08      	ldr	r3, [pc, #32]	; (401b0c <udc_req_ep+0x88>)
  401aec:	681b      	ldr	r3, [r3, #0]
  401aee:	681b      	ldr	r3, [r3, #0]
  401af0:	791b      	ldrb	r3, [r3, #4]
  401af2:	79fa      	ldrb	r2, [r7, #7]
  401af4:	429a      	cmp	r2, r3
  401af6:	d3d4      	bcc.n	401aa2 <udc_req_ep+0x1e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  401af8:	2300      	movs	r3, #0
}
  401afa:	4618      	mov	r0, r3
  401afc:	3708      	adds	r7, #8
  401afe:	46bd      	mov	sp, r7
  401b00:	bd80      	pop	{r7, pc}
  401b02:	bf00      	nop
  401b04:	20000c58 	.word	0x20000c58
  401b08:	2000af50 	.word	0x2000af50
  401b0c:	20000c5c 	.word	0x20000c5c
  401b10:	00401085 	.word	0x00401085

00401b14 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  401b14:	b580      	push	{r7, lr}
  401b16:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  401b18:	4b1f      	ldr	r3, [pc, #124]	; (401b98 <udc_process_setup+0x84>)
  401b1a:	2200      	movs	r2, #0
  401b1c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  401b1e:	4b1e      	ldr	r3, [pc, #120]	; (401b98 <udc_process_setup+0x84>)
  401b20:	2200      	movs	r2, #0
  401b22:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401b24:	4b1c      	ldr	r3, [pc, #112]	; (401b98 <udc_process_setup+0x84>)
  401b26:	2200      	movs	r2, #0
  401b28:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  401b2a:	4b1b      	ldr	r3, [pc, #108]	; (401b98 <udc_process_setup+0x84>)
  401b2c:	781b      	ldrb	r3, [r3, #0]
  401b2e:	b2db      	uxtb	r3, r3
  401b30:	b25b      	sxtb	r3, r3
  401b32:	2b00      	cmp	r3, #0
  401b34:	da05      	bge.n	401b42 <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
  401b36:	4b18      	ldr	r3, [pc, #96]	; (401b98 <udc_process_setup+0x84>)
  401b38:	88db      	ldrh	r3, [r3, #6]
  401b3a:	2b00      	cmp	r3, #0
  401b3c:	d101      	bne.n	401b42 <udc_process_setup+0x2e>
			return false; // Error from USB host
  401b3e:	2300      	movs	r3, #0
  401b40:	e027      	b.n	401b92 <udc_process_setup+0x7e>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  401b42:	4b15      	ldr	r3, [pc, #84]	; (401b98 <udc_process_setup+0x84>)
  401b44:	781b      	ldrb	r3, [r3, #0]
  401b46:	f003 0360 	and.w	r3, r3, #96	; 0x60
  401b4a:	2b00      	cmp	r3, #0
  401b4c:	d106      	bne.n	401b5c <udc_process_setup+0x48>
		if (udc_reqstd()) {
  401b4e:	4b13      	ldr	r3, [pc, #76]	; (401b9c <udc_process_setup+0x88>)
  401b50:	4798      	blx	r3
  401b52:	4603      	mov	r3, r0
  401b54:	2b00      	cmp	r3, #0
  401b56:	d001      	beq.n	401b5c <udc_process_setup+0x48>
			return true;
  401b58:	2301      	movs	r3, #1
  401b5a:	e01a      	b.n	401b92 <udc_process_setup+0x7e>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  401b5c:	4b0e      	ldr	r3, [pc, #56]	; (401b98 <udc_process_setup+0x84>)
  401b5e:	781b      	ldrb	r3, [r3, #0]
  401b60:	f003 031f 	and.w	r3, r3, #31
  401b64:	2b01      	cmp	r3, #1
  401b66:	d106      	bne.n	401b76 <udc_process_setup+0x62>
		if (udc_req_iface()) {
  401b68:	4b0d      	ldr	r3, [pc, #52]	; (401ba0 <udc_process_setup+0x8c>)
  401b6a:	4798      	blx	r3
  401b6c:	4603      	mov	r3, r0
  401b6e:	2b00      	cmp	r3, #0
  401b70:	d001      	beq.n	401b76 <udc_process_setup+0x62>
			return true;
  401b72:	2301      	movs	r3, #1
  401b74:	e00d      	b.n	401b92 <udc_process_setup+0x7e>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  401b76:	4b08      	ldr	r3, [pc, #32]	; (401b98 <udc_process_setup+0x84>)
  401b78:	781b      	ldrb	r3, [r3, #0]
  401b7a:	f003 031f 	and.w	r3, r3, #31
  401b7e:	2b02      	cmp	r3, #2
  401b80:	d106      	bne.n	401b90 <udc_process_setup+0x7c>
		if (udc_req_ep()) {
  401b82:	4b08      	ldr	r3, [pc, #32]	; (401ba4 <udc_process_setup+0x90>)
  401b84:	4798      	blx	r3
  401b86:	4603      	mov	r3, r0
  401b88:	2b00      	cmp	r3, #0
  401b8a:	d001      	beq.n	401b90 <udc_process_setup+0x7c>
			return true;
  401b8c:	2301      	movs	r3, #1
  401b8e:	e000      	b.n	401b92 <udc_process_setup+0x7e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  401b90:	2300      	movs	r3, #0
#endif
}
  401b92:	4618      	mov	r0, r3
  401b94:	bd80      	pop	{r7, pc}
  401b96:	bf00      	nop
  401b98:	2000af50 	.word	0x2000af50
  401b9c:	00401879 	.word	0x00401879
  401ba0:	004019ed 	.word	0x004019ed
  401ba4:	00401a85 	.word	0x00401a85

00401ba8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401ba8:	b480      	push	{r7}
  401baa:	b083      	sub	sp, #12
  401bac:	af00      	add	r7, sp, #0
  401bae:	4603      	mov	r3, r0
  401bb0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401bb2:	4b08      	ldr	r3, [pc, #32]	; (401bd4 <NVIC_EnableIRQ+0x2c>)
  401bb4:	f997 2007 	ldrsb.w	r2, [r7, #7]
  401bb8:	0952      	lsrs	r2, r2, #5
  401bba:	79f9      	ldrb	r1, [r7, #7]
  401bbc:	f001 011f 	and.w	r1, r1, #31
  401bc0:	2001      	movs	r0, #1
  401bc2:	fa00 f101 	lsl.w	r1, r0, r1
  401bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401bca:	370c      	adds	r7, #12
  401bcc:	46bd      	mov	sp, r7
  401bce:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bd2:	4770      	bx	lr
  401bd4:	e000e100 	.word	0xe000e100

00401bd8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401bd8:	b480      	push	{r7}
  401bda:	b083      	sub	sp, #12
  401bdc:	af00      	add	r7, sp, #0
  401bde:	4603      	mov	r3, r0
  401be0:	6039      	str	r1, [r7, #0]
  401be2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401be8:	2b00      	cmp	r3, #0
  401bea:	da0b      	bge.n	401c04 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401bec:	490d      	ldr	r1, [pc, #52]	; (401c24 <NVIC_SetPriority+0x4c>)
  401bee:	79fb      	ldrb	r3, [r7, #7]
  401bf0:	f003 030f 	and.w	r3, r3, #15
  401bf4:	3b04      	subs	r3, #4
  401bf6:	683a      	ldr	r2, [r7, #0]
  401bf8:	b2d2      	uxtb	r2, r2
  401bfa:	0112      	lsls	r2, r2, #4
  401bfc:	b2d2      	uxtb	r2, r2
  401bfe:	440b      	add	r3, r1
  401c00:	761a      	strb	r2, [r3, #24]
  401c02:	e009      	b.n	401c18 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401c04:	4908      	ldr	r1, [pc, #32]	; (401c28 <NVIC_SetPriority+0x50>)
  401c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401c0a:	683a      	ldr	r2, [r7, #0]
  401c0c:	b2d2      	uxtb	r2, r2
  401c0e:	0112      	lsls	r2, r2, #4
  401c10:	b2d2      	uxtb	r2, r2
  401c12:	440b      	add	r3, r1
  401c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401c18:	370c      	adds	r7, #12
  401c1a:	46bd      	mov	sp, r7
  401c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c20:	4770      	bx	lr
  401c22:	bf00      	nop
  401c24:	e000ed00 	.word	0xe000ed00
  401c28:	e000e100 	.word	0xe000e100

00401c2c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401c2c:	b480      	push	{r7}
  401c2e:	b083      	sub	sp, #12
  401c30:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401c32:	f3ef 8310 	mrs	r3, PRIMASK
  401c36:	603b      	str	r3, [r7, #0]
  return(result);
  401c38:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  401c3a:	2b00      	cmp	r3, #0
  401c3c:	bf14      	ite	ne
  401c3e:	2300      	movne	r3, #0
  401c40:	2301      	moveq	r3, #1
  401c42:	b2db      	uxtb	r3, r3
  401c44:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401c46:	b672      	cpsid	i
  401c48:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401c4c:	4b04      	ldr	r3, [pc, #16]	; (401c60 <cpu_irq_save+0x34>)
  401c4e:	2200      	movs	r2, #0
  401c50:	701a      	strb	r2, [r3, #0]
	return flags;
  401c52:	687b      	ldr	r3, [r7, #4]
}
  401c54:	4618      	mov	r0, r3
  401c56:	370c      	adds	r7, #12
  401c58:	46bd      	mov	sp, r7
  401c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c5e:	4770      	bx	lr
  401c60:	2000020c 	.word	0x2000020c

00401c64 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401c64:	b480      	push	{r7}
  401c66:	b083      	sub	sp, #12
  401c68:	af00      	add	r7, sp, #0
  401c6a:	6078      	str	r0, [r7, #4]
	return (flags);
  401c6c:	687b      	ldr	r3, [r7, #4]
  401c6e:	2b00      	cmp	r3, #0
  401c70:	bf0c      	ite	eq
  401c72:	2300      	moveq	r3, #0
  401c74:	2301      	movne	r3, #1
  401c76:	b2db      	uxtb	r3, r3
}
  401c78:	4618      	mov	r0, r3
  401c7a:	370c      	adds	r7, #12
  401c7c:	46bd      	mov	sp, r7
  401c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c82:	4770      	bx	lr

00401c84 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401c84:	b580      	push	{r7, lr}
  401c86:	b082      	sub	sp, #8
  401c88:	af00      	add	r7, sp, #0
  401c8a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401c8c:	6878      	ldr	r0, [r7, #4]
  401c8e:	4b07      	ldr	r3, [pc, #28]	; (401cac <cpu_irq_restore+0x28>)
  401c90:	4798      	blx	r3
  401c92:	4603      	mov	r3, r0
  401c94:	2b00      	cmp	r3, #0
  401c96:	d005      	beq.n	401ca4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401c98:	4b05      	ldr	r3, [pc, #20]	; (401cb0 <cpu_irq_restore+0x2c>)
  401c9a:	2201      	movs	r2, #1
  401c9c:	701a      	strb	r2, [r3, #0]
  401c9e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401ca2:	b662      	cpsie	i
}
  401ca4:	3708      	adds	r7, #8
  401ca6:	46bd      	mov	sp, r7
  401ca8:	bd80      	pop	{r7, pc}
  401caa:	bf00      	nop
  401cac:	00401c65 	.word	0x00401c65
  401cb0:	2000020c 	.word	0x2000020c

00401cb4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  401cb4:	b580      	push	{r7, lr}
  401cb6:	b084      	sub	sp, #16
  401cb8:	af00      	add	r7, sp, #0
  401cba:	4603      	mov	r3, r0
  401cbc:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
  401cbe:	4b08      	ldr	r3, [pc, #32]	; (401ce0 <sleepmgr_lock_mode+0x2c>)
  401cc0:	4798      	blx	r3
  401cc2:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  401cc4:	79fb      	ldrb	r3, [r7, #7]
  401cc6:	4a07      	ldr	r2, [pc, #28]	; (401ce4 <sleepmgr_lock_mode+0x30>)
  401cc8:	5cd2      	ldrb	r2, [r2, r3]
  401cca:	3201      	adds	r2, #1
  401ccc:	b2d1      	uxtb	r1, r2
  401cce:	4a05      	ldr	r2, [pc, #20]	; (401ce4 <sleepmgr_lock_mode+0x30>)
  401cd0:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  401cd2:	68f8      	ldr	r0, [r7, #12]
  401cd4:	4b04      	ldr	r3, [pc, #16]	; (401ce8 <sleepmgr_lock_mode+0x34>)
  401cd6:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  401cd8:	3710      	adds	r7, #16
  401cda:	46bd      	mov	sp, r7
  401cdc:	bd80      	pop	{r7, pc}
  401cde:	bf00      	nop
  401ce0:	00401c2d 	.word	0x00401c2d
  401ce4:	2000af48 	.word	0x2000af48
  401ce8:	00401c85 	.word	0x00401c85

00401cec <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
  401cec:	b580      	push	{r7, lr}
  401cee:	b084      	sub	sp, #16
  401cf0:	af00      	add	r7, sp, #0
  401cf2:	4603      	mov	r3, r0
  401cf4:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();
  401cf6:	4b08      	ldr	r3, [pc, #32]	; (401d18 <sleepmgr_unlock_mode+0x2c>)
  401cf8:	4798      	blx	r3
  401cfa:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
  401cfc:	79fb      	ldrb	r3, [r7, #7]
  401cfe:	4a07      	ldr	r2, [pc, #28]	; (401d1c <sleepmgr_unlock_mode+0x30>)
  401d00:	5cd2      	ldrb	r2, [r2, r3]
  401d02:	3a01      	subs	r2, #1
  401d04:	b2d1      	uxtb	r1, r2
  401d06:	4a05      	ldr	r2, [pc, #20]	; (401d1c <sleepmgr_unlock_mode+0x30>)
  401d08:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  401d0a:	68f8      	ldr	r0, [r7, #12]
  401d0c:	4b04      	ldr	r3, [pc, #16]	; (401d20 <sleepmgr_unlock_mode+0x34>)
  401d0e:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  401d10:	3710      	adds	r7, #16
  401d12:	46bd      	mov	sp, r7
  401d14:	bd80      	pop	{r7, pc}
  401d16:	bf00      	nop
  401d18:	00401c2d 	.word	0x00401c2d
  401d1c:	2000af48 	.word	0x2000af48
  401d20:	00401c85 	.word	0x00401c85

00401d24 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  401d24:	b580      	push	{r7, lr}
  401d26:	b082      	sub	sp, #8
  401d28:	af00      	add	r7, sp, #0
  401d2a:	4603      	mov	r3, r0
  401d2c:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
  401d2e:	79fb      	ldrb	r3, [r7, #7]
  401d30:	f083 0301 	eor.w	r3, r3, #1
  401d34:	b2db      	uxtb	r3, r3
  401d36:	2b00      	cmp	r3, #0
  401d38:	d006      	beq.n	401d48 <udd_sleep_mode+0x24>
  401d3a:	4b0d      	ldr	r3, [pc, #52]	; (401d70 <udd_sleep_mode+0x4c>)
  401d3c:	781b      	ldrb	r3, [r3, #0]
  401d3e:	2b00      	cmp	r3, #0
  401d40:	d002      	beq.n	401d48 <udd_sleep_mode+0x24>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
  401d42:	2002      	movs	r0, #2
  401d44:	4b0b      	ldr	r3, [pc, #44]	; (401d74 <udd_sleep_mode+0x50>)
  401d46:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
  401d48:	79fb      	ldrb	r3, [r7, #7]
  401d4a:	2b00      	cmp	r3, #0
  401d4c:	d009      	beq.n	401d62 <udd_sleep_mode+0x3e>
  401d4e:	4b08      	ldr	r3, [pc, #32]	; (401d70 <udd_sleep_mode+0x4c>)
  401d50:	781b      	ldrb	r3, [r3, #0]
  401d52:	f083 0301 	eor.w	r3, r3, #1
  401d56:	b2db      	uxtb	r3, r3
  401d58:	2b00      	cmp	r3, #0
  401d5a:	d002      	beq.n	401d62 <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
  401d5c:	2002      	movs	r0, #2
  401d5e:	4b06      	ldr	r3, [pc, #24]	; (401d78 <udd_sleep_mode+0x54>)
  401d60:	4798      	blx	r3
	}
	udd_b_idle = b_idle;
  401d62:	4b03      	ldr	r3, [pc, #12]	; (401d70 <udd_sleep_mode+0x4c>)
  401d64:	79fa      	ldrb	r2, [r7, #7]
  401d66:	701a      	strb	r2, [r3, #0]
}
  401d68:	3708      	adds	r7, #8
  401d6a:	46bd      	mov	sp, r7
  401d6c:	bd80      	pop	{r7, pc}
  401d6e:	bf00      	nop
  401d70:	20000c66 	.word	0x20000c66
  401d74:	00401ced 	.word	0x00401ced
  401d78:	00401cb5 	.word	0x00401cb5

00401d7c <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  401d7c:	b580      	push	{r7, lr}
  401d7e:	af00      	add	r7, sp, #0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401d80:	4b61      	ldr	r3, [pc, #388]	; (401f08 <UDP_Handler+0x18c>)
  401d82:	4798      	blx	r3
  401d84:	4603      	mov	r3, r0
  401d86:	f083 0301 	eor.w	r3, r3, #1
  401d8a:	b2db      	uxtb	r3, r3
  401d8c:	2b00      	cmp	r3, #0
  401d8e:	d00c      	beq.n	401daa <UDP_Handler+0x2e>
  401d90:	4b5e      	ldr	r3, [pc, #376]	; (401f0c <UDP_Handler+0x190>)
  401d92:	69db      	ldr	r3, [r3, #28]
  401d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401d98:	2b00      	cmp	r3, #0
  401d9a:	d106      	bne.n	401daa <UDP_Handler+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401d9c:	b672      	cpsid	i
  401d9e:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401da2:	4b5b      	ldr	r3, [pc, #364]	; (401f10 <UDP_Handler+0x194>)
  401da4:	2200      	movs	r2, #0
  401da6:	701a      	strb	r2, [r3, #0]
		return;
  401da8:	e0ac      	b.n	401f04 <UDP_Handler+0x188>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  401daa:	2022      	movs	r0, #34	; 0x22
  401dac:	4b59      	ldr	r3, [pc, #356]	; (401f14 <UDP_Handler+0x198>)
  401dae:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401db0:	4b56      	ldr	r3, [pc, #344]	; (401f0c <UDP_Handler+0x190>)
  401db2:	699b      	ldr	r3, [r3, #24]
  401db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  401db8:	2b00      	cmp	r3, #0
  401dba:	d00c      	beq.n	401dd6 <UDP_Handler+0x5a>
  401dbc:	4b53      	ldr	r3, [pc, #332]	; (401f0c <UDP_Handler+0x190>)
  401dbe:	69db      	ldr	r3, [r3, #28]
  401dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  401dc4:	2b00      	cmp	r3, #0
  401dc6:	d006      	beq.n	401dd6 <UDP_Handler+0x5a>
		udd_ack_sof();
  401dc8:	4b50      	ldr	r3, [pc, #320]	; (401f0c <UDP_Handler+0x190>)
  401dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401dce:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401dd0:	4b51      	ldr	r3, [pc, #324]	; (401f18 <UDP_Handler+0x19c>)
  401dd2:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  401dd4:	e095      	b.n	401f02 <UDP_Handler+0x186>
	}

	if (udd_ctrl_interrupt()) {
  401dd6:	4b51      	ldr	r3, [pc, #324]	; (401f1c <UDP_Handler+0x1a0>)
  401dd8:	4798      	blx	r3
  401dda:	4603      	mov	r3, r0
  401ddc:	2b00      	cmp	r3, #0
  401dde:	d000      	beq.n	401de2 <UDP_Handler+0x66>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
  401de0:	e08f      	b.n	401f02 <UDP_Handler+0x186>
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
  401de2:	4b4f      	ldr	r3, [pc, #316]	; (401f20 <UDP_Handler+0x1a4>)
  401de4:	4798      	blx	r3
  401de6:	4603      	mov	r3, r0
  401de8:	2b00      	cmp	r3, #0
  401dea:	d000      	beq.n	401dee <UDP_Handler+0x72>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
  401dec:	e089      	b.n	401f02 <UDP_Handler+0x186>
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401dee:	4b47      	ldr	r3, [pc, #284]	; (401f0c <UDP_Handler+0x190>)
  401df0:	699b      	ldr	r3, [r3, #24]
  401df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  401df6:	2b00      	cmp	r3, #0
  401df8:	d005      	beq.n	401e06 <UDP_Handler+0x8a>
  401dfa:	4b44      	ldr	r3, [pc, #272]	; (401f0c <UDP_Handler+0x190>)
  401dfc:	69db      	ldr	r3, [r3, #28]
  401dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  401e02:	2b00      	cmp	r3, #0
  401e04:	d117      	bne.n	401e36 <UDP_Handler+0xba>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401e06:	4b41      	ldr	r3, [pc, #260]	; (401f0c <UDP_Handler+0x190>)
  401e08:	699b      	ldr	r3, [r3, #24]
  401e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401e0e:	2b00      	cmp	r3, #0
  401e10:	d005      	beq.n	401e1e <UDP_Handler+0xa2>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401e12:	4b3e      	ldr	r3, [pc, #248]	; (401f0c <UDP_Handler+0x190>)
  401e14:	69db      	ldr	r3, [r3, #28]
  401e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
  401e1a:	2b00      	cmp	r3, #0
  401e1c:	d10b      	bne.n	401e36 <UDP_Handler+0xba>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401e1e:	4b3b      	ldr	r3, [pc, #236]	; (401f0c <UDP_Handler+0x190>)
  401e20:	699b      	ldr	r3, [r3, #24]
  401e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401e26:	2b00      	cmp	r3, #0
  401e28:	d01d      	beq.n	401e66 <UDP_Handler+0xea>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401e2a:	4b38      	ldr	r3, [pc, #224]	; (401f0c <UDP_Handler+0x190>)
  401e2c:	69db      	ldr	r3, [r3, #28]
  401e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  401e32:	2b00      	cmp	r3, #0
  401e34:	d017      	beq.n	401e66 <UDP_Handler+0xea>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  401e36:	4b35      	ldr	r3, [pc, #212]	; (401f0c <UDP_Handler+0x190>)
  401e38:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  401e3c:	621a      	str	r2, [r3, #32]
		// Do resume operations
		udd_disable_wakeups();
  401e3e:	4b33      	ldr	r3, [pc, #204]	; (401f0c <UDP_Handler+0x190>)
  401e40:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  401e44:	615a      	str	r2, [r3, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  401e46:	2001      	movs	r0, #1
  401e48:	4b36      	ldr	r3, [pc, #216]	; (401f24 <UDP_Handler+0x1a8>)
  401e4a:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  401e4c:	4b2f      	ldr	r3, [pc, #188]	; (401f0c <UDP_Handler+0x190>)
  401e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e52:	621a      	str	r2, [r3, #32]
		udd_enable_suspend_interrupt();
  401e54:	4b2d      	ldr	r3, [pc, #180]	; (401f0c <UDP_Handler+0x190>)
  401e56:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e5a:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401e5c:	4b2b      	ldr	r3, [pc, #172]	; (401f0c <UDP_Handler+0x190>)
  401e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401e62:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  401e64:	e04d      	b.n	401f02 <UDP_Handler+0x186>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401e66:	4b29      	ldr	r3, [pc, #164]	; (401f0c <UDP_Handler+0x190>)
  401e68:	699b      	ldr	r3, [r3, #24]
  401e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401e6e:	2b00      	cmp	r3, #0
  401e70:	d020      	beq.n	401eb4 <UDP_Handler+0x138>
  401e72:	4b26      	ldr	r3, [pc, #152]	; (401f0c <UDP_Handler+0x190>)
  401e74:	69db      	ldr	r3, [r3, #28]
  401e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401e7a:	2b00      	cmp	r3, #0
  401e7c:	d01a      	beq.n	401eb4 <UDP_Handler+0x138>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  401e7e:	4b23      	ldr	r3, [pc, #140]	; (401f0c <UDP_Handler+0x190>)
  401e80:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e84:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  401e86:	4b21      	ldr	r3, [pc, #132]	; (401f0c <UDP_Handler+0x190>)
  401e88:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e8c:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  401e8e:	4b1f      	ldr	r3, [pc, #124]	; (401f0c <UDP_Handler+0x190>)
  401e90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401e94:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  401e96:	4b1d      	ldr	r3, [pc, #116]	; (401f0c <UDP_Handler+0x190>)
  401e98:	f44f 7200 	mov.w	r2, #512	; 0x200
  401e9c:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  401e9e:	4b1b      	ldr	r3, [pc, #108]	; (401f0c <UDP_Handler+0x190>)
  401ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401ea4:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  401ea6:	2022      	movs	r0, #34	; 0x22
  401ea8:	4b1f      	ldr	r3, [pc, #124]	; (401f28 <UDP_Handler+0x1ac>)
  401eaa:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  401eac:	2000      	movs	r0, #0
  401eae:	4b1d      	ldr	r3, [pc, #116]	; (401f24 <UDP_Handler+0x1a8>)
  401eb0:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  401eb2:	e026      	b.n	401f02 <UDP_Handler+0x186>
	}
	if (Is_udd_reset()) {
  401eb4:	4b15      	ldr	r3, [pc, #84]	; (401f0c <UDP_Handler+0x190>)
  401eb6:	69db      	ldr	r3, [r3, #28]
  401eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  401ebc:	2b00      	cmp	r3, #0
  401ebe:	d020      	beq.n	401f02 <UDP_Handler+0x186>
		// USB bus reset detection
		udd_ack_reset();
  401ec0:	4b12      	ldr	r3, [pc, #72]	; (401f0c <UDP_Handler+0x190>)
  401ec2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401ec6:	621a      	str	r2, [r3, #32]

		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
  401ec8:	4b18      	ldr	r3, [pc, #96]	; (401f2c <UDP_Handler+0x1b0>)
  401eca:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
  401ecc:	4b18      	ldr	r3, [pc, #96]	; (401f30 <UDP_Handler+0x1b4>)
  401ece:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  401ed0:	4b0e      	ldr	r3, [pc, #56]	; (401f0c <UDP_Handler+0x190>)
  401ed2:	4a0e      	ldr	r2, [pc, #56]	; (401f0c <UDP_Handler+0x190>)
  401ed4:	6852      	ldr	r2, [r2, #4]
  401ed6:	f022 0201 	bic.w	r2, r2, #1
  401eda:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  401edc:	4b0b      	ldr	r3, [pc, #44]	; (401f0c <UDP_Handler+0x190>)
  401ede:	4a0b      	ldr	r2, [pc, #44]	; (401f0c <UDP_Handler+0x190>)
  401ee0:	6852      	ldr	r2, [r2, #4]
  401ee2:	f022 0202 	bic.w	r2, r2, #2
  401ee6:	605a      	str	r2, [r3, #4]
		// Reset endpoint control
		udd_reset_ep_ctrl();
  401ee8:	4b12      	ldr	r3, [pc, #72]	; (401f34 <UDP_Handler+0x1b8>)
  401eea:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
  401eec:	4b12      	ldr	r3, [pc, #72]	; (401f38 <UDP_Handler+0x1bc>)
  401eee:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  401ef0:	4b06      	ldr	r3, [pc, #24]	; (401f0c <UDP_Handler+0x190>)
  401ef2:	f44f 7280 	mov.w	r2, #256	; 0x100
  401ef6:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401ef8:	4b04      	ldr	r3, [pc, #16]	; (401f0c <UDP_Handler+0x190>)
  401efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401efe:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  401f00:	bf00      	nop
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
  401f02:	bf00      	nop
}
  401f04:	bd80      	pop	{r7, pc}
  401f06:	bf00      	nop
  401f08:	00409549 	.word	0x00409549
  401f0c:	40034000 	.word	0x40034000
  401f10:	2000020c 	.word	0x2000020c
  401f14:	004093d5 	.word	0x004093d5
  401f18:	004012c1 	.word	0x004012c1
  401f1c:	004030c1 	.word	0x004030c1
  401f20:	004037a1 	.word	0x004037a1
  401f24:	00401d25 	.word	0x00401d25
  401f28:	00409459 	.word	0x00409459
  401f2c:	00403215 	.word	0x00403215
  401f30:	0040126d 	.word	0x0040126d
  401f34:	00402889 	.word	0x00402889
  401f38:	00402939 	.word	0x00402939

00401f3c <udd_enable>:
#endif
}


void udd_enable(void)
{
  401f3c:	b580      	push	{r7, lr}
  401f3e:	b082      	sub	sp, #8
  401f40:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
  401f42:	4b11      	ldr	r3, [pc, #68]	; (401f88 <udd_enable+0x4c>)
  401f44:	4798      	blx	r3
  401f46:	6078      	str	r0, [r7, #4]
#if SAMG55
	matrix_set_usb_device();
#endif

	// Enable USB hardware
	udd_enable_periph_ck();
  401f48:	2022      	movs	r0, #34	; 0x22
  401f4a:	4b10      	ldr	r3, [pc, #64]	; (401f8c <udd_enable+0x50>)
  401f4c:	4798      	blx	r3
	sysclk_enable_usb();
  401f4e:	4b10      	ldr	r3, [pc, #64]	; (401f90 <udd_enable+0x54>)
  401f50:	4798      	blx	r3
	// Cortex, uses NVIC, no need to register IRQ handler
	NVIC_SetPriority((IRQn_Type) ID_UDP, UDD_USB_INT_LEVEL);
  401f52:	2022      	movs	r0, #34	; 0x22
  401f54:	2105      	movs	r1, #5
  401f56:	4b0f      	ldr	r3, [pc, #60]	; (401f94 <udd_enable+0x58>)
  401f58:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDP);
  401f5a:	2022      	movs	r0, #34	; 0x22
  401f5c:	4b0e      	ldr	r3, [pc, #56]	; (401f98 <udd_enable+0x5c>)
  401f5e:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
  401f60:	4b0e      	ldr	r3, [pc, #56]	; (401f9c <udd_enable+0x60>)
  401f62:	4798      	blx	r3
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  401f64:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  401f68:	4b0d      	ldr	r3, [pc, #52]	; (401fa0 <udd_enable+0x64>)
  401f6a:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  401f6c:	4b0d      	ldr	r3, [pc, #52]	; (401fa4 <udd_enable+0x68>)
  401f6e:	2200      	movs	r2, #0
  401f70:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_SUSPEND);
  401f72:	2000      	movs	r0, #0
  401f74:	4b0c      	ldr	r3, [pc, #48]	; (401fa8 <udd_enable+0x6c>)
  401f76:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  401f78:	4b0c      	ldr	r3, [pc, #48]	; (401fac <udd_enable+0x70>)
  401f7a:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
  401f7c:	6878      	ldr	r0, [r7, #4]
  401f7e:	4b0c      	ldr	r3, [pc, #48]	; (401fb0 <udd_enable+0x74>)
  401f80:	4798      	blx	r3
}
  401f82:	3708      	adds	r7, #8
  401f84:	46bd      	mov	sp, r7
  401f86:	bd80      	pop	{r7, pc}
  401f88:	00401c2d 	.word	0x00401c2d
  401f8c:	004093d5 	.word	0x004093d5
  401f90:	00408695 	.word	0x00408695
  401f94:	00401bd9 	.word	0x00401bd9
  401f98:	00401ba9 	.word	0x00401ba9
  401f9c:	0040316d 	.word	0x0040316d
  401fa0:	0040951d 	.word	0x0040951d
  401fa4:	20000c66 	.word	0x20000c66
  401fa8:	00401cb5 	.word	0x00401cb5
  401fac:	00401fb5 	.word	0x00401fb5
  401fb0:	00401c85 	.word	0x00401c85

00401fb4 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  401fb4:	b580      	push	{r7, lr}
  401fb6:	b082      	sub	sp, #8
  401fb8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
  401fba:	4b17      	ldr	r3, [pc, #92]	; (402018 <udd_attach+0x64>)
  401fbc:	4798      	blx	r3
  401fbe:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  401fc0:	2001      	movs	r0, #1
  401fc2:	4b16      	ldr	r3, [pc, #88]	; (40201c <udd_attach+0x68>)
  401fc4:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  401fc6:	2022      	movs	r0, #34	; 0x22
  401fc8:	4b15      	ldr	r3, [pc, #84]	; (402020 <udd_attach+0x6c>)
  401fca:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  401fcc:	4b15      	ldr	r3, [pc, #84]	; (402024 <udd_attach+0x70>)
  401fce:	4a15      	ldr	r2, [pc, #84]	; (402024 <udd_attach+0x70>)
  401fd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
  401fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401fd6:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  401fd8:	4b12      	ldr	r3, [pc, #72]	; (402024 <udd_attach+0x70>)
  401fda:	4a12      	ldr	r2, [pc, #72]	; (402024 <udd_attach+0x70>)
  401fdc:	6f52      	ldr	r2, [r2, #116]	; 0x74
  401fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  401fe2:	675a      	str	r2, [r3, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  401fe4:	4b0f      	ldr	r3, [pc, #60]	; (402024 <udd_attach+0x70>)
  401fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
  401fea:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  401fec:	4b0d      	ldr	r3, [pc, #52]	; (402024 <udd_attach+0x70>)
  401fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401ff2:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  401ff4:	4b0b      	ldr	r3, [pc, #44]	; (402024 <udd_attach+0x70>)
  401ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
  401ffa:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  401ffc:	4b09      	ldr	r3, [pc, #36]	; (402024 <udd_attach+0x70>)
  401ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402002:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  402004:	4b07      	ldr	r3, [pc, #28]	; (402024 <udd_attach+0x70>)
  402006:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40200a:	611a      	str	r2, [r3, #16]

	cpu_irq_restore(flags);
  40200c:	6878      	ldr	r0, [r7, #4]
  40200e:	4b06      	ldr	r3, [pc, #24]	; (402028 <udd_attach+0x74>)
  402010:	4798      	blx	r3
}
  402012:	3708      	adds	r7, #8
  402014:	46bd      	mov	sp, r7
  402016:	bd80      	pop	{r7, pc}
  402018:	00401c2d 	.word	0x00401c2d
  40201c:	00401d25 	.word	0x00401d25
  402020:	004093d5 	.word	0x004093d5
  402024:	40034000 	.word	0x40034000
  402028:	00401c85 	.word	0x00401c85

0040202c <udd_is_high_speed>:
	udd_sleep_mode(false);
}


bool udd_is_high_speed(void)
{
  40202c:	b480      	push	{r7}
  40202e:	af00      	add	r7, sp, #0
	return false;
  402030:	2300      	movs	r3, #0
}
  402032:	4618      	mov	r0, r3
  402034:	46bd      	mov	sp, r7
  402036:	f85d 7b04 	ldr.w	r7, [sp], #4
  40203a:	4770      	bx	lr

0040203c <udd_set_address>:


void udd_set_address(uint8_t address)
{
  40203c:	b480      	push	{r7}
  40203e:	b083      	sub	sp, #12
  402040:	af00      	add	r7, sp, #0
  402042:	4603      	mov	r3, r0
  402044:	71fb      	strb	r3, [r7, #7]
	udd_disable_address_state();
  402046:	4b15      	ldr	r3, [pc, #84]	; (40209c <udd_set_address+0x60>)
  402048:	4a14      	ldr	r2, [pc, #80]	; (40209c <udd_set_address+0x60>)
  40204a:	6852      	ldr	r2, [r2, #4]
  40204c:	f022 0201 	bic.w	r2, r2, #1
  402050:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  402052:	4b12      	ldr	r3, [pc, #72]	; (40209c <udd_set_address+0x60>)
  402054:	4a11      	ldr	r2, [pc, #68]	; (40209c <udd_set_address+0x60>)
  402056:	6892      	ldr	r2, [r2, #8]
  402058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  40205c:	609a      	str	r2, [r3, #8]
	if (address) {
  40205e:	79fb      	ldrb	r3, [r7, #7]
  402060:	2b00      	cmp	r3, #0
  402062:	d015      	beq.n	402090 <udd_set_address+0x54>
		udd_configure_address(address);
  402064:	4b0d      	ldr	r3, [pc, #52]	; (40209c <udd_set_address+0x60>)
  402066:	4a0d      	ldr	r2, [pc, #52]	; (40209c <udd_set_address+0x60>)
  402068:	6892      	ldr	r2, [r2, #8]
  40206a:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
  40206e:	79fa      	ldrb	r2, [r7, #7]
  402070:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402074:	430a      	orrs	r2, r1
  402076:	609a      	str	r2, [r3, #8]
		udd_enable_address();
  402078:	4b08      	ldr	r3, [pc, #32]	; (40209c <udd_set_address+0x60>)
  40207a:	4a08      	ldr	r2, [pc, #32]	; (40209c <udd_set_address+0x60>)
  40207c:	6892      	ldr	r2, [r2, #8]
  40207e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402082:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  402084:	4b05      	ldr	r3, [pc, #20]	; (40209c <udd_set_address+0x60>)
  402086:	4a05      	ldr	r2, [pc, #20]	; (40209c <udd_set_address+0x60>)
  402088:	6852      	ldr	r2, [r2, #4]
  40208a:	f042 0201 	orr.w	r2, r2, #1
  40208e:	605a      	str	r2, [r3, #4]
	}
}
  402090:	370c      	adds	r7, #12
  402092:	46bd      	mov	sp, r7
  402094:	f85d 7b04 	ldr.w	r7, [sp], #4
  402098:	4770      	bx	lr
  40209a:	bf00      	nop
  40209c:	40034000 	.word	0x40034000

004020a0 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
  4020a0:	b480      	push	{r7}
  4020a2:	af00      	add	r7, sp, #0
	if (Is_udd_address_state_enabled())
  4020a4:	4b09      	ldr	r3, [pc, #36]	; (4020cc <udd_getaddress+0x2c>)
  4020a6:	685b      	ldr	r3, [r3, #4]
  4020a8:	f003 0301 	and.w	r3, r3, #1
  4020ac:	2b00      	cmp	r3, #0
  4020ae:	d006      	beq.n	4020be <udd_getaddress+0x1e>
		return udd_get_configured_address();
  4020b0:	4b06      	ldr	r3, [pc, #24]	; (4020cc <udd_getaddress+0x2c>)
  4020b2:	689b      	ldr	r3, [r3, #8]
  4020b4:	b2db      	uxtb	r3, r3
  4020b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4020ba:	b2db      	uxtb	r3, r3
  4020bc:	e000      	b.n	4020c0 <udd_getaddress+0x20>
	return 0;
  4020be:	2300      	movs	r3, #0
}
  4020c0:	4618      	mov	r0, r3
  4020c2:	46bd      	mov	sp, r7
  4020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020c8:	4770      	bx	lr
  4020ca:	bf00      	nop
  4020cc:	40034000 	.word	0x40034000

004020d0 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
  4020d0:	b480      	push	{r7}
  4020d2:	af00      	add	r7, sp, #0
	return udd_frame_number();
  4020d4:	4b05      	ldr	r3, [pc, #20]	; (4020ec <udd_get_frame_number+0x1c>)
  4020d6:	681b      	ldr	r3, [r3, #0]
  4020d8:	b29b      	uxth	r3, r3
  4020da:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4020de:	b29b      	uxth	r3, r3
}
  4020e0:	4618      	mov	r0, r3
  4020e2:	46bd      	mov	sp, r7
  4020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020e8:	4770      	bx	lr
  4020ea:	bf00      	nop
  4020ec:	40034000 	.word	0x40034000

004020f0 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
  4020f0:	b480      	push	{r7}
  4020f2:	af00      	add	r7, sp, #0
	return 0;
  4020f4:	2300      	movs	r3, #0
}
  4020f6:	4618      	mov	r0, r3
  4020f8:	46bd      	mov	sp, r7
  4020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020fe:	4770      	bx	lr

00402100 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
  402100:	b480      	push	{r7}
  402102:	b083      	sub	sp, #12
  402104:	af00      	add	r7, sp, #0
  402106:	6078      	str	r0, [r7, #4]
  402108:	460b      	mov	r3, r1
  40210a:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
  40210c:	4b05      	ldr	r3, [pc, #20]	; (402124 <udd_set_setup_payload+0x24>)
  40210e:	687a      	ldr	r2, [r7, #4]
  402110:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  402112:	4b04      	ldr	r3, [pc, #16]	; (402124 <udd_set_setup_payload+0x24>)
  402114:	887a      	ldrh	r2, [r7, #2]
  402116:	819a      	strh	r2, [r3, #12]
}
  402118:	370c      	adds	r7, #12
  40211a:	46bd      	mov	sp, r7
  40211c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402120:	4770      	bx	lr
  402122:	bf00      	nop
  402124:	2000af50 	.word	0x2000af50

00402128 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  402128:	b480      	push	{r7}
  40212a:	b087      	sub	sp, #28
  40212c:	af00      	add	r7, sp, #0
  40212e:	4613      	mov	r3, r2
  402130:	4602      	mov	r2, r0
  402132:	71fa      	strb	r2, [r7, #7]
  402134:	460a      	mov	r2, r1
  402136:	71ba      	strb	r2, [r7, #6]
  402138:	80bb      	strh	r3, [r7, #4]
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
  40213a:	79fb      	ldrb	r3, [r7, #7]
  40213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402140:	2b00      	cmp	r3, #0
  402142:	bf0c      	ite	eq
  402144:	2300      	moveq	r3, #0
  402146:	2301      	movne	r3, #1
  402148:	75fb      	strb	r3, [r7, #23]
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
  40214a:	79bb      	ldrb	r3, [r7, #6]
  40214c:	f003 0303 	and.w	r3, r3, #3
  402150:	2b01      	cmp	r3, #1
  402152:	bf14      	ite	ne
  402154:	2300      	movne	r3, #0
  402156:	2301      	moveq	r3, #1
  402158:	75bb      	strb	r3, [r7, #22]
	ep = ep & USB_EP_ADDR_MASK;
  40215a:	79fb      	ldrb	r3, [r7, #7]
  40215c:	f003 030f 	and.w	r3, r3, #15
  402160:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
  402162:	79fb      	ldrb	r3, [r7, #7]
  402164:	2b03      	cmp	r3, #3
  402166:	d901      	bls.n	40216c <udd_ep_alloc+0x44>
		return false;
  402168:	2300      	movs	r3, #0
  40216a:	e092      	b.n	402292 <udd_ep_alloc+0x16a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
  40216c:	4b4c      	ldr	r3, [pc, #304]	; (4022a0 <udd_ep_alloc+0x178>)
  40216e:	79fa      	ldrb	r2, [r7, #7]
  402170:	320c      	adds	r2, #12
  402172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  40217a:	2b00      	cmp	r3, #0
  40217c:	d001      	beq.n	402182 <udd_ep_alloc+0x5a>
		return false;
  40217e:	2300      	movs	r3, #0
  402180:	e087      	b.n	402292 <udd_ep_alloc+0x16a>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  402182:	7dbb      	ldrb	r3, [r7, #22]
  402184:	2b00      	cmp	r3, #0
  402186:	d007      	beq.n	402198 <udd_ep_alloc+0x70>
  402188:	79fb      	ldrb	r3, [r7, #7]
  40218a:	2b00      	cmp	r3, #0
  40218c:	d002      	beq.n	402194 <udd_ep_alloc+0x6c>
  40218e:	79fb      	ldrb	r3, [r7, #7]
  402190:	2b03      	cmp	r3, #3
  402192:	d101      	bne.n	402198 <udd_ep_alloc+0x70>
		return false;
  402194:	2300      	movs	r3, #0
  402196:	e07c      	b.n	402292 <udd_ep_alloc+0x16a>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  402198:	88ba      	ldrh	r2, [r7, #4]
  40219a:	79fb      	ldrb	r3, [r7, #7]
  40219c:	2b04      	cmp	r3, #4
  40219e:	d002      	beq.n	4021a6 <udd_ep_alloc+0x7e>
  4021a0:	79fb      	ldrb	r3, [r7, #7]
  4021a2:	2b05      	cmp	r3, #5
  4021a4:	d102      	bne.n	4021ac <udd_ep_alloc+0x84>
  4021a6:	f44f 7300 	mov.w	r3, #512	; 0x200
  4021aa:	e000      	b.n	4021ae <udd_ep_alloc+0x86>
  4021ac:	2340      	movs	r3, #64	; 0x40
  4021ae:	429a      	cmp	r2, r3
  4021b0:	dd01      	ble.n	4021b6 <udd_ep_alloc+0x8e>
		return false;
  4021b2:	2300      	movs	r3, #0
  4021b4:	e06d      	b.n	402292 <udd_ep_alloc+0x16a>
	}
	ptr_job = &udd_ep_job[ep - 1];
  4021b6:	79fb      	ldrb	r3, [r7, #7]
  4021b8:	1e5a      	subs	r2, r3, #1
  4021ba:	4613      	mov	r3, r2
  4021bc:	009b      	lsls	r3, r3, #2
  4021be:	4413      	add	r3, r2
  4021c0:	009b      	lsls	r3, r3, #2
  4021c2:	4a38      	ldr	r2, [pc, #224]	; (4022a4 <udd_ep_alloc+0x17c>)
  4021c4:	4413      	add	r3, r2
  4021c6:	613b      	str	r3, [r7, #16]

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  4021c8:	88bb      	ldrh	r3, [r7, #4]
  4021ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4021ce:	b299      	uxth	r1, r3
  4021d0:	693a      	ldr	r2, [r7, #16]
  4021d2:	8a13      	ldrh	r3, [r2, #16]
  4021d4:	f361 0309 	bfi	r3, r1, #0, #10
  4021d8:	8213      	strh	r3, [r2, #16]
	ptr_job->b_buf_end = false;
  4021da:	693a      	ldr	r2, [r7, #16]
  4021dc:	7c53      	ldrb	r3, [r2, #17]
  4021de:	f36f 13c7 	bfc	r3, #7, #1
  4021e2:	7453      	strb	r3, [r2, #17]
	ptr_job->b_stall_requested = false;
  4021e4:	693a      	ldr	r2, [r7, #16]
  4021e6:	7c53      	ldrb	r3, [r2, #17]
  4021e8:	f36f 1345 	bfc	r3, #5, #1
  4021ec:	7453      	strb	r3, [r2, #17]
	if (b_dir_in) {
  4021ee:	7dfb      	ldrb	r3, [r7, #23]
  4021f0:	2b00      	cmp	r3, #0
  4021f2:	d004      	beq.n	4021fe <udd_ep_alloc+0xd6>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  4021f4:	693a      	ldr	r2, [r7, #16]
  4021f6:	7c53      	ldrb	r3, [r2, #17]
  4021f8:	f36f 0383 	bfc	r3, #2, #2
  4021fc:	7453      	strb	r3, [r2, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  4021fe:	4b28      	ldr	r3, [pc, #160]	; (4022a0 <udd_ep_alloc+0x178>)
  402200:	4a27      	ldr	r2, [pc, #156]	; (4022a0 <udd_ep_alloc+0x178>)
  402202:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402204:	79fa      	ldrb	r2, [r7, #7]
  402206:	2001      	movs	r0, #1
  402208:	fa00 f202 	lsl.w	r2, r0, r2
  40220c:	430a      	orrs	r2, r1
  40220e:	629a      	str	r2, [r3, #40]	; 0x28
  402210:	4b23      	ldr	r3, [pc, #140]	; (4022a0 <udd_ep_alloc+0x178>)
  402212:	4a23      	ldr	r2, [pc, #140]	; (4022a0 <udd_ep_alloc+0x178>)
  402214:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402216:	79fa      	ldrb	r2, [r7, #7]
  402218:	2001      	movs	r0, #1
  40221a:	fa00 f202 	lsl.w	r2, r0, r2
  40221e:	43d2      	mvns	r2, r2
  402220:	400a      	ands	r2, r1
  402222:	629a      	str	r2, [r3, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  402224:	4b1e      	ldr	r3, [pc, #120]	; (4022a0 <udd_ep_alloc+0x178>)
  402226:	79fa      	ldrb	r2, [r7, #7]
  402228:	320c      	adds	r2, #12
  40222a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40222e:	60fb      	str	r3, [r7, #12]
  402230:	68fb      	ldr	r3, [r7, #12]
  402232:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402236:	60fb      	str	r3, [r7, #12]
  402238:	68fb      	ldr	r3, [r7, #12]
  40223a:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  40223e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402242:	60fb      	str	r3, [r7, #12]
  402244:	7dfb      	ldrb	r3, [r7, #23]
  402246:	2b00      	cmp	r3, #0
  402248:	d009      	beq.n	40225e <udd_ep_alloc+0x136>
  40224a:	79bb      	ldrb	r3, [r7, #6]
  40224c:	f043 0304 	orr.w	r3, r3, #4
  402250:	b2db      	uxtb	r3, r3
  402252:	021b      	lsls	r3, r3, #8
  402254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40225c:	e005      	b.n	40226a <udd_ep_alloc+0x142>
  40225e:	79bb      	ldrb	r3, [r7, #6]
  402260:	021b      	lsls	r3, r3, #8
  402262:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40226a:	68fa      	ldr	r2, [r7, #12]
  40226c:	4313      	orrs	r3, r2
  40226e:	60fb      	str	r3, [r7, #12]
  402270:	4b0b      	ldr	r3, [pc, #44]	; (4022a0 <udd_ep_alloc+0x178>)
  402272:	79fa      	ldrb	r2, [r7, #7]
  402274:	68f9      	ldr	r1, [r7, #12]
  402276:	320c      	adds	r2, #12
  402278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40227c:	2300      	movs	r3, #0
  40227e:	60bb      	str	r3, [r7, #8]
  402280:	e003      	b.n	40228a <udd_ep_alloc+0x162>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402282:	bf00      	nop
  402284:	68bb      	ldr	r3, [r7, #8]
  402286:	3301      	adds	r3, #1
  402288:	60bb      	str	r3, [r7, #8]
  40228a:	68bb      	ldr	r3, [r7, #8]
  40228c:	2b13      	cmp	r3, #19
  40228e:	d9f8      	bls.n	402282 <udd_ep_alloc+0x15a>
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  402290:	2301      	movs	r3, #1
}
  402292:	4618      	mov	r0, r3
  402294:	371c      	adds	r7, #28
  402296:	46bd      	mov	sp, r7
  402298:	f85d 7b04 	ldr.w	r7, [sp], #4
  40229c:	4770      	bx	lr
  40229e:	bf00      	nop
  4022a0:	40034000 	.word	0x40034000
  4022a4:	20000c6c 	.word	0x20000c6c

004022a8 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  4022a8:	b580      	push	{r7, lr}
  4022aa:	b084      	sub	sp, #16
  4022ac:	af00      	add	r7, sp, #0
  4022ae:	4603      	mov	r3, r0
  4022b0:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4022b2:	79fb      	ldrb	r3, [r7, #7]
  4022b4:	f003 030f 	and.w	r3, r3, #15
  4022b8:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep_index) {
  4022ba:	7bfb      	ldrb	r3, [r7, #15]
  4022bc:	2b03      	cmp	r3, #3
  4022be:	d900      	bls.n	4022c2 <udd_ep_free+0x1a>
		return;
  4022c0:	e00f      	b.n	4022e2 <udd_ep_free+0x3a>
	}
	udd_disable_endpoint(ep_index);
  4022c2:	4b09      	ldr	r3, [pc, #36]	; (4022e8 <udd_ep_free+0x40>)
  4022c4:	7bfa      	ldrb	r2, [r7, #15]
  4022c6:	4908      	ldr	r1, [pc, #32]	; (4022e8 <udd_ep_free+0x40>)
  4022c8:	7bf8      	ldrb	r0, [r7, #15]
  4022ca:	300c      	adds	r0, #12
  4022cc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4022d0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  4022d4:	320c      	adds	r2, #12
  4022d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	udd_ep_abort_job(ep);
  4022da:	79fb      	ldrb	r3, [r7, #7]
  4022dc:	4618      	mov	r0, r3
  4022de:	4b03      	ldr	r3, [pc, #12]	; (4022ec <udd_ep_free+0x44>)
  4022e0:	4798      	blx	r3
}
  4022e2:	3710      	adds	r7, #16
  4022e4:	46bd      	mov	sp, r7
  4022e6:	bd80      	pop	{r7, pc}
  4022e8:	40034000 	.word	0x40034000
  4022ec:	00403259 	.word	0x00403259

004022f0 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
  4022f0:	b480      	push	{r7}
  4022f2:	b085      	sub	sp, #20
  4022f4:	af00      	add	r7, sp, #0
  4022f6:	4603      	mov	r3, r0
  4022f8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4022fa:	79fb      	ldrb	r3, [r7, #7]
  4022fc:	f003 030f 	and.w	r3, r3, #15
  402300:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402302:	7bfb      	ldrb	r3, [r7, #15]
  402304:	1e5a      	subs	r2, r3, #1
  402306:	4613      	mov	r3, r2
  402308:	009b      	lsls	r3, r3, #2
  40230a:	4413      	add	r3, r2
  40230c:	009b      	lsls	r3, r3, #2
  40230e:	4a13      	ldr	r2, [pc, #76]	; (40235c <udd_ep_is_halted+0x6c>)
  402310:	4413      	add	r3, r2
  402312:	60bb      	str	r3, [r7, #8]
	if (USB_DEVICE_MAX_EP < ep_index) {
  402314:	7bfb      	ldrb	r3, [r7, #15]
  402316:	2b03      	cmp	r3, #3
  402318:	d901      	bls.n	40231e <udd_ep_is_halted+0x2e>
		return false;
  40231a:	2300      	movs	r3, #0
  40231c:	e017      	b.n	40234e <udd_ep_is_halted+0x5e>
	}
	return ptr_job->b_stall_requested ||
  40231e:	68bb      	ldr	r3, [r7, #8]
  402320:	7c5b      	ldrb	r3, [r3, #17]
  402322:	f3c3 1340 	ubfx	r3, r3, #5, #1
  402326:	b2db      	uxtb	r3, r3
  402328:	2b00      	cmp	r3, #0
  40232a:	d10a      	bne.n	402342 <udd_ep_is_halted+0x52>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  40232c:	4b0c      	ldr	r3, [pc, #48]	; (402360 <udd_ep_is_halted+0x70>)
  40232e:	79fa      	ldrb	r2, [r7, #7]
  402330:	f002 020f 	and.w	r2, r2, #15
  402334:	320c      	adds	r2, #12
  402336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40233a:	f003 0328 	and.w	r3, r3, #40	; 0x28
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  40233e:	2b00      	cmp	r3, #0
  402340:	d001      	beq.n	402346 <udd_ep_is_halted+0x56>
  402342:	2301      	movs	r3, #1
  402344:	e000      	b.n	402348 <udd_ep_is_halted+0x58>
  402346:	2300      	movs	r3, #0
  402348:	f003 0301 	and.w	r3, r3, #1
  40234c:	b2db      	uxtb	r3, r3
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  40234e:	4618      	mov	r0, r3
  402350:	3714      	adds	r7, #20
  402352:	46bd      	mov	sp, r7
  402354:	f85d 7b04 	ldr.w	r7, [sp], #4
  402358:	4770      	bx	lr
  40235a:	bf00      	nop
  40235c:	20000c6c 	.word	0x20000c6c
  402360:	40034000 	.word	0x40034000

00402364 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  402364:	b580      	push	{r7, lr}
  402366:	b088      	sub	sp, #32
  402368:	af00      	add	r7, sp, #0
  40236a:	4603      	mov	r3, r0
  40236c:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  40236e:	79fb      	ldrb	r3, [r7, #7]
  402370:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402374:	2b00      	cmp	r3, #0
  402376:	bf0c      	ite	eq
  402378:	2300      	moveq	r3, #0
  40237a:	2301      	movne	r3, #1
  40237c:	77fb      	strb	r3, [r7, #31]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  40237e:	79fb      	ldrb	r3, [r7, #7]
  402380:	f003 030f 	and.w	r3, r3, #15
  402384:	77bb      	strb	r3, [r7, #30]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402386:	7fbb      	ldrb	r3, [r7, #30]
  402388:	1e5a      	subs	r2, r3, #1
  40238a:	4613      	mov	r3, r2
  40238c:	009b      	lsls	r3, r3, #2
  40238e:	4413      	add	r3, r2
  402390:	009b      	lsls	r3, r3, #2
  402392:	4a2d      	ldr	r2, [pc, #180]	; (402448 <udd_ep_set_halt+0xe4>)
  402394:	4413      	add	r3, r2
  402396:	61bb      	str	r3, [r7, #24]
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  402398:	7fbb      	ldrb	r3, [r7, #30]
  40239a:	2b03      	cmp	r3, #3
  40239c:	d901      	bls.n	4023a2 <udd_ep_set_halt+0x3e>
		return false;
  40239e:	2300      	movs	r3, #0
  4023a0:	e04d      	b.n	40243e <udd_ep_set_halt+0xda>
	}
	flags = cpu_irq_save();
  4023a2:	4b2a      	ldr	r3, [pc, #168]	; (40244c <udd_ep_set_halt+0xe8>)
  4023a4:	4798      	blx	r3
  4023a6:	6178      	str	r0, [r7, #20]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4023a8:	7ffb      	ldrb	r3, [r7, #31]
  4023aa:	2b00      	cmp	r3, #0
  4023ac:	d01f      	beq.n	4023ee <udd_ep_set_halt+0x8a>
  4023ae:	4b28      	ldr	r3, [pc, #160]	; (402450 <udd_ep_set_halt+0xec>)
  4023b0:	7fba      	ldrb	r2, [r7, #30]
  4023b2:	320c      	adds	r2, #12
  4023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4023b8:	f003 0310 	and.w	r3, r3, #16
  4023bc:	2b00      	cmp	r3, #0
  4023be:	d106      	bne.n	4023ce <udd_ep_set_halt+0x6a>
				|| ptr_job->bank > 1)) {
  4023c0:	69bb      	ldr	r3, [r7, #24]
  4023c2:	7c5b      	ldrb	r3, [r3, #17]
  4023c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4023c8:	b2db      	uxtb	r3, r3
  4023ca:	2b01      	cmp	r3, #1
  4023cc:	dd0f      	ble.n	4023ee <udd_ep_set_halt+0x8a>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  4023ce:	69ba      	ldr	r2, [r7, #24]
  4023d0:	7c53      	ldrb	r3, [r2, #17]
  4023d2:	f043 0320 	orr.w	r3, r3, #32
  4023d6:	7453      	strb	r3, [r2, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4023d8:	4b1d      	ldr	r3, [pc, #116]	; (402450 <udd_ep_set_halt+0xec>)
  4023da:	7fba      	ldrb	r2, [r7, #30]
  4023dc:	2101      	movs	r1, #1
  4023de:	fa01 f202 	lsl.w	r2, r1, r2
  4023e2:	611a      	str	r2, [r3, #16]
		cpu_irq_restore(flags);
  4023e4:	6978      	ldr	r0, [r7, #20]
  4023e6:	4b1b      	ldr	r3, [pc, #108]	; (402454 <udd_ep_set_halt+0xf0>)
  4023e8:	4798      	blx	r3
		return true;
  4023ea:	2301      	movs	r3, #1
  4023ec:	e027      	b.n	40243e <udd_ep_set_halt+0xda>
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  4023ee:	4b18      	ldr	r3, [pc, #96]	; (402450 <udd_ep_set_halt+0xec>)
  4023f0:	7fba      	ldrb	r2, [r7, #30]
  4023f2:	320c      	adds	r2, #12
  4023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4023f8:	613b      	str	r3, [r7, #16]
  4023fa:	693b      	ldr	r3, [r7, #16]
  4023fc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402400:	613b      	str	r3, [r7, #16]
  402402:	693b      	ldr	r3, [r7, #16]
  402404:	f043 0320 	orr.w	r3, r3, #32
  402408:	613b      	str	r3, [r7, #16]
  40240a:	4b11      	ldr	r3, [pc, #68]	; (402450 <udd_ep_set_halt+0xec>)
  40240c:	7fba      	ldrb	r2, [r7, #30]
  40240e:	6939      	ldr	r1, [r7, #16]
  402410:	320c      	adds	r2, #12
  402412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402416:	2300      	movs	r3, #0
  402418:	60fb      	str	r3, [r7, #12]
  40241a:	e003      	b.n	402424 <udd_ep_set_halt+0xc0>
  40241c:	bf00      	nop
  40241e:	68fb      	ldr	r3, [r7, #12]
  402420:	3301      	adds	r3, #1
  402422:	60fb      	str	r3, [r7, #12]
  402424:	68fb      	ldr	r3, [r7, #12]
  402426:	2b13      	cmp	r3, #19
  402428:	d9f8      	bls.n	40241c <udd_ep_set_halt+0xb8>
		udd_enable_endpoint_interrupt(ep_index);
  40242a:	4b09      	ldr	r3, [pc, #36]	; (402450 <udd_ep_set_halt+0xec>)
  40242c:	7fba      	ldrb	r2, [r7, #30]
  40242e:	2101      	movs	r1, #1
  402430:	fa01 f202 	lsl.w	r2, r1, r2
  402434:	611a      	str	r2, [r3, #16]
		cpu_irq_restore(flags);
  402436:	6978      	ldr	r0, [r7, #20]
  402438:	4b06      	ldr	r3, [pc, #24]	; (402454 <udd_ep_set_halt+0xf0>)
  40243a:	4798      	blx	r3
	}
	return true;
  40243c:	2301      	movs	r3, #1
}
  40243e:	4618      	mov	r0, r3
  402440:	3720      	adds	r7, #32
  402442:	46bd      	mov	sp, r7
  402444:	bd80      	pop	{r7, pc}
  402446:	bf00      	nop
  402448:	20000c6c 	.word	0x20000c6c
  40244c:	00401c2d 	.word	0x00401c2d
  402450:	40034000 	.word	0x40034000
  402454:	00401c85 	.word	0x00401c85

00402458 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  402458:	b580      	push	{r7, lr}
  40245a:	b088      	sub	sp, #32
  40245c:	af00      	add	r7, sp, #0
  40245e:	4603      	mov	r3, r0
  402460:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  402462:	79fb      	ldrb	r3, [r7, #7]
  402464:	f003 030f 	and.w	r3, r3, #15
  402468:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  40246a:	79fb      	ldrb	r3, [r7, #7]
  40246c:	2b03      	cmp	r3, #3
  40246e:	d901      	bls.n	402474 <udd_ep_clear_halt+0x1c>
		return false;
  402470:	2300      	movs	r3, #0
  402472:	e075      	b.n	402560 <udd_ep_clear_halt+0x108>
	ptr_job = &udd_ep_job[ep - 1];
  402474:	79fb      	ldrb	r3, [r7, #7]
  402476:	1e5a      	subs	r2, r3, #1
  402478:	4613      	mov	r3, r2
  40247a:	009b      	lsls	r3, r3, #2
  40247c:	4413      	add	r3, r2
  40247e:	009b      	lsls	r3, r3, #2
  402480:	4a39      	ldr	r2, [pc, #228]	; (402568 <udd_ep_clear_halt+0x110>)
  402482:	4413      	add	r3, r2
  402484:	61fb      	str	r3, [r7, #28]

	ptr_job->b_stall_requested = false;
  402486:	69fa      	ldr	r2, [r7, #28]
  402488:	7c53      	ldrb	r3, [r2, #17]
  40248a:	f36f 1345 	bfc	r3, #5, #1
  40248e:	7453      	strb	r3, [r2, #17]
	if (Is_udd_endpoint_stall_requested(ep)) {
  402490:	4b36      	ldr	r3, [pc, #216]	; (40256c <udd_ep_clear_halt+0x114>)
  402492:	79fa      	ldrb	r2, [r7, #7]
  402494:	320c      	adds	r2, #12
  402496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40249a:	f003 0320 	and.w	r3, r3, #32
  40249e:	2b00      	cmp	r3, #0
  4024a0:	d05d      	beq.n	40255e <udd_ep_clear_halt+0x106>
		// Remove stall
		udd_disable_stall_handshake(ep);
  4024a2:	4b32      	ldr	r3, [pc, #200]	; (40256c <udd_ep_clear_halt+0x114>)
  4024a4:	79fa      	ldrb	r2, [r7, #7]
  4024a6:	320c      	adds	r2, #12
  4024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4024ac:	61bb      	str	r3, [r7, #24]
  4024ae:	69bb      	ldr	r3, [r7, #24]
  4024b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4024b4:	61bb      	str	r3, [r7, #24]
  4024b6:	69bb      	ldr	r3, [r7, #24]
  4024b8:	f023 0320 	bic.w	r3, r3, #32
  4024bc:	61bb      	str	r3, [r7, #24]
  4024be:	4b2b      	ldr	r3, [pc, #172]	; (40256c <udd_ep_clear_halt+0x114>)
  4024c0:	79fa      	ldrb	r2, [r7, #7]
  4024c2:	69b9      	ldr	r1, [r7, #24]
  4024c4:	320c      	adds	r2, #12
  4024c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4024ca:	2300      	movs	r3, #0
  4024cc:	617b      	str	r3, [r7, #20]
  4024ce:	e003      	b.n	4024d8 <udd_ep_clear_halt+0x80>
  4024d0:	bf00      	nop
  4024d2:	697b      	ldr	r3, [r7, #20]
  4024d4:	3301      	adds	r3, #1
  4024d6:	617b      	str	r3, [r7, #20]
  4024d8:	697b      	ldr	r3, [r7, #20]
  4024da:	2b13      	cmp	r3, #19
  4024dc:	d9f8      	bls.n	4024d0 <udd_ep_clear_halt+0x78>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  4024de:	4b23      	ldr	r3, [pc, #140]	; (40256c <udd_ep_clear_halt+0x114>)
  4024e0:	4a22      	ldr	r2, [pc, #136]	; (40256c <udd_ep_clear_halt+0x114>)
  4024e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
  4024e4:	79fa      	ldrb	r2, [r7, #7]
  4024e6:	2001      	movs	r0, #1
  4024e8:	fa00 f202 	lsl.w	r2, r0, r2
  4024ec:	430a      	orrs	r2, r1
  4024ee:	629a      	str	r2, [r3, #40]	; 0x28
  4024f0:	4b1e      	ldr	r3, [pc, #120]	; (40256c <udd_ep_clear_halt+0x114>)
  4024f2:	4a1e      	ldr	r2, [pc, #120]	; (40256c <udd_ep_clear_halt+0x114>)
  4024f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
  4024f6:	79fa      	ldrb	r2, [r7, #7]
  4024f8:	2001      	movs	r0, #1
  4024fa:	fa00 f202 	lsl.w	r2, r0, r2
  4024fe:	43d2      	mvns	r2, r2
  402500:	400a      	ands	r2, r1
  402502:	629a      	str	r2, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  402504:	4b19      	ldr	r3, [pc, #100]	; (40256c <udd_ep_clear_halt+0x114>)
  402506:	79fa      	ldrb	r2, [r7, #7]
  402508:	320c      	adds	r2, #12
  40250a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40250e:	613b      	str	r3, [r7, #16]
  402510:	693b      	ldr	r3, [r7, #16]
  402512:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402516:	613b      	str	r3, [r7, #16]
  402518:	693b      	ldr	r3, [r7, #16]
  40251a:	f023 0308 	bic.w	r3, r3, #8
  40251e:	613b      	str	r3, [r7, #16]
  402520:	4b12      	ldr	r3, [pc, #72]	; (40256c <udd_ep_clear_halt+0x114>)
  402522:	79fa      	ldrb	r2, [r7, #7]
  402524:	6939      	ldr	r1, [r7, #16]
  402526:	320c      	adds	r2, #12
  402528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40252c:	2300      	movs	r3, #0
  40252e:	60fb      	str	r3, [r7, #12]
  402530:	e003      	b.n	40253a <udd_ep_clear_halt+0xe2>
  402532:	bf00      	nop
  402534:	68fb      	ldr	r3, [r7, #12]
  402536:	3301      	adds	r3, #1
  402538:	60fb      	str	r3, [r7, #12]
  40253a:	68fb      	ldr	r3, [r7, #12]
  40253c:	2b13      	cmp	r3, #19
  40253e:	d9f8      	bls.n	402532 <udd_ep_clear_halt+0xda>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  402540:	69fb      	ldr	r3, [r7, #28]
  402542:	7c5b      	ldrb	r3, [r3, #17]
  402544:	f3c3 1300 	ubfx	r3, r3, #4, #1
  402548:	b2db      	uxtb	r3, r3
  40254a:	2b01      	cmp	r3, #1
  40254c:	d107      	bne.n	40255e <udd_ep_clear_halt+0x106>
			ptr_job->busy = false;
  40254e:	69fa      	ldr	r2, [r7, #28]
  402550:	7c53      	ldrb	r3, [r2, #17]
  402552:	f36f 1304 	bfc	r3, #4, #1
  402556:	7453      	strb	r3, [r2, #17]
			ptr_job->call_nohalt();
  402558:	69fb      	ldr	r3, [r7, #28]
  40255a:	681b      	ldr	r3, [r3, #0]
  40255c:	4798      	blx	r3
		}
	}
	return true;
  40255e:	2301      	movs	r3, #1
}
  402560:	4618      	mov	r0, r3
  402562:	3720      	adds	r7, #32
  402564:	46bd      	mov	sp, r7
  402566:	bd80      	pop	{r7, pc}
  402568:	20000c6c 	.word	0x20000c6c
  40256c:	40034000 	.word	0x40034000

00402570 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402570:	b580      	push	{r7, lr}
  402572:	b088      	sub	sp, #32
  402574:	af00      	add	r7, sp, #0
  402576:	60ba      	str	r2, [r7, #8]
  402578:	607b      	str	r3, [r7, #4]
  40257a:	4603      	mov	r3, r0
  40257c:	73fb      	strb	r3, [r7, #15]
  40257e:	460b      	mov	r3, r1
  402580:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;
  402582:	7bfb      	ldrb	r3, [r7, #15]
  402584:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402588:	2b00      	cmp	r3, #0
  40258a:	bf0c      	ite	eq
  40258c:	2300      	moveq	r3, #0
  40258e:	2301      	movne	r3, #1
  402590:	77fb      	strb	r3, [r7, #31]

	ep &= USB_EP_ADDR_MASK;
  402592:	7bfb      	ldrb	r3, [r7, #15]
  402594:	f003 030f 	and.w	r3, r3, #15
  402598:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
  40259a:	7bfb      	ldrb	r3, [r7, #15]
  40259c:	2b03      	cmp	r3, #3
  40259e:	d901      	bls.n	4025a4 <udd_ep_run+0x34>
		return false;
  4025a0:	2300      	movs	r3, #0
  4025a2:	e083      	b.n	4026ac <udd_ep_run+0x13c>
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  4025a4:	7bfb      	ldrb	r3, [r7, #15]
  4025a6:	1e5a      	subs	r2, r3, #1
  4025a8:	4613      	mov	r3, r2
  4025aa:	009b      	lsls	r3, r3, #2
  4025ac:	4413      	add	r3, r2
  4025ae:	009b      	lsls	r3, r3, #2
  4025b0:	4a40      	ldr	r2, [pc, #256]	; (4026b4 <udd_ep_run+0x144>)
  4025b2:	4413      	add	r3, r2
  4025b4:	61bb      	str	r3, [r7, #24]

	if ((!Is_udd_endpoint_enabled(ep))
  4025b6:	4b40      	ldr	r3, [pc, #256]	; (4026b8 <udd_ep_run+0x148>)
  4025b8:	7bfa      	ldrb	r2, [r7, #15]
  4025ba:	320c      	adds	r2, #12
  4025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4025c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  4025c4:	2b00      	cmp	r3, #0
  4025c6:	d00f      	beq.n	4025e8 <udd_ep_run+0x78>
			|| ptr_job->b_stall_requested
  4025c8:	69bb      	ldr	r3, [r7, #24]
  4025ca:	7c5b      	ldrb	r3, [r3, #17]
  4025cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
  4025d0:	b2db      	uxtb	r3, r3
  4025d2:	2b00      	cmp	r3, #0
  4025d4:	d108      	bne.n	4025e8 <udd_ep_run+0x78>
			|| Is_udd_endpoint_stall_requested(ep)) {
  4025d6:	4b38      	ldr	r3, [pc, #224]	; (4026b8 <udd_ep_run+0x148>)
  4025d8:	7bfa      	ldrb	r2, [r7, #15]
  4025da:	320c      	adds	r2, #12
  4025dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4025e0:	f003 0320 	and.w	r3, r3, #32
  4025e4:	2b00      	cmp	r3, #0
  4025e6:	d001      	beq.n	4025ec <udd_ep_run+0x7c>
		return false; // Endpoint is halted
  4025e8:	2300      	movs	r3, #0
  4025ea:	e05f      	b.n	4026ac <udd_ep_run+0x13c>
	}

	flags = cpu_irq_save();
  4025ec:	4b33      	ldr	r3, [pc, #204]	; (4026bc <udd_ep_run+0x14c>)
  4025ee:	4798      	blx	r3
  4025f0:	6178      	str	r0, [r7, #20]
	if (ptr_job->busy == true) {
  4025f2:	69bb      	ldr	r3, [r7, #24]
  4025f4:	7c5b      	ldrb	r3, [r3, #17]
  4025f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
  4025fa:	b2db      	uxtb	r3, r3
  4025fc:	2b01      	cmp	r3, #1
  4025fe:	d104      	bne.n	40260a <udd_ep_run+0x9a>
		cpu_irq_restore(flags);
  402600:	6978      	ldr	r0, [r7, #20]
  402602:	4b2f      	ldr	r3, [pc, #188]	; (4026c0 <udd_ep_run+0x150>)
  402604:	4798      	blx	r3
		return false; // Job already on going
  402606:	2300      	movs	r3, #0
  402608:	e050      	b.n	4026ac <udd_ep_run+0x13c>
	}
	ptr_job->busy = true;
  40260a:	69ba      	ldr	r2, [r7, #24]
  40260c:	7c53      	ldrb	r3, [r2, #17]
  40260e:	f043 0310 	orr.w	r3, r3, #16
  402612:	7453      	strb	r3, [r2, #17]
	cpu_irq_restore(flags);
  402614:	6978      	ldr	r0, [r7, #20]
  402616:	4b2a      	ldr	r3, [pc, #168]	; (4026c0 <udd_ep_run+0x150>)
  402618:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  40261a:	69bb      	ldr	r3, [r7, #24]
  40261c:	68ba      	ldr	r2, [r7, #8]
  40261e:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
  402620:	69bb      	ldr	r3, [r7, #24]
  402622:	687a      	ldr	r2, [r7, #4]
  402624:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
  402626:	69bb      	ldr	r3, [r7, #24]
  402628:	2200      	movs	r2, #0
  40262a:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
  40262c:	69bb      	ldr	r3, [r7, #24]
  40262e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402630:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402632:	7bbb      	ldrb	r3, [r7, #14]
  402634:	2b00      	cmp	r3, #0
  402636:	d102      	bne.n	40263e <udd_ep_run+0xce>
  402638:	687b      	ldr	r3, [r7, #4]
  40263a:	2b00      	cmp	r3, #0
  40263c:	d101      	bne.n	402642 <udd_ep_run+0xd2>
  40263e:	2301      	movs	r3, #1
  402640:	e000      	b.n	402644 <udd_ep_run+0xd4>
  402642:	2300      	movs	r3, #0
  402644:	b2db      	uxtb	r3, r3
  402646:	f003 0301 	and.w	r3, r3, #1
  40264a:	b2d9      	uxtb	r1, r3
  40264c:	69ba      	ldr	r2, [r7, #24]
  40264e:	7c53      	ldrb	r3, [r2, #17]
  402650:	f361 1386 	bfi	r3, r1, #6, #1
  402654:	7453      	strb	r3, [r2, #17]
	ptr_job->b_buf_end = false;
  402656:	69ba      	ldr	r2, [r7, #24]
  402658:	7c53      	ldrb	r3, [r2, #17]
  40265a:	f36f 13c7 	bfc	r3, #7, #1
  40265e:	7453      	strb	r3, [r2, #17]

	flags = cpu_irq_save();
  402660:	4b16      	ldr	r3, [pc, #88]	; (4026bc <udd_ep_run+0x14c>)
  402662:	4798      	blx	r3
  402664:	6178      	str	r0, [r7, #20]
	udd_enable_endpoint_interrupt(ep);
  402666:	4b14      	ldr	r3, [pc, #80]	; (4026b8 <udd_ep_run+0x148>)
  402668:	7bfa      	ldrb	r2, [r7, #15]
  40266a:	2101      	movs	r1, #1
  40266c:	fa01 f202 	lsl.w	r2, r1, r2
  402670:	611a      	str	r2, [r3, #16]
	// Request first transfer
	if (b_dir_in) {
  402672:	7ffb      	ldrb	r3, [r7, #31]
  402674:	2b00      	cmp	r3, #0
  402676:	d015      	beq.n	4026a4 <udd_ep_run+0x134>
		if (Is_udd_in_pending(ep)) {
  402678:	4b0f      	ldr	r3, [pc, #60]	; (4026b8 <udd_ep_run+0x148>)
  40267a:	7bfa      	ldrb	r2, [r7, #15]
  40267c:	320c      	adds	r2, #12
  40267e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402682:	f003 0311 	and.w	r3, r3, #17
  402686:	2b00      	cmp	r3, #0
  402688:	d10c      	bne.n	4026a4 <udd_ep_run+0x134>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  40268a:	7bfb      	ldrb	r3, [r7, #15]
  40268c:	4618      	mov	r0, r3
  40268e:	2101      	movs	r1, #1
  402690:	4b0c      	ldr	r3, [pc, #48]	; (4026c4 <udd_ep_run+0x154>)
  402692:	4798      	blx	r3
  402694:	4603      	mov	r3, r0
  402696:	2b00      	cmp	r3, #0
  402698:	d004      	beq.n	4026a4 <udd_ep_run+0x134>
				// Over one bank
				udd_ep_in_sent(ep, false);
  40269a:	7bfb      	ldrb	r3, [r7, #15]
  40269c:	4618      	mov	r0, r3
  40269e:	2100      	movs	r1, #0
  4026a0:	4b08      	ldr	r3, [pc, #32]	; (4026c4 <udd_ep_run+0x154>)
  4026a2:	4798      	blx	r3
			}
		}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);
  4026a4:	6978      	ldr	r0, [r7, #20]
  4026a6:	4b06      	ldr	r3, [pc, #24]	; (4026c0 <udd_ep_run+0x150>)
  4026a8:	4798      	blx	r3

	return true;
  4026aa:	2301      	movs	r3, #1
}
  4026ac:	4618      	mov	r0, r3
  4026ae:	3720      	adds	r7, #32
  4026b0:	46bd      	mov	sp, r7
  4026b2:	bd80      	pop	{r7, pc}
  4026b4:	20000c6c 	.word	0x20000c6c
  4026b8:	40034000 	.word	0x40034000
  4026bc:	00401c2d 	.word	0x00401c2d
  4026c0:	00401c85 	.word	0x00401c85
  4026c4:	0040358d 	.word	0x0040358d

004026c8 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  4026c8:	b580      	push	{r7, lr}
  4026ca:	b088      	sub	sp, #32
  4026cc:	af00      	add	r7, sp, #0
  4026ce:	4603      	mov	r3, r0
  4026d0:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  4026d2:	79fb      	ldrb	r3, [r7, #7]
  4026d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4026d8:	2b00      	cmp	r3, #0
  4026da:	bf0c      	ite	eq
  4026dc:	2300      	moveq	r3, #0
  4026de:	2301      	movne	r3, #1
  4026e0:	77fb      	strb	r3, [r7, #31]
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  4026e2:	79fb      	ldrb	r3, [r7, #7]
  4026e4:	f003 030f 	and.w	r3, r3, #15
  4026e8:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  4026ea:	79fb      	ldrb	r3, [r7, #7]
  4026ec:	2b03      	cmp	r3, #3
  4026ee:	d900      	bls.n	4026f2 <udd_ep_abort+0x2a>
		return;
  4026f0:	e0ba      	b.n	402868 <udd_ep_abort+0x1a0>

	// Disable interrupts
	flags = cpu_irq_save();
  4026f2:	4b5f      	ldr	r3, [pc, #380]	; (402870 <udd_ep_abort+0x1a8>)
  4026f4:	4798      	blx	r3
  4026f6:	61b8      	str	r0, [r7, #24]
	udd_disable_endpoint_interrupt(ep);
  4026f8:	4b5e      	ldr	r3, [pc, #376]	; (402874 <udd_ep_abort+0x1ac>)
  4026fa:	79fa      	ldrb	r2, [r7, #7]
  4026fc:	2101      	movs	r1, #1
  4026fe:	fa01 f202 	lsl.w	r2, r1, r2
  402702:	615a      	str	r2, [r3, #20]
	cpu_irq_restore(flags);
  402704:	69b8      	ldr	r0, [r7, #24]
  402706:	4b5c      	ldr	r3, [pc, #368]	; (402878 <udd_ep_abort+0x1b0>)
  402708:	4798      	blx	r3
	// Clear pending statuses
	if (b_dir_in) {
  40270a:	7ffb      	ldrb	r3, [r7, #31]
  40270c:	2b00      	cmp	r3, #0
  40270e:	f000 8086 	beq.w	40281e <udd_ep_abort+0x156>
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  402712:	4b58      	ldr	r3, [pc, #352]	; (402874 <udd_ep_abort+0x1ac>)
  402714:	79fa      	ldrb	r2, [r7, #7]
  402716:	320c      	adds	r2, #12
  402718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40271c:	f003 0310 	and.w	r3, r3, #16
  402720:	2b00      	cmp	r3, #0
  402722:	d04f      	beq.n	4027c4 <udd_ep_abort+0xfc>
			udd_kill_data_in_fifo(ep,
  402724:	79fb      	ldrb	r3, [r7, #7]
  402726:	2b00      	cmp	r3, #0
  402728:	d02e      	beq.n	402788 <udd_ep_abort+0xc0>
  40272a:	79fb      	ldrb	r3, [r7, #7]
  40272c:	2b03      	cmp	r3, #3
  40272e:	d02b      	beq.n	402788 <udd_ep_abort+0xc0>
  402730:	4b50      	ldr	r3, [pc, #320]	; (402874 <udd_ep_abort+0x1ac>)
  402732:	79fa      	ldrb	r2, [r7, #7]
  402734:	494f      	ldr	r1, [pc, #316]	; (402874 <udd_ep_abort+0x1ac>)
  402736:	79f8      	ldrb	r0, [r7, #7]
  402738:	300c      	adds	r0, #12
  40273a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40273e:	f021 0110 	bic.w	r1, r1, #16
  402742:	320c      	adds	r2, #12
  402744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402748:	bf00      	nop
  40274a:	4b4a      	ldr	r3, [pc, #296]	; (402874 <udd_ep_abort+0x1ac>)
  40274c:	79fa      	ldrb	r2, [r7, #7]
  40274e:	320c      	adds	r2, #12
  402750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402754:	f003 0310 	and.w	r3, r3, #16
  402758:	2b00      	cmp	r3, #0
  40275a:	d1f6      	bne.n	40274a <udd_ep_abort+0x82>
  40275c:	4b45      	ldr	r3, [pc, #276]	; (402874 <udd_ep_abort+0x1ac>)
  40275e:	79fa      	ldrb	r2, [r7, #7]
  402760:	4944      	ldr	r1, [pc, #272]	; (402874 <udd_ep_abort+0x1ac>)
  402762:	79f8      	ldrb	r0, [r7, #7]
  402764:	300c      	adds	r0, #12
  402766:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40276a:	f041 0110 	orr.w	r1, r1, #16
  40276e:	320c      	adds	r2, #12
  402770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402774:	bf00      	nop
  402776:	4b3f      	ldr	r3, [pc, #252]	; (402874 <udd_ep_abort+0x1ac>)
  402778:	79fa      	ldrb	r2, [r7, #7]
  40277a:	320c      	adds	r2, #12
  40277c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402780:	f003 0310 	and.w	r3, r3, #16
  402784:	2b00      	cmp	r3, #0
  402786:	d0f6      	beq.n	402776 <udd_ep_abort+0xae>
  402788:	4b3a      	ldr	r3, [pc, #232]	; (402874 <udd_ep_abort+0x1ac>)
  40278a:	79fa      	ldrb	r2, [r7, #7]
  40278c:	320c      	adds	r2, #12
  40278e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402792:	617b      	str	r3, [r7, #20]
  402794:	697b      	ldr	r3, [r7, #20]
  402796:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40279a:	617b      	str	r3, [r7, #20]
  40279c:	697b      	ldr	r3, [r7, #20]
  40279e:	f023 0310 	bic.w	r3, r3, #16
  4027a2:	617b      	str	r3, [r7, #20]
  4027a4:	4b33      	ldr	r3, [pc, #204]	; (402874 <udd_ep_abort+0x1ac>)
  4027a6:	79fa      	ldrb	r2, [r7, #7]
  4027a8:	6979      	ldr	r1, [r7, #20]
  4027aa:	320c      	adds	r2, #12
  4027ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4027b0:	2300      	movs	r3, #0
  4027b2:	613b      	str	r3, [r7, #16]
  4027b4:	e003      	b.n	4027be <udd_ep_abort+0xf6>
  4027b6:	bf00      	nop
  4027b8:	693b      	ldr	r3, [r7, #16]
  4027ba:	3301      	adds	r3, #1
  4027bc:	613b      	str	r3, [r7, #16]
  4027be:	693b      	ldr	r3, [r7, #16]
  4027c0:	2b13      	cmp	r3, #19
  4027c2:	d9f8      	bls.n	4027b6 <udd_ep_abort+0xee>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  4027c4:	4b2b      	ldr	r3, [pc, #172]	; (402874 <udd_ep_abort+0x1ac>)
  4027c6:	79fa      	ldrb	r2, [r7, #7]
  4027c8:	320c      	adds	r2, #12
  4027ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4027ce:	60fb      	str	r3, [r7, #12]
  4027d0:	68fb      	ldr	r3, [r7, #12]
  4027d2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4027d6:	60fb      	str	r3, [r7, #12]
  4027d8:	68fb      	ldr	r3, [r7, #12]
  4027da:	f023 0301 	bic.w	r3, r3, #1
  4027de:	60fb      	str	r3, [r7, #12]
  4027e0:	4b24      	ldr	r3, [pc, #144]	; (402874 <udd_ep_abort+0x1ac>)
  4027e2:	79fa      	ldrb	r2, [r7, #7]
  4027e4:	68f9      	ldr	r1, [r7, #12]
  4027e6:	320c      	adds	r2, #12
  4027e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4027ec:	2300      	movs	r3, #0
  4027ee:	60bb      	str	r3, [r7, #8]
  4027f0:	e003      	b.n	4027fa <udd_ep_abort+0x132>
  4027f2:	bf00      	nop
  4027f4:	68bb      	ldr	r3, [r7, #8]
  4027f6:	3301      	adds	r3, #1
  4027f8:	60bb      	str	r3, [r7, #8]
  4027fa:	68bb      	ldr	r3, [r7, #8]
  4027fc:	2b13      	cmp	r3, #19
  4027fe:	d9f8      	bls.n	4027f2 <udd_ep_abort+0x12a>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  402800:	79fb      	ldrb	r3, [r7, #7]
  402802:	1e5a      	subs	r2, r3, #1
  402804:	491d      	ldr	r1, [pc, #116]	; (40287c <udd_ep_abort+0x1b4>)
  402806:	4613      	mov	r3, r2
  402808:	009b      	lsls	r3, r3, #2
  40280a:	4413      	add	r3, r2
  40280c:	009b      	lsls	r3, r3, #2
  40280e:	440b      	add	r3, r1
  402810:	f103 0210 	add.w	r2, r3, #16
  402814:	7853      	ldrb	r3, [r2, #1]
  402816:	f36f 0383 	bfc	r3, #2, #2
  40281a:	7053      	strb	r3, [r2, #1]
  40281c:	e00d      	b.n	40283a <udd_ep_abort+0x172>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  40281e:	e003      	b.n	402828 <udd_ep_abort+0x160>
			udd_ep_ack_out_received(ep);
  402820:	79fb      	ldrb	r3, [r7, #7]
  402822:	4618      	mov	r0, r3
  402824:	4b16      	ldr	r3, [pc, #88]	; (402880 <udd_ep_abort+0x1b8>)
  402826:	4798      	blx	r3
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  402828:	4b12      	ldr	r3, [pc, #72]	; (402874 <udd_ep_abort+0x1ac>)
  40282a:	79fa      	ldrb	r2, [r7, #7]
  40282c:	320c      	adds	r2, #12
  40282e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402832:	f003 0342 	and.w	r3, r3, #66	; 0x42
  402836:	2b00      	cmp	r3, #0
  402838:	d1f2      	bne.n	402820 <udd_ep_abort+0x158>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  40283a:	4b0e      	ldr	r3, [pc, #56]	; (402874 <udd_ep_abort+0x1ac>)
  40283c:	4a0d      	ldr	r2, [pc, #52]	; (402874 <udd_ep_abort+0x1ac>)
  40283e:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402840:	79fa      	ldrb	r2, [r7, #7]
  402842:	2001      	movs	r0, #1
  402844:	fa00 f202 	lsl.w	r2, r0, r2
  402848:	430a      	orrs	r2, r1
  40284a:	629a      	str	r2, [r3, #40]	; 0x28
  40284c:	4b09      	ldr	r3, [pc, #36]	; (402874 <udd_ep_abort+0x1ac>)
  40284e:	4a09      	ldr	r2, [pc, #36]	; (402874 <udd_ep_abort+0x1ac>)
  402850:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402852:	79fa      	ldrb	r2, [r7, #7]
  402854:	2001      	movs	r0, #1
  402856:	fa00 f202 	lsl.w	r2, r0, r2
  40285a:	43d2      	mvns	r2, r2
  40285c:	400a      	ands	r2, r1
  40285e:	629a      	str	r2, [r3, #40]	; 0x28
	// Abort job
	udd_ep_abort_job(ep);
  402860:	79fb      	ldrb	r3, [r7, #7]
  402862:	4618      	mov	r0, r3
  402864:	4b07      	ldr	r3, [pc, #28]	; (402884 <udd_ep_abort+0x1bc>)
  402866:	4798      	blx	r3
}
  402868:	3720      	adds	r7, #32
  40286a:	46bd      	mov	sp, r7
  40286c:	bd80      	pop	{r7, pc}
  40286e:	bf00      	nop
  402870:	00401c2d 	.word	0x00401c2d
  402874:	40034000 	.word	0x40034000
  402878:	00401c85 	.word	0x00401c85
  40287c:	20000c6c 	.word	0x20000c6c
  402880:	00403305 	.word	0x00403305
  402884:	00403259 	.word	0x00403259

00402888 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
  402888:	b580      	push	{r7, lr}
  40288a:	b086      	sub	sp, #24
  40288c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  40288e:	4b27      	ldr	r3, [pc, #156]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  402890:	4a26      	ldr	r2, [pc, #152]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  402892:	6892      	ldr	r2, [r2, #8]
  402894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402898:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  40289a:	4b24      	ldr	r3, [pc, #144]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  40289c:	4a23      	ldr	r2, [pc, #140]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  40289e:	6892      	ldr	r2, [r2, #8]
  4028a0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4028a4:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  4028a6:	4b21      	ldr	r3, [pc, #132]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  4028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028aa:	613b      	str	r3, [r7, #16]
  4028ac:	693b      	ldr	r3, [r7, #16]
  4028ae:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4028b2:	613b      	str	r3, [r7, #16]
  4028b4:	693b      	ldr	r3, [r7, #16]
  4028b6:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  4028ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4028be:	613b      	str	r3, [r7, #16]
  4028c0:	693b      	ldr	r3, [r7, #16]
  4028c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4028c6:	613b      	str	r3, [r7, #16]
  4028c8:	4b18      	ldr	r3, [pc, #96]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  4028ca:	693a      	ldr	r2, [r7, #16]
  4028cc:	631a      	str	r2, [r3, #48]	; 0x30
  4028ce:	2300      	movs	r3, #0
  4028d0:	60fb      	str	r3, [r7, #12]
  4028d2:	e003      	b.n	4028dc <udd_reset_ep_ctrl+0x54>
  4028d4:	bf00      	nop
  4028d6:	68fb      	ldr	r3, [r7, #12]
  4028d8:	3301      	adds	r3, #1
  4028da:	60fb      	str	r3, [r7, #12]
  4028dc:	68fb      	ldr	r3, [r7, #12]
  4028de:	2b13      	cmp	r3, #19
  4028e0:	d9f8      	bls.n	4028d4 <udd_reset_ep_ctrl+0x4c>
	udd_enable_endpoint(0);
  4028e2:	4b12      	ldr	r3, [pc, #72]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  4028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028e6:	60bb      	str	r3, [r7, #8]
  4028e8:	68bb      	ldr	r3, [r7, #8]
  4028ea:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4028ee:	60bb      	str	r3, [r7, #8]
  4028f0:	68bb      	ldr	r3, [r7, #8]
  4028f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4028f6:	60bb      	str	r3, [r7, #8]
  4028f8:	4b0c      	ldr	r3, [pc, #48]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  4028fa:	68ba      	ldr	r2, [r7, #8]
  4028fc:	631a      	str	r2, [r3, #48]	; 0x30
  4028fe:	2300      	movs	r3, #0
  402900:	607b      	str	r3, [r7, #4]
  402902:	e003      	b.n	40290c <udd_reset_ep_ctrl+0x84>
  402904:	bf00      	nop
  402906:	687b      	ldr	r3, [r7, #4]
  402908:	3301      	adds	r3, #1
  40290a:	607b      	str	r3, [r7, #4]
  40290c:	687b      	ldr	r3, [r7, #4]
  40290e:	2b13      	cmp	r3, #19
  402910:	d9f8      	bls.n	402904 <udd_reset_ep_ctrl+0x7c>

	flags = cpu_irq_save();
  402912:	4b07      	ldr	r3, [pc, #28]	; (402930 <udd_reset_ep_ctrl+0xa8>)
  402914:	4798      	blx	r3
  402916:	6178      	str	r0, [r7, #20]
	udd_enable_endpoint_interrupt(0);
  402918:	4b04      	ldr	r3, [pc, #16]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  40291a:	2201      	movs	r2, #1
  40291c:	611a      	str	r2, [r3, #16]
	cpu_irq_restore(flags);
  40291e:	6978      	ldr	r0, [r7, #20]
  402920:	4b04      	ldr	r3, [pc, #16]	; (402934 <udd_reset_ep_ctrl+0xac>)
  402922:	4798      	blx	r3
}
  402924:	3718      	adds	r7, #24
  402926:	46bd      	mov	sp, r7
  402928:	bd80      	pop	{r7, pc}
  40292a:	bf00      	nop
  40292c:	40034000 	.word	0x40034000
  402930:	00401c2d 	.word	0x00401c2d
  402934:	00401c85 	.word	0x00401c85

00402938 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
  402938:	b480      	push	{r7}
  40293a:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.callback = NULL;
  40293c:	4b07      	ldr	r3, [pc, #28]	; (40295c <udd_ctrl_init+0x24>)
  40293e:	2200      	movs	r2, #0
  402940:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  402942:	4b06      	ldr	r3, [pc, #24]	; (40295c <udd_ctrl_init+0x24>)
  402944:	2200      	movs	r2, #0
  402946:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
  402948:	4b04      	ldr	r3, [pc, #16]	; (40295c <udd_ctrl_init+0x24>)
  40294a:	2200      	movs	r2, #0
  40294c:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  40294e:	4b04      	ldr	r3, [pc, #16]	; (402960 <udd_ctrl_init+0x28>)
  402950:	2200      	movs	r2, #0
  402952:	701a      	strb	r2, [r3, #0]
}
  402954:	46bd      	mov	sp, r7
  402956:	f85d 7b04 	ldr.w	r7, [sp], #4
  40295a:	4770      	bx	lr
  40295c:	2000af50 	.word	0x2000af50
  402960:	20000c67 	.word	0x20000c67

00402964 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
  402964:	b580      	push	{r7, lr}
  402966:	b08c      	sub	sp, #48	; 0x30
  402968:	af00      	add	r7, sp, #0
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  40296a:	4b6d      	ldr	r3, [pc, #436]	; (402b20 <udd_ctrl_setup_received+0x1bc>)
  40296c:	781b      	ldrb	r3, [r3, #0]
  40296e:	2b00      	cmp	r3, #0
  402970:	d003      	beq.n	40297a <udd_ctrl_setup_received+0x16>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  402972:	4b6c      	ldr	r3, [pc, #432]	; (402b24 <udd_ctrl_setup_received+0x1c0>)
  402974:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  402976:	4b6c      	ldr	r3, [pc, #432]	; (402b28 <udd_ctrl_setup_received+0x1c4>)
  402978:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  40297a:	4b6c      	ldr	r3, [pc, #432]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  40297c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40297e:	4b6c      	ldr	r3, [pc, #432]	; (402b30 <udd_ctrl_setup_received+0x1cc>)
  402980:	4013      	ands	r3, r2
  402982:	0c1b      	lsrs	r3, r3, #16
  402984:	2b08      	cmp	r3, #8
  402986:	d01a      	beq.n	4029be <udd_ctrl_setup_received+0x5a>
		udd_ack_setup_received(0);
  402988:	4b68      	ldr	r3, [pc, #416]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  40298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40298c:	62bb      	str	r3, [r7, #40]	; 0x28
  40298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402990:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402994:	62bb      	str	r3, [r7, #40]	; 0x28
  402996:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402998:	f023 0304 	bic.w	r3, r3, #4
  40299c:	62bb      	str	r3, [r7, #40]	; 0x28
  40299e:	4b63      	ldr	r3, [pc, #396]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  4029a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4029a2:	631a      	str	r2, [r3, #48]	; 0x30
  4029a4:	2300      	movs	r3, #0
  4029a6:	627b      	str	r3, [r7, #36]	; 0x24
  4029a8:	e003      	b.n	4029b2 <udd_ctrl_setup_received+0x4e>
  4029aa:	bf00      	nop
  4029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4029ae:	3301      	adds	r3, #1
  4029b0:	627b      	str	r3, [r7, #36]	; 0x24
  4029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4029b4:	2b13      	cmp	r3, #19
  4029b6:	d9f8      	bls.n	4029aa <udd_ctrl_setup_received+0x46>
		udd_ctrl_stall_data();
  4029b8:	4b5e      	ldr	r3, [pc, #376]	; (402b34 <udd_ctrl_setup_received+0x1d0>)
  4029ba:	4798      	blx	r3
		return; // Error data number doesn't correspond to SETUP packet
  4029bc:	e0ad      	b.n	402b1a <udd_ctrl_setup_received+0x1b6>
	}
	for (i = 0; i < 8; i++) {
  4029be:	2300      	movs	r3, #0
  4029c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  4029c4:	e00c      	b.n	4029e0 <udd_ctrl_setup_received+0x7c>
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4029c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  4029ca:	4b5b      	ldr	r3, [pc, #364]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029cc:	4413      	add	r3, r2
			udd_endpoint_fifo_read(0);
  4029ce:	4a57      	ldr	r2, [pc, #348]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  4029d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4029d2:	b2d2      	uxtb	r2, r2
  4029d4:	701a      	strb	r2, [r3, #0]
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  4029d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4029da:	3301      	adds	r3, #1
  4029dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  4029e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4029e4:	2b07      	cmp	r3, #7
  4029e6:	d9ee      	bls.n	4029c6 <udd_ctrl_setup_received+0x62>
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
  4029e8:	4b53      	ldr	r3, [pc, #332]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029ea:	885a      	ldrh	r2, [r3, #2]
  4029ec:	4b52      	ldr	r3, [pc, #328]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029ee:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
  4029f0:	4b51      	ldr	r3, [pc, #324]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029f2:	889a      	ldrh	r2, [r3, #4]
  4029f4:	4b50      	ldr	r3, [pc, #320]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029f6:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
  4029f8:	4b4f      	ldr	r3, [pc, #316]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029fa:	88da      	ldrh	r2, [r3, #6]
  4029fc:	4b4e      	ldr	r3, [pc, #312]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029fe:	80da      	strh	r2, [r3, #6]

	// Decode setup request
	if (udc_process_setup() == false) {
  402a00:	4b4e      	ldr	r3, [pc, #312]	; (402b3c <udd_ctrl_setup_received+0x1d8>)
  402a02:	4798      	blx	r3
  402a04:	4603      	mov	r3, r0
  402a06:	f083 0301 	eor.w	r3, r3, #1
  402a0a:	b2db      	uxtb	r3, r3
  402a0c:	2b00      	cmp	r3, #0
  402a0e:	d01a      	beq.n	402a46 <udd_ctrl_setup_received+0xe2>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  402a10:	4b46      	ldr	r3, [pc, #280]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a14:	623b      	str	r3, [r7, #32]
  402a16:	6a3b      	ldr	r3, [r7, #32]
  402a18:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402a1c:	623b      	str	r3, [r7, #32]
  402a1e:	6a3b      	ldr	r3, [r7, #32]
  402a20:	f023 0304 	bic.w	r3, r3, #4
  402a24:	623b      	str	r3, [r7, #32]
  402a26:	4b41      	ldr	r3, [pc, #260]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402a28:	6a3a      	ldr	r2, [r7, #32]
  402a2a:	631a      	str	r2, [r3, #48]	; 0x30
  402a2c:	2300      	movs	r3, #0
  402a2e:	61fb      	str	r3, [r7, #28]
  402a30:	e003      	b.n	402a3a <udd_ctrl_setup_received+0xd6>
  402a32:	bf00      	nop
  402a34:	69fb      	ldr	r3, [r7, #28]
  402a36:	3301      	adds	r3, #1
  402a38:	61fb      	str	r3, [r7, #28]
  402a3a:	69fb      	ldr	r3, [r7, #28]
  402a3c:	2b13      	cmp	r3, #19
  402a3e:	d9f8      	bls.n	402a32 <udd_ctrl_setup_received+0xce>
		udd_ctrl_stall_data();
  402a40:	4b3c      	ldr	r3, [pc, #240]	; (402b34 <udd_ctrl_setup_received+0x1d0>)
  402a42:	4798      	blx	r3
		return;
  402a44:	e069      	b.n	402b1a <udd_ctrl_setup_received+0x1b6>
	}

	if (Udd_setup_is_in()) {
  402a46:	4b3c      	ldr	r3, [pc, #240]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  402a48:	781b      	ldrb	r3, [r3, #0]
  402a4a:	b2db      	uxtb	r3, r3
  402a4c:	b25b      	sxtb	r3, r3
  402a4e:	2b00      	cmp	r3, #0
  402a50:	da3b      	bge.n	402aca <udd_ctrl_setup_received+0x166>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  402a52:	4b36      	ldr	r3, [pc, #216]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a56:	61bb      	str	r3, [r7, #24]
  402a58:	69bb      	ldr	r3, [r7, #24]
  402a5a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402a5e:	61bb      	str	r3, [r7, #24]
  402a60:	69bb      	ldr	r3, [r7, #24]
  402a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402a66:	61bb      	str	r3, [r7, #24]
  402a68:	4b30      	ldr	r3, [pc, #192]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402a6a:	69ba      	ldr	r2, [r7, #24]
  402a6c:	631a      	str	r2, [r3, #48]	; 0x30
  402a6e:	2300      	movs	r3, #0
  402a70:	617b      	str	r3, [r7, #20]
  402a72:	e003      	b.n	402a7c <udd_ctrl_setup_received+0x118>
  402a74:	bf00      	nop
  402a76:	697b      	ldr	r3, [r7, #20]
  402a78:	3301      	adds	r3, #1
  402a7a:	617b      	str	r3, [r7, #20]
  402a7c:	697b      	ldr	r3, [r7, #20]
  402a7e:	2b13      	cmp	r3, #19
  402a80:	d9f8      	bls.n	402a74 <udd_ctrl_setup_received+0x110>
		udd_ack_setup_received(0);
  402a82:	4b2a      	ldr	r3, [pc, #168]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a86:	613b      	str	r3, [r7, #16]
  402a88:	693b      	ldr	r3, [r7, #16]
  402a8a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402a8e:	613b      	str	r3, [r7, #16]
  402a90:	693b      	ldr	r3, [r7, #16]
  402a92:	f023 0304 	bic.w	r3, r3, #4
  402a96:	613b      	str	r3, [r7, #16]
  402a98:	4b24      	ldr	r3, [pc, #144]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402a9a:	693a      	ldr	r2, [r7, #16]
  402a9c:	631a      	str	r2, [r3, #48]	; 0x30
  402a9e:	2300      	movs	r3, #0
  402aa0:	60fb      	str	r3, [r7, #12]
  402aa2:	e003      	b.n	402aac <udd_ctrl_setup_received+0x148>
  402aa4:	bf00      	nop
  402aa6:	68fb      	ldr	r3, [r7, #12]
  402aa8:	3301      	adds	r3, #1
  402aaa:	60fb      	str	r3, [r7, #12]
  402aac:	68fb      	ldr	r3, [r7, #12]
  402aae:	2b13      	cmp	r3, #19
  402ab0:	d9f8      	bls.n	402aa4 <udd_ctrl_setup_received+0x140>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  402ab2:	4b23      	ldr	r3, [pc, #140]	; (402b40 <udd_ctrl_setup_received+0x1dc>)
  402ab4:	2200      	movs	r2, #0
  402ab6:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  402ab8:	4b22      	ldr	r3, [pc, #136]	; (402b44 <udd_ctrl_setup_received+0x1e0>)
  402aba:	2200      	movs	r2, #0
  402abc:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  402abe:	4b18      	ldr	r3, [pc, #96]	; (402b20 <udd_ctrl_setup_received+0x1bc>)
  402ac0:	2202      	movs	r2, #2
  402ac2:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  402ac4:	4b20      	ldr	r3, [pc, #128]	; (402b48 <udd_ctrl_setup_received+0x1e4>)
  402ac6:	4798      	blx	r3
  402ac8:	e027      	b.n	402b1a <udd_ctrl_setup_received+0x1b6>
	} else {
		udd_ack_setup_received(0);
  402aca:	4b18      	ldr	r3, [pc, #96]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ace:	60bb      	str	r3, [r7, #8]
  402ad0:	68bb      	ldr	r3, [r7, #8]
  402ad2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402ad6:	60bb      	str	r3, [r7, #8]
  402ad8:	68bb      	ldr	r3, [r7, #8]
  402ada:	f023 0304 	bic.w	r3, r3, #4
  402ade:	60bb      	str	r3, [r7, #8]
  402ae0:	4b12      	ldr	r3, [pc, #72]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402ae2:	68ba      	ldr	r2, [r7, #8]
  402ae4:	631a      	str	r2, [r3, #48]	; 0x30
  402ae6:	2300      	movs	r3, #0
  402ae8:	607b      	str	r3, [r7, #4]
  402aea:	e003      	b.n	402af4 <udd_ctrl_setup_received+0x190>
  402aec:	bf00      	nop
  402aee:	687b      	ldr	r3, [r7, #4]
  402af0:	3301      	adds	r3, #1
  402af2:	607b      	str	r3, [r7, #4]
  402af4:	687b      	ldr	r3, [r7, #4]
  402af6:	2b13      	cmp	r3, #19
  402af8:	d9f8      	bls.n	402aec <udd_ctrl_setup_received+0x188>
		if (0 == udd_g_ctrlreq.req.wLength) {
  402afa:	4b0f      	ldr	r3, [pc, #60]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  402afc:	88db      	ldrh	r3, [r3, #6]
  402afe:	2b00      	cmp	r3, #0
  402b00:	d102      	bne.n	402b08 <udd_ctrl_setup_received+0x1a4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  402b02:	4b12      	ldr	r3, [pc, #72]	; (402b4c <udd_ctrl_setup_received+0x1e8>)
  402b04:	4798      	blx	r3
			return;
  402b06:	e008      	b.n	402b1a <udd_ctrl_setup_received+0x1b6>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  402b08:	4b0d      	ldr	r3, [pc, #52]	; (402b40 <udd_ctrl_setup_received+0x1dc>)
  402b0a:	2200      	movs	r2, #0
  402b0c:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  402b0e:	4b0d      	ldr	r3, [pc, #52]	; (402b44 <udd_ctrl_setup_received+0x1e0>)
  402b10:	2200      	movs	r2, #0
  402b12:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  402b14:	4b02      	ldr	r3, [pc, #8]	; (402b20 <udd_ctrl_setup_received+0x1bc>)
  402b16:	2201      	movs	r2, #1
  402b18:	701a      	strb	r2, [r3, #0]
	}
}
  402b1a:	3730      	adds	r7, #48	; 0x30
  402b1c:	46bd      	mov	sp, r7
  402b1e:	bd80      	pop	{r7, pc}
  402b20:	20000c67 	.word	0x20000c67
  402b24:	004030a9 	.word	0x004030a9
  402b28:	00402939 	.word	0x00402939
  402b2c:	40034000 	.word	0x40034000
  402b30:	07ff0000 	.word	0x07ff0000
  402b34:	00402ff1 	.word	0x00402ff1
  402b38:	2000af50 	.word	0x2000af50
  402b3c:	00401b15 	.word	0x00401b15
  402b40:	20000c68 	.word	0x20000c68
  402b44:	20000c6a 	.word	0x20000c6a
  402b48:	00402b51 	.word	0x00402b51
  402b4c:	00403041 	.word	0x00403041

00402b50 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
  402b50:	b580      	push	{r7, lr}
  402b52:	b08e      	sub	sp, #56	; 0x38
  402b54:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  402b56:	4b7b      	ldr	r3, [pc, #492]	; (402d44 <udd_ctrl_in_sent+0x1f4>)
  402b58:	781b      	ldrb	r3, [r3, #0]
  402b5a:	2b03      	cmp	r3, #3
  402b5c:	d11c      	bne.n	402b98 <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  402b5e:	4b7a      	ldr	r3, [pc, #488]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b62:	62bb      	str	r3, [r7, #40]	; 0x28
  402b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402b66:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  402b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402b6e:	f023 0301 	bic.w	r3, r3, #1
  402b72:	62bb      	str	r3, [r7, #40]	; 0x28
  402b74:	4b74      	ldr	r3, [pc, #464]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402b78:	631a      	str	r2, [r3, #48]	; 0x30
  402b7a:	2300      	movs	r3, #0
  402b7c:	627b      	str	r3, [r7, #36]	; 0x24
  402b7e:	e003      	b.n	402b88 <udd_ctrl_in_sent+0x38>
  402b80:	bf00      	nop
  402b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b84:	3301      	adds	r3, #1
  402b86:	627b      	str	r3, [r7, #36]	; 0x24
  402b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b8a:	2b13      	cmp	r3, #19
  402b8c:	d9f8      	bls.n	402b80 <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  402b8e:	4b6f      	ldr	r3, [pc, #444]	; (402d4c <udd_ctrl_in_sent+0x1fc>)
  402b90:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  402b92:	4b6f      	ldr	r3, [pc, #444]	; (402d50 <udd_ctrl_in_sent+0x200>)
  402b94:	4798      	blx	r3
		return;
  402b96:	e0d1      	b.n	402d3c <udd_ctrl_in_sent+0x1ec>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  402b98:	4b6e      	ldr	r3, [pc, #440]	; (402d54 <udd_ctrl_in_sent+0x204>)
  402b9a:	899a      	ldrh	r2, [r3, #12]
  402b9c:	4b6e      	ldr	r3, [pc, #440]	; (402d58 <udd_ctrl_in_sent+0x208>)
  402b9e:	881b      	ldrh	r3, [r3, #0]
  402ba0:	1ad3      	subs	r3, r2, r3
  402ba2:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (0 == nb_remain) {
  402ba4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402ba6:	2b00      	cmp	r3, #0
  402ba8:	d13f      	bne.n	402c2a <udd_ctrl_in_sent+0xda>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  402baa:	4b6c      	ldr	r3, [pc, #432]	; (402d5c <udd_ctrl_in_sent+0x20c>)
  402bac:	881a      	ldrh	r2, [r3, #0]
  402bae:	4b6a      	ldr	r3, [pc, #424]	; (402d58 <udd_ctrl_in_sent+0x208>)
  402bb0:	881b      	ldrh	r3, [r3, #0]
  402bb2:	4413      	add	r3, r2
  402bb4:	b29a      	uxth	r2, r3
  402bb6:	4b69      	ldr	r3, [pc, #420]	; (402d5c <udd_ctrl_in_sent+0x20c>)
  402bb8:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  402bba:	4b66      	ldr	r3, [pc, #408]	; (402d54 <udd_ctrl_in_sent+0x204>)
  402bbc:	88da      	ldrh	r2, [r3, #6]
  402bbe:	4b67      	ldr	r3, [pc, #412]	; (402d5c <udd_ctrl_in_sent+0x20c>)
  402bc0:	881b      	ldrh	r3, [r3, #0]
  402bc2:	429a      	cmp	r2, r3
  402bc4:	d003      	beq.n	402bce <udd_ctrl_in_sent+0x7e>
				|| b_shortpacket) {
  402bc6:	4b66      	ldr	r3, [pc, #408]	; (402d60 <udd_ctrl_in_sent+0x210>)
  402bc8:	781b      	ldrb	r3, [r3, #0]
  402bca:	2b00      	cmp	r3, #0
  402bcc:	d01a      	beq.n	402c04 <udd_ctrl_in_sent+0xb4>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
  402bce:	4b65      	ldr	r3, [pc, #404]	; (402d64 <udd_ctrl_in_sent+0x214>)
  402bd0:	4798      	blx	r3
			udd_ack_in_sent(0);
  402bd2:	4b5d      	ldr	r3, [pc, #372]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402bd6:	623b      	str	r3, [r7, #32]
  402bd8:	6a3b      	ldr	r3, [r7, #32]
  402bda:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402bde:	623b      	str	r3, [r7, #32]
  402be0:	6a3b      	ldr	r3, [r7, #32]
  402be2:	f023 0301 	bic.w	r3, r3, #1
  402be6:	623b      	str	r3, [r7, #32]
  402be8:	4b57      	ldr	r3, [pc, #348]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402bea:	6a3a      	ldr	r2, [r7, #32]
  402bec:	631a      	str	r2, [r3, #48]	; 0x30
  402bee:	2300      	movs	r3, #0
  402bf0:	61fb      	str	r3, [r7, #28]
  402bf2:	e003      	b.n	402bfc <udd_ctrl_in_sent+0xac>
  402bf4:	bf00      	nop
  402bf6:	69fb      	ldr	r3, [r7, #28]
  402bf8:	3301      	adds	r3, #1
  402bfa:	61fb      	str	r3, [r7, #28]
  402bfc:	69fb      	ldr	r3, [r7, #28]
  402bfe:	2b13      	cmp	r3, #19
  402c00:	d9f8      	bls.n	402bf4 <udd_ctrl_in_sent+0xa4>
			return;
  402c02:	e09b      	b.n	402d3c <udd_ctrl_in_sent+0x1ec>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  402c04:	4b53      	ldr	r3, [pc, #332]	; (402d54 <udd_ctrl_in_sent+0x204>)
  402c06:	695b      	ldr	r3, [r3, #20]
  402c08:	2b00      	cmp	r3, #0
  402c0a:	d00e      	beq.n	402c2a <udd_ctrl_in_sent+0xda>
				|| (!udd_g_ctrlreq.over_under_run())) {
  402c0c:	4b51      	ldr	r3, [pc, #324]	; (402d54 <udd_ctrl_in_sent+0x204>)
  402c0e:	695b      	ldr	r3, [r3, #20]
  402c10:	4798      	blx	r3
  402c12:	4603      	mov	r3, r0
  402c14:	f083 0301 	eor.w	r3, r3, #1
  402c18:	b2db      	uxtb	r3, r3
  402c1a:	2b00      	cmp	r3, #0
  402c1c:	d105      	bne.n	402c2a <udd_ctrl_in_sent+0xda>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  402c1e:	4b4e      	ldr	r3, [pc, #312]	; (402d58 <udd_ctrl_in_sent+0x208>)
  402c20:	2200      	movs	r2, #0
  402c22:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  402c24:	4b4b      	ldr	r3, [pc, #300]	; (402d54 <udd_ctrl_in_sent+0x204>)
  402c26:	899b      	ldrh	r3, [r3, #12]
  402c28:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  402c2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402c2c:	2b3f      	cmp	r3, #63	; 0x3f
  402c2e:	d905      	bls.n	402c3c <udd_ctrl_in_sent+0xec>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  402c30:	2340      	movs	r3, #64	; 0x40
  402c32:	86fb      	strh	r3, [r7, #54]	; 0x36
		b_shortpacket = false;
  402c34:	4b4a      	ldr	r3, [pc, #296]	; (402d60 <udd_ctrl_in_sent+0x210>)
  402c36:	2200      	movs	r2, #0
  402c38:	701a      	strb	r2, [r3, #0]
  402c3a:	e002      	b.n	402c42 <udd_ctrl_in_sent+0xf2>
	} else {
		b_shortpacket = true;
  402c3c:	4b48      	ldr	r3, [pc, #288]	; (402d60 <udd_ctrl_in_sent+0x210>)
  402c3e:	2201      	movs	r2, #1
  402c40:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  402c42:	4b44      	ldr	r3, [pc, #272]	; (402d54 <udd_ctrl_in_sent+0x204>)
  402c44:	689a      	ldr	r2, [r3, #8]
  402c46:	4b44      	ldr	r3, [pc, #272]	; (402d58 <udd_ctrl_in_sent+0x208>)
  402c48:	881b      	ldrh	r3, [r3, #0]
  402c4a:	4413      	add	r3, r2
  402c4c:	633b      	str	r3, [r7, #48]	; 0x30
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
  402c4e:	4b46      	ldr	r3, [pc, #280]	; (402d68 <udd_ctrl_in_sent+0x218>)
  402c50:	4798      	blx	r3
  402c52:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (Is_udd_bank0_received(0)) {
  402c54:	4b3c      	ldr	r3, [pc, #240]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c58:	f003 0302 	and.w	r3, r3, #2
  402c5c:	2b00      	cmp	r3, #0
  402c5e:	d01e      	beq.n	402c9e <udd_ctrl_in_sent+0x14e>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
  402c60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402c62:	4b42      	ldr	r3, [pc, #264]	; (402d6c <udd_ctrl_in_sent+0x21c>)
  402c64:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  402c66:	4b37      	ldr	r3, [pc, #220]	; (402d44 <udd_ctrl_in_sent+0x1f4>)
  402c68:	2204      	movs	r2, #4
  402c6a:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  402c6c:	4b36      	ldr	r3, [pc, #216]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c70:	61bb      	str	r3, [r7, #24]
  402c72:	69bb      	ldr	r3, [r7, #24]
  402c74:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c78:	61bb      	str	r3, [r7, #24]
  402c7a:	69bb      	ldr	r3, [r7, #24]
  402c7c:	f023 0301 	bic.w	r3, r3, #1
  402c80:	61bb      	str	r3, [r7, #24]
  402c82:	4b31      	ldr	r3, [pc, #196]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402c84:	69ba      	ldr	r2, [r7, #24]
  402c86:	631a      	str	r2, [r3, #48]	; 0x30
  402c88:	2300      	movs	r3, #0
  402c8a:	617b      	str	r3, [r7, #20]
  402c8c:	e003      	b.n	402c96 <udd_ctrl_in_sent+0x146>
  402c8e:	bf00      	nop
  402c90:	697b      	ldr	r3, [r7, #20]
  402c92:	3301      	adds	r3, #1
  402c94:	617b      	str	r3, [r7, #20]
  402c96:	697b      	ldr	r3, [r7, #20]
  402c98:	2b13      	cmp	r3, #19
  402c9a:	d9f8      	bls.n	402c8e <udd_ctrl_in_sent+0x13e>
		return; // Exit of IN DATA phase
  402c9c:	e04e      	b.n	402d3c <udd_ctrl_in_sent+0x1ec>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  402c9e:	2300      	movs	r3, #0
  402ca0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  402ca4:	e00a      	b.n	402cbc <udd_ctrl_in_sent+0x16c>
		udd_endpoint_fifo_write(0, *ptr_src++);
  402ca6:	4a28      	ldr	r2, [pc, #160]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402caa:	1c59      	adds	r1, r3, #1
  402cac:	6339      	str	r1, [r7, #48]	; 0x30
  402cae:	781b      	ldrb	r3, [r3, #0]
  402cb0:	6513      	str	r3, [r2, #80]	; 0x50
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  402cb2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  402cb6:	3301      	adds	r3, #1
  402cb8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  402cbc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  402cc0:	b29b      	uxth	r3, r3
  402cc2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
  402cc4:	429a      	cmp	r2, r3
  402cc6:	d8ee      	bhi.n	402ca6 <udd_ctrl_in_sent+0x156>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  402cc8:	4b23      	ldr	r3, [pc, #140]	; (402d58 <udd_ctrl_in_sent+0x208>)
  402cca:	881a      	ldrh	r2, [r3, #0]
  402ccc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402cce:	4413      	add	r3, r2
  402cd0:	b29a      	uxth	r2, r3
  402cd2:	4b21      	ldr	r3, [pc, #132]	; (402d58 <udd_ctrl_in_sent+0x208>)
  402cd4:	801a      	strh	r2, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  402cd6:	4b1c      	ldr	r3, [pc, #112]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402cda:	613b      	str	r3, [r7, #16]
  402cdc:	693b      	ldr	r3, [r7, #16]
  402cde:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402ce2:	613b      	str	r3, [r7, #16]
  402ce4:	693b      	ldr	r3, [r7, #16]
  402ce6:	f043 0310 	orr.w	r3, r3, #16
  402cea:	613b      	str	r3, [r7, #16]
  402cec:	4b16      	ldr	r3, [pc, #88]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402cee:	693a      	ldr	r2, [r7, #16]
  402cf0:	631a      	str	r2, [r3, #48]	; 0x30
  402cf2:	2300      	movs	r3, #0
  402cf4:	60fb      	str	r3, [r7, #12]
  402cf6:	e003      	b.n	402d00 <udd_ctrl_in_sent+0x1b0>
  402cf8:	bf00      	nop
  402cfa:	68fb      	ldr	r3, [r7, #12]
  402cfc:	3301      	adds	r3, #1
  402cfe:	60fb      	str	r3, [r7, #12]
  402d00:	68fb      	ldr	r3, [r7, #12]
  402d02:	2b13      	cmp	r3, #19
  402d04:	d9f8      	bls.n	402cf8 <udd_ctrl_in_sent+0x1a8>
	udd_ack_in_sent(0);
  402d06:	4b10      	ldr	r3, [pc, #64]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d0a:	60bb      	str	r3, [r7, #8]
  402d0c:	68bb      	ldr	r3, [r7, #8]
  402d0e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402d12:	60bb      	str	r3, [r7, #8]
  402d14:	68bb      	ldr	r3, [r7, #8]
  402d16:	f023 0301 	bic.w	r3, r3, #1
  402d1a:	60bb      	str	r3, [r7, #8]
  402d1c:	4b0a      	ldr	r3, [pc, #40]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402d1e:	68ba      	ldr	r2, [r7, #8]
  402d20:	631a      	str	r2, [r3, #48]	; 0x30
  402d22:	2300      	movs	r3, #0
  402d24:	607b      	str	r3, [r7, #4]
  402d26:	e003      	b.n	402d30 <udd_ctrl_in_sent+0x1e0>
  402d28:	bf00      	nop
  402d2a:	687b      	ldr	r3, [r7, #4]
  402d2c:	3301      	adds	r3, #1
  402d2e:	607b      	str	r3, [r7, #4]
  402d30:	687b      	ldr	r3, [r7, #4]
  402d32:	2b13      	cmp	r3, #19
  402d34:	d9f8      	bls.n	402d28 <udd_ctrl_in_sent+0x1d8>

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
  402d36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402d38:	4b0c      	ldr	r3, [pc, #48]	; (402d6c <udd_ctrl_in_sent+0x21c>)
  402d3a:	4798      	blx	r3
}
  402d3c:	3738      	adds	r7, #56	; 0x38
  402d3e:	46bd      	mov	sp, r7
  402d40:	bd80      	pop	{r7, pc}
  402d42:	bf00      	nop
  402d44:	20000c67 	.word	0x20000c67
  402d48:	40034000 	.word	0x40034000
  402d4c:	004030a9 	.word	0x004030a9
  402d50:	00402939 	.word	0x00402939
  402d54:	2000af50 	.word	0x2000af50
  402d58:	20000c6a 	.word	0x20000c6a
  402d5c:	20000c68 	.word	0x20000c68
  402d60:	20000ca8 	.word	0x20000ca8
  402d64:	00403091 	.word	0x00403091
  402d68:	00401c2d 	.word	0x00401c2d
  402d6c:	00401c85 	.word	0x00401c85

00402d70 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
  402d70:	b580      	push	{r7, lr}
  402d72:	b08e      	sub	sp, #56	; 0x38
  402d74:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  402d76:	4b8f      	ldr	r3, [pc, #572]	; (402fb4 <udd_ctrl_out_received+0x244>)
  402d78:	781b      	ldrb	r3, [r3, #0]
  402d7a:	2b01      	cmp	r3, #1
  402d7c:	d027      	beq.n	402dce <udd_ctrl_out_received+0x5e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  402d7e:	4b8d      	ldr	r3, [pc, #564]	; (402fb4 <udd_ctrl_out_received+0x244>)
  402d80:	781b      	ldrb	r3, [r3, #0]
  402d82:	2b02      	cmp	r3, #2
  402d84:	d003      	beq.n	402d8e <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  402d86:	4b8b      	ldr	r3, [pc, #556]	; (402fb4 <udd_ctrl_out_received+0x244>)
  402d88:	781b      	ldrb	r3, [r3, #0]
  402d8a:	2b04      	cmp	r3, #4
  402d8c:	d102      	bne.n	402d94 <udd_ctrl_out_received+0x24>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  402d8e:	4b8a      	ldr	r3, [pc, #552]	; (402fb8 <udd_ctrl_out_received+0x248>)
  402d90:	4798      	blx	r3
  402d92:	e001      	b.n	402d98 <udd_ctrl_out_received+0x28>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  402d94:	4b89      	ldr	r3, [pc, #548]	; (402fbc <udd_ctrl_out_received+0x24c>)
  402d96:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  402d98:	4b89      	ldr	r3, [pc, #548]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  402d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402da0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  402da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402da8:	f023 0302 	bic.w	r3, r3, #2
  402dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  402dae:	4b84      	ldr	r3, [pc, #528]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  402db2:	631a      	str	r2, [r3, #48]	; 0x30
  402db4:	2300      	movs	r3, #0
  402db6:	62bb      	str	r3, [r7, #40]	; 0x28
  402db8:	e003      	b.n	402dc2 <udd_ctrl_out_received+0x52>
  402dba:	bf00      	nop
  402dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402dbe:	3301      	adds	r3, #1
  402dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  402dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402dc4:	2b13      	cmp	r3, #19
  402dc6:	d9f8      	bls.n	402dba <udd_ctrl_out_received+0x4a>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  402dc8:	4b7e      	ldr	r3, [pc, #504]	; (402fc4 <udd_ctrl_out_received+0x254>)
  402dca:	4798      	blx	r3
		return;
  402dcc:	e10d      	b.n	402fea <udd_ctrl_out_received+0x27a>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  402dce:	4b7c      	ldr	r3, [pc, #496]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402dd2:	4b7d      	ldr	r3, [pc, #500]	; (402fc8 <udd_ctrl_out_received+0x258>)
  402dd4:	4013      	ands	r3, r2
  402dd6:	0c1b      	lsrs	r3, r3, #16
  402dd8:	86bb      	strh	r3, [r7, #52]	; 0x34
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  402dda:	4b7c      	ldr	r3, [pc, #496]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402ddc:	899b      	ldrh	r3, [r3, #12]
  402dde:	461a      	mov	r2, r3
  402de0:	4b7b      	ldr	r3, [pc, #492]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402de2:	881b      	ldrh	r3, [r3, #0]
  402de4:	4619      	mov	r1, r3
  402de6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  402de8:	440b      	add	r3, r1
  402dea:	429a      	cmp	r2, r3
  402dec:	da05      	bge.n	402dfa <udd_ctrl_out_received+0x8a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  402dee:	4b77      	ldr	r3, [pc, #476]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402df0:	899a      	ldrh	r2, [r3, #12]
  402df2:	4b77      	ldr	r3, [pc, #476]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402df4:	881b      	ldrh	r3, [r3, #0]
  402df6:	1ad3      	subs	r3, r2, r3
  402df8:	86bb      	strh	r3, [r7, #52]	; 0x34
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  402dfa:	4b74      	ldr	r3, [pc, #464]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402dfc:	689a      	ldr	r2, [r3, #8]
  402dfe:	4b74      	ldr	r3, [pc, #464]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402e00:	881b      	ldrh	r3, [r3, #0]
  402e02:	4413      	add	r3, r2
  402e04:	633b      	str	r3, [r7, #48]	; 0x30
	for (i = 0; i < nb_data; i++) {
  402e06:	2300      	movs	r3, #0
  402e08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  402e0c:	e00b      	b.n	402e26 <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  402e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402e10:	1c5a      	adds	r2, r3, #1
  402e12:	633a      	str	r2, [r7, #48]	; 0x30
  402e14:	4a6a      	ldr	r2, [pc, #424]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402e16:	6d12      	ldr	r2, [r2, #80]	; 0x50
  402e18:	b2d2      	uxtb	r2, r2
  402e1a:	701a      	strb	r2, [r3, #0]
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  402e1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  402e20:	3301      	adds	r3, #1
  402e22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  402e26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  402e2a:	b29b      	uxth	r3, r3
  402e2c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
  402e2e:	429a      	cmp	r2, r3
  402e30:	d8ed      	bhi.n	402e0e <udd_ctrl_out_received+0x9e>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  402e32:	4b67      	ldr	r3, [pc, #412]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402e34:	881a      	ldrh	r2, [r3, #0]
  402e36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  402e38:	4413      	add	r3, r2
  402e3a:	b29a      	uxth	r2, r3
  402e3c:	4b64      	ldr	r3, [pc, #400]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402e3e:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  402e40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  402e42:	2b40      	cmp	r3, #64	; 0x40
  402e44:	d10a      	bne.n	402e5c <udd_ctrl_out_received+0xec>
			|| (udd_g_ctrlreq.req.wLength <=
  402e46:	4b61      	ldr	r3, [pc, #388]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402e48:	88db      	ldrh	r3, [r3, #6]
  402e4a:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_nb_trans +
  402e4c:	4b61      	ldr	r3, [pc, #388]	; (402fd4 <udd_ctrl_out_received+0x264>)
  402e4e:	881b      	ldrh	r3, [r3, #0]
  402e50:	4619      	mov	r1, r3
  402e52:	4b5f      	ldr	r3, [pc, #380]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402e54:	881b      	ldrh	r3, [r3, #0]
  402e56:	440b      	add	r3, r1
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  402e58:	429a      	cmp	r2, r3
  402e5a:	dc46      	bgt.n	402eea <udd_ctrl_out_received+0x17a>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  402e5c:	4b5c      	ldr	r3, [pc, #368]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402e5e:	881a      	ldrh	r2, [r3, #0]
  402e60:	4b5a      	ldr	r3, [pc, #360]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402e62:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  402e64:	4b59      	ldr	r3, [pc, #356]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402e66:	695b      	ldr	r3, [r3, #20]
  402e68:	2b00      	cmp	r3, #0
  402e6a:	d023      	beq.n	402eb4 <udd_ctrl_out_received+0x144>
			if (!udd_g_ctrlreq.over_under_run()) {
  402e6c:	4b57      	ldr	r3, [pc, #348]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402e6e:	695b      	ldr	r3, [r3, #20]
  402e70:	4798      	blx	r3
  402e72:	4603      	mov	r3, r0
  402e74:	f083 0301 	eor.w	r3, r3, #1
  402e78:	b2db      	uxtb	r3, r3
  402e7a:	2b00      	cmp	r3, #0
  402e7c:	d01a      	beq.n	402eb4 <udd_ctrl_out_received+0x144>
				// Stall ZLP
				udd_ctrl_stall_data();
  402e7e:	4b4f      	ldr	r3, [pc, #316]	; (402fbc <udd_ctrl_out_received+0x24c>)
  402e80:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  402e82:	4b4f      	ldr	r3, [pc, #316]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e86:	627b      	str	r3, [r7, #36]	; 0x24
  402e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402e8a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402e8e:	627b      	str	r3, [r7, #36]	; 0x24
  402e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402e92:	f023 0302 	bic.w	r3, r3, #2
  402e96:	627b      	str	r3, [r7, #36]	; 0x24
  402e98:	4b49      	ldr	r3, [pc, #292]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  402e9c:	631a      	str	r2, [r3, #48]	; 0x30
  402e9e:	2300      	movs	r3, #0
  402ea0:	623b      	str	r3, [r7, #32]
  402ea2:	e003      	b.n	402eac <udd_ctrl_out_received+0x13c>
  402ea4:	bf00      	nop
  402ea6:	6a3b      	ldr	r3, [r7, #32]
  402ea8:	3301      	adds	r3, #1
  402eaa:	623b      	str	r3, [r7, #32]
  402eac:	6a3b      	ldr	r3, [r7, #32]
  402eae:	2b13      	cmp	r3, #19
  402eb0:	d9f8      	bls.n	402ea4 <udd_ctrl_out_received+0x134>
				return;
  402eb2:	e09a      	b.n	402fea <udd_ctrl_out_received+0x27a>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  402eb4:	4b42      	ldr	r3, [pc, #264]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402eb8:	61fb      	str	r3, [r7, #28]
  402eba:	69fb      	ldr	r3, [r7, #28]
  402ebc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402ec0:	61fb      	str	r3, [r7, #28]
  402ec2:	69fb      	ldr	r3, [r7, #28]
  402ec4:	f023 0302 	bic.w	r3, r3, #2
  402ec8:	61fb      	str	r3, [r7, #28]
  402eca:	4b3d      	ldr	r3, [pc, #244]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402ecc:	69fa      	ldr	r2, [r7, #28]
  402ece:	631a      	str	r2, [r3, #48]	; 0x30
  402ed0:	2300      	movs	r3, #0
  402ed2:	61bb      	str	r3, [r7, #24]
  402ed4:	e003      	b.n	402ede <udd_ctrl_out_received+0x16e>
  402ed6:	bf00      	nop
  402ed8:	69bb      	ldr	r3, [r7, #24]
  402eda:	3301      	adds	r3, #1
  402edc:	61bb      	str	r3, [r7, #24]
  402ede:	69bb      	ldr	r3, [r7, #24]
  402ee0:	2b13      	cmp	r3, #19
  402ee2:	d9f8      	bls.n	402ed6 <udd_ctrl_out_received+0x166>
		udd_ctrl_send_zlp_in();
  402ee4:	4b3c      	ldr	r3, [pc, #240]	; (402fd8 <udd_ctrl_out_received+0x268>)
  402ee6:	4798      	blx	r3
		return;
  402ee8:	e07f      	b.n	402fea <udd_ctrl_out_received+0x27a>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  402eea:	4b38      	ldr	r3, [pc, #224]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402eec:	899a      	ldrh	r2, [r3, #12]
  402eee:	4b38      	ldr	r3, [pc, #224]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402ef0:	881b      	ldrh	r3, [r3, #0]
  402ef2:	429a      	cmp	r2, r3
  402ef4:	d14d      	bne.n	402f92 <udd_ctrl_out_received+0x222>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  402ef6:	4b35      	ldr	r3, [pc, #212]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402ef8:	695b      	ldr	r3, [r3, #20]
  402efa:	2b00      	cmp	r3, #0
  402efc:	d11a      	bne.n	402f34 <udd_ctrl_out_received+0x1c4>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  402efe:	4b2f      	ldr	r3, [pc, #188]	; (402fbc <udd_ctrl_out_received+0x24c>)
  402f00:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  402f02:	4b2f      	ldr	r3, [pc, #188]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f06:	617b      	str	r3, [r7, #20]
  402f08:	697b      	ldr	r3, [r7, #20]
  402f0a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402f0e:	617b      	str	r3, [r7, #20]
  402f10:	697b      	ldr	r3, [r7, #20]
  402f12:	f023 0302 	bic.w	r3, r3, #2
  402f16:	617b      	str	r3, [r7, #20]
  402f18:	4b29      	ldr	r3, [pc, #164]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402f1a:	697a      	ldr	r2, [r7, #20]
  402f1c:	631a      	str	r2, [r3, #48]	; 0x30
  402f1e:	2300      	movs	r3, #0
  402f20:	613b      	str	r3, [r7, #16]
  402f22:	e003      	b.n	402f2c <udd_ctrl_out_received+0x1bc>
  402f24:	bf00      	nop
  402f26:	693b      	ldr	r3, [r7, #16]
  402f28:	3301      	adds	r3, #1
  402f2a:	613b      	str	r3, [r7, #16]
  402f2c:	693b      	ldr	r3, [r7, #16]
  402f2e:	2b13      	cmp	r3, #19
  402f30:	d9f8      	bls.n	402f24 <udd_ctrl_out_received+0x1b4>
			return;
  402f32:	e05a      	b.n	402fea <udd_ctrl_out_received+0x27a>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  402f34:	4b25      	ldr	r3, [pc, #148]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402f36:	695b      	ldr	r3, [r3, #20]
  402f38:	4798      	blx	r3
  402f3a:	4603      	mov	r3, r0
  402f3c:	f083 0301 	eor.w	r3, r3, #1
  402f40:	b2db      	uxtb	r3, r3
  402f42:	2b00      	cmp	r3, #0
  402f44:	d01a      	beq.n	402f7c <udd_ctrl_out_received+0x20c>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  402f46:	4b1d      	ldr	r3, [pc, #116]	; (402fbc <udd_ctrl_out_received+0x24c>)
  402f48:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  402f4a:	4b1d      	ldr	r3, [pc, #116]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f4e:	60fb      	str	r3, [r7, #12]
  402f50:	68fb      	ldr	r3, [r7, #12]
  402f52:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402f56:	60fb      	str	r3, [r7, #12]
  402f58:	68fb      	ldr	r3, [r7, #12]
  402f5a:	f023 0302 	bic.w	r3, r3, #2
  402f5e:	60fb      	str	r3, [r7, #12]
  402f60:	4b17      	ldr	r3, [pc, #92]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402f62:	68fa      	ldr	r2, [r7, #12]
  402f64:	631a      	str	r2, [r3, #48]	; 0x30
  402f66:	2300      	movs	r3, #0
  402f68:	60bb      	str	r3, [r7, #8]
  402f6a:	e003      	b.n	402f74 <udd_ctrl_out_received+0x204>
  402f6c:	bf00      	nop
  402f6e:	68bb      	ldr	r3, [r7, #8]
  402f70:	3301      	adds	r3, #1
  402f72:	60bb      	str	r3, [r7, #8]
  402f74:	68bb      	ldr	r3, [r7, #8]
  402f76:	2b13      	cmp	r3, #19
  402f78:	d9f8      	bls.n	402f6c <udd_ctrl_out_received+0x1fc>
			return;
  402f7a:	e036      	b.n	402fea <udd_ctrl_out_received+0x27a>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  402f7c:	4b15      	ldr	r3, [pc, #84]	; (402fd4 <udd_ctrl_out_received+0x264>)
  402f7e:	881a      	ldrh	r2, [r3, #0]
  402f80:	4b13      	ldr	r3, [pc, #76]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402f82:	881b      	ldrh	r3, [r3, #0]
  402f84:	4413      	add	r3, r2
  402f86:	b29a      	uxth	r2, r3
  402f88:	4b12      	ldr	r3, [pc, #72]	; (402fd4 <udd_ctrl_out_received+0x264>)
  402f8a:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  402f8c:	4b10      	ldr	r3, [pc, #64]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402f8e:	2200      	movs	r2, #0
  402f90:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  402f92:	4b0b      	ldr	r3, [pc, #44]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f96:	607b      	str	r3, [r7, #4]
  402f98:	687b      	ldr	r3, [r7, #4]
  402f9a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402f9e:	607b      	str	r3, [r7, #4]
  402fa0:	687b      	ldr	r3, [r7, #4]
  402fa2:	f023 0302 	bic.w	r3, r3, #2
  402fa6:	607b      	str	r3, [r7, #4]
  402fa8:	4b05      	ldr	r3, [pc, #20]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402faa:	687a      	ldr	r2, [r7, #4]
  402fac:	631a      	str	r2, [r3, #48]	; 0x30
  402fae:	2300      	movs	r3, #0
  402fb0:	603b      	str	r3, [r7, #0]
  402fb2:	e017      	b.n	402fe4 <udd_ctrl_out_received+0x274>
  402fb4:	20000c67 	.word	0x20000c67
  402fb8:	004030a9 	.word	0x004030a9
  402fbc:	00402ff1 	.word	0x00402ff1
  402fc0:	40034000 	.word	0x40034000
  402fc4:	00402939 	.word	0x00402939
  402fc8:	07ff0000 	.word	0x07ff0000
  402fcc:	2000af50 	.word	0x2000af50
  402fd0:	20000c6a 	.word	0x20000c6a
  402fd4:	20000c68 	.word	0x20000c68
  402fd8:	00403041 	.word	0x00403041
  402fdc:	bf00      	nop
  402fde:	683b      	ldr	r3, [r7, #0]
  402fe0:	3301      	adds	r3, #1
  402fe2:	603b      	str	r3, [r7, #0]
  402fe4:	683b      	ldr	r3, [r7, #0]
  402fe6:	2b13      	cmp	r3, #19
  402fe8:	d9f8      	bls.n	402fdc <udd_ctrl_out_received+0x26c>
}
  402fea:	3738      	adds	r7, #56	; 0x38
  402fec:	46bd      	mov	sp, r7
  402fee:	bd80      	pop	{r7, pc}

00402ff0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
  402ff0:	b480      	push	{r7}
  402ff2:	b083      	sub	sp, #12
  402ff4:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  402ff6:	4b10      	ldr	r3, [pc, #64]	; (403038 <udd_ctrl_stall_data+0x48>)
  402ff8:	2205      	movs	r2, #5
  402ffa:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  402ffc:	4b0f      	ldr	r3, [pc, #60]	; (40303c <udd_ctrl_stall_data+0x4c>)
  402ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403000:	607b      	str	r3, [r7, #4]
  403002:	687b      	ldr	r3, [r7, #4]
  403004:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403008:	607b      	str	r3, [r7, #4]
  40300a:	687b      	ldr	r3, [r7, #4]
  40300c:	f043 0320 	orr.w	r3, r3, #32
  403010:	607b      	str	r3, [r7, #4]
  403012:	4b0a      	ldr	r3, [pc, #40]	; (40303c <udd_ctrl_stall_data+0x4c>)
  403014:	687a      	ldr	r2, [r7, #4]
  403016:	631a      	str	r2, [r3, #48]	; 0x30
  403018:	2300      	movs	r3, #0
  40301a:	603b      	str	r3, [r7, #0]
  40301c:	e003      	b.n	403026 <udd_ctrl_stall_data+0x36>
  40301e:	bf00      	nop
  403020:	683b      	ldr	r3, [r7, #0]
  403022:	3301      	adds	r3, #1
  403024:	603b      	str	r3, [r7, #0]
  403026:	683b      	ldr	r3, [r7, #0]
  403028:	2b13      	cmp	r3, #19
  40302a:	d9f8      	bls.n	40301e <udd_ctrl_stall_data+0x2e>
}
  40302c:	370c      	adds	r7, #12
  40302e:	46bd      	mov	sp, r7
  403030:	f85d 7b04 	ldr.w	r7, [sp], #4
  403034:	4770      	bx	lr
  403036:	bf00      	nop
  403038:	20000c67 	.word	0x20000c67
  40303c:	40034000 	.word	0x40034000

00403040 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  403040:	b480      	push	{r7}
  403042:	b083      	sub	sp, #12
  403044:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  403046:	4b10      	ldr	r3, [pc, #64]	; (403088 <udd_ctrl_send_zlp_in+0x48>)
  403048:	2203      	movs	r2, #3
  40304a:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  40304c:	4b0f      	ldr	r3, [pc, #60]	; (40308c <udd_ctrl_send_zlp_in+0x4c>)
  40304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403050:	607b      	str	r3, [r7, #4]
  403052:	687b      	ldr	r3, [r7, #4]
  403054:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403058:	607b      	str	r3, [r7, #4]
  40305a:	687b      	ldr	r3, [r7, #4]
  40305c:	f043 0310 	orr.w	r3, r3, #16
  403060:	607b      	str	r3, [r7, #4]
  403062:	4b0a      	ldr	r3, [pc, #40]	; (40308c <udd_ctrl_send_zlp_in+0x4c>)
  403064:	687a      	ldr	r2, [r7, #4]
  403066:	631a      	str	r2, [r3, #48]	; 0x30
  403068:	2300      	movs	r3, #0
  40306a:	603b      	str	r3, [r7, #0]
  40306c:	e003      	b.n	403076 <udd_ctrl_send_zlp_in+0x36>
  40306e:	bf00      	nop
  403070:	683b      	ldr	r3, [r7, #0]
  403072:	3301      	adds	r3, #1
  403074:	603b      	str	r3, [r7, #0]
  403076:	683b      	ldr	r3, [r7, #0]
  403078:	2b13      	cmp	r3, #19
  40307a:	d9f8      	bls.n	40306e <udd_ctrl_send_zlp_in+0x2e>
}
  40307c:	370c      	adds	r7, #12
  40307e:	46bd      	mov	sp, r7
  403080:	f85d 7b04 	ldr.w	r7, [sp], #4
  403084:	4770      	bx	lr
  403086:	bf00      	nop
  403088:	20000c67 	.word	0x20000c67
  40308c:	40034000 	.word	0x40034000

00403090 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
  403090:	b480      	push	{r7}
  403092:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  403094:	4b03      	ldr	r3, [pc, #12]	; (4030a4 <udd_ctrl_send_zlp_out+0x14>)
  403096:	2204      	movs	r2, #4
  403098:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free
}
  40309a:	46bd      	mov	sp, r7
  40309c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030a0:	4770      	bx	lr
  4030a2:	bf00      	nop
  4030a4:	20000c67 	.word	0x20000c67

004030a8 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
  4030a8:	b580      	push	{r7, lr}
  4030aa:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  4030ac:	4b03      	ldr	r3, [pc, #12]	; (4030bc <udd_ctrl_endofrequest+0x14>)
  4030ae:	691b      	ldr	r3, [r3, #16]
  4030b0:	2b00      	cmp	r3, #0
  4030b2:	d002      	beq.n	4030ba <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
  4030b4:	4b01      	ldr	r3, [pc, #4]	; (4030bc <udd_ctrl_endofrequest+0x14>)
  4030b6:	691b      	ldr	r3, [r3, #16]
  4030b8:	4798      	blx	r3
	}
}
  4030ba:	bd80      	pop	{r7, pc}
  4030bc:	2000af50 	.word	0x2000af50

004030c0 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
  4030c0:	b580      	push	{r7, lr}
  4030c2:	b082      	sub	sp, #8
  4030c4:	af00      	add	r7, sp, #0
	if (!Is_udd_endpoint_interrupt(0))
  4030c6:	4b25      	ldr	r3, [pc, #148]	; (40315c <udd_ctrl_interrupt+0x9c>)
  4030c8:	69db      	ldr	r3, [r3, #28]
  4030ca:	f003 0301 	and.w	r3, r3, #1
  4030ce:	2b00      	cmp	r3, #0
  4030d0:	d101      	bne.n	4030d6 <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
  4030d2:	2300      	movs	r3, #0
  4030d4:	e03e      	b.n	403154 <udd_ctrl_interrupt+0x94>

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  4030d6:	4b21      	ldr	r3, [pc, #132]	; (40315c <udd_ctrl_interrupt+0x9c>)
  4030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4030da:	f003 0304 	and.w	r3, r3, #4
  4030de:	2b00      	cmp	r3, #0
  4030e0:	d003      	beq.n	4030ea <udd_ctrl_interrupt+0x2a>
		// SETUP packet received
		udd_ctrl_setup_received();
  4030e2:	4b1f      	ldr	r3, [pc, #124]	; (403160 <udd_ctrl_interrupt+0xa0>)
  4030e4:	4798      	blx	r3
		return true;
  4030e6:	2301      	movs	r3, #1
  4030e8:	e034      	b.n	403154 <udd_ctrl_interrupt+0x94>
	}
	if (Is_udd_in_sent(0)) {
  4030ea:	4b1c      	ldr	r3, [pc, #112]	; (40315c <udd_ctrl_interrupt+0x9c>)
  4030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4030ee:	f003 0301 	and.w	r3, r3, #1
  4030f2:	2b00      	cmp	r3, #0
  4030f4:	d003      	beq.n	4030fe <udd_ctrl_interrupt+0x3e>
		// IN packet sent
		udd_ctrl_in_sent();
  4030f6:	4b1b      	ldr	r3, [pc, #108]	; (403164 <udd_ctrl_interrupt+0xa4>)
  4030f8:	4798      	blx	r3
		return true;
  4030fa:	2301      	movs	r3, #1
  4030fc:	e02a      	b.n	403154 <udd_ctrl_interrupt+0x94>
	}
	if (Is_udd_bank0_received(0)) {
  4030fe:	4b17      	ldr	r3, [pc, #92]	; (40315c <udd_ctrl_interrupt+0x9c>)
  403100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403102:	f003 0302 	and.w	r3, r3, #2
  403106:	2b00      	cmp	r3, #0
  403108:	d003      	beq.n	403112 <udd_ctrl_interrupt+0x52>
		// OUT packet received
		udd_ctrl_out_received();
  40310a:	4b17      	ldr	r3, [pc, #92]	; (403168 <udd_ctrl_interrupt+0xa8>)
  40310c:	4798      	blx	r3
		return true;
  40310e:	2301      	movs	r3, #1
  403110:	e020      	b.n	403154 <udd_ctrl_interrupt+0x94>
	}
	if (Is_udd_stall(0)) {
  403112:	4b12      	ldr	r3, [pc, #72]	; (40315c <udd_ctrl_interrupt+0x9c>)
  403114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403116:	f003 0308 	and.w	r3, r3, #8
  40311a:	2b00      	cmp	r3, #0
  40311c:	d019      	beq.n	403152 <udd_ctrl_interrupt+0x92>
		// STALLed
		udd_ack_stall(0);
  40311e:	4b0f      	ldr	r3, [pc, #60]	; (40315c <udd_ctrl_interrupt+0x9c>)
  403120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403122:	607b      	str	r3, [r7, #4]
  403124:	687b      	ldr	r3, [r7, #4]
  403126:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40312a:	607b      	str	r3, [r7, #4]
  40312c:	687b      	ldr	r3, [r7, #4]
  40312e:	f023 0308 	bic.w	r3, r3, #8
  403132:	607b      	str	r3, [r7, #4]
  403134:	4b09      	ldr	r3, [pc, #36]	; (40315c <udd_ctrl_interrupt+0x9c>)
  403136:	687a      	ldr	r2, [r7, #4]
  403138:	631a      	str	r2, [r3, #48]	; 0x30
  40313a:	2300      	movs	r3, #0
  40313c:	603b      	str	r3, [r7, #0]
  40313e:	e003      	b.n	403148 <udd_ctrl_interrupt+0x88>
  403140:	bf00      	nop
  403142:	683b      	ldr	r3, [r7, #0]
  403144:	3301      	adds	r3, #1
  403146:	603b      	str	r3, [r7, #0]
  403148:	683b      	ldr	r3, [r7, #0]
  40314a:	2b13      	cmp	r3, #19
  40314c:	d9f8      	bls.n	403140 <udd_ctrl_interrupt+0x80>
		return true;
  40314e:	2301      	movs	r3, #1
  403150:	e000      	b.n	403154 <udd_ctrl_interrupt+0x94>
	}
	return false;
  403152:	2300      	movs	r3, #0
}
  403154:	4618      	mov	r0, r3
  403156:	3708      	adds	r7, #8
  403158:	46bd      	mov	sp, r7
  40315a:	bd80      	pop	{r7, pc}
  40315c:	40034000 	.word	0x40034000
  403160:	00402965 	.word	0x00402965
  403164:	00402b51 	.word	0x00402b51
  403168:	00402d71 	.word	0x00402d71

0040316c <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
  40316c:	b480      	push	{r7}
  40316e:	b083      	sub	sp, #12
  403170:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  403172:	2300      	movs	r3, #0
  403174:	71fb      	strb	r3, [r7, #7]
  403176:	e043      	b.n	403200 <udd_ep_job_table_reset+0x94>
		udd_ep_job[i].bank = 0;
  403178:	79fa      	ldrb	r2, [r7, #7]
  40317a:	4925      	ldr	r1, [pc, #148]	; (403210 <udd_ep_job_table_reset+0xa4>)
  40317c:	4613      	mov	r3, r2
  40317e:	009b      	lsls	r3, r3, #2
  403180:	4413      	add	r3, r2
  403182:	009b      	lsls	r3, r3, #2
  403184:	440b      	add	r3, r1
  403186:	f103 0210 	add.w	r2, r3, #16
  40318a:	7853      	ldrb	r3, [r2, #1]
  40318c:	f36f 0383 	bfc	r3, #2, #2
  403190:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].busy = false;
  403192:	79fa      	ldrb	r2, [r7, #7]
  403194:	491e      	ldr	r1, [pc, #120]	; (403210 <udd_ep_job_table_reset+0xa4>)
  403196:	4613      	mov	r3, r2
  403198:	009b      	lsls	r3, r3, #2
  40319a:	4413      	add	r3, r2
  40319c:	009b      	lsls	r3, r3, #2
  40319e:	440b      	add	r3, r1
  4031a0:	f103 0210 	add.w	r2, r3, #16
  4031a4:	7853      	ldrb	r3, [r2, #1]
  4031a6:	f36f 1304 	bfc	r3, #4, #1
  4031aa:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_stall_requested = false;
  4031ac:	79fa      	ldrb	r2, [r7, #7]
  4031ae:	4918      	ldr	r1, [pc, #96]	; (403210 <udd_ep_job_table_reset+0xa4>)
  4031b0:	4613      	mov	r3, r2
  4031b2:	009b      	lsls	r3, r3, #2
  4031b4:	4413      	add	r3, r2
  4031b6:	009b      	lsls	r3, r3, #2
  4031b8:	440b      	add	r3, r1
  4031ba:	f103 0210 	add.w	r2, r3, #16
  4031be:	7853      	ldrb	r3, [r2, #1]
  4031c0:	f36f 1345 	bfc	r3, #5, #1
  4031c4:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_shortpacket = false;
  4031c6:	79fa      	ldrb	r2, [r7, #7]
  4031c8:	4911      	ldr	r1, [pc, #68]	; (403210 <udd_ep_job_table_reset+0xa4>)
  4031ca:	4613      	mov	r3, r2
  4031cc:	009b      	lsls	r3, r3, #2
  4031ce:	4413      	add	r3, r2
  4031d0:	009b      	lsls	r3, r3, #2
  4031d2:	440b      	add	r3, r1
  4031d4:	f103 0210 	add.w	r2, r3, #16
  4031d8:	7853      	ldrb	r3, [r2, #1]
  4031da:	f36f 1386 	bfc	r3, #6, #1
  4031de:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_buf_end = false;
  4031e0:	79fa      	ldrb	r2, [r7, #7]
  4031e2:	490b      	ldr	r1, [pc, #44]	; (403210 <udd_ep_job_table_reset+0xa4>)
  4031e4:	4613      	mov	r3, r2
  4031e6:	009b      	lsls	r3, r3, #2
  4031e8:	4413      	add	r3, r2
  4031ea:	009b      	lsls	r3, r3, #2
  4031ec:	440b      	add	r3, r1
  4031ee:	f103 0210 	add.w	r2, r3, #16
  4031f2:	7853      	ldrb	r3, [r2, #1]
  4031f4:	f36f 13c7 	bfc	r3, #7, #1
  4031f8:	7053      	strb	r3, [r2, #1]
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4031fa:	79fb      	ldrb	r3, [r7, #7]
  4031fc:	3301      	adds	r3, #1
  4031fe:	71fb      	strb	r3, [r7, #7]
  403200:	79fb      	ldrb	r3, [r7, #7]
  403202:	2b02      	cmp	r3, #2
  403204:	d9b8      	bls.n	403178 <udd_ep_job_table_reset+0xc>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].b_stall_requested = false;
		udd_ep_job[i].b_shortpacket = false;
		udd_ep_job[i].b_buf_end = false;
	}
}
  403206:	370c      	adds	r7, #12
  403208:	46bd      	mov	sp, r7
  40320a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40320e:	4770      	bx	lr
  403210:	20000c6c 	.word	0x20000c6c

00403214 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
  403214:	b580      	push	{r7, lr}
  403216:	b082      	sub	sp, #8
  403218:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40321a:	2300      	movs	r3, #0
  40321c:	71fb      	strb	r3, [r7, #7]
  40321e:	e011      	b.n	403244 <udd_ep_job_table_kill+0x30>
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  403220:	79fa      	ldrb	r2, [r7, #7]
  403222:	4613      	mov	r3, r2
  403224:	009b      	lsls	r3, r3, #2
  403226:	4413      	add	r3, r2
  403228:	009b      	lsls	r3, r3, #2
  40322a:	4a09      	ldr	r2, [pc, #36]	; (403250 <udd_ep_job_table_kill+0x3c>)
  40322c:	441a      	add	r2, r3
  40322e:	79fb      	ldrb	r3, [r7, #7]
  403230:	3301      	adds	r3, #1
  403232:	b2db      	uxtb	r3, r3
  403234:	4610      	mov	r0, r2
  403236:	2101      	movs	r1, #1
  403238:	461a      	mov	r2, r3
  40323a:	4b06      	ldr	r3, [pc, #24]	; (403254 <udd_ep_job_table_kill+0x40>)
  40323c:	4798      	blx	r3
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40323e:	79fb      	ldrb	r3, [r7, #7]
  403240:	3301      	adds	r3, #1
  403242:	71fb      	strb	r3, [r7, #7]
  403244:	79fb      	ldrb	r3, [r7, #7]
  403246:	2b02      	cmp	r3, #2
  403248:	d9ea      	bls.n	403220 <udd_ep_job_table_kill+0xc>
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
	}
}
  40324a:	3708      	adds	r7, #8
  40324c:	46bd      	mov	sp, r7
  40324e:	bd80      	pop	{r7, pc}
  403250:	20000c6c 	.word	0x20000c6c
  403254:	00403295 	.word	0x00403295

00403258 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
  403258:	b580      	push	{r7, lr}
  40325a:	b082      	sub	sp, #8
  40325c:	af00      	add	r7, sp, #0
  40325e:	4603      	mov	r3, r0
  403260:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
  403262:	79fb      	ldrb	r3, [r7, #7]
  403264:	f003 030f 	and.w	r3, r3, #15
  403268:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  40326a:	79fb      	ldrb	r3, [r7, #7]
  40326c:	1e5a      	subs	r2, r3, #1
  40326e:	4613      	mov	r3, r2
  403270:	009b      	lsls	r3, r3, #2
  403272:	4413      	add	r3, r2
  403274:	009b      	lsls	r3, r3, #2
  403276:	4a05      	ldr	r2, [pc, #20]	; (40328c <udd_ep_abort_job+0x34>)
  403278:	441a      	add	r2, r3
  40327a:	79fb      	ldrb	r3, [r7, #7]
  40327c:	4610      	mov	r0, r2
  40327e:	2101      	movs	r1, #1
  403280:	461a      	mov	r2, r3
  403282:	4b03      	ldr	r3, [pc, #12]	; (403290 <udd_ep_abort_job+0x38>)
  403284:	4798      	blx	r3
}
  403286:	3708      	adds	r7, #8
  403288:	46bd      	mov	sp, r7
  40328a:	bd80      	pop	{r7, pc}
  40328c:	20000c6c 	.word	0x20000c6c
  403290:	00403295 	.word	0x00403295

00403294 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  403294:	b580      	push	{r7, lr}
  403296:	b084      	sub	sp, #16
  403298:	af00      	add	r7, sp, #0
  40329a:	60f8      	str	r0, [r7, #12]
  40329c:	60b9      	str	r1, [r7, #8]
  40329e:	4613      	mov	r3, r2
  4032a0:	71fb      	strb	r3, [r7, #7]
	if (ptr_job->busy == false) {
  4032a2:	68fb      	ldr	r3, [r7, #12]
  4032a4:	7c5b      	ldrb	r3, [r3, #17]
  4032a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
  4032aa:	b2db      	uxtb	r3, r3
  4032ac:	2b00      	cmp	r3, #0
  4032ae:	d100      	bne.n	4032b2 <udd_ep_finish_job+0x1e>
		return; // No on-going job
  4032b0:	e023      	b.n	4032fa <udd_ep_finish_job+0x66>
	}
	ptr_job->busy = false;
  4032b2:	68fa      	ldr	r2, [r7, #12]
  4032b4:	7c53      	ldrb	r3, [r2, #17]
  4032b6:	f36f 1304 	bfc	r3, #4, #1
  4032ba:	7453      	strb	r3, [r2, #17]
	if (NULL == ptr_job->call_trans) {
  4032bc:	68fb      	ldr	r3, [r7, #12]
  4032be:	681b      	ldr	r3, [r3, #0]
  4032c0:	2b00      	cmp	r3, #0
  4032c2:	d100      	bne.n	4032c6 <udd_ep_finish_job+0x32>
		return; // No callback linked to job
  4032c4:	e019      	b.n	4032fa <udd_ep_finish_job+0x66>
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  4032c6:	4b0e      	ldr	r3, [pc, #56]	; (403300 <udd_ep_finish_job+0x6c>)
  4032c8:	79fa      	ldrb	r2, [r7, #7]
  4032ca:	320c      	adds	r2, #12
  4032cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  4032d4:	2b00      	cmp	r3, #0
  4032d6:	d003      	beq.n	4032e0 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
  4032d8:	79fb      	ldrb	r3, [r7, #7]
  4032da:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4032de:	71fb      	strb	r3, [r7, #7]
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  4032e0:	68fb      	ldr	r3, [r7, #12]
  4032e2:	681b      	ldr	r3, [r3, #0]
  4032e4:	68ba      	ldr	r2, [r7, #8]
  4032e6:	2a01      	cmp	r2, #1
  4032e8:	bf14      	ite	ne
  4032ea:	2200      	movne	r2, #0
  4032ec:	2201      	moveq	r2, #1
  4032ee:	b2d2      	uxtb	r2, r2
  4032f0:	4610      	mov	r0, r2
  4032f2:	68fa      	ldr	r2, [r7, #12]
  4032f4:	6891      	ldr	r1, [r2, #8]
  4032f6:	79fa      	ldrb	r2, [r7, #7]
  4032f8:	4798      	blx	r3
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
  4032fa:	3710      	adds	r7, #16
  4032fc:	46bd      	mov	sp, r7
  4032fe:	bd80      	pop	{r7, pc}
  403300:	40034000 	.word	0x40034000

00403304 <udd_ep_ack_out_received>:


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  403304:	b480      	push	{r7}
  403306:	b089      	sub	sp, #36	; 0x24
  403308:	af00      	add	r7, sp, #0
  40330a:	4603      	mov	r3, r0
  40330c:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40330e:	79fb      	ldrb	r3, [r7, #7]
  403310:	1e5a      	subs	r2, r3, #1
  403312:	4613      	mov	r3, r2
  403314:	009b      	lsls	r3, r3, #2
  403316:	4413      	add	r3, r2
  403318:	009b      	lsls	r3, r3, #2
  40331a:	4a3d      	ldr	r2, [pc, #244]	; (403410 <udd_ep_ack_out_received+0x10c>)
  40331c:	4413      	add	r3, r2
  40331e:	61fb      	str	r3, [r7, #28]
	if (Is_udd_all_banks_received(ep)) {
  403320:	4b3c      	ldr	r3, [pc, #240]	; (403414 <udd_ep_ack_out_received+0x110>)
  403322:	79fa      	ldrb	r2, [r7, #7]
  403324:	320c      	adds	r2, #12
  403326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40332a:	f003 0342 	and.w	r3, r3, #66	; 0x42
  40332e:	2b42      	cmp	r3, #66	; 0x42
  403330:	d014      	beq.n	40335c <udd_ep_ack_out_received+0x58>
		// The only way is to use ptr_job->bank
	} else if (Is_udd_bank0_received(ep)) {
  403332:	4b38      	ldr	r3, [pc, #224]	; (403414 <udd_ep_ack_out_received+0x110>)
  403334:	79fa      	ldrb	r2, [r7, #7]
  403336:	320c      	adds	r2, #12
  403338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40333c:	f003 0302 	and.w	r3, r3, #2
  403340:	2b00      	cmp	r3, #0
  403342:	d005      	beq.n	403350 <udd_ep_ack_out_received+0x4c>
		// Must be bank0
		ptr_job->bank = 0;
  403344:	69fa      	ldr	r2, [r7, #28]
  403346:	7c53      	ldrb	r3, [r2, #17]
  403348:	f36f 0383 	bfc	r3, #2, #2
  40334c:	7453      	strb	r3, [r2, #17]
  40334e:	e005      	b.n	40335c <udd_ep_ack_out_received+0x58>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  403350:	69fa      	ldr	r2, [r7, #28]
  403352:	7c53      	ldrb	r3, [r2, #17]
  403354:	2101      	movs	r1, #1
  403356:	f361 0383 	bfi	r3, r1, #2, #2
  40335a:	7453      	strb	r3, [r2, #17]
	}
	if (ptr_job->bank == 0) {
  40335c:	69fb      	ldr	r3, [r7, #28]
  40335e:	7c5b      	ldrb	r3, [r3, #17]
  403360:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403364:	b2db      	uxtb	r3, r3
  403366:	2b00      	cmp	r3, #0
  403368:	d12a      	bne.n	4033c0 <udd_ep_ack_out_received+0xbc>
		udd_ack_bank0_received(ep);
  40336a:	4b2a      	ldr	r3, [pc, #168]	; (403414 <udd_ep_ack_out_received+0x110>)
  40336c:	79fa      	ldrb	r2, [r7, #7]
  40336e:	320c      	adds	r2, #12
  403370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403374:	61bb      	str	r3, [r7, #24]
  403376:	69bb      	ldr	r3, [r7, #24]
  403378:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40337c:	61bb      	str	r3, [r7, #24]
  40337e:	69bb      	ldr	r3, [r7, #24]
  403380:	f023 0302 	bic.w	r3, r3, #2
  403384:	61bb      	str	r3, [r7, #24]
  403386:	4b23      	ldr	r3, [pc, #140]	; (403414 <udd_ep_ack_out_received+0x110>)
  403388:	79fa      	ldrb	r2, [r7, #7]
  40338a:	69b9      	ldr	r1, [r7, #24]
  40338c:	320c      	adds	r2, #12
  40338e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403392:	2300      	movs	r3, #0
  403394:	617b      	str	r3, [r7, #20]
  403396:	e003      	b.n	4033a0 <udd_ep_ack_out_received+0x9c>
  403398:	bf00      	nop
  40339a:	697b      	ldr	r3, [r7, #20]
  40339c:	3301      	adds	r3, #1
  40339e:	617b      	str	r3, [r7, #20]
  4033a0:	697b      	ldr	r3, [r7, #20]
  4033a2:	2b13      	cmp	r3, #19
  4033a4:	d9f8      	bls.n	403398 <udd_ep_ack_out_received+0x94>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  4033a6:	79fb      	ldrb	r3, [r7, #7]
  4033a8:	2b00      	cmp	r3, #0
  4033aa:	d02c      	beq.n	403406 <udd_ep_ack_out_received+0x102>
  4033ac:	79fb      	ldrb	r3, [r7, #7]
  4033ae:	2b03      	cmp	r3, #3
  4033b0:	d029      	beq.n	403406 <udd_ep_ack_out_received+0x102>
			ptr_job->bank = 1;
  4033b2:	69fa      	ldr	r2, [r7, #28]
  4033b4:	7c53      	ldrb	r3, [r2, #17]
  4033b6:	2101      	movs	r1, #1
  4033b8:	f361 0383 	bfi	r3, r1, #2, #2
  4033bc:	7453      	strb	r3, [r2, #17]
  4033be:	e022      	b.n	403406 <udd_ep_ack_out_received+0x102>
		}
	} else {
		udd_ack_bank1_received(ep);
  4033c0:	4b14      	ldr	r3, [pc, #80]	; (403414 <udd_ep_ack_out_received+0x110>)
  4033c2:	79fa      	ldrb	r2, [r7, #7]
  4033c4:	320c      	adds	r2, #12
  4033c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4033ca:	613b      	str	r3, [r7, #16]
  4033cc:	693b      	ldr	r3, [r7, #16]
  4033ce:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4033d2:	613b      	str	r3, [r7, #16]
  4033d4:	693b      	ldr	r3, [r7, #16]
  4033d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4033da:	613b      	str	r3, [r7, #16]
  4033dc:	4b0d      	ldr	r3, [pc, #52]	; (403414 <udd_ep_ack_out_received+0x110>)
  4033de:	79fa      	ldrb	r2, [r7, #7]
  4033e0:	6939      	ldr	r1, [r7, #16]
  4033e2:	320c      	adds	r2, #12
  4033e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4033e8:	2300      	movs	r3, #0
  4033ea:	60fb      	str	r3, [r7, #12]
  4033ec:	e003      	b.n	4033f6 <udd_ep_ack_out_received+0xf2>
  4033ee:	bf00      	nop
  4033f0:	68fb      	ldr	r3, [r7, #12]
  4033f2:	3301      	adds	r3, #1
  4033f4:	60fb      	str	r3, [r7, #12]
  4033f6:	68fb      	ldr	r3, [r7, #12]
  4033f8:	2b13      	cmp	r3, #19
  4033fa:	d9f8      	bls.n	4033ee <udd_ep_ack_out_received+0xea>
		ptr_job->bank = 0;
  4033fc:	69fa      	ldr	r2, [r7, #28]
  4033fe:	7c53      	ldrb	r3, [r2, #17]
  403400:	f36f 0383 	bfc	r3, #2, #2
  403404:	7453      	strb	r3, [r2, #17]
	}
}
  403406:	3724      	adds	r7, #36	; 0x24
  403408:	46bd      	mov	sp, r7
  40340a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40340e:	4770      	bx	lr
  403410:	20000c6c 	.word	0x20000c6c
  403414:	40034000 	.word	0x40034000

00403418 <udd_ep_write_fifo>:


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
  403418:	b480      	push	{r7}
  40341a:	b089      	sub	sp, #36	; 0x24
  40341c:	af00      	add	r7, sp, #0
  40341e:	4603      	mov	r3, r0
  403420:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  403422:	79fb      	ldrb	r3, [r7, #7]
  403424:	1e5a      	subs	r2, r3, #1
  403426:	4613      	mov	r3, r2
  403428:	009b      	lsls	r3, r3, #2
  40342a:	4413      	add	r3, r2
  40342c:	009b      	lsls	r3, r3, #2
  40342e:	4a55      	ldr	r2, [pc, #340]	; (403584 <udd_ep_write_fifo+0x16c>)
  403430:	4413      	add	r3, r2
  403432:	613b      	str	r3, [r7, #16]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  403434:	693b      	ldr	r3, [r7, #16]
  403436:	685a      	ldr	r2, [r3, #4]
  403438:	693b      	ldr	r3, [r7, #16]
  40343a:	68db      	ldr	r3, [r3, #12]
  40343c:	4413      	add	r3, r2
  40343e:	61fb      	str	r3, [r7, #28]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  403440:	693b      	ldr	r3, [r7, #16]
  403442:	689a      	ldr	r2, [r3, #8]
  403444:	693b      	ldr	r3, [r7, #16]
  403446:	68db      	ldr	r3, [r3, #12]
  403448:	1ad3      	subs	r3, r2, r3
  40344a:	60fb      	str	r3, [r7, #12]
	uint32_t pkt_size = ptr_job->size;
  40344c:	693b      	ldr	r3, [r7, #16]
  40344e:	8a1b      	ldrh	r3, [r3, #16]
  403450:	f3c3 0309 	ubfx	r3, r3, #0, #10
  403454:	b29b      	uxth	r3, r3
  403456:	61bb      	str	r3, [r7, #24]
	bool is_short_pkt = false;
  403458:	2300      	movs	r3, #0
  40345a:	75fb      	strb	r3, [r7, #23]

	// Packet size
	if (nb_remain < pkt_size) {
  40345c:	68fa      	ldr	r2, [r7, #12]
  40345e:	69bb      	ldr	r3, [r7, #24]
  403460:	429a      	cmp	r2, r3
  403462:	d203      	bcs.n	40346c <udd_ep_write_fifo+0x54>
		pkt_size = nb_remain;
  403464:	68fb      	ldr	r3, [r7, #12]
  403466:	61bb      	str	r3, [r7, #24]
		is_short_pkt = true;
  403468:	2301      	movs	r3, #1
  40346a:	75fb      	strb	r3, [r7, #23]
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  40346c:	693b      	ldr	r3, [r7, #16]
  40346e:	68da      	ldr	r2, [r3, #12]
  403470:	69bb      	ldr	r3, [r7, #24]
  403472:	441a      	add	r2, r3
  403474:	693b      	ldr	r3, [r7, #16]
  403476:	60da      	str	r2, [r3, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  403478:	e05a      	b.n	403530 <udd_ep_write_fifo+0x118>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40347a:	4a43      	ldr	r2, [pc, #268]	; (403588 <udd_ep_write_fifo+0x170>)
  40347c:	79f8      	ldrb	r0, [r7, #7]
  40347e:	69fb      	ldr	r3, [r7, #28]
  403480:	1c59      	adds	r1, r3, #1
  403482:	61f9      	str	r1, [r7, #28]
  403484:	781b      	ldrb	r3, [r3, #0]
  403486:	4619      	mov	r1, r3
  403488:	f100 0314 	add.w	r3, r0, #20
  40348c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403490:	4a3d      	ldr	r2, [pc, #244]	; (403588 <udd_ep_write_fifo+0x170>)
  403492:	79f8      	ldrb	r0, [r7, #7]
  403494:	69fb      	ldr	r3, [r7, #28]
  403496:	1c59      	adds	r1, r3, #1
  403498:	61f9      	str	r1, [r7, #28]
  40349a:	781b      	ldrb	r3, [r3, #0]
  40349c:	4619      	mov	r1, r3
  40349e:	f100 0314 	add.w	r3, r0, #20
  4034a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4034a6:	4a38      	ldr	r2, [pc, #224]	; (403588 <udd_ep_write_fifo+0x170>)
  4034a8:	79f8      	ldrb	r0, [r7, #7]
  4034aa:	69fb      	ldr	r3, [r7, #28]
  4034ac:	1c59      	adds	r1, r3, #1
  4034ae:	61f9      	str	r1, [r7, #28]
  4034b0:	781b      	ldrb	r3, [r3, #0]
  4034b2:	4619      	mov	r1, r3
  4034b4:	f100 0314 	add.w	r3, r0, #20
  4034b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4034bc:	4a32      	ldr	r2, [pc, #200]	; (403588 <udd_ep_write_fifo+0x170>)
  4034be:	79f8      	ldrb	r0, [r7, #7]
  4034c0:	69fb      	ldr	r3, [r7, #28]
  4034c2:	1c59      	adds	r1, r3, #1
  4034c4:	61f9      	str	r1, [r7, #28]
  4034c6:	781b      	ldrb	r3, [r3, #0]
  4034c8:	4619      	mov	r1, r3
  4034ca:	f100 0314 	add.w	r3, r0, #20
  4034ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4034d2:	4a2d      	ldr	r2, [pc, #180]	; (403588 <udd_ep_write_fifo+0x170>)
  4034d4:	79f8      	ldrb	r0, [r7, #7]
  4034d6:	69fb      	ldr	r3, [r7, #28]
  4034d8:	1c59      	adds	r1, r3, #1
  4034da:	61f9      	str	r1, [r7, #28]
  4034dc:	781b      	ldrb	r3, [r3, #0]
  4034de:	4619      	mov	r1, r3
  4034e0:	f100 0314 	add.w	r3, r0, #20
  4034e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4034e8:	4a27      	ldr	r2, [pc, #156]	; (403588 <udd_ep_write_fifo+0x170>)
  4034ea:	79f8      	ldrb	r0, [r7, #7]
  4034ec:	69fb      	ldr	r3, [r7, #28]
  4034ee:	1c59      	adds	r1, r3, #1
  4034f0:	61f9      	str	r1, [r7, #28]
  4034f2:	781b      	ldrb	r3, [r3, #0]
  4034f4:	4619      	mov	r1, r3
  4034f6:	f100 0314 	add.w	r3, r0, #20
  4034fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4034fe:	4a22      	ldr	r2, [pc, #136]	; (403588 <udd_ep_write_fifo+0x170>)
  403500:	79f8      	ldrb	r0, [r7, #7]
  403502:	69fb      	ldr	r3, [r7, #28]
  403504:	1c59      	adds	r1, r3, #1
  403506:	61f9      	str	r1, [r7, #28]
  403508:	781b      	ldrb	r3, [r3, #0]
  40350a:	4619      	mov	r1, r3
  40350c:	f100 0314 	add.w	r3, r0, #20
  403510:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403514:	4a1c      	ldr	r2, [pc, #112]	; (403588 <udd_ep_write_fifo+0x170>)
  403516:	79f8      	ldrb	r0, [r7, #7]
  403518:	69fb      	ldr	r3, [r7, #28]
  40351a:	1c59      	adds	r1, r3, #1
  40351c:	61f9      	str	r1, [r7, #28]
  40351e:	781b      	ldrb	r3, [r3, #0]
  403520:	4619      	mov	r1, r3
  403522:	f100 0314 	add.w	r3, r0, #20
  403526:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  40352a:	69bb      	ldr	r3, [r7, #24]
  40352c:	3b08      	subs	r3, #8
  40352e:	61bb      	str	r3, [r7, #24]
  403530:	69bb      	ldr	r3, [r7, #24]
  403532:	2b07      	cmp	r3, #7
  403534:	d8a1      	bhi.n	40347a <udd_ep_write_fifo+0x62>
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  403536:	e00d      	b.n	403554 <udd_ep_write_fifo+0x13c>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403538:	4a13      	ldr	r2, [pc, #76]	; (403588 <udd_ep_write_fifo+0x170>)
  40353a:	79f8      	ldrb	r0, [r7, #7]
  40353c:	69fb      	ldr	r3, [r7, #28]
  40353e:	1c59      	adds	r1, r3, #1
  403540:	61f9      	str	r1, [r7, #28]
  403542:	781b      	ldrb	r3, [r3, #0]
  403544:	4619      	mov	r1, r3
  403546:	f100 0314 	add.w	r3, r0, #20
  40354a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  40354e:	69bb      	ldr	r3, [r7, #24]
  403550:	3b01      	subs	r3, #1
  403552:	61bb      	str	r3, [r7, #24]
  403554:	69bb      	ldr	r3, [r7, #24]
  403556:	2b00      	cmp	r3, #0
  403558:	d1ee      	bne.n	403538 <udd_ep_write_fifo+0x120>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  40355a:	693b      	ldr	r3, [r7, #16]
  40355c:	7c5b      	ldrb	r3, [r3, #17]
  40355e:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403562:	b2db      	uxtb	r3, r3
  403564:	3301      	adds	r3, #1
  403566:	f003 0303 	and.w	r3, r3, #3
  40356a:	b2d9      	uxtb	r1, r3
  40356c:	693a      	ldr	r2, [r7, #16]
  40356e:	7c53      	ldrb	r3, [r2, #17]
  403570:	f361 0383 	bfi	r3, r1, #2, #2
  403574:	7453      	strb	r3, [r2, #17]
	return is_short_pkt;
  403576:	7dfb      	ldrb	r3, [r7, #23]
}
  403578:	4618      	mov	r0, r3
  40357a:	3724      	adds	r7, #36	; 0x24
  40357c:	46bd      	mov	sp, r7
  40357e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403582:	4770      	bx	lr
  403584:	20000c6c 	.word	0x20000c6c
  403588:	40034000 	.word	0x40034000

0040358c <udd_ep_in_sent>:


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  40358c:	b580      	push	{r7, lr}
  40358e:	b086      	sub	sp, #24
  403590:	af00      	add	r7, sp, #0
  403592:	4602      	mov	r2, r0
  403594:	460b      	mov	r3, r1
  403596:	71fa      	strb	r2, [r7, #7]
  403598:	71bb      	strb	r3, [r7, #6]
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40359a:	79fb      	ldrb	r3, [r7, #7]
  40359c:	1e5a      	subs	r2, r3, #1
  40359e:	4613      	mov	r3, r2
  4035a0:	009b      	lsls	r3, r3, #2
  4035a2:	4413      	add	r3, r2
  4035a4:	009b      	lsls	r3, r3, #2
  4035a6:	4a36      	ldr	r2, [pc, #216]	; (403680 <udd_ep_in_sent+0xf4>)
  4035a8:	4413      	add	r3, r2
  4035aa:	617b      	str	r3, [r7, #20]

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4035ac:	697b      	ldr	r3, [r7, #20]
  4035ae:	7c5b      	ldrb	r3, [r3, #17]
  4035b0:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4035b4:	b2db      	uxtb	r3, r3
  4035b6:	461a      	mov	r2, r3
  4035b8:	79fb      	ldrb	r3, [r7, #7]
  4035ba:	2b00      	cmp	r3, #0
  4035bc:	d002      	beq.n	4035c4 <udd_ep_in_sent+0x38>
  4035be:	79fb      	ldrb	r3, [r7, #7]
  4035c0:	2b03      	cmp	r3, #3
  4035c2:	d101      	bne.n	4035c8 <udd_ep_in_sent+0x3c>
  4035c4:	2301      	movs	r3, #1
  4035c6:	e000      	b.n	4035ca <udd_ep_in_sent+0x3e>
  4035c8:	2302      	movs	r3, #2
  4035ca:	429a      	cmp	r2, r3
  4035cc:	db01      	blt.n	4035d2 <udd_ep_in_sent+0x46>
		return true; // Data pending
  4035ce:	2301      	movs	r3, #1
  4035d0:	e052      	b.n	403678 <udd_ep_in_sent+0xec>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  4035d2:	697b      	ldr	r3, [r7, #20]
  4035d4:	68da      	ldr	r2, [r3, #12]
  4035d6:	697b      	ldr	r3, [r7, #20]
  4035d8:	689b      	ldr	r3, [r3, #8]
  4035da:	429a      	cmp	r2, r3
  4035dc:	d308      	bcc.n	4035f0 <udd_ep_in_sent+0x64>
  4035de:	697b      	ldr	r3, [r7, #20]
  4035e0:	7c5b      	ldrb	r3, [r3, #17]
  4035e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
  4035e6:	b2db      	uxtb	r3, r3
  4035e8:	2b00      	cmp	r3, #0
  4035ea:	d101      	bne.n	4035f0 <udd_ep_in_sent+0x64>
		return false;
  4035ec:	2300      	movs	r3, #0
  4035ee:	e043      	b.n	403678 <udd_ep_in_sent+0xec>
	}

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);
  4035f0:	79fb      	ldrb	r3, [r7, #7]
  4035f2:	4618      	mov	r0, r3
  4035f4:	4b23      	ldr	r3, [pc, #140]	; (403684 <udd_ep_in_sent+0xf8>)
  4035f6:	4798      	blx	r3
  4035f8:	4603      	mov	r3, r0
  4035fa:	74fb      	strb	r3, [r7, #19]

	// Data is ready to send
	if (b_tx) {
  4035fc:	79bb      	ldrb	r3, [r7, #6]
  4035fe:	2b00      	cmp	r3, #0
  403600:	d01d      	beq.n	40363e <udd_ep_in_sent+0xb2>
		udd_set_transmit_ready(ep);
  403602:	4b21      	ldr	r3, [pc, #132]	; (403688 <udd_ep_in_sent+0xfc>)
  403604:	79fa      	ldrb	r2, [r7, #7]
  403606:	320c      	adds	r2, #12
  403608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40360c:	60fb      	str	r3, [r7, #12]
  40360e:	68fb      	ldr	r3, [r7, #12]
  403610:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403614:	60fb      	str	r3, [r7, #12]
  403616:	68fb      	ldr	r3, [r7, #12]
  403618:	f043 0310 	orr.w	r3, r3, #16
  40361c:	60fb      	str	r3, [r7, #12]
  40361e:	4b1a      	ldr	r3, [pc, #104]	; (403688 <udd_ep_in_sent+0xfc>)
  403620:	79fa      	ldrb	r2, [r7, #7]
  403622:	68f9      	ldr	r1, [r7, #12]
  403624:	320c      	adds	r2, #12
  403626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40362a:	2300      	movs	r3, #0
  40362c:	60bb      	str	r3, [r7, #8]
  40362e:	e003      	b.n	403638 <udd_ep_in_sent+0xac>
  403630:	bf00      	nop
  403632:	68bb      	ldr	r3, [r7, #8]
  403634:	3301      	adds	r3, #1
  403636:	60bb      	str	r3, [r7, #8]
  403638:	68bb      	ldr	r3, [r7, #8]
  40363a:	2b13      	cmp	r3, #19
  40363c:	d9f8      	bls.n	403630 <udd_ep_in_sent+0xa4>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  40363e:	7cfb      	ldrb	r3, [r7, #19]
  403640:	2b00      	cmp	r3, #0
  403642:	d004      	beq.n	40364e <udd_ep_in_sent+0xc2>
		ptr_job->b_shortpacket = false;
  403644:	697a      	ldr	r2, [r7, #20]
  403646:	7c53      	ldrb	r3, [r2, #17]
  403648:	f36f 1386 	bfc	r3, #6, #1
  40364c:	7453      	strb	r3, [r2, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  40364e:	697b      	ldr	r3, [r7, #20]
  403650:	68da      	ldr	r2, [r3, #12]
  403652:	697b      	ldr	r3, [r7, #20]
  403654:	689b      	ldr	r3, [r3, #8]
  403656:	429a      	cmp	r2, r3
  403658:	d30d      	bcc.n	403676 <udd_ep_in_sent+0xea>
			&& (!ptr_job->b_shortpacket)) {
  40365a:	697b      	ldr	r3, [r7, #20]
  40365c:	7c5b      	ldrb	r3, [r3, #17]
  40365e:	f3c3 1380 	ubfx	r3, r3, #6, #1
  403662:	b2db      	uxtb	r3, r3
  403664:	2b00      	cmp	r3, #0
  403666:	d106      	bne.n	403676 <udd_ep_in_sent+0xea>
		ptr_job->b_buf_end = true;
  403668:	697a      	ldr	r2, [r7, #20]
  40366a:	7c53      	ldrb	r3, [r2, #17]
  40366c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403670:	7453      	strb	r3, [r2, #17]
		return false;
  403672:	2300      	movs	r3, #0
  403674:	e000      	b.n	403678 <udd_ep_in_sent+0xec>
	}
	return true; // Pending
  403676:	2301      	movs	r3, #1
}
  403678:	4618      	mov	r0, r3
  40367a:	3718      	adds	r7, #24
  40367c:	46bd      	mov	sp, r7
  40367e:	bd80      	pop	{r7, pc}
  403680:	20000c6c 	.word	0x20000c6c
  403684:	00403419 	.word	0x00403419
  403688:	40034000 	.word	0x40034000

0040368c <udd_ep_out_received>:


static void udd_ep_out_received(udd_ep_id_t ep)
{
  40368c:	b580      	push	{r7, lr}
  40368e:	b08a      	sub	sp, #40	; 0x28
  403690:	af00      	add	r7, sp, #0
  403692:	4603      	mov	r3, r0
  403694:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  403696:	79fb      	ldrb	r3, [r7, #7]
  403698:	1e5a      	subs	r2, r3, #1
  40369a:	4613      	mov	r3, r2
  40369c:	009b      	lsls	r3, r3, #2
  40369e:	4413      	add	r3, r2
  4036a0:	009b      	lsls	r3, r3, #2
  4036a2:	4a3a      	ldr	r2, [pc, #232]	; (40378c <udd_ep_out_received+0x100>)
  4036a4:	4413      	add	r3, r2
  4036a6:	617b      	str	r3, [r7, #20]
	uint32_t nb_data = 0, i;
  4036a8:	2300      	movs	r3, #0
  4036aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4036ac:	697b      	ldr	r3, [r7, #20]
  4036ae:	689a      	ldr	r2, [r3, #8]
  4036b0:	697b      	ldr	r3, [r7, #20]
  4036b2:	68db      	ldr	r3, [r3, #12]
  4036b4:	1ad3      	subs	r3, r2, r3
  4036b6:	613b      	str	r3, [r7, #16]
	uint32_t pkt_size = ptr_job->size;
  4036b8:	697b      	ldr	r3, [r7, #20]
  4036ba:	8a1b      	ldrh	r3, [r3, #16]
  4036bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4036c0:	b29b      	uxth	r3, r3
  4036c2:	60fb      	str	r3, [r7, #12]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4036c4:	697b      	ldr	r3, [r7, #20]
  4036c6:	685a      	ldr	r2, [r3, #4]
  4036c8:	697b      	ldr	r3, [r7, #20]
  4036ca:	68db      	ldr	r3, [r3, #12]
  4036cc:	4413      	add	r3, r2
  4036ce:	61fb      	str	r3, [r7, #28]
	bool b_full = false, b_short;
  4036d0:	2300      	movs	r3, #0
  4036d2:	76fb      	strb	r3, [r7, #27]

	// Read byte count
	nb_data = udd_byte_count(ep);
  4036d4:	4b2e      	ldr	r3, [pc, #184]	; (403790 <udd_ep_out_received+0x104>)
  4036d6:	79fa      	ldrb	r2, [r7, #7]
  4036d8:	320c      	adds	r2, #12
  4036da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4036de:	4b2d      	ldr	r3, [pc, #180]	; (403794 <udd_ep_out_received+0x108>)
  4036e0:	4013      	ands	r3, r2
  4036e2:	0c1b      	lsrs	r3, r3, #16
  4036e4:	627b      	str	r3, [r7, #36]	; 0x24
	b_short = (nb_data < pkt_size);
  4036e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4036e8:	68fb      	ldr	r3, [r7, #12]
  4036ea:	429a      	cmp	r2, r3
  4036ec:	bf2c      	ite	cs
  4036ee:	2300      	movcs	r3, #0
  4036f0:	2301      	movcc	r3, #1
  4036f2:	72fb      	strb	r3, [r7, #11]

	// Copy data if there is
	if (nb_data > 0) {
  4036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4036f6:	2b00      	cmp	r3, #0
  4036f8:	d021      	beq.n	40373e <udd_ep_out_received+0xb2>
		if (nb_data >= nb_remain) {
  4036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4036fc:	693b      	ldr	r3, [r7, #16]
  4036fe:	429a      	cmp	r2, r3
  403700:	d303      	bcc.n	40370a <udd_ep_out_received+0x7e>
			nb_data = nb_remain;
  403702:	693b      	ldr	r3, [r7, #16]
  403704:	627b      	str	r3, [r7, #36]	; 0x24
			b_full = true;
  403706:	2301      	movs	r3, #1
  403708:	76fb      	strb	r3, [r7, #27]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  40370a:	697b      	ldr	r3, [r7, #20]
  40370c:	68da      	ldr	r2, [r3, #12]
  40370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403710:	441a      	add	r2, r3
  403712:	697b      	ldr	r3, [r7, #20]
  403714:	60da      	str	r2, [r3, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  403716:	2300      	movs	r3, #0
  403718:	623b      	str	r3, [r7, #32]
  40371a:	e00c      	b.n	403736 <udd_ep_out_received+0xaa>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  40371c:	69fb      	ldr	r3, [r7, #28]
  40371e:	1c5a      	adds	r2, r3, #1
  403720:	61fa      	str	r2, [r7, #28]
  403722:	4a1b      	ldr	r2, [pc, #108]	; (403790 <udd_ep_out_received+0x104>)
  403724:	79f9      	ldrb	r1, [r7, #7]
  403726:	3114      	adds	r1, #20
  403728:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40372c:	b2d2      	uxtb	r2, r2
  40372e:	701a      	strb	r2, [r3, #0]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  403730:	6a3b      	ldr	r3, [r7, #32]
  403732:	3301      	adds	r3, #1
  403734:	623b      	str	r3, [r7, #32]
  403736:	6a3a      	ldr	r2, [r7, #32]
  403738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40373a:	429a      	cmp	r2, r3
  40373c:	d3ee      	bcc.n	40371c <udd_ep_out_received+0x90>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  40373e:	79fb      	ldrb	r3, [r7, #7]
  403740:	4618      	mov	r0, r3
  403742:	4b15      	ldr	r3, [pc, #84]	; (403798 <udd_ep_out_received+0x10c>)
  403744:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  403746:	7efb      	ldrb	r3, [r7, #27]
  403748:	2b00      	cmp	r3, #0
  40374a:	d102      	bne.n	403752 <udd_ep_out_received+0xc6>
  40374c:	7afb      	ldrb	r3, [r7, #11]
  40374e:	2b00      	cmp	r3, #0
  403750:	d018      	beq.n	403784 <udd_ep_out_received+0xf8>
			!Is_udd_endpoint_stall_requested(ep)) {
  403752:	4b0f      	ldr	r3, [pc, #60]	; (403790 <udd_ep_out_received+0x104>)
  403754:	79fa      	ldrb	r2, [r7, #7]
  403756:	320c      	adds	r2, #12
  403758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40375c:	f003 0320 	and.w	r3, r3, #32
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  403760:	2b00      	cmp	r3, #0
  403762:	d10f      	bne.n	403784 <udd_ep_out_received+0xf8>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  403764:	4b0a      	ldr	r3, [pc, #40]	; (403790 <udd_ep_out_received+0x104>)
  403766:	79fa      	ldrb	r2, [r7, #7]
  403768:	2101      	movs	r1, #1
  40376a:	fa01 f202 	lsl.w	r2, r1, r2
  40376e:	615a      	str	r2, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403770:	697b      	ldr	r3, [r7, #20]
  403772:	68da      	ldr	r2, [r3, #12]
  403774:	697b      	ldr	r3, [r7, #20]
  403776:	609a      	str	r2, [r3, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403778:	79fb      	ldrb	r3, [r7, #7]
  40377a:	6978      	ldr	r0, [r7, #20]
  40377c:	2100      	movs	r1, #0
  40377e:	461a      	mov	r2, r3
  403780:	4b06      	ldr	r3, [pc, #24]	; (40379c <udd_ep_out_received+0x110>)
  403782:	4798      	blx	r3
	}
}
  403784:	3728      	adds	r7, #40	; 0x28
  403786:	46bd      	mov	sp, r7
  403788:	bd80      	pop	{r7, pc}
  40378a:	bf00      	nop
  40378c:	20000c6c 	.word	0x20000c6c
  403790:	40034000 	.word	0x40034000
  403794:	07ff0000 	.word	0x07ff0000
  403798:	00403305 	.word	0x00403305
  40379c:	00403295 	.word	0x00403295

004037a0 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
  4037a0:	b580      	push	{r7, lr}
  4037a2:	b098      	sub	sp, #96	; 0x60
  4037a4:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4037a6:	2301      	movs	r3, #1
  4037a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  4037ac:	e247      	b.n	403c3e <udd_ep_interrupt+0x49e>
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4037ae:	4bac      	ldr	r3, [pc, #688]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4037b0:	699a      	ldr	r2, [r3, #24]
  4037b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4037b6:	2101      	movs	r1, #1
  4037b8:	fa01 f303 	lsl.w	r3, r1, r3
  4037bc:	4013      	ands	r3, r2
  4037be:	2b00      	cmp	r3, #0
  4037c0:	d100      	bne.n	4037c4 <udd_ep_interrupt+0x24>
			continue;
  4037c2:	e237      	b.n	403c34 <udd_ep_interrupt+0x494>
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  4037c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4037c8:	1e5a      	subs	r2, r3, #1
  4037ca:	4613      	mov	r3, r2
  4037cc:	009b      	lsls	r3, r3, #2
  4037ce:	4413      	add	r3, r2
  4037d0:	009b      	lsls	r3, r3, #2
  4037d2:	4aa4      	ldr	r2, [pc, #656]	; (403a64 <udd_ep_interrupt+0x2c4>)
  4037d4:	4413      	add	r3, r2
  4037d6:	65bb      	str	r3, [r7, #88]	; 0x58

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  4037d8:	4ba1      	ldr	r3, [pc, #644]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4037da:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4037de:	320c      	adds	r2, #12
  4037e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4037e4:	f003 0342 	and.w	r3, r3, #66	; 0x42
  4037e8:	2b00      	cmp	r3, #0
  4037ea:	d006      	beq.n	4037fa <udd_ep_interrupt+0x5a>
			udd_ep_out_received(ep);
  4037ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4037f0:	4618      	mov	r0, r3
  4037f2:	4b9d      	ldr	r3, [pc, #628]	; (403a68 <udd_ep_interrupt+0x2c8>)
  4037f4:	4798      	blx	r3
			return true;
  4037f6:	2301      	movs	r3, #1
  4037f8:	e227      	b.n	403c4a <udd_ep_interrupt+0x4aa>
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  4037fa:	4b99      	ldr	r3, [pc, #612]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4037fc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403800:	320c      	adds	r2, #12
  403802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403806:	f003 0301 	and.w	r3, r3, #1
  40380a:	2b00      	cmp	r3, #0
  40380c:	f000 81d5 	beq.w	403bba <udd_ep_interrupt+0x41a>

			ptr_job->bank--;
  403810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403812:	7c5b      	ldrb	r3, [r3, #17]
  403814:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403818:	b2db      	uxtb	r3, r3
  40381a:	3303      	adds	r3, #3
  40381c:	f003 0303 	and.w	r3, r3, #3
  403820:	b2d9      	uxtb	r1, r3
  403822:	6dba      	ldr	r2, [r7, #88]	; 0x58
  403824:	7c53      	ldrb	r3, [r2, #17]
  403826:	f361 0383 	bfi	r3, r1, #2, #2
  40382a:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  40382c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40382e:	7c5b      	ldrb	r3, [r3, #17]
  403830:	f3c3 1340 	ubfx	r3, r3, #5, #1
  403834:	b2db      	uxtb	r3, r3
  403836:	2b00      	cmp	r3, #0
  403838:	f000 808f 	beq.w	40395a <udd_ep_interrupt+0x1ba>
				if (ptr_job->bank) {
  40383c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40383e:	7c5b      	ldrb	r3, [r3, #17]
  403840:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403844:	b2db      	uxtb	r3, r3
  403846:	2b00      	cmp	r3, #0
  403848:	d040      	beq.n	4038cc <udd_ep_interrupt+0x12c>
					// Send remaining
					udd_set_transmit_ready(ep);
  40384a:	4b85      	ldr	r3, [pc, #532]	; (403a60 <udd_ep_interrupt+0x2c0>)
  40384c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403850:	320c      	adds	r2, #12
  403852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403856:	653b      	str	r3, [r7, #80]	; 0x50
  403858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40385a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40385e:	653b      	str	r3, [r7, #80]	; 0x50
  403860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  403862:	f043 0310 	orr.w	r3, r3, #16
  403866:	653b      	str	r3, [r7, #80]	; 0x50
  403868:	4b7d      	ldr	r3, [pc, #500]	; (403a60 <udd_ep_interrupt+0x2c0>)
  40386a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  40386e:	6d39      	ldr	r1, [r7, #80]	; 0x50
  403870:	320c      	adds	r2, #12
  403872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403876:	2300      	movs	r3, #0
  403878:	64fb      	str	r3, [r7, #76]	; 0x4c
  40387a:	e003      	b.n	403884 <udd_ep_interrupt+0xe4>
  40387c:	bf00      	nop
  40387e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  403880:	3301      	adds	r3, #1
  403882:	64fb      	str	r3, [r7, #76]	; 0x4c
  403884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  403886:	2b13      	cmp	r3, #19
  403888:	d9f8      	bls.n	40387c <udd_ep_interrupt+0xdc>
					udd_ack_in_sent(ep);
  40388a:	4b75      	ldr	r3, [pc, #468]	; (403a60 <udd_ep_interrupt+0x2c0>)
  40388c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403890:	320c      	adds	r2, #12
  403892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403896:	64bb      	str	r3, [r7, #72]	; 0x48
  403898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40389a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40389e:	64bb      	str	r3, [r7, #72]	; 0x48
  4038a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4038a2:	f023 0301 	bic.w	r3, r3, #1
  4038a6:	64bb      	str	r3, [r7, #72]	; 0x48
  4038a8:	4b6d      	ldr	r3, [pc, #436]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4038aa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4038ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
  4038b0:	320c      	adds	r2, #12
  4038b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4038b6:	2300      	movs	r3, #0
  4038b8:	647b      	str	r3, [r7, #68]	; 0x44
  4038ba:	e003      	b.n	4038c4 <udd_ep_interrupt+0x124>
  4038bc:	bf00      	nop
  4038be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4038c0:	3301      	adds	r3, #1
  4038c2:	647b      	str	r3, [r7, #68]	; 0x44
  4038c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4038c6:	2b13      	cmp	r3, #19
  4038c8:	d9f8      	bls.n	4038bc <udd_ep_interrupt+0x11c>
  4038ca:	e044      	b.n	403956 <udd_ep_interrupt+0x1b6>
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  4038cc:	4b64      	ldr	r3, [pc, #400]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4038ce:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4038d2:	320c      	adds	r2, #12
  4038d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4038d8:	643b      	str	r3, [r7, #64]	; 0x40
  4038da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  4038dc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4038e0:	643b      	str	r3, [r7, #64]	; 0x40
  4038e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  4038e4:	f023 0301 	bic.w	r3, r3, #1
  4038e8:	643b      	str	r3, [r7, #64]	; 0x40
  4038ea:	4b5d      	ldr	r3, [pc, #372]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4038ec:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4038f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
  4038f2:	320c      	adds	r2, #12
  4038f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4038f8:	2300      	movs	r3, #0
  4038fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  4038fc:	e003      	b.n	403906 <udd_ep_interrupt+0x166>
  4038fe:	bf00      	nop
  403900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403902:	3301      	adds	r3, #1
  403904:	63fb      	str	r3, [r7, #60]	; 0x3c
  403906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403908:	2b13      	cmp	r3, #19
  40390a:	d9f8      	bls.n	4038fe <udd_ep_interrupt+0x15e>
					// Enable stall
					udd_enable_stall_handshake(ep);
  40390c:	4b54      	ldr	r3, [pc, #336]	; (403a60 <udd_ep_interrupt+0x2c0>)
  40390e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403912:	320c      	adds	r2, #12
  403914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403918:	63bb      	str	r3, [r7, #56]	; 0x38
  40391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40391c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403920:	63bb      	str	r3, [r7, #56]	; 0x38
  403922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403924:	f043 0320 	orr.w	r3, r3, #32
  403928:	63bb      	str	r3, [r7, #56]	; 0x38
  40392a:	4b4d      	ldr	r3, [pc, #308]	; (403a60 <udd_ep_interrupt+0x2c0>)
  40392c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  403932:	320c      	adds	r2, #12
  403934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403938:	2300      	movs	r3, #0
  40393a:	637b      	str	r3, [r7, #52]	; 0x34
  40393c:	e003      	b.n	403946 <udd_ep_interrupt+0x1a6>
  40393e:	bf00      	nop
  403940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  403942:	3301      	adds	r3, #1
  403944:	637b      	str	r3, [r7, #52]	; 0x34
  403946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  403948:	2b13      	cmp	r3, #19
  40394a:	d9f8      	bls.n	40393e <udd_ep_interrupt+0x19e>
					// Halt executed
					ptr_job->b_stall_requested = false;
  40394c:	6dba      	ldr	r2, [r7, #88]	; 0x58
  40394e:	7c53      	ldrb	r3, [r2, #17]
  403950:	f36f 1345 	bfc	r3, #5, #1
  403954:	7453      	strb	r3, [r2, #17]
				}
				return true;
  403956:	2301      	movs	r3, #1
  403958:	e177      	b.n	403c4a <udd_ep_interrupt+0x4aa>
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  40395a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40395c:	7c5b      	ldrb	r3, [r3, #17]
  40395e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  403962:	b2db      	uxtb	r3, r3
  403964:	2b00      	cmp	r3, #0
  403966:	d00f      	beq.n	403988 <udd_ep_interrupt+0x1e8>
				ptr_job->b_buf_end = false;
  403968:	6dba      	ldr	r2, [r7, #88]	; 0x58
  40396a:	7c53      	ldrb	r3, [r2, #17]
  40396c:	f36f 13c7 	bfc	r3, #7, #1
  403970:	7453      	strb	r3, [r2, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403974:	68da      	ldr	r2, [r3, #12]
  403976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403978:	609a      	str	r2, [r3, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  40397a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40397e:	6db8      	ldr	r0, [r7, #88]	; 0x58
  403980:	2100      	movs	r1, #0
  403982:	461a      	mov	r2, r3
  403984:	4b39      	ldr	r3, [pc, #228]	; (403a6c <udd_ep_interrupt+0x2cc>)
  403986:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  403988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40398a:	68da      	ldr	r2, [r3, #12]
  40398c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40398e:	689b      	ldr	r3, [r3, #8]
  403990:	429a      	cmp	r2, r3
  403992:	d33c      	bcc.n	403a0e <udd_ep_interrupt+0x26e>
					!ptr_job->b_shortpacket &&
  403994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403996:	7c5b      	ldrb	r3, [r3, #17]
  403998:	f3c3 1380 	ubfx	r3, r3, #6, #1
  40399c:	b2db      	uxtb	r3, r3
			if (ptr_job->b_buf_end) {
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  40399e:	2b00      	cmp	r3, #0
  4039a0:	d135      	bne.n	403a0e <udd_ep_interrupt+0x26e>
					!ptr_job->b_shortpacket &&
					ptr_job->bank == 0) {
  4039a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  4039a4:	7c5b      	ldrb	r3, [r3, #17]
  4039a6:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4039aa:	b2db      	uxtb	r3, r3
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
					!ptr_job->b_shortpacket &&
  4039ac:	2b00      	cmp	r3, #0
  4039ae:	d12e      	bne.n	403a0e <udd_ep_interrupt+0x26e>
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
  4039b0:	4b2f      	ldr	r3, [pc, #188]	; (403a70 <udd_ep_interrupt+0x2d0>)
  4039b2:	4798      	blx	r3
  4039b4:	6578      	str	r0, [r7, #84]	; 0x54
				udd_disable_endpoint_interrupt(ep);
  4039b6:	4b2a      	ldr	r3, [pc, #168]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4039b8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4039bc:	2101      	movs	r1, #1
  4039be:	fa01 f202 	lsl.w	r2, r1, r2
  4039c2:	615a      	str	r2, [r3, #20]
				cpu_irq_restore(flags);
  4039c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
  4039c6:	4b2b      	ldr	r3, [pc, #172]	; (403a74 <udd_ep_interrupt+0x2d4>)
  4039c8:	4798      	blx	r3
				// Ack last packet
				udd_ack_in_sent(ep);
  4039ca:	4b25      	ldr	r3, [pc, #148]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4039cc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4039d0:	320c      	adds	r2, #12
  4039d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4039d6:	633b      	str	r3, [r7, #48]	; 0x30
  4039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4039da:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4039de:	633b      	str	r3, [r7, #48]	; 0x30
  4039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4039e2:	f023 0301 	bic.w	r3, r3, #1
  4039e6:	633b      	str	r3, [r7, #48]	; 0x30
  4039e8:	4b1d      	ldr	r3, [pc, #116]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4039ea:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4039ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
  4039f0:	320c      	adds	r2, #12
  4039f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4039f6:	2300      	movs	r3, #0
  4039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  4039fa:	e003      	b.n	403a04 <udd_ep_interrupt+0x264>
  4039fc:	bf00      	nop
  4039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403a00:	3301      	adds	r3, #1
  403a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  403a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403a06:	2b13      	cmp	r3, #19
  403a08:	d9f8      	bls.n	4039fc <udd_ep_interrupt+0x25c>
				return true;
  403a0a:	2301      	movs	r3, #1
  403a0c:	e11d      	b.n	403c4a <udd_ep_interrupt+0x4aa>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  403a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403a12:	2b00      	cmp	r3, #0
  403a14:	d05e      	beq.n	403ad4 <udd_ep_interrupt+0x334>
  403a16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403a1a:	2b03      	cmp	r3, #3
  403a1c:	d05a      	beq.n	403ad4 <udd_ep_interrupt+0x334>
					&& ptr_job->bank > 0) {
  403a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403a20:	7c5b      	ldrb	r3, [r3, #17]
  403a22:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403a26:	b2db      	uxtb	r3, r3
  403a28:	2b00      	cmp	r3, #0
  403a2a:	dd53      	ble.n	403ad4 <udd_ep_interrupt+0x334>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  403a2c:	4b0c      	ldr	r3, [pc, #48]	; (403a60 <udd_ep_interrupt+0x2c0>)
  403a2e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403a32:	320c      	adds	r2, #12
  403a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403a38:	62bb      	str	r3, [r7, #40]	; 0x28
  403a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403a3c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403a40:	62bb      	str	r3, [r7, #40]	; 0x28
  403a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403a44:	f043 0310 	orr.w	r3, r3, #16
  403a48:	62bb      	str	r3, [r7, #40]	; 0x28
  403a4a:	4b05      	ldr	r3, [pc, #20]	; (403a60 <udd_ep_interrupt+0x2c0>)
  403a4c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403a50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  403a52:	320c      	adds	r2, #12
  403a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403a58:	2300      	movs	r3, #0
  403a5a:	627b      	str	r3, [r7, #36]	; 0x24
  403a5c:	e010      	b.n	403a80 <udd_ep_interrupt+0x2e0>
  403a5e:	bf00      	nop
  403a60:	40034000 	.word	0x40034000
  403a64:	20000c6c 	.word	0x20000c6c
  403a68:	0040368d 	.word	0x0040368d
  403a6c:	00403295 	.word	0x00403295
  403a70:	00401c2d 	.word	0x00401c2d
  403a74:	00401c85 	.word	0x00401c85
  403a78:	bf00      	nop
  403a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403a7c:	3301      	adds	r3, #1
  403a7e:	627b      	str	r3, [r7, #36]	; 0x24
  403a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403a82:	2b13      	cmp	r3, #19
  403a84:	d9f8      	bls.n	403a78 <udd_ep_interrupt+0x2d8>
				udd_ack_in_sent(ep);
  403a86:	4b73      	ldr	r3, [pc, #460]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403a88:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403a8c:	320c      	adds	r2, #12
  403a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403a92:	623b      	str	r3, [r7, #32]
  403a94:	6a3b      	ldr	r3, [r7, #32]
  403a96:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403a9a:	623b      	str	r3, [r7, #32]
  403a9c:	6a3b      	ldr	r3, [r7, #32]
  403a9e:	f023 0301 	bic.w	r3, r3, #1
  403aa2:	623b      	str	r3, [r7, #32]
  403aa4:	4b6b      	ldr	r3, [pc, #428]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403aa6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403aaa:	6a39      	ldr	r1, [r7, #32]
  403aac:	320c      	adds	r2, #12
  403aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403ab2:	2300      	movs	r3, #0
  403ab4:	61fb      	str	r3, [r7, #28]
  403ab6:	e003      	b.n	403ac0 <udd_ep_interrupt+0x320>
  403ab8:	bf00      	nop
  403aba:	69fb      	ldr	r3, [r7, #28]
  403abc:	3301      	adds	r3, #1
  403abe:	61fb      	str	r3, [r7, #28]
  403ac0:	69fb      	ldr	r3, [r7, #28]
  403ac2:	2b13      	cmp	r3, #19
  403ac4:	d9f8      	bls.n	403ab8 <udd_ep_interrupt+0x318>
				udd_ep_in_sent(ep, false);
  403ac6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403aca:	4618      	mov	r0, r3
  403acc:	2100      	movs	r1, #0
  403ace:	4b62      	ldr	r3, [pc, #392]	; (403c58 <udd_ep_interrupt+0x4b8>)
  403ad0:	4798      	blx	r3
  403ad2:	e070      	b.n	403bb6 <udd_ep_interrupt+0x416>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  403ad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403ad8:	2b00      	cmp	r3, #0
  403ada:	d046      	beq.n	403b6a <udd_ep_interrupt+0x3ca>
  403adc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403ae0:	2b03      	cmp	r3, #3
  403ae2:	d042      	beq.n	403b6a <udd_ep_interrupt+0x3ca>
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  403ae4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403ae8:	4618      	mov	r0, r3
  403aea:	2101      	movs	r1, #1
  403aec:	4b5a      	ldr	r3, [pc, #360]	; (403c58 <udd_ep_interrupt+0x4b8>)
  403aee:	4798      	blx	r3
  403af0:	4603      	mov	r3, r0
  403af2:	f083 0301 	eor.w	r3, r3, #1
  403af6:	b2db      	uxtb	r3, r3
  403af8:	2b00      	cmp	r3, #0
  403afa:	d00f      	beq.n	403b1c <udd_ep_interrupt+0x37c>
					ptr_job->b_buf_end = false;
  403afc:	6dba      	ldr	r2, [r7, #88]	; 0x58
  403afe:	7c53      	ldrb	r3, [r2, #17]
  403b00:	f36f 13c7 	bfc	r3, #7, #1
  403b04:	7453      	strb	r3, [r2, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403b08:	68da      	ldr	r2, [r3, #12]
  403b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403b0c:	609a      	str	r2, [r3, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403b0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403b12:	6db8      	ldr	r0, [r7, #88]	; 0x58
  403b14:	2100      	movs	r1, #0
  403b16:	461a      	mov	r2, r3
  403b18:	4b50      	ldr	r3, [pc, #320]	; (403c5c <udd_ep_interrupt+0x4bc>)
  403b1a:	4798      	blx	r3
				}
				udd_ack_in_sent(ep);
  403b1c:	4b4d      	ldr	r3, [pc, #308]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403b1e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b22:	320c      	adds	r2, #12
  403b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403b28:	61bb      	str	r3, [r7, #24]
  403b2a:	69bb      	ldr	r3, [r7, #24]
  403b2c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403b30:	61bb      	str	r3, [r7, #24]
  403b32:	69bb      	ldr	r3, [r7, #24]
  403b34:	f023 0301 	bic.w	r3, r3, #1
  403b38:	61bb      	str	r3, [r7, #24]
  403b3a:	4b46      	ldr	r3, [pc, #280]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403b3c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b40:	69b9      	ldr	r1, [r7, #24]
  403b42:	320c      	adds	r2, #12
  403b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403b48:	2300      	movs	r3, #0
  403b4a:	617b      	str	r3, [r7, #20]
  403b4c:	e003      	b.n	403b56 <udd_ep_interrupt+0x3b6>
  403b4e:	bf00      	nop
  403b50:	697b      	ldr	r3, [r7, #20]
  403b52:	3301      	adds	r3, #1
  403b54:	617b      	str	r3, [r7, #20]
  403b56:	697b      	ldr	r3, [r7, #20]
  403b58:	2b13      	cmp	r3, #19
  403b5a:	d9f8      	bls.n	403b4e <udd_ep_interrupt+0x3ae>
				udd_ep_in_sent(ep, false);
  403b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403b60:	4618      	mov	r0, r3
  403b62:	2100      	movs	r1, #0
  403b64:	4b3c      	ldr	r3, [pc, #240]	; (403c58 <udd_ep_interrupt+0x4b8>)
  403b66:	4798      	blx	r3
  403b68:	e025      	b.n	403bb6 <udd_ep_interrupt+0x416>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  403b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403b6e:	4618      	mov	r0, r3
  403b70:	2101      	movs	r1, #1
  403b72:	4b39      	ldr	r3, [pc, #228]	; (403c58 <udd_ep_interrupt+0x4b8>)
  403b74:	4798      	blx	r3
				udd_ack_in_sent(ep);
  403b76:	4b37      	ldr	r3, [pc, #220]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403b78:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b7c:	320c      	adds	r2, #12
  403b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403b82:	613b      	str	r3, [r7, #16]
  403b84:	693b      	ldr	r3, [r7, #16]
  403b86:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403b8a:	613b      	str	r3, [r7, #16]
  403b8c:	693b      	ldr	r3, [r7, #16]
  403b8e:	f023 0301 	bic.w	r3, r3, #1
  403b92:	613b      	str	r3, [r7, #16]
  403b94:	4b2f      	ldr	r3, [pc, #188]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403b96:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b9a:	6939      	ldr	r1, [r7, #16]
  403b9c:	320c      	adds	r2, #12
  403b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403ba2:	2300      	movs	r3, #0
  403ba4:	60fb      	str	r3, [r7, #12]
  403ba6:	e003      	b.n	403bb0 <udd_ep_interrupt+0x410>
  403ba8:	bf00      	nop
  403baa:	68fb      	ldr	r3, [r7, #12]
  403bac:	3301      	adds	r3, #1
  403bae:	60fb      	str	r3, [r7, #12]
  403bb0:	68fb      	ldr	r3, [r7, #12]
  403bb2:	2b13      	cmp	r3, #19
  403bb4:	d9f8      	bls.n	403ba8 <udd_ep_interrupt+0x408>
			}
			return true;
  403bb6:	2301      	movs	r3, #1
  403bb8:	e047      	b.n	403c4a <udd_ep_interrupt+0x4aa>
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  403bba:	4b26      	ldr	r3, [pc, #152]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403bbc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403bc0:	320c      	adds	r2, #12
  403bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403bc6:	f003 0308 	and.w	r3, r3, #8
  403bca:	2b00      	cmp	r3, #0
  403bcc:	d032      	beq.n	403c34 <udd_ep_interrupt+0x494>
			udd_ack_stall(ep);
  403bce:	4b21      	ldr	r3, [pc, #132]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403bd0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403bd4:	320c      	adds	r2, #12
  403bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403bda:	60bb      	str	r3, [r7, #8]
  403bdc:	68bb      	ldr	r3, [r7, #8]
  403bde:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403be2:	60bb      	str	r3, [r7, #8]
  403be4:	68bb      	ldr	r3, [r7, #8]
  403be6:	f023 0308 	bic.w	r3, r3, #8
  403bea:	60bb      	str	r3, [r7, #8]
  403bec:	4b19      	ldr	r3, [pc, #100]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403bee:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403bf2:	68b9      	ldr	r1, [r7, #8]
  403bf4:	320c      	adds	r2, #12
  403bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403bfa:	2300      	movs	r3, #0
  403bfc:	607b      	str	r3, [r7, #4]
  403bfe:	e003      	b.n	403c08 <udd_ep_interrupt+0x468>
  403c00:	bf00      	nop
  403c02:	687b      	ldr	r3, [r7, #4]
  403c04:	3301      	adds	r3, #1
  403c06:	607b      	str	r3, [r7, #4]
  403c08:	687b      	ldr	r3, [r7, #4]
  403c0a:	2b13      	cmp	r3, #19
  403c0c:	d9f8      	bls.n	403c00 <udd_ep_interrupt+0x460>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  403c0e:	4b11      	ldr	r3, [pc, #68]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403c10:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403c14:	320c      	adds	r2, #12
  403c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403c1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  403c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  403c22:	d005      	beq.n	403c30 <udd_ep_interrupt+0x490>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  403c24:	4b0b      	ldr	r3, [pc, #44]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403c26:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403c2a:	320c      	adds	r2, #12
  403c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			}
			return true;
  403c30:	2301      	movs	r3, #1
  403c32:	e00a      	b.n	403c4a <udd_ep_interrupt+0x4aa>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  403c34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403c38:	3301      	adds	r3, #1
  403c3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  403c3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403c42:	2b03      	cmp	r3, #3
  403c44:	f67f adb3 	bls.w	4037ae <udd_ep_interrupt+0xe>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
			}
			return true;
		}
	}
	return false;
  403c48:	2300      	movs	r3, #0
}
  403c4a:	4618      	mov	r0, r3
  403c4c:	3760      	adds	r7, #96	; 0x60
  403c4e:	46bd      	mov	sp, r7
  403c50:	bd80      	pop	{r7, pc}
  403c52:	bf00      	nop
  403c54:	40034000 	.word	0x40034000
  403c58:	0040358d 	.word	0x0040358d
  403c5c:	00403295 	.word	0x00403295

00403c60 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  403c60:	b480      	push	{r7}
  403c62:	b083      	sub	sp, #12
  403c64:	af00      	add	r7, sp, #0
  403c66:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403c68:	687b      	ldr	r3, [r7, #4]
  403c6a:	2b07      	cmp	r3, #7
  403c6c:	d825      	bhi.n	403cba <osc_get_rate+0x5a>
  403c6e:	a201      	add	r2, pc, #4	; (adr r2, 403c74 <osc_get_rate+0x14>)
  403c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403c74:	00403c95 	.word	0x00403c95
  403c78:	00403c9b 	.word	0x00403c9b
  403c7c:	00403ca1 	.word	0x00403ca1
  403c80:	00403ca7 	.word	0x00403ca7
  403c84:	00403cab 	.word	0x00403cab
  403c88:	00403caf 	.word	0x00403caf
  403c8c:	00403cb3 	.word	0x00403cb3
  403c90:	00403cb7 	.word	0x00403cb7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  403c94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403c98:	e010      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  403c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403c9e:	e00d      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  403ca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403ca4:	e00a      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  403ca6:	4b08      	ldr	r3, [pc, #32]	; (403cc8 <osc_get_rate+0x68>)
  403ca8:	e008      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  403caa:	4b08      	ldr	r3, [pc, #32]	; (403ccc <osc_get_rate+0x6c>)
  403cac:	e006      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  403cae:	4b08      	ldr	r3, [pc, #32]	; (403cd0 <osc_get_rate+0x70>)
  403cb0:	e004      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  403cb2:	4b07      	ldr	r3, [pc, #28]	; (403cd0 <osc_get_rate+0x70>)
  403cb4:	e002      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  403cb6:	4b06      	ldr	r3, [pc, #24]	; (403cd0 <osc_get_rate+0x70>)
  403cb8:	e000      	b.n	403cbc <osc_get_rate+0x5c>
	}

	return 0;
  403cba:	2300      	movs	r3, #0
}
  403cbc:	4618      	mov	r0, r3
  403cbe:	370c      	adds	r7, #12
  403cc0:	46bd      	mov	sp, r7
  403cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cc6:	4770      	bx	lr
  403cc8:	003d0900 	.word	0x003d0900
  403ccc:	007a1200 	.word	0x007a1200
  403cd0:	00b71b00 	.word	0x00b71b00

00403cd4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  403cd4:	b580      	push	{r7, lr}
  403cd6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  403cd8:	2006      	movs	r0, #6
  403cda:	4b04      	ldr	r3, [pc, #16]	; (403cec <sysclk_get_main_hz+0x18>)
  403cdc:	4798      	blx	r3
  403cde:	4602      	mov	r2, r0
  403ce0:	4613      	mov	r3, r2
  403ce2:	009b      	lsls	r3, r3, #2
  403ce4:	4413      	add	r3, r2
  403ce6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  403ce8:	4618      	mov	r0, r3
  403cea:	bd80      	pop	{r7, pc}
  403cec:	00403c61 	.word	0x00403c61

00403cf0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  403cf0:	b580      	push	{r7, lr}
  403cf2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  403cf4:	4b02      	ldr	r3, [pc, #8]	; (403d00 <sysclk_get_peripheral_hz+0x10>)
  403cf6:	4798      	blx	r3
  403cf8:	4603      	mov	r3, r0
  403cfa:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  403cfc:	4618      	mov	r0, r3
  403cfe:	bd80      	pop	{r7, pc}
  403d00:	00403cd5 	.word	0x00403cd5

00403d04 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  403d04:	b580      	push	{r7, lr}
  403d06:	b082      	sub	sp, #8
  403d08:	af00      	add	r7, sp, #0
  403d0a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  403d0c:	6878      	ldr	r0, [r7, #4]
  403d0e:	4b02      	ldr	r3, [pc, #8]	; (403d18 <sysclk_enable_peripheral_clock+0x14>)
  403d10:	4798      	blx	r3
}
  403d12:	3708      	adds	r7, #8
  403d14:	46bd      	mov	sp, r7
  403d16:	bd80      	pop	{r7, pc}
  403d18:	004093d5 	.word	0x004093d5

00403d1c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  403d1c:	b580      	push	{r7, lr}
  403d1e:	b08c      	sub	sp, #48	; 0x30
  403d20:	af00      	add	r7, sp, #0
  403d22:	6078      	str	r0, [r7, #4]
  403d24:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  403d26:	4b26      	ldr	r3, [pc, #152]	; (403dc0 <usart_serial_init+0xa4>)
  403d28:	4798      	blx	r3
  403d2a:	4603      	mov	r3, r0
  403d2c:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  403d2e:	683b      	ldr	r3, [r7, #0]
  403d30:	681b      	ldr	r3, [r3, #0]
  403d32:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  403d34:	683b      	ldr	r3, [r7, #0]
  403d36:	689b      	ldr	r3, [r3, #8]
  403d38:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  403d3a:	683b      	ldr	r3, [r7, #0]
  403d3c:	681b      	ldr	r3, [r3, #0]
  403d3e:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  403d40:	683b      	ldr	r3, [r7, #0]
  403d42:	685b      	ldr	r3, [r3, #4]
  403d44:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  403d46:	683b      	ldr	r3, [r7, #0]
  403d48:	689b      	ldr	r3, [r3, #8]
  403d4a:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  403d4c:	683b      	ldr	r3, [r7, #0]
  403d4e:	7b1b      	ldrb	r3, [r3, #12]
  403d50:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403d52:	2300      	movs	r3, #0
  403d54:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403d56:	687a      	ldr	r2, [r7, #4]
  403d58:	4b1a      	ldr	r3, [pc, #104]	; (403dc4 <usart_serial_init+0xa8>)
  403d5a:	429a      	cmp	r2, r3
  403d5c:	d108      	bne.n	403d70 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  403d5e:	2008      	movs	r0, #8
  403d60:	4b19      	ldr	r3, [pc, #100]	; (403dc8 <usart_serial_init+0xac>)
  403d62:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403d68:	6878      	ldr	r0, [r7, #4]
  403d6a:	4619      	mov	r1, r3
  403d6c:	4b17      	ldr	r3, [pc, #92]	; (403dcc <usart_serial_init+0xb0>)
  403d6e:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403d70:	687a      	ldr	r2, [r7, #4]
  403d72:	4b17      	ldr	r3, [pc, #92]	; (403dd0 <usart_serial_init+0xb4>)
  403d74:	429a      	cmp	r2, r3
  403d76:	d108      	bne.n	403d8a <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  403d78:	2009      	movs	r0, #9
  403d7a:	4b13      	ldr	r3, [pc, #76]	; (403dc8 <usart_serial_init+0xac>)
  403d7c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403d82:	6878      	ldr	r0, [r7, #4]
  403d84:	4619      	mov	r1, r3
  403d86:	4b11      	ldr	r3, [pc, #68]	; (403dcc <usart_serial_init+0xb0>)
  403d88:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403d8a:	687a      	ldr	r2, [r7, #4]
  403d8c:	4b11      	ldr	r3, [pc, #68]	; (403dd4 <usart_serial_init+0xb8>)
  403d8e:	429a      	cmp	r2, r3
  403d90:	d112      	bne.n	403db8 <usart_serial_init+0x9c>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  403d92:	200e      	movs	r0, #14
  403d94:	4b0c      	ldr	r3, [pc, #48]	; (403dc8 <usart_serial_init+0xac>)
  403d96:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403d98:	4b09      	ldr	r3, [pc, #36]	; (403dc0 <usart_serial_init+0xa4>)
  403d9a:	4798      	blx	r3
  403d9c:	4603      	mov	r3, r0
  403d9e:	f107 020c 	add.w	r2, r7, #12
  403da2:	6878      	ldr	r0, [r7, #4]
  403da4:	4611      	mov	r1, r2
  403da6:	461a      	mov	r2, r3
  403da8:	4b0b      	ldr	r3, [pc, #44]	; (403dd8 <usart_serial_init+0xbc>)
  403daa:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403dac:	6878      	ldr	r0, [r7, #4]
  403dae:	4b0b      	ldr	r3, [pc, #44]	; (403ddc <usart_serial_init+0xc0>)
  403db0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403db2:	6878      	ldr	r0, [r7, #4]
  403db4:	4b0a      	ldr	r3, [pc, #40]	; (403de0 <usart_serial_init+0xc4>)
  403db6:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  403db8:	3730      	adds	r7, #48	; 0x30
  403dba:	46bd      	mov	sp, r7
  403dbc:	bd80      	pop	{r7, pc}
  403dbe:	bf00      	nop
  403dc0:	00403cf1 	.word	0x00403cf1
  403dc4:	400e0600 	.word	0x400e0600
  403dc8:	00403d05 	.word	0x00403d05
  403dcc:	004082bd 	.word	0x004082bd
  403dd0:	400e0800 	.word	0x400e0800
  403dd4:	40024000 	.word	0x40024000
  403dd8:	00404df9 	.word	0x00404df9
  403ddc:	00404e7d 	.word	0x00404e7d
  403de0:	00404ead 	.word	0x00404ead

00403de4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  403de4:	b580      	push	{r7, lr}
  403de6:	b082      	sub	sp, #8
  403de8:	af00      	add	r7, sp, #0
  403dea:	6078      	str	r0, [r7, #4]
  403dec:	460b      	mov	r3, r1
  403dee:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403df0:	687a      	ldr	r2, [r7, #4]
  403df2:	4b18      	ldr	r3, [pc, #96]	; (403e54 <usart_serial_putchar+0x70>)
  403df4:	429a      	cmp	r2, r3
  403df6:	d10a      	bne.n	403e0e <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  403df8:	bf00      	nop
  403dfa:	78fb      	ldrb	r3, [r7, #3]
  403dfc:	6878      	ldr	r0, [r7, #4]
  403dfe:	4619      	mov	r1, r3
  403e00:	4b15      	ldr	r3, [pc, #84]	; (403e58 <usart_serial_putchar+0x74>)
  403e02:	4798      	blx	r3
  403e04:	4603      	mov	r3, r0
  403e06:	2b00      	cmp	r3, #0
  403e08:	d1f7      	bne.n	403dfa <usart_serial_putchar+0x16>
		return 1;
  403e0a:	2301      	movs	r3, #1
  403e0c:	e01e      	b.n	403e4c <usart_serial_putchar+0x68>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403e0e:	687a      	ldr	r2, [r7, #4]
  403e10:	4b12      	ldr	r3, [pc, #72]	; (403e5c <usart_serial_putchar+0x78>)
  403e12:	429a      	cmp	r2, r3
  403e14:	d10a      	bne.n	403e2c <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  403e16:	bf00      	nop
  403e18:	78fb      	ldrb	r3, [r7, #3]
  403e1a:	6878      	ldr	r0, [r7, #4]
  403e1c:	4619      	mov	r1, r3
  403e1e:	4b0e      	ldr	r3, [pc, #56]	; (403e58 <usart_serial_putchar+0x74>)
  403e20:	4798      	blx	r3
  403e22:	4603      	mov	r3, r0
  403e24:	2b00      	cmp	r3, #0
  403e26:	d1f7      	bne.n	403e18 <usart_serial_putchar+0x34>
		return 1;
  403e28:	2301      	movs	r3, #1
  403e2a:	e00f      	b.n	403e4c <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403e2c:	687a      	ldr	r2, [r7, #4]
  403e2e:	4b0c      	ldr	r3, [pc, #48]	; (403e60 <usart_serial_putchar+0x7c>)
  403e30:	429a      	cmp	r2, r3
  403e32:	d10a      	bne.n	403e4a <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  403e34:	bf00      	nop
  403e36:	78fb      	ldrb	r3, [r7, #3]
  403e38:	6878      	ldr	r0, [r7, #4]
  403e3a:	4619      	mov	r1, r3
  403e3c:	4b09      	ldr	r3, [pc, #36]	; (403e64 <usart_serial_putchar+0x80>)
  403e3e:	4798      	blx	r3
  403e40:	4603      	mov	r3, r0
  403e42:	2b00      	cmp	r3, #0
  403e44:	d1f7      	bne.n	403e36 <usart_serial_putchar+0x52>
		return 1;
  403e46:	2301      	movs	r3, #1
  403e48:	e000      	b.n	403e4c <usart_serial_putchar+0x68>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  403e4a:	2300      	movs	r3, #0
}
  403e4c:	4618      	mov	r0, r3
  403e4e:	3708      	adds	r7, #8
  403e50:	46bd      	mov	sp, r7
  403e52:	bd80      	pop	{r7, pc}
  403e54:	400e0600 	.word	0x400e0600
  403e58:	00408355 	.word	0x00408355
  403e5c:	400e0800 	.word	0x400e0800
  403e60:	40024000 	.word	0x40024000
  403e64:	00404f69 	.word	0x00404f69

00403e68 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403e68:	b580      	push	{r7, lr}
  403e6a:	b084      	sub	sp, #16
  403e6c:	af00      	add	r7, sp, #0
  403e6e:	6078      	str	r0, [r7, #4]
  403e70:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  403e72:	2300      	movs	r3, #0
  403e74:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403e76:	687a      	ldr	r2, [r7, #4]
  403e78:	4b15      	ldr	r3, [pc, #84]	; (403ed0 <usart_serial_getchar+0x68>)
  403e7a:	429a      	cmp	r2, r3
  403e7c:	d107      	bne.n	403e8e <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  403e7e:	bf00      	nop
  403e80:	6878      	ldr	r0, [r7, #4]
  403e82:	6839      	ldr	r1, [r7, #0]
  403e84:	4b13      	ldr	r3, [pc, #76]	; (403ed4 <usart_serial_getchar+0x6c>)
  403e86:	4798      	blx	r3
  403e88:	4603      	mov	r3, r0
  403e8a:	2b00      	cmp	r3, #0
  403e8c:	d1f8      	bne.n	403e80 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403e8e:	687a      	ldr	r2, [r7, #4]
  403e90:	4b11      	ldr	r3, [pc, #68]	; (403ed8 <usart_serial_getchar+0x70>)
  403e92:	429a      	cmp	r2, r3
  403e94:	d107      	bne.n	403ea6 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  403e96:	bf00      	nop
  403e98:	6878      	ldr	r0, [r7, #4]
  403e9a:	6839      	ldr	r1, [r7, #0]
  403e9c:	4b0d      	ldr	r3, [pc, #52]	; (403ed4 <usart_serial_getchar+0x6c>)
  403e9e:	4798      	blx	r3
  403ea0:	4603      	mov	r3, r0
  403ea2:	2b00      	cmp	r3, #0
  403ea4:	d1f8      	bne.n	403e98 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403ea6:	687a      	ldr	r2, [r7, #4]
  403ea8:	4b0c      	ldr	r3, [pc, #48]	; (403edc <usart_serial_getchar+0x74>)
  403eaa:	429a      	cmp	r2, r3
  403eac:	d10d      	bne.n	403eca <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  403eae:	bf00      	nop
  403eb0:	f107 030c 	add.w	r3, r7, #12
  403eb4:	6878      	ldr	r0, [r7, #4]
  403eb6:	4619      	mov	r1, r3
  403eb8:	4b09      	ldr	r3, [pc, #36]	; (403ee0 <usart_serial_getchar+0x78>)
  403eba:	4798      	blx	r3
  403ebc:	4603      	mov	r3, r0
  403ebe:	2b00      	cmp	r3, #0
  403ec0:	d1f6      	bne.n	403eb0 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  403ec2:	68fb      	ldr	r3, [r7, #12]
  403ec4:	b2da      	uxtb	r2, r3
  403ec6:	683b      	ldr	r3, [r7, #0]
  403ec8:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403eca:	3710      	adds	r7, #16
  403ecc:	46bd      	mov	sp, r7
  403ece:	bd80      	pop	{r7, pc}
  403ed0:	400e0600 	.word	0x400e0600
  403ed4:	00408385 	.word	0x00408385
  403ed8:	400e0800 	.word	0x400e0800
  403edc:	40024000 	.word	0x40024000
  403ee0:	00404f9d 	.word	0x00404f9d

00403ee4 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  403ee4:	b580      	push	{r7, lr}
  403ee6:	b082      	sub	sp, #8
  403ee8:	af00      	add	r7, sp, #0
  403eea:	6078      	str	r0, [r7, #4]
  403eec:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  403eee:	4b0f      	ldr	r3, [pc, #60]	; (403f2c <stdio_serial_init+0x48>)
  403ef0:	687a      	ldr	r2, [r7, #4]
  403ef2:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403ef4:	4b0e      	ldr	r3, [pc, #56]	; (403f30 <stdio_serial_init+0x4c>)
  403ef6:	4a0f      	ldr	r2, [pc, #60]	; (403f34 <stdio_serial_init+0x50>)
  403ef8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403efa:	4b0f      	ldr	r3, [pc, #60]	; (403f38 <stdio_serial_init+0x54>)
  403efc:	4a0f      	ldr	r2, [pc, #60]	; (403f3c <stdio_serial_init+0x58>)
  403efe:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  403f00:	6878      	ldr	r0, [r7, #4]
  403f02:	6839      	ldr	r1, [r7, #0]
  403f04:	4b0e      	ldr	r3, [pc, #56]	; (403f40 <stdio_serial_init+0x5c>)
  403f06:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403f08:	4b0e      	ldr	r3, [pc, #56]	; (403f44 <stdio_serial_init+0x60>)
  403f0a:	681b      	ldr	r3, [r3, #0]
  403f0c:	689b      	ldr	r3, [r3, #8]
  403f0e:	4618      	mov	r0, r3
  403f10:	2100      	movs	r1, #0
  403f12:	4b0d      	ldr	r3, [pc, #52]	; (403f48 <stdio_serial_init+0x64>)
  403f14:	4798      	blx	r3
	setbuf(stdin, NULL);
  403f16:	4b0b      	ldr	r3, [pc, #44]	; (403f44 <stdio_serial_init+0x60>)
  403f18:	681b      	ldr	r3, [r3, #0]
  403f1a:	685b      	ldr	r3, [r3, #4]
  403f1c:	4618      	mov	r0, r3
  403f1e:	2100      	movs	r1, #0
  403f20:	4b09      	ldr	r3, [pc, #36]	; (403f48 <stdio_serial_init+0x64>)
  403f22:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  403f24:	3708      	adds	r7, #8
  403f26:	46bd      	mov	sp, r7
  403f28:	bd80      	pop	{r7, pc}
  403f2a:	bf00      	nop
  403f2c:	2000c004 	.word	0x2000c004
  403f30:	2000c000 	.word	0x2000c000
  403f34:	00403de5 	.word	0x00403de5
  403f38:	2000af6c 	.word	0x2000af6c
  403f3c:	00403e69 	.word	0x00403e69
  403f40:	00403d1d 	.word	0x00403d1d
  403f44:	20000640 	.word	0x20000640
  403f48:	0040a2c9 	.word	0x0040a2c9

00403f4c <configure_console>:

/**
 * \brief Configure the console UART for using printf.
 */
static void configure_console(void)
{
  403f4c:	b590      	push	{r4, r7, lr}
  403f4e:	b085      	sub	sp, #20
  403f50:	af00      	add	r7, sp, #0
	const usart_serial_options_t usart_serial_options = 
  403f52:	4b0a      	ldr	r3, [pc, #40]	; (403f7c <configure_console+0x30>)
  403f54:	463c      	mov	r4, r7
  403f56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_TEST_PARITY,
		.stopbits   = CONF_TEST_STOPBITS,
	};

	/* Configure console UART. */
	stdio_serial_init(UART1, &usart_serial_options);
  403f5c:	463b      	mov	r3, r7
  403f5e:	4808      	ldr	r0, [pc, #32]	; (403f80 <configure_console+0x34>)
  403f60:	4619      	mov	r1, r3
  403f62:	4b08      	ldr	r3, [pc, #32]	; (403f84 <configure_console+0x38>)
  403f64:	4798      	blx	r3
	/* Specify that stdout should not be buffered. */
	#if defined(__GNUC__)
		setbuf(stdout, NULL);
  403f66:	4b08      	ldr	r3, [pc, #32]	; (403f88 <configure_console+0x3c>)
  403f68:	681b      	ldr	r3, [r3, #0]
  403f6a:	689b      	ldr	r3, [r3, #8]
  403f6c:	4618      	mov	r0, r3
  403f6e:	2100      	movs	r1, #0
  403f70:	4b06      	ldr	r3, [pc, #24]	; (403f8c <configure_console+0x40>)
  403f72:	4798      	blx	r3
	#else
	/* Already the case in IAR's Normal DLIB default configuration: printf()
	 * emits one character at a time.
	 */
	#endif
}
  403f74:	3714      	adds	r7, #20
  403f76:	46bd      	mov	sp, r7
  403f78:	bd90      	pop	{r4, r7, pc}
  403f7a:	bf00      	nop
  403f7c:	004132a4 	.word	0x004132a4
  403f80:	400e0800 	.word	0x400e0800
  403f84:	00403ee5 	.word	0x00403ee5
  403f88:	20000640 	.word	0x20000640
  403f8c:	0040a2c9 	.word	0x0040a2c9

00403f90 <brd_board_init>:

void brd_board_init()
{
  403f90:	b580      	push	{r7, lr}
  403f92:	af00      	add	r7, sp, #0
	//configure the interrupt handlers first. 
	
	//configure the gpio
	drv_gpio_initializeAll();
  403f94:	4b14      	ldr	r3, [pc, #80]	; (403fe8 <brd_board_init+0x58>)
  403f96:	4798      	blx	r3
	//configure LED driver
	drv_led_init(&ledConfiguration);
  403f98:	4814      	ldr	r0, [pc, #80]	; (403fec <brd_board_init+0x5c>)
  403f9a:	4b15      	ldr	r3, [pc, #84]	; (403ff0 <brd_board_init+0x60>)
  403f9c:	4798      	blx	r3
	//Set LED white to indicate power on
	drv_led_set(DRV_LED_WHITE,DRV_LED_SOLID);
  403f9e:	2004      	movs	r0, #4
  403fa0:	2101      	movs	r1, #1
  403fa2:	4b14      	ldr	r3, [pc, #80]	; (403ff4 <brd_board_init+0x64>)
  403fa4:	4798      	blx	r3
	vTaskDelay(200);
  403fa6:	20c8      	movs	r0, #200	; 0xc8
  403fa8:	4b13      	ldr	r3, [pc, #76]	; (403ff8 <brd_board_init+0x68>)
  403faa:	4798      	blx	r3
	pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  403fac:	2000      	movs	r0, #0
  403fae:	4b13      	ldr	r3, [pc, #76]	; (403ffc <brd_board_init+0x6c>)
  403fb0:	4798      	blx	r3
	while (!pmc_osc_is_ready_32kxtal());
  403fb2:	bf00      	nop
  403fb4:	4b12      	ldr	r3, [pc, #72]	; (404000 <brd_board_init+0x70>)
  403fb6:	4798      	blx	r3
  403fb8:	4603      	mov	r3, r0
  403fba:	2b00      	cmp	r3, #0
  403fbc:	d0fa      	beq.n	403fb4 <brd_board_init+0x24>
	rtc_set_hour_mode(RTC, 0);
  403fbe:	4811      	ldr	r0, [pc, #68]	; (404004 <brd_board_init+0x74>)
  403fc0:	2100      	movs	r1, #0
  403fc2:	4b11      	ldr	r3, [pc, #68]	; (404008 <brd_board_init+0x78>)
  403fc4:	4798      	blx	r3
	rtc_clear_date_alarm(RTC);
  403fc6:	480f      	ldr	r0, [pc, #60]	; (404004 <brd_board_init+0x74>)
  403fc8:	4b10      	ldr	r3, [pc, #64]	; (40400c <brd_board_init+0x7c>)
  403fca:	4798      	blx	r3
	rtc_clear_time_alarm(RTC);
  403fcc:	480d      	ldr	r0, [pc, #52]	; (404004 <brd_board_init+0x74>)
  403fce:	4b10      	ldr	r3, [pc, #64]	; (404010 <brd_board_init+0x80>)
  403fd0:	4798      	blx	r3
	drv_led_set(DRV_LED_OFF,DRV_LED_SOLID);	
  403fd2:	2006      	movs	r0, #6
  403fd4:	2101      	movs	r1, #1
  403fd6:	4b07      	ldr	r3, [pc, #28]	; (403ff4 <brd_board_init+0x64>)
  403fd8:	4798      	blx	r3
	brd_initAllUarts();
  403fda:	4b0e      	ldr	r3, [pc, #56]	; (404014 <brd_board_init+0x84>)
  403fdc:	4798      	blx	r3
	configure_console();
  403fde:	4b0e      	ldr	r3, [pc, #56]	; (404018 <brd_board_init+0x88>)
  403fe0:	4798      	blx	r3
	//try to configure the USB
	udc_start(); 
  403fe2:	4b0e      	ldr	r3, [pc, #56]	; (40401c <brd_board_init+0x8c>)
  403fe4:	4798      	blx	r3
	
}
  403fe6:	bd80      	pop	{r7, pc}
  403fe8:	0040450d 	.word	0x0040450d
  403fec:	20000088 	.word	0x20000088
  403ff0:	00405105 	.word	0x00405105
  403ff4:	0040516d 	.word	0x0040516d
  403ff8:	00406df5 	.word	0x00406df5
  403ffc:	004091fd 	.word	0x004091fd
  404000:	00409235 	.word	0x00409235
  404004:	400e1460 	.word	0x400e1460
  404008:	00408011 	.word	0x00408011
  40400c:	004082a1 	.word	0x004082a1
  404010:	00408289 	.word	0x00408289
  404014:	00404021 	.word	0x00404021
  404018:	00403f4d 	.word	0x00403f4d
  40401c:	0040125d 	.word	0x0040125d

00404020 <brd_initAllUarts>:


void brd_initAllUarts()
{
  404020:	b580      	push	{r7, lr}
  404022:	af00      	add	r7, sp, #0
	if(drv_uart_init(&uart0Config) != STATUS_PASS)
  404024:	4807      	ldr	r0, [pc, #28]	; (404044 <brd_initAllUarts+0x24>)
  404026:	4b08      	ldr	r3, [pc, #32]	; (404048 <brd_initAllUarts+0x28>)
  404028:	4798      	blx	r3
  40402a:	4603      	mov	r3, r0
  40402c:	2b00      	cmp	r3, #0
  40402e:	d000      	beq.n	404032 <brd_initAllUarts+0x12>
	{
		while(1); //spin here
  404030:	e7fe      	b.n	404030 <brd_initAllUarts+0x10>
	}
	if(drv_uart_init(&uart1Config) != STATUS_PASS)
  404032:	4806      	ldr	r0, [pc, #24]	; (40404c <brd_initAllUarts+0x2c>)
  404034:	4b04      	ldr	r3, [pc, #16]	; (404048 <brd_initAllUarts+0x28>)
  404036:	4798      	blx	r3
  404038:	4603      	mov	r3, r0
  40403a:	2b00      	cmp	r3, #0
  40403c:	d000      	beq.n	404040 <brd_initAllUarts+0x20>
	{
		while(1); //spin here
  40403e:	e7fe      	b.n	40403e <brd_initAllUarts+0x1e>
	}
}
  404040:	bd80      	pop	{r7, pc}
  404042:	bf00      	nop
  404044:	20000058 	.word	0x20000058
  404048:	00405585 	.word	0x00405585
  40404c:	20000070 	.word	0x20000070

00404050 <chrg_task_chargeMonitor>:
 * @brief This task will monitor the current charger status and battery charge level.  
 * @param pvParameters, void pointer to structure containing data router configuration. 
 * @return void
 ***********************************************************************************************/
void chrg_task_chargeMonitor(void *pvParameters)
{
  404050:	b590      	push	{r4, r7, lr}
  404052:	b087      	sub	sp, #28
  404054:	af00      	add	r7, sp, #0
  404056:	6078      	str	r0, [r7, #4]
	chrg_chargeMonitorConfig_t* chargeMonitorConfig;  	
	chrg_chargerState_t newChargerState = CHRG_CHARGER_STATE_INVALID_CODE; 
  404058:	2305      	movs	r3, #5
  40405a:	75fb      	strb	r3, [r7, #23]
	mgr_eventMessage_t eventMessage; 
	while(1)
	{
		newChargerState = getChargerState(chargeMonitorConfig); 	
  40405c:	6938      	ldr	r0, [r7, #16]
  40405e:	4b12      	ldr	r3, [pc, #72]	; (4040a8 <chrg_task_chargeMonitor+0x58>)
  404060:	4798      	blx	r3
  404062:	4603      	mov	r3, r0
  404064:	75fb      	strb	r3, [r7, #23]
		//check if the state is new
		if(newChargerState != chrg_currentChargerState)
  404066:	4b11      	ldr	r3, [pc, #68]	; (4040ac <chrg_task_chargeMonitor+0x5c>)
  404068:	781b      	ldrb	r3, [r3, #0]
  40406a:	b2db      	uxtb	r3, r3
  40406c:	7dfa      	ldrb	r2, [r7, #23]
  40406e:	429a      	cmp	r2, r3
  404070:	d015      	beq.n	40409e <chrg_task_chargeMonitor+0x4e>
		{
			if(newChargerState == CHRG_CHARGER_STATE_LOW_BATTERY)
  404072:	7dfb      	ldrb	r3, [r7, #23]
  404074:	2b03      	cmp	r3, #3
  404076:	d10f      	bne.n	404098 <chrg_task_chargeMonitor+0x48>
			{
				eventMessage.sysEvent = SYS_EVENT_LOW_BATTERY; 
  404078:	2302      	movs	r3, #2
  40407a:	733b      	strb	r3, [r7, #12]
				if(mgr_eventQueue != NULL)
  40407c:	4b0c      	ldr	r3, [pc, #48]	; (4040b0 <chrg_task_chargeMonitor+0x60>)
  40407e:	681b      	ldr	r3, [r3, #0]
  404080:	2b00      	cmp	r3, #0
  404082:	d009      	beq.n	404098 <chrg_task_chargeMonitor+0x48>
				{
					if(xQueueSendToBack(mgr_eventQueue,( void * ) &eventMessage,5) != TRUE)
  404084:	4b0a      	ldr	r3, [pc, #40]	; (4040b0 <chrg_task_chargeMonitor+0x60>)
  404086:	681a      	ldr	r2, [r3, #0]
  404088:	f107 030c 	add.w	r3, r7, #12
  40408c:	4610      	mov	r0, r2
  40408e:	4619      	mov	r1, r3
  404090:	2205      	movs	r2, #5
  404092:	2300      	movs	r3, #0
  404094:	4c07      	ldr	r4, [pc, #28]	; (4040b4 <chrg_task_chargeMonitor+0x64>)
  404096:	47a0      	blx	r4
					{
						//this is an error, we should log it.
					}				
				}
			}
			chrg_currentChargerState = newChargerState; 			
  404098:	4b04      	ldr	r3, [pc, #16]	; (4040ac <chrg_task_chargeMonitor+0x5c>)
  40409a:	7dfa      	ldrb	r2, [r7, #23]
  40409c:	701a      	strb	r2, [r3, #0]
		}	
		vTaskDelay(500); 
  40409e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4040a2:	4b05      	ldr	r3, [pc, #20]	; (4040b8 <chrg_task_chargeMonitor+0x68>)
  4040a4:	4798      	blx	r3
	}	
  4040a6:	e7d9      	b.n	40405c <chrg_task_chargeMonitor+0xc>
  4040a8:	004040bd 	.word	0x004040bd
  4040ac:	2000008c 	.word	0x2000008c
  4040b0:	20000cb0 	.word	0x20000cb0
  4040b4:	004065a9 	.word	0x004065a9
  4040b8:	00406df5 	.word	0x00406df5

004040bc <getChargerState>:

//static functions

//get charge status
chrg_chargerState_t getChargerState(chrg_chargeMonitorConfig_t* chargerConfig)
{
  4040bc:	b580      	push	{r7, lr}
  4040be:	b084      	sub	sp, #16
  4040c0:	af00      	add	r7, sp, #0
  4040c2:	6078      	str	r0, [r7, #4]
	chrg_chargerState_t chargerState = 0x00; 
  4040c4:	2300      	movs	r3, #0
  4040c6:	73fb      	strb	r3, [r7, #15]
	drv_gpio_pin_state_t tempPinState = DRV_GPIO_PIN_STATE_LOW; 
  4040c8:	2300      	movs	r3, #0
  4040ca:	73bb      	strb	r3, [r7, #14]
	drv_gpio_getPinState(chargerConfig->pin_pg, &tempPinState); 
  4040cc:	687b      	ldr	r3, [r7, #4]
  4040ce:	789a      	ldrb	r2, [r3, #2]
  4040d0:	f107 030e 	add.w	r3, r7, #14
  4040d4:	4610      	mov	r0, r2
  4040d6:	4619      	mov	r1, r3
  4040d8:	4b17      	ldr	r3, [pc, #92]	; (404138 <getChargerState+0x7c>)
  4040da:	4798      	blx	r3
	chargerState |= (tempPinState | 0x01); 
  4040dc:	7bba      	ldrb	r2, [r7, #14]
  4040de:	7bfb      	ldrb	r3, [r7, #15]
  4040e0:	4313      	orrs	r3, r2
  4040e2:	b2db      	uxtb	r3, r3
  4040e4:	f043 0301 	orr.w	r3, r3, #1
  4040e8:	73fb      	strb	r3, [r7, #15]
	drv_gpio_getPinState(chargerConfig->pin_stat1, &tempPinState);
  4040ea:	687b      	ldr	r3, [r7, #4]
  4040ec:	781a      	ldrb	r2, [r3, #0]
  4040ee:	f107 030e 	add.w	r3, r7, #14
  4040f2:	4610      	mov	r0, r2
  4040f4:	4619      	mov	r1, r3
  4040f6:	4b10      	ldr	r3, [pc, #64]	; (404138 <getChargerState+0x7c>)
  4040f8:	4798      	blx	r3
	chargerState |= ((tempPinState<<1) | 0x01);
  4040fa:	7bbb      	ldrb	r3, [r7, #14]
  4040fc:	005b      	lsls	r3, r3, #1
  4040fe:	b2da      	uxtb	r2, r3
  404100:	7bfb      	ldrb	r3, [r7, #15]
  404102:	4313      	orrs	r3, r2
  404104:	b2db      	uxtb	r3, r3
  404106:	f043 0301 	orr.w	r3, r3, #1
  40410a:	73fb      	strb	r3, [r7, #15]
	drv_gpio_getPinState(chargerConfig->pin_stat2, &tempPinState);
  40410c:	687b      	ldr	r3, [r7, #4]
  40410e:	785a      	ldrb	r2, [r3, #1]
  404110:	f107 030e 	add.w	r3, r7, #14
  404114:	4610      	mov	r0, r2
  404116:	4619      	mov	r1, r3
  404118:	4b07      	ldr	r3, [pc, #28]	; (404138 <getChargerState+0x7c>)
  40411a:	4798      	blx	r3
	chargerState |= ((tempPinState<<2) | 0x01);		
  40411c:	7bbb      	ldrb	r3, [r7, #14]
  40411e:	009b      	lsls	r3, r3, #2
  404120:	b2da      	uxtb	r2, r3
  404122:	7bfb      	ldrb	r3, [r7, #15]
  404124:	4313      	orrs	r3, r2
  404126:	b2db      	uxtb	r3, r3
  404128:	f043 0301 	orr.w	r3, r3, #1
  40412c:	73fb      	strb	r3, [r7, #15]
	return chargerState; 		
  40412e:	7bfb      	ldrb	r3, [r7, #15]
  404130:	4618      	mov	r0, r3
  404132:	3710      	adds	r7, #16
  404134:	46bd      	mov	sp, r7
  404136:	bd80      	pop	{r7, pc}
  404138:	004047f9 	.word	0x004047f9

0040413c <cmd_task_commandProcesor>:
 * @brief This task receives all incoming commands to the brain pack, and responds to the ones it needs to.   
 * @param pvParameters, void pointer to structure containing configuration
 * @return void
 ***********************************************************************************************/
void cmd_task_commandProcesor(void *pvParameters)
{
  40413c:	b590      	push	{r4, r7, lr}
  40413e:	b091      	sub	sp, #68	; 0x44
  404140:	af00      	add	r7, sp, #0
  404142:	6078      	str	r0, [r7, #4]
	cmd_queue_commandQueue = xQueueCreate( 10, sizeof(cmd_commandPacket_t));
  404144:	200a      	movs	r0, #10
  404146:	2136      	movs	r1, #54	; 0x36
  404148:	2200      	movs	r2, #0
  40414a:	4b22      	ldr	r3, [pc, #136]	; (4041d4 <cmd_task_commandProcesor+0x98>)
  40414c:	4798      	blx	r3
  40414e:	4602      	mov	r2, r0
  404150:	4b21      	ldr	r3, [pc, #132]	; (4041d8 <cmd_task_commandProcesor+0x9c>)
  404152:	601a      	str	r2, [r3, #0]
	cmd_commandPacket_t packet; 
	cmd_initPacketStructure(&packet);
  404154:	f107 0308 	add.w	r3, r7, #8
  404158:	4618      	mov	r0, r3
  40415a:	4b20      	ldr	r3, [pc, #128]	; (4041dc <cmd_task_commandProcesor+0xa0>)
  40415c:	4798      	blx	r3
	if(cmd_queue_commandQueue == 0)
  40415e:	4b1e      	ldr	r3, [pc, #120]	; (4041d8 <cmd_task_commandProcesor+0x9c>)
  404160:	681b      	ldr	r3, [r3, #0]
  404162:	2b00      	cmp	r3, #0
  404164:	d100      	bne.n	404168 <cmd_task_commandProcesor+0x2c>
	{
		// Queue was not created this is an error!		
		return;
  404166:	e031      	b.n	4041cc <cmd_task_commandProcesor+0x90>
	}
	while(1)
	{	
		if(xQueueReceive( cmd_queue_commandQueue, &(packet), 1000) == TRUE)
  404168:	4b1b      	ldr	r3, [pc, #108]	; (4041d8 <cmd_task_commandProcesor+0x9c>)
  40416a:	681a      	ldr	r2, [r3, #0]
  40416c:	f107 0308 	add.w	r3, r7, #8
  404170:	4610      	mov	r0, r2
  404172:	4619      	mov	r1, r3
  404174:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  404178:	2300      	movs	r3, #0
  40417a:	4c19      	ldr	r4, [pc, #100]	; (4041e0 <cmd_task_commandProcesor+0xa4>)
  40417c:	47a0      	blx	r4
  40417e:	4603      	mov	r3, r0
  404180:	2b01      	cmp	r3, #1
  404182:	d122      	bne.n	4041ca <cmd_task_commandProcesor+0x8e>
		{
			//only a small subset of commands are handled on the power board
			//send the rest to the databoard for processing.
			if(packet.packetSize > 0)
  404184:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
  404186:	2b00      	cmp	r3, #0
  404188:	d01f      	beq.n	4041ca <cmd_task_commandProcesor+0x8e>
			{		
				if(strncmp(packet.packetData,"setTime",7)==0)
  40418a:	f107 0308 	add.w	r3, r7, #8
  40418e:	3301      	adds	r3, #1
  404190:	4618      	mov	r0, r3
  404192:	4914      	ldr	r1, [pc, #80]	; (4041e4 <cmd_task_commandProcesor+0xa8>)
  404194:	2207      	movs	r2, #7
  404196:	4b14      	ldr	r3, [pc, #80]	; (4041e8 <cmd_task_commandProcesor+0xac>)
  404198:	4798      	blx	r3
  40419a:	4603      	mov	r3, r0
  40419c:	2b00      	cmp	r3, #0
  40419e:	d10e      	bne.n	4041be <cmd_task_commandProcesor+0x82>
				{
					//handle the set time command. 
					if(strlen(packet.packetData) >= 24)
  4041a0:	f107 0308 	add.w	r3, r7, #8
  4041a4:	3301      	adds	r3, #1
  4041a6:	4618      	mov	r0, r3
  4041a8:	4b10      	ldr	r3, [pc, #64]	; (4041ec <cmd_task_commandProcesor+0xb0>)
  4041aa:	4798      	blx	r3
  4041ac:	4603      	mov	r3, r0
  4041ae:	2b17      	cmp	r3, #23
  4041b0:	d905      	bls.n	4041be <cmd_task_commandProcesor+0x82>
					{
						setTimeFromString(packet.packetData+7);
  4041b2:	f107 0308 	add.w	r3, r7, #8
  4041b6:	3308      	adds	r3, #8
  4041b8:	4618      	mov	r0, r3
  4041ba:	4b0d      	ldr	r3, [pc, #52]	; (4041f0 <cmd_task_commandProcesor+0xb4>)
  4041bc:	4798      	blx	r3
					}
				}		
				//forward the command to the data board. 
				dat_sendPacketToDataBoard(&packet); 
  4041be:	f107 0308 	add.w	r3, r7, #8
  4041c2:	4618      	mov	r0, r3
  4041c4:	4b0b      	ldr	r3, [pc, #44]	; (4041f4 <cmd_task_commandProcesor+0xb8>)
  4041c6:	4798      	blx	r3
			}
		}
	}
  4041c8:	e7ce      	b.n	404168 <cmd_task_commandProcesor+0x2c>
  4041ca:	e7cd      	b.n	404168 <cmd_task_commandProcesor+0x2c>
		
}
  4041cc:	3744      	adds	r7, #68	; 0x44
  4041ce:	46bd      	mov	sp, r7
  4041d0:	bd90      	pop	{r4, r7, pc}
  4041d2:	bf00      	nop
  4041d4:	00406511 	.word	0x00406511
  4041d8:	20000cac 	.word	0x20000cac
  4041dc:	004041f9 	.word	0x004041f9
  4041e0:	004067d5 	.word	0x004067d5
  4041e4:	004132b4 	.word	0x004132b4
  4041e8:	0040a565 	.word	0x0040a565
  4041ec:	0040a505 	.word	0x0040a505
  4041f0:	00404225 	.word	0x00404225
  4041f4:	00404459 	.word	0x00404459

004041f8 <cmd_initPacketStructure>:

void cmd_initPacketStructure(cmd_commandPacket_t* packet)
{
  4041f8:	b580      	push	{r7, lr}
  4041fa:	b082      	sub	sp, #8
  4041fc:	af00      	add	r7, sp, #0
  4041fe:	6078      	str	r0, [r7, #4]
	memset(packet->packetData,0,CMD_INCOMING_CMD_SIZE_MAX);
  404200:	687b      	ldr	r3, [r7, #4]
  404202:	3301      	adds	r3, #1
  404204:	4618      	mov	r0, r3
  404206:	2100      	movs	r1, #0
  404208:	2232      	movs	r2, #50	; 0x32
  40420a:	4b05      	ldr	r3, [pc, #20]	; (404220 <cmd_initPacketStructure+0x28>)
  40420c:	4798      	blx	r3
	packet->packetSize = 0;
  40420e:	687b      	ldr	r3, [r7, #4]
  404210:	2200      	movs	r2, #0
  404212:	869a      	strh	r2, [r3, #52]	; 0x34
	packet->packetSource = CMD_COMMAND_SOURCE_DAUGHTER; 
  404214:	687b      	ldr	r3, [r7, #4]
  404216:	2200      	movs	r2, #0
  404218:	701a      	strb	r2, [r3, #0]
}
  40421a:	3708      	adds	r7, #8
  40421c:	46bd      	mov	sp, r7
  40421e:	bd80      	pop	{r7, pc}
  404220:	0040a235 	.word	0x0040a235

00404224 <setTimeFromString>:
	}
}

//static functions
static void setTimeFromString(char* dateTime)
{
  404224:	b590      	push	{r4, r7, lr}
  404226:	b091      	sub	sp, #68	; 0x44
  404228:	af06      	add	r7, sp, #24
  40422a:	6078      	str	r0, [r7, #4]
	uint32_t year, month, day, dow; //dow is day of week (1-7)
	uint32_t hour, minute, second;
	if(sscanf(dateTime,"%d-%d-%d-%d-%d:%d:%d\r\n", &year, &month, &day, &dow, &hour, &minute, &second ) == 7)
  40422c:	f107 0224 	add.w	r2, r7, #36	; 0x24
  404230:	f107 0320 	add.w	r3, r7, #32
  404234:	f107 011c 	add.w	r1, r7, #28
  404238:	9100      	str	r1, [sp, #0]
  40423a:	f107 0118 	add.w	r1, r7, #24
  40423e:	9101      	str	r1, [sp, #4]
  404240:	f107 0114 	add.w	r1, r7, #20
  404244:	9102      	str	r1, [sp, #8]
  404246:	f107 0110 	add.w	r1, r7, #16
  40424a:	9103      	str	r1, [sp, #12]
  40424c:	f107 010c 	add.w	r1, r7, #12
  404250:	9104      	str	r1, [sp, #16]
  404252:	6878      	ldr	r0, [r7, #4]
  404254:	490b      	ldr	r1, [pc, #44]	; (404284 <setTimeFromString+0x60>)
  404256:	4c0c      	ldr	r4, [pc, #48]	; (404288 <setTimeFromString+0x64>)
  404258:	47a0      	blx	r4
  40425a:	4603      	mov	r3, r0
  40425c:	2b07      	cmp	r3, #7
  40425e:	d10d      	bne.n	40427c <setTimeFromString+0x58>
	{
		// we successfully parsed the data, set the time and date
		rtc_set_time(RTC,hour,minute,second);
  404260:	6979      	ldr	r1, [r7, #20]
  404262:	693a      	ldr	r2, [r7, #16]
  404264:	68fb      	ldr	r3, [r7, #12]
  404266:	4809      	ldr	r0, [pc, #36]	; (40428c <setTimeFromString+0x68>)
  404268:	4c09      	ldr	r4, [pc, #36]	; (404290 <setTimeFromString+0x6c>)
  40426a:	47a0      	blx	r4
		rtc_set_date(RTC,year,month,day,dow);
  40426c:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40426e:	6a3a      	ldr	r2, [r7, #32]
  404270:	69fb      	ldr	r3, [r7, #28]
  404272:	69b8      	ldr	r0, [r7, #24]
  404274:	9000      	str	r0, [sp, #0]
  404276:	4805      	ldr	r0, [pc, #20]	; (40428c <setTimeFromString+0x68>)
  404278:	4c06      	ldr	r4, [pc, #24]	; (404294 <setTimeFromString+0x70>)
  40427a:	47a0      	blx	r4
	}
	else
	{
		//printString("NACK\r\n");
	}
}
  40427c:	372c      	adds	r7, #44	; 0x2c
  40427e:	46bd      	mov	sp, r7
  404280:	bd90      	pop	{r4, r7, pc}
  404282:	bf00      	nop
  404284:	004132cc 	.word	0x004132cc
  404288:	0040a425 	.word	0x0040a425
  40428c:	400e1460 	.word	0x400e1460
  404290:	00408045 	.word	0x00408045
  404294:	0040814d 	.word	0x0040814d

00404298 <dat_task_dataRouter>:
 *	the daughter board UART 
 * @param pvParameters, void pointer to structure containing data router configuration. 
 * @return void
 ***********************************************************************************************/
void dat_task_dataRouter(void *pvParameters)
{
  404298:	b590      	push	{r4, r7, lr}
  40429a:	b0a1      	sub	sp, #132	; 0x84
  40429c:	af00      	add	r7, sp, #0
  40429e:	6078      	str	r0, [r7, #4]
	dataRouterConfig = (dat_dataRouterConfig_t*)pvParameters; 
  4042a0:	4b62      	ldr	r3, [pc, #392]	; (40442c <dat_task_dataRouter+0x194>)
  4042a2:	687a      	ldr	r2, [r7, #4]
  4042a4:	601a      	str	r2, [r3, #0]
	cmd_commandPacket_t daughterBoardPacket, usbPacket;
	//initialize the packets
	cmd_initPacketStructure(&daughterBoardPacket);
  4042a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
  4042aa:	4618      	mov	r0, r3
  4042ac:	4b60      	ldr	r3, [pc, #384]	; (404430 <dat_task_dataRouter+0x198>)
  4042ae:	4798      	blx	r3
	cmd_initPacketStructure(&usbPacket);
  4042b0:	f107 030c 	add.w	r3, r7, #12
  4042b4:	4618      	mov	r0, r3
  4042b6:	4b5e      	ldr	r3, [pc, #376]	; (404430 <dat_task_dataRouter+0x198>)
  4042b8:	4798      	blx	r3
		
	if(drv_uart_isInit(dataRouterConfig->destination) != STATUS_PASS)
  4042ba:	4b5c      	ldr	r3, [pc, #368]	; (40442c <dat_task_dataRouter+0x194>)
  4042bc:	681b      	ldr	r3, [r3, #0]
  4042be:	685b      	ldr	r3, [r3, #4]
  4042c0:	4618      	mov	r0, r3
  4042c2:	4b5c      	ldr	r3, [pc, #368]	; (404434 <dat_task_dataRouter+0x19c>)
  4042c4:	4798      	blx	r3
  4042c6:	4603      	mov	r3, r0
  4042c8:	2b00      	cmp	r3, #0
  4042ca:	d000      	beq.n	4042ce <dat_task_dataRouter+0x36>
	{
		//fail!
		return; 
  4042cc:	e0aa      	b.n	404424 <dat_task_dataRouter+0x18c>
	}
	
	if(drv_uart_isInit(dataRouterConfig->dataBoardUart) != STATUS_PASS)
  4042ce:	4b57      	ldr	r3, [pc, #348]	; (40442c <dat_task_dataRouter+0x194>)
  4042d0:	681b      	ldr	r3, [r3, #0]
  4042d2:	681b      	ldr	r3, [r3, #0]
  4042d4:	4618      	mov	r0, r3
  4042d6:	4b57      	ldr	r3, [pc, #348]	; (404434 <dat_task_dataRouter+0x19c>)
  4042d8:	4798      	blx	r3
  4042da:	4603      	mov	r3, r0
  4042dc:	2b00      	cmp	r3, #0
  4042de:	d000      	beq.n	4042e2 <dat_task_dataRouter+0x4a>
	{
		//fail!
		return;
  4042e0:	e0a0      	b.n	404424 <dat_task_dataRouter+0x18c>
	}

	char receivedByte = 0x00; 
  4042e2:	2300      	movs	r3, #0
  4042e4:	72fb      	strb	r3, [r7, #11]
	int receivedUsbData = 0x00; 
  4042e6:	2300      	movs	r3, #0
  4042e8:	67fb      	str	r3, [r7, #124]	; 0x7c
	while(1)
	{
		//try to read byte from databoard mcu
		if(drv_uart_getChar(dataRouterConfig->dataBoardUart, &receivedByte) == STATUS_PASS)
  4042ea:	4b50      	ldr	r3, [pc, #320]	; (40442c <dat_task_dataRouter+0x194>)
  4042ec:	681b      	ldr	r3, [r3, #0]
  4042ee:	681a      	ldr	r2, [r3, #0]
  4042f0:	f107 030b 	add.w	r3, r7, #11
  4042f4:	4610      	mov	r0, r2
  4042f6:	4619      	mov	r1, r3
  4042f8:	4b4f      	ldr	r3, [pc, #316]	; (404438 <dat_task_dataRouter+0x1a0>)
  4042fa:	4798      	blx	r3
  4042fc:	4603      	mov	r3, r0
  4042fe:	2b00      	cmp	r3, #0
  404300:	d110      	bne.n	404324 <dat_task_dataRouter+0x8c>
		{
			//if byte exists, pass through to the daughter board and USB (if connected)
			drv_uart_putChar(dataRouterConfig->destination, receivedByte); 
  404302:	4b4a      	ldr	r3, [pc, #296]	; (40442c <dat_task_dataRouter+0x194>)
  404304:	681b      	ldr	r3, [r3, #0]
  404306:	685a      	ldr	r2, [r3, #4]
  404308:	7afb      	ldrb	r3, [r7, #11]
  40430a:	4610      	mov	r0, r2
  40430c:	4619      	mov	r1, r3
  40430e:	4b4b      	ldr	r3, [pc, #300]	; (40443c <dat_task_dataRouter+0x1a4>)
  404310:	4798      	blx	r3
			if(udi_cdc_is_tx_ready() == true)
  404312:	4b4b      	ldr	r3, [pc, #300]	; (404440 <dat_task_dataRouter+0x1a8>)
  404314:	4798      	blx	r3
  404316:	4603      	mov	r3, r0
  404318:	2b00      	cmp	r3, #0
  40431a:	d003      	beq.n	404324 <dat_task_dataRouter+0x8c>
			{
				udi_cdc_putc(receivedByte); 
  40431c:	7afb      	ldrb	r3, [r7, #11]
  40431e:	4618      	mov	r0, r3
  404320:	4b48      	ldr	r3, [pc, #288]	; (404444 <dat_task_dataRouter+0x1ac>)
  404322:	4798      	blx	r3
			}
			
		}		
				
		//try to read byte from daughter board
		if(drv_uart_getChar(dataRouterConfig->destination, &receivedByte) == STATUS_PASS)
  404324:	4b41      	ldr	r3, [pc, #260]	; (40442c <dat_task_dataRouter+0x194>)
  404326:	681b      	ldr	r3, [r3, #0]
  404328:	685a      	ldr	r2, [r3, #4]
  40432a:	f107 030b 	add.w	r3, r7, #11
  40432e:	4610      	mov	r0, r2
  404330:	4619      	mov	r1, r3
  404332:	4b41      	ldr	r3, [pc, #260]	; (404438 <dat_task_dataRouter+0x1a0>)
  404334:	4798      	blx	r3
  404336:	4603      	mov	r3, r0
  404338:	2b00      	cmp	r3, #0
  40433a:	d133      	bne.n	4043a4 <dat_task_dataRouter+0x10c>
		{
			//if byte exists, pass through to the daughter board and USB (if connected)
			if(daughterBoardPacket.packetSize < CMD_INCOMING_CMD_SIZE_MAX -1) //check we have room for the command. 
  40433c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
  404340:	2b30      	cmp	r3, #48	; 0x30
  404342:	d82a      	bhi.n	40439a <dat_task_dataRouter+0x102>
			{				
				daughterBoardPacket.packetData[daughterBoardPacket.packetSize++] = receivedByte;				
  404344:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
  404348:	1c5a      	adds	r2, r3, #1
  40434a:	b292      	uxth	r2, r2
  40434c:	f8a7 2078 	strh.w	r2, [r7, #120]	; 0x78
  404350:	7afa      	ldrb	r2, [r7, #11]
  404352:	f107 0180 	add.w	r1, r7, #128	; 0x80
  404356:	440b      	add	r3, r1
  404358:	f803 2c3b 	strb.w	r2, [r3, #-59]
				if(receivedByte == '\n')
  40435c:	7afb      	ldrb	r3, [r7, #11]
  40435e:	2b0a      	cmp	r3, #10
  404360:	d120      	bne.n	4043a4 <dat_task_dataRouter+0x10c>
				{
					//make sure the packet is null terminated
					daughterBoardPacket.packetData[daughterBoardPacket.packetSize] = 0x00;
  404362:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
  404366:	f107 0280 	add.w	r2, r7, #128	; 0x80
  40436a:	4413      	add	r3, r2
  40436c:	2200      	movs	r2, #0
  40436e:	f803 2c3b 	strb.w	r2, [r3, #-59]
					if(cmd_queue_commandQueue != NULL)
  404372:	4b35      	ldr	r3, [pc, #212]	; (404448 <dat_task_dataRouter+0x1b0>)
  404374:	681b      	ldr	r3, [r3, #0]
  404376:	2b00      	cmp	r3, #0
  404378:	d009      	beq.n	40438e <dat_task_dataRouter+0xf6>
					{
						if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &daughterBoardPacket,5) != TRUE)
  40437a:	4b33      	ldr	r3, [pc, #204]	; (404448 <dat_task_dataRouter+0x1b0>)
  40437c:	681a      	ldr	r2, [r3, #0]
  40437e:	f107 0344 	add.w	r3, r7, #68	; 0x44
  404382:	4610      	mov	r0, r2
  404384:	4619      	mov	r1, r3
  404386:	2205      	movs	r2, #5
  404388:	2300      	movs	r3, #0
  40438a:	4c30      	ldr	r4, [pc, #192]	; (40444c <dat_task_dataRouter+0x1b4>)
  40438c:	47a0      	blx	r4
						{
							//this is an error, we should log it. 
						}						
					}
					//clear the packet for the next one. 
					cmd_initPacketStructure(&daughterBoardPacket);
  40438e:	f107 0344 	add.w	r3, r7, #68	; 0x44
  404392:	4618      	mov	r0, r3
  404394:	4b26      	ldr	r3, [pc, #152]	; (404430 <dat_task_dataRouter+0x198>)
  404396:	4798      	blx	r3
  404398:	e004      	b.n	4043a4 <dat_task_dataRouter+0x10c>
				}
			}
			else
			{
				//the packet was too big, we should delete it, possibly log an error
				cmd_initPacketStructure(&daughterBoardPacket);
  40439a:	f107 0344 	add.w	r3, r7, #68	; 0x44
  40439e:	4618      	mov	r0, r3
  4043a0:	4b23      	ldr	r3, [pc, #140]	; (404430 <dat_task_dataRouter+0x198>)
  4043a2:	4798      	blx	r3
			}
		}
		//check if there's any data on the 
		if(udi_cdc_is_rx_ready() == true)
  4043a4:	4b2a      	ldr	r3, [pc, #168]	; (404450 <dat_task_dataRouter+0x1b8>)
  4043a6:	4798      	blx	r3
  4043a8:	4603      	mov	r3, r0
  4043aa:	2b00      	cmp	r3, #0
  4043ac:	d039      	beq.n	404422 <dat_task_dataRouter+0x18a>
		{
			receivedUsbData = udi_cdc_getc();
  4043ae:	4b29      	ldr	r3, [pc, #164]	; (404454 <dat_task_dataRouter+0x1bc>)
  4043b0:	4798      	blx	r3
  4043b2:	67f8      	str	r0, [r7, #124]	; 0x7c
			//if byte exists, pass through to the daughter board and USB (if connected)
			if(usbPacket.packetSize < CMD_INCOMING_CMD_SIZE_MAX -1) //check we have room for the command.
  4043b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
  4043b8:	2b30      	cmp	r3, #48	; 0x30
  4043ba:	d82c      	bhi.n	404416 <dat_task_dataRouter+0x17e>
			{
				usbPacket.packetData[usbPacket.packetSize++] = (char)receivedUsbData;
  4043bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
  4043c0:	1c5a      	adds	r2, r3, #1
  4043c2:	b292      	uxth	r2, r2
  4043c4:	f8a7 2040 	strh.w	r2, [r7, #64]	; 0x40
  4043c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
  4043ca:	b2d2      	uxtb	r2, r2
  4043cc:	f107 0180 	add.w	r1, r7, #128	; 0x80
  4043d0:	440b      	add	r3, r1
  4043d2:	f803 2c73 	strb.w	r2, [r3, #-115]
				if((char)receivedUsbData == '\n')
  4043d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
  4043d8:	b2db      	uxtb	r3, r3
  4043da:	2b0a      	cmp	r3, #10
  4043dc:	d121      	bne.n	404422 <dat_task_dataRouter+0x18a>
				{
					//make sure the packet is null terminated
					usbPacket.packetData[usbPacket.packetSize] = 0x00;
  4043de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
  4043e2:	f107 0280 	add.w	r2, r7, #128	; 0x80
  4043e6:	4413      	add	r3, r2
  4043e8:	2200      	movs	r2, #0
  4043ea:	f803 2c73 	strb.w	r2, [r3, #-115]
					if(cmd_queue_commandQueue != NULL)
  4043ee:	4b16      	ldr	r3, [pc, #88]	; (404448 <dat_task_dataRouter+0x1b0>)
  4043f0:	681b      	ldr	r3, [r3, #0]
  4043f2:	2b00      	cmp	r3, #0
  4043f4:	d009      	beq.n	40440a <dat_task_dataRouter+0x172>
					{
						if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &usbPacket,5) != TRUE)
  4043f6:	4b14      	ldr	r3, [pc, #80]	; (404448 <dat_task_dataRouter+0x1b0>)
  4043f8:	681a      	ldr	r2, [r3, #0]
  4043fa:	f107 030c 	add.w	r3, r7, #12
  4043fe:	4610      	mov	r0, r2
  404400:	4619      	mov	r1, r3
  404402:	2205      	movs	r2, #5
  404404:	2300      	movs	r3, #0
  404406:	4c11      	ldr	r4, [pc, #68]	; (40444c <dat_task_dataRouter+0x1b4>)
  404408:	47a0      	blx	r4
						{
							//this is an error, we should log it.
						}
					}
					//clear the packet for the next one.
					cmd_initPacketStructure(&usbPacket);
  40440a:	f107 030c 	add.w	r3, r7, #12
  40440e:	4618      	mov	r0, r3
  404410:	4b07      	ldr	r3, [pc, #28]	; (404430 <dat_task_dataRouter+0x198>)
  404412:	4798      	blx	r3
		}
		
		
				
		
	}	
  404414:	e769      	b.n	4042ea <dat_task_dataRouter+0x52>
				}
			}
			else
			{
				//the packet was too big, we should delete it, possibly log an error
				cmd_initPacketStructure(&usbPacket);
  404416:	f107 030c 	add.w	r3, r7, #12
  40441a:	4618      	mov	r0, r3
  40441c:	4b04      	ldr	r3, [pc, #16]	; (404430 <dat_task_dataRouter+0x198>)
  40441e:	4798      	blx	r3
		}
		
		
				
		
	}	
  404420:	e763      	b.n	4042ea <dat_task_dataRouter+0x52>
  404422:	e762      	b.n	4042ea <dat_task_dataRouter+0x52>
}
  404424:	3784      	adds	r7, #132	; 0x84
  404426:	46bd      	mov	sp, r7
  404428:	bd90      	pop	{r4, r7, pc}
  40442a:	bf00      	nop
  40442c:	2000af68 	.word	0x2000af68
  404430:	004041f9 	.word	0x004041f9
  404434:	00405a2d 	.word	0x00405a2d
  404438:	004059ad 	.word	0x004059ad
  40443c:	004058c5 	.word	0x004058c5
  404440:	00400efd 	.word	0x00400efd
  404444:	00400fe9 	.word	0x00400fe9
  404448:	20000cac 	.word	0x20000cac
  40444c:	004065a9 	.word	0x004065a9
  404450:	00400cfd 	.word	0x00400cfd
  404454:	00400df5 	.word	0x00400df5

00404458 <dat_sendPacketToDataBoard>:

status_t dat_sendPacketToDataBoard(cmd_commandPacket_t* packet)
{
  404458:	b580      	push	{r7, lr}
  40445a:	b082      	sub	sp, #8
  40445c:	af00      	add	r7, sp, #0
  40445e:	6078      	str	r0, [r7, #4]
	//possibly add some sort of error handling here.
	drv_uart_putData(dataRouterConfig->dataBoardUart, packet->packetData, packet->packetSize);	
  404460:	4b08      	ldr	r3, [pc, #32]	; (404484 <dat_sendPacketToDataBoard+0x2c>)
  404462:	681b      	ldr	r3, [r3, #0]
  404464:	6819      	ldr	r1, [r3, #0]
  404466:	687b      	ldr	r3, [r7, #4]
  404468:	1c5a      	adds	r2, r3, #1
  40446a:	687b      	ldr	r3, [r7, #4]
  40446c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
  40446e:	4608      	mov	r0, r1
  404470:	4611      	mov	r1, r2
  404472:	461a      	mov	r2, r3
  404474:	4b04      	ldr	r3, [pc, #16]	; (404488 <dat_sendPacketToDataBoard+0x30>)
  404476:	4798      	blx	r3
	return STATUS_PASS;
  404478:	2300      	movs	r3, #0
	
}
  40447a:	4618      	mov	r0, r3
  40447c:	3708      	adds	r7, #8
  40447e:	46bd      	mov	sp, r7
  404480:	bd80      	pop	{r7, pc}
  404482:	bf00      	nop
  404484:	2000af68 	.word	0x2000af68
  404488:	00405a69 	.word	0x00405a69

0040448c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40448c:	b480      	push	{r7}
  40448e:	b083      	sub	sp, #12
  404490:	af00      	add	r7, sp, #0
  404492:	4603      	mov	r3, r0
  404494:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404496:	4b08      	ldr	r3, [pc, #32]	; (4044b8 <NVIC_EnableIRQ+0x2c>)
  404498:	f997 2007 	ldrsb.w	r2, [r7, #7]
  40449c:	0952      	lsrs	r2, r2, #5
  40449e:	79f9      	ldrb	r1, [r7, #7]
  4044a0:	f001 011f 	and.w	r1, r1, #31
  4044a4:	2001      	movs	r0, #1
  4044a6:	fa00 f101 	lsl.w	r1, r0, r1
  4044aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4044ae:	370c      	adds	r7, #12
  4044b0:	46bd      	mov	sp, r7
  4044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4044b6:	4770      	bx	lr
  4044b8:	e000e100 	.word	0xe000e100

004044bc <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  4044bc:	b480      	push	{r7}
  4044be:	b089      	sub	sp, #36	; 0x24
  4044c0:	af00      	add	r7, sp, #0
  4044c2:	6078      	str	r0, [r7, #4]
  4044c4:	687b      	ldr	r3, [r7, #4]
  4044c6:	61fb      	str	r3, [r7, #28]
  4044c8:	69fb      	ldr	r3, [r7, #28]
  4044ca:	61bb      	str	r3, [r7, #24]
  4044cc:	69bb      	ldr	r3, [r7, #24]
  4044ce:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4044d0:	697b      	ldr	r3, [r7, #20]
  4044d2:	095b      	lsrs	r3, r3, #5
  4044d4:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4044d6:	693b      	ldr	r3, [r7, #16]
  4044d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4044dc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4044e0:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4044e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4044e4:	69fb      	ldr	r3, [r7, #28]
  4044e6:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4044e8:	68fb      	ldr	r3, [r7, #12]
  4044ea:	f003 031f 	and.w	r3, r3, #31
  4044ee:	2101      	movs	r1, #1
  4044f0:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4044f4:	4013      	ands	r3, r2
  4044f6:	2b00      	cmp	r3, #0
  4044f8:	bf0c      	ite	eq
  4044fa:	2300      	moveq	r3, #0
  4044fc:	2301      	movne	r3, #1
  4044fe:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  404500:	4618      	mov	r0, r3
  404502:	3724      	adds	r7, #36	; 0x24
  404504:	46bd      	mov	sp, r7
  404506:	f85d 7b04 	ldr.w	r7, [sp], #4
  40450a:	4770      	bx	lr

0040450c <drv_gpio_initializeAll>:
 * @brief initialize all GPIO
 * @param 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_gpio_initializeAll(void)
{
  40450c:	b580      	push	{r7, lr}
  40450e:	b084      	sub	sp, #16
  404510:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS; 
  404512:	2300      	movs	r3, #0
  404514:	73fb      	strb	r3, [r7, #15]
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
  404516:	230f      	movs	r3, #15
  404518:	607b      	str	r3, [r7, #4]
	int i = 0; 
  40451a:	2300      	movs	r3, #0
  40451c:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < numGpio ; i++)
  40451e:	2300      	movs	r3, #0
  404520:	60bb      	str	r3, [r7, #8]
  404522:	e010      	b.n	404546 <drv_gpio_initializeAll+0x3a>
	{
		if(drv_gpio_config(&gpioConfig[i]) != STATUS_PASS)
  404524:	68bb      	ldr	r3, [r7, #8]
  404526:	011a      	lsls	r2, r3, #4
  404528:	4b0b      	ldr	r3, [pc, #44]	; (404558 <drv_gpio_initializeAll+0x4c>)
  40452a:	4413      	add	r3, r2
  40452c:	4618      	mov	r0, r3
  40452e:	4b0b      	ldr	r3, [pc, #44]	; (40455c <drv_gpio_initializeAll+0x50>)
  404530:	4798      	blx	r3
  404532:	4603      	mov	r3, r0
  404534:	2b00      	cmp	r3, #0
  404536:	d003      	beq.n	404540 <drv_gpio_initializeAll+0x34>
		{
			status |= STATUS_FAIL;
  404538:	7bfb      	ldrb	r3, [r7, #15]
  40453a:	f043 0301 	orr.w	r3, r3, #1
  40453e:	73fb      	strb	r3, [r7, #15]
status_t drv_gpio_initializeAll(void)
{
	status_t status = STATUS_PASS; 
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
	int i = 0; 
	for(i = 0; i < numGpio ; i++)
  404540:	68bb      	ldr	r3, [r7, #8]
  404542:	3301      	adds	r3, #1
  404544:	60bb      	str	r3, [r7, #8]
  404546:	68ba      	ldr	r2, [r7, #8]
  404548:	687b      	ldr	r3, [r7, #4]
  40454a:	429a      	cmp	r2, r3
  40454c:	dbea      	blt.n	404524 <drv_gpio_initializeAll+0x18>
		if(drv_gpio_config(&gpioConfig[i]) != STATUS_PASS)
		{
			status |= STATUS_FAIL;
		}
	}	
	return status; 
  40454e:	7bfb      	ldrb	r3, [r7, #15]
}
  404550:	4618      	mov	r0, r3
  404552:	3710      	adds	r7, #16
  404554:	46bd      	mov	sp, r7
  404556:	bd80      	pop	{r7, pc}
  404558:	20000090 	.word	0x20000090
  40455c:	00404561 	.word	0x00404561

00404560 <drv_gpio_config>:
 * @brief Set and configure all GPIOs
 * @param drv_gpio_config_t* gpioConfig
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config(drv_gpio_config_t* gpioConfig)
{
  404560:	b590      	push	{r4, r7, lr}
  404562:	b08d      	sub	sp, #52	; 0x34
  404564:	af02      	add	r7, sp, #8
  404566:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  404568:	2300      	movs	r3, #0
  40456a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned long PinFlag = 0;	
  40456e:	2300      	movs	r3, #0
  404570:	627b      	str	r3, [r7, #36]	; 0x24
	if(gpioConfig->pinMode == DRV_GPIO_PIN_MODE_INPUT)	//Check if input or output
  404572:	687b      	ldr	r3, [r7, #4]
  404574:	791b      	ldrb	r3, [r3, #4]
  404576:	2b01      	cmp	r3, #1
  404578:	f040 808f 	bne.w	40469a <drv_gpio_config+0x13a>
	{
		PinFlag |= PIO_TYPE_PIO_INPUT;	//Set as input
  40457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40457e:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
  404582:	627b      	str	r3, [r7, #36]	; 0x24
		if (gpioConfig->pullUpEnabled == TRUE)
  404584:	687b      	ldr	r3, [r7, #4]
  404586:	7b1b      	ldrb	r3, [r3, #12]
  404588:	2b01      	cmp	r3, #1
  40458a:	d103      	bne.n	404594 <drv_gpio_config+0x34>
		{
			PinFlag |= PIO_PULLUP;	//enable the pull up
  40458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40458e:	f043 0301 	orr.w	r3, r3, #1
  404592:	627b      	str	r3, [r7, #36]	; 0x24
		}
		
		if (gpioConfig->debounceEnabled == TRUE)
  404594:	687b      	ldr	r3, [r7, #4]
  404596:	7b5b      	ldrb	r3, [r3, #13]
  404598:	2b01      	cmp	r3, #1
  40459a:	d110      	bne.n	4045be <drv_gpio_config+0x5e>
		{
			//PinFlag |= PIO_DEBOUNCE;	//enable debounce filter
			Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);
  40459c:	687b      	ldr	r3, [r7, #4]
  40459e:	681b      	ldr	r3, [r3, #0]
  4045a0:	4618      	mov	r0, r3
  4045a2:	4b4d      	ldr	r3, [pc, #308]	; (4046d8 <drv_gpio_config+0x178>)
  4045a4:	4798      	blx	r3
  4045a6:	61f8      	str	r0, [r7, #28]
			uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  4045a8:	687b      	ldr	r3, [r7, #4]
  4045aa:	681b      	ldr	r3, [r3, #0]
  4045ac:	4618      	mov	r0, r3
  4045ae:	4b4b      	ldr	r3, [pc, #300]	; (4046dc <drv_gpio_config+0x17c>)
  4045b0:	4798      	blx	r3
  4045b2:	61b8      	str	r0, [r7, #24]
			pio_set_debounce_filter(p_pio, PinMask, DEBOUNCE_PERIOD);
  4045b4:	69f8      	ldr	r0, [r7, #28]
  4045b6:	69b9      	ldr	r1, [r7, #24]
  4045b8:	2205      	movs	r2, #5
  4045ba:	4b49      	ldr	r3, [pc, #292]	; (4046e0 <drv_gpio_config+0x180>)
  4045bc:	4798      	blx	r3
		}
		
		pmc_enable_periph_clk(gpioConfig->pinId);	
  4045be:	687b      	ldr	r3, [r7, #4]
  4045c0:	681b      	ldr	r3, [r3, #0]
  4045c2:	4618      	mov	r0, r3
  4045c4:	4b47      	ldr	r3, [pc, #284]	; (4046e4 <drv_gpio_config+0x184>)
  4045c6:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  4045c8:	687b      	ldr	r3, [r7, #4]
  4045ca:	681b      	ldr	r3, [r3, #0]
  4045cc:	4618      	mov	r0, r3
  4045ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
  4045d0:	4b45      	ldr	r3, [pc, #276]	; (4046e8 <drv_gpio_config+0x188>)
  4045d2:	4798      	blx	r3
		 
		PinFlag = 0;	//Reset the PinFlag to use it to configure interrupt
  4045d4:	2300      	movs	r3, #0
  4045d6:	627b      	str	r3, [r7, #36]	; 0x24
		switch(gpioConfig->interruptType)	//set interrupt configuration flag
  4045d8:	687b      	ldr	r3, [r7, #4]
  4045da:	799b      	ldrb	r3, [r3, #6]
  4045dc:	2b03      	cmp	r3, #3
  4045de:	d81f      	bhi.n	404620 <drv_gpio_config+0xc0>
  4045e0:	a201      	add	r2, pc, #4	; (adr r2, 4045e8 <drv_gpio_config+0x88>)
  4045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4045e6:	bf00      	nop
  4045e8:	004045f9 	.word	0x004045f9
  4045ec:	00404603 	.word	0x00404603
  4045f0:	0040460d 	.word	0x0040460d
  4045f4:	00404617 	.word	0x00404617
		{
			case DRV_GPIO_INTERRUPT_HIGH_EDGE :
				PinFlag |= PIO_IT_RISE_EDGE | PIO_IT_AIME;
  4045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4045fa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  4045fe:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  404600:	e00f      	b.n	404622 <drv_gpio_config+0xc2>
			case DRV_GPIO_INTERRUPT_LOW_EDGE :
				PinFlag |= PIO_IT_FALL_EDGE | PIO_IT_AIME;
  404602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404604:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  404608:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  40460a:	e00a      	b.n	404622 <drv_gpio_config+0xc2>
			case DRV_GPIO_INTERRUPT_HIGH_LVL :
				PinFlag |= PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  40460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40460e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  404612:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  404614:	e005      	b.n	404622 <drv_gpio_config+0xc2>
			case DRV_GPIO_INTERRUPT_LOW_LVL :
				PinFlag |= PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  404616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404618:	f043 0310 	orr.w	r3, r3, #16
  40461c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  40461e:	e000      	b.n	404622 <drv_gpio_config+0xc2>
			case DRV_GPIO_INTERRUPT_NONE :
			default:
				break;
  404620:	bf00      	nop
		}
		Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);	//peripheral ID
  404622:	687b      	ldr	r3, [r7, #4]
  404624:	681b      	ldr	r3, [r3, #0]
  404626:	4618      	mov	r0, r3
  404628:	4b2b      	ldr	r3, [pc, #172]	; (4046d8 <drv_gpio_config+0x178>)
  40462a:	4798      	blx	r3
  40462c:	6178      	str	r0, [r7, #20]
		uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  40462e:	687b      	ldr	r3, [r7, #4]
  404630:	681b      	ldr	r3, [r3, #0]
  404632:	4618      	mov	r0, r3
  404634:	4b29      	ldr	r3, [pc, #164]	; (4046dc <drv_gpio_config+0x17c>)
  404636:	4798      	blx	r3
  404638:	6138      	str	r0, [r7, #16]
		if (PinFlag & (PIO_IT_RISE_EDGE | PIO_IT_FALL_EDGE | PIO_IT_HIGH_LEVEL | PIO_IT_LOW_LEVEL))	//if set as interrupt, enable and configure it
  40463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40463c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404640:	2b00      	cmp	r3, #0
  404642:	d021      	beq.n	404688 <drv_gpio_config+0x128>
		{			
			uint32_t PinPio = pio_get_pin_group_id(gpioConfig->pinId);	//Pin ID
  404644:	687b      	ldr	r3, [r7, #4]
  404646:	681b      	ldr	r3, [r3, #0]
  404648:	4618      	mov	r0, r3
  40464a:	4b28      	ldr	r3, [pc, #160]	; (4046ec <drv_gpio_config+0x18c>)
  40464c:	4798      	blx	r3
  40464e:	60f8      	str	r0, [r7, #12]
			pio_handler_set(p_pio, PinPio, PinMask, PinFlag, gpioConfig->interruptHandler);
  404650:	687b      	ldr	r3, [r7, #4]
  404652:	689b      	ldr	r3, [r3, #8]
  404654:	9300      	str	r3, [sp, #0]
  404656:	6978      	ldr	r0, [r7, #20]
  404658:	68f9      	ldr	r1, [r7, #12]
  40465a:	693a      	ldr	r2, [r7, #16]
  40465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40465e:	4c24      	ldr	r4, [pc, #144]	; (4046f0 <drv_gpio_config+0x190>)
  404660:	47a0      	blx	r4
			pio_enable_interrupt(p_pio, PinMask);
  404662:	6978      	ldr	r0, [r7, #20]
  404664:	6939      	ldr	r1, [r7, #16]
  404666:	4b23      	ldr	r3, [pc, #140]	; (4046f4 <drv_gpio_config+0x194>)
  404668:	4798      	blx	r3
			if (p_pio == PIOA)
  40466a:	697a      	ldr	r2, [r7, #20]
  40466c:	4b22      	ldr	r3, [pc, #136]	; (4046f8 <drv_gpio_config+0x198>)
  40466e:	429a      	cmp	r2, r3
  404670:	d103      	bne.n	40467a <drv_gpio_config+0x11a>
			{
				NVIC_EnableIRQ(PIOA_IRQn);
  404672:	200b      	movs	r0, #11
  404674:	4b21      	ldr	r3, [pc, #132]	; (4046fc <drv_gpio_config+0x19c>)
  404676:	4798      	blx	r3
  404678:	e006      	b.n	404688 <drv_gpio_config+0x128>
			}
			else if (p_pio == PIOB)
  40467a:	697a      	ldr	r2, [r7, #20]
  40467c:	4b20      	ldr	r3, [pc, #128]	; (404700 <drv_gpio_config+0x1a0>)
  40467e:	429a      	cmp	r2, r3
  404680:	d102      	bne.n	404688 <drv_gpio_config+0x128>
			{
				NVIC_EnableIRQ(PIOB_IRQn);
  404682:	200c      	movs	r0, #12
  404684:	4b1d      	ldr	r3, [pc, #116]	; (4046fc <drv_gpio_config+0x19c>)
  404686:	4798      	blx	r3
			}
		}
		//turn off any pulldown resistors
		p_pio->PIO_PPDDR |= PinMask; 
  404688:	697b      	ldr	r3, [r7, #20]
  40468a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  40468e:	693b      	ldr	r3, [r7, #16]
  404690:	431a      	orrs	r2, r3
  404692:	697b      	ldr	r3, [r7, #20]
  404694:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  404698:	e017      	b.n	4046ca <drv_gpio_config+0x16a>
		
	}
	else	//The pin is output
	{
		if (gpioConfig->initialPinState == DRV_GPIO_PIN_STATE_HIGH)
  40469a:	687b      	ldr	r3, [r7, #4]
  40469c:	795b      	ldrb	r3, [r3, #5]
  40469e:	2b01      	cmp	r3, #1
  4046a0:	d104      	bne.n	4046ac <drv_gpio_config+0x14c>
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_1;	//set default pin state
  4046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046a4:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
  4046a8:	627b      	str	r3, [r7, #36]	; 0x24
  4046aa:	e003      	b.n	4046b4 <drv_gpio_config+0x154>
		} 
		else
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_0;	//set default pin state
  4046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046ae:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
  4046b2:	627b      	str	r3, [r7, #36]	; 0x24
		}
		
		pmc_enable_periph_clk(gpioConfig->pinId);
  4046b4:	687b      	ldr	r3, [r7, #4]
  4046b6:	681b      	ldr	r3, [r3, #0]
  4046b8:	4618      	mov	r0, r3
  4046ba:	4b0a      	ldr	r3, [pc, #40]	; (4046e4 <drv_gpio_config+0x184>)
  4046bc:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  4046be:	687b      	ldr	r3, [r7, #4]
  4046c0:	681b      	ldr	r3, [r3, #0]
  4046c2:	4618      	mov	r0, r3
  4046c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
  4046c6:	4b08      	ldr	r3, [pc, #32]	; (4046e8 <drv_gpio_config+0x188>)
  4046c8:	4798      	blx	r3
	}
	
	return status;
  4046ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
  4046ce:	4618      	mov	r0, r3
  4046d0:	372c      	adds	r7, #44	; 0x2c
  4046d2:	46bd      	mov	sp, r7
  4046d4:	bd90      	pop	{r4, r7, pc}
  4046d6:	bf00      	nop
  4046d8:	00408fa9 	.word	0x00408fa9
  4046dc:	00408ff1 	.word	0x00408ff1
  4046e0:	00408a45 	.word	0x00408a45
  4046e4:	004093d5 	.word	0x004093d5
  4046e8:	00408df5 	.word	0x00408df5
  4046ec:	00408fd1 	.word	0x00408fd1
  4046f0:	004090e1 	.word	0x004090e1
  4046f4:	00408cd9 	.word	0x00408cd9
  4046f8:	400e0e00 	.word	0x400e0e00
  4046fc:	0040448d 	.word	0x0040448d
  404700:	400e1000 	.word	0x400e1000

00404704 <drv_gpio_setPinState>:
 * @brief Set a GPIO to HIGH or LOW
 * @param drv_gpio_pins_t pin, drv_gpio_pin_state_t state
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_setPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t state)
{
  404704:	b580      	push	{r7, lr}
  404706:	b084      	sub	sp, #16
  404708:	af00      	add	r7, sp, #0
  40470a:	4602      	mov	r2, r0
  40470c:	460b      	mov	r3, r1
  40470e:	71fa      	strb	r2, [r7, #7]
  404710:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_PASS;
  404712:	2300      	movs	r3, #0
  404714:	72fb      	strb	r3, [r7, #11]
	uint32_t pinFlag = 0x00; 
  404716:	2300      	movs	r3, #0
  404718:	60fb      	str	r3, [r7, #12]
	if(gpioConfig[pin].pinMode != DRV_GPIO_PIN_MODE_OUTPUT)
  40471a:	79fb      	ldrb	r3, [r7, #7]
  40471c:	4a32      	ldr	r2, [pc, #200]	; (4047e8 <drv_gpio_setPinState+0xe4>)
  40471e:	011b      	lsls	r3, r3, #4
  404720:	4413      	add	r3, r2
  404722:	791b      	ldrb	r3, [r3, #4]
  404724:	2b00      	cmp	r3, #0
  404726:	d001      	beq.n	40472c <drv_gpio_setPinState+0x28>
	{
		return STATUS_FAIL;
  404728:	2301      	movs	r3, #1
  40472a:	e059      	b.n	4047e0 <drv_gpio_setPinState+0xdc>
	}
	if(gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_HIGH || gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_LOW)
  40472c:	79fb      	ldrb	r3, [r7, #7]
  40472e:	4a2e      	ldr	r2, [pc, #184]	; (4047e8 <drv_gpio_setPinState+0xe4>)
  404730:	011b      	lsls	r3, r3, #4
  404732:	4413      	add	r3, r2
  404734:	3308      	adds	r3, #8
  404736:	79db      	ldrb	r3, [r3, #7]
  404738:	2b02      	cmp	r3, #2
  40473a:	d007      	beq.n	40474c <drv_gpio_setPinState+0x48>
  40473c:	79fb      	ldrb	r3, [r7, #7]
  40473e:	4a2a      	ldr	r2, [pc, #168]	; (4047e8 <drv_gpio_setPinState+0xe4>)
  404740:	011b      	lsls	r3, r3, #4
  404742:	4413      	add	r3, r2
  404744:	3308      	adds	r3, #8
  404746:	79db      	ldrb	r3, [r3, #7]
  404748:	2b03      	cmp	r3, #3
  40474a:	d11a      	bne.n	404782 <drv_gpio_setPinState+0x7e>
	{
		if(state == DRV_GPIO_PIN_STATE_HIGH )
  40474c:	79bb      	ldrb	r3, [r7, #6]
  40474e:	2b01      	cmp	r3, #1
  404750:	d10a      	bne.n	404768 <drv_gpio_setPinState+0x64>
		{
			//we have to set the pin back to an output
			pinFlag |= PIO_TYPE_PIO_OUTPUT_1;
  404752:	68fb      	ldr	r3, [r7, #12]
  404754:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
  404758:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);
  40475a:	4b23      	ldr	r3, [pc, #140]	; (4047e8 <drv_gpio_setPinState+0xe4>)
  40475c:	681b      	ldr	r3, [r3, #0]
  40475e:	4618      	mov	r0, r3
  404760:	68f9      	ldr	r1, [r7, #12]
  404762:	4b22      	ldr	r3, [pc, #136]	; (4047ec <drv_gpio_setPinState+0xe8>)
  404764:	4798      	blx	r3
  404766:	e00c      	b.n	404782 <drv_gpio_setPinState+0x7e>
		}
		else if(state == DRV_GPIO_PIN_STATE_LOW)
  404768:	79bb      	ldrb	r3, [r7, #6]
  40476a:	2b00      	cmp	r3, #0
  40476c:	d109      	bne.n	404782 <drv_gpio_setPinState+0x7e>
		{
			pinFlag |= PIO_TYPE_PIO_OUTPUT_0;
  40476e:	68fb      	ldr	r3, [r7, #12]
  404770:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
  404774:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);			
  404776:	4b1c      	ldr	r3, [pc, #112]	; (4047e8 <drv_gpio_setPinState+0xe4>)
  404778:	681b      	ldr	r3, [r3, #0]
  40477a:	4618      	mov	r0, r3
  40477c:	68f9      	ldr	r1, [r7, #12]
  40477e:	4b1b      	ldr	r3, [pc, #108]	; (4047ec <drv_gpio_setPinState+0xe8>)
  404780:	4798      	blx	r3
		}
	}
	//the output should be in the right state. 
	
	switch(state)
  404782:	79bb      	ldrb	r3, [r7, #6]
  404784:	2b03      	cmp	r3, #3
  404786:	d82a      	bhi.n	4047de <drv_gpio_setPinState+0xda>
  404788:	a201      	add	r2, pc, #4	; (adr r2, 404790 <drv_gpio_setPinState+0x8c>)
  40478a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40478e:	bf00      	nop
  404790:	004047b3 	.word	0x004047b3
  404794:	004047a1 	.word	0x004047a1
  404798:	004047c5 	.word	0x004047c5
  40479c:	004047df 	.word	0x004047df
	{
		case DRV_GPIO_PIN_STATE_HIGH:
			pio_set_pin_high(gpioConfig[pin].pinId);
  4047a0:	79fb      	ldrb	r3, [r7, #7]
  4047a2:	4a11      	ldr	r2, [pc, #68]	; (4047e8 <drv_gpio_setPinState+0xe4>)
  4047a4:	011b      	lsls	r3, r3, #4
  4047a6:	4413      	add	r3, r2
  4047a8:	681b      	ldr	r3, [r3, #0]
  4047aa:	4618      	mov	r0, r3
  4047ac:	4b10      	ldr	r3, [pc, #64]	; (4047f0 <drv_gpio_setPinState+0xec>)
  4047ae:	4798      	blx	r3
		break;
  4047b0:	e015      	b.n	4047de <drv_gpio_setPinState+0xda>
		case DRV_GPIO_PIN_STATE_LOW:
			pio_set_pin_low(gpioConfig[pin].pinId);
  4047b2:	79fb      	ldrb	r3, [r7, #7]
  4047b4:	4a0c      	ldr	r2, [pc, #48]	; (4047e8 <drv_gpio_setPinState+0xe4>)
  4047b6:	011b      	lsls	r3, r3, #4
  4047b8:	4413      	add	r3, r2
  4047ba:	681b      	ldr	r3, [r3, #0]
  4047bc:	4618      	mov	r0, r3
  4047be:	4b0d      	ldr	r3, [pc, #52]	; (4047f4 <drv_gpio_setPinState+0xf0>)
  4047c0:	4798      	blx	r3
		break;
  4047c2:	e00c      	b.n	4047de <drv_gpio_setPinState+0xda>
		case DRV_GPIO_PIN_STATE_PULLED_HIGH:
			pinFlag |= PIO_TYPE_PIO_INPUT | PIO_PULLUP;	//Set as input with pull up. 
  4047c4:	68fb      	ldr	r3, [r7, #12]
  4047c6:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
  4047ca:	f043 0301 	orr.w	r3, r3, #1
  4047ce:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);
  4047d0:	4b05      	ldr	r3, [pc, #20]	; (4047e8 <drv_gpio_setPinState+0xe4>)
  4047d2:	681b      	ldr	r3, [r3, #0]
  4047d4:	4618      	mov	r0, r3
  4047d6:	68f9      	ldr	r1, [r7, #12]
  4047d8:	4b04      	ldr	r3, [pc, #16]	; (4047ec <drv_gpio_setPinState+0xe8>)
  4047da:	4798      	blx	r3
		break;
  4047dc:	bf00      	nop
		case DRV_GPIO_PIN_STATE_PULLED_LOW:
		break; 
	}
	return status;
  4047de:	7afb      	ldrb	r3, [r7, #11]
}
  4047e0:	4618      	mov	r0, r3
  4047e2:	3710      	adds	r7, #16
  4047e4:	46bd      	mov	sp, r7
  4047e6:	bd80      	pop	{r7, pc}
  4047e8:	20000090 	.word	0x20000090
  4047ec:	00408df5 	.word	0x00408df5
  4047f0:	00408d45 	.word	0x00408d45
  4047f4:	00408d71 	.word	0x00408d71

004047f8 <drv_gpio_getPinState>:
 * @brief Get a GPIO level
 * @param drv_gpio_pins_t pin, drv_gpio_pin_state_t state
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_getPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t* state)
{
  4047f8:	b580      	push	{r7, lr}
  4047fa:	b084      	sub	sp, #16
  4047fc:	af00      	add	r7, sp, #0
  4047fe:	4603      	mov	r3, r0
  404800:	6039      	str	r1, [r7, #0]
  404802:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  404804:	2300      	movs	r3, #0
  404806:	73fb      	strb	r3, [r7, #15]
	bool value = ioport_get_pin_level(gpioConfig[pin].pinId);
  404808:	79fb      	ldrb	r3, [r7, #7]
  40480a:	4a0d      	ldr	r2, [pc, #52]	; (404840 <drv_gpio_getPinState+0x48>)
  40480c:	011b      	lsls	r3, r3, #4
  40480e:	4413      	add	r3, r2
  404810:	681b      	ldr	r3, [r3, #0]
  404812:	4618      	mov	r0, r3
  404814:	4b0b      	ldr	r3, [pc, #44]	; (404844 <drv_gpio_getPinState+0x4c>)
  404816:	4798      	blx	r3
  404818:	4603      	mov	r3, r0
  40481a:	73bb      	strb	r3, [r7, #14]
	if (value == false)
  40481c:	7bbb      	ldrb	r3, [r7, #14]
  40481e:	f083 0301 	eor.w	r3, r3, #1
  404822:	b2db      	uxtb	r3, r3
  404824:	2b00      	cmp	r3, #0
  404826:	d003      	beq.n	404830 <drv_gpio_getPinState+0x38>
	{
		*state = DRV_GPIO_PIN_STATE_LOW;
  404828:	683b      	ldr	r3, [r7, #0]
  40482a:	2200      	movs	r2, #0
  40482c:	701a      	strb	r2, [r3, #0]
  40482e:	e002      	b.n	404836 <drv_gpio_getPinState+0x3e>
	}
	else
	{
		*state = DRV_GPIO_PIN_STATE_HIGH;
  404830:	683b      	ldr	r3, [r7, #0]
  404832:	2201      	movs	r2, #1
  404834:	701a      	strb	r2, [r3, #0]
	}
	return status;
  404836:	7bfb      	ldrb	r3, [r7, #15]
}
  404838:	4618      	mov	r0, r3
  40483a:	3710      	adds	r7, #16
  40483c:	46bd      	mov	sp, r7
  40483e:	bd80      	pop	{r7, pc}
  404840:	20000090 	.word	0x20000090
  404844:	004044bd 	.word	0x004044bd

00404848 <drv_gpio_togglePin>:
 * @brief Toggle a GPIO level
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_togglePin(drv_gpio_pins_t pin)
{
  404848:	b580      	push	{r7, lr}
  40484a:	b084      	sub	sp, #16
  40484c:	af00      	add	r7, sp, #0
  40484e:	4603      	mov	r3, r0
  404850:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  404852:	2300      	movs	r3, #0
  404854:	73fb      	strb	r3, [r7, #15]
	pio_toggle_pin(gpioConfig[pin].pinId);
  404856:	79fb      	ldrb	r3, [r7, #7]
  404858:	4a05      	ldr	r2, [pc, #20]	; (404870 <drv_gpio_togglePin+0x28>)
  40485a:	011b      	lsls	r3, r3, #4
  40485c:	4413      	add	r3, r2
  40485e:	681b      	ldr	r3, [r3, #0]
  404860:	4618      	mov	r0, r3
  404862:	4b04      	ldr	r3, [pc, #16]	; (404874 <drv_gpio_togglePin+0x2c>)
  404864:	4798      	blx	r3
	return status;
  404866:	7bfb      	ldrb	r3, [r7, #15]
}
  404868:	4618      	mov	r0, r3
  40486a:	3710      	adds	r7, #16
  40486c:	46bd      	mov	sp, r7
  40486e:	bd80      	pop	{r7, pc}
  404870:	20000090 	.word	0x20000090
  404874:	00408d9d 	.word	0x00408d9d

00404878 <drv_gpio_config_interrupt_handler>:
 * @brief Set Interrupt Configuration for the requested pin, and also what handler to use
 * @param drv_gpio_pins_t pinId, unsigned long pinFlag, void* handler 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config_interrupt_handler(drv_gpio_pins_t pin, drv_gpio_interrupt_t pinInt, void* handler)
{
  404878:	b590      	push	{r4, r7, lr}
  40487a:	b08b      	sub	sp, #44	; 0x2c
  40487c:	af02      	add	r7, sp, #8
  40487e:	460b      	mov	r3, r1
  404880:	603a      	str	r2, [r7, #0]
  404882:	4602      	mov	r2, r0
  404884:	71fa      	strb	r2, [r7, #7]
  404886:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_FAIL;
  404888:	2301      	movs	r3, #1
  40488a:	77fb      	strb	r3, [r7, #31]
	unsigned long PinFlag = 0;
  40488c:	2300      	movs	r3, #0
  40488e:	61bb      	str	r3, [r7, #24]
	Pio *p_pio = pio_get_pin_group(gpioConfig[pin].pinId);	//peripheral ID
  404890:	79fb      	ldrb	r3, [r7, #7]
  404892:	4a25      	ldr	r2, [pc, #148]	; (404928 <drv_gpio_config_interrupt_handler+0xb0>)
  404894:	011b      	lsls	r3, r3, #4
  404896:	4413      	add	r3, r2
  404898:	681b      	ldr	r3, [r3, #0]
  40489a:	4618      	mov	r0, r3
  40489c:	4b23      	ldr	r3, [pc, #140]	; (40492c <drv_gpio_config_interrupt_handler+0xb4>)
  40489e:	4798      	blx	r3
  4048a0:	6178      	str	r0, [r7, #20]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[pin].pinId);	//PinMask
  4048a2:	79fb      	ldrb	r3, [r7, #7]
  4048a4:	4a20      	ldr	r2, [pc, #128]	; (404928 <drv_gpio_config_interrupt_handler+0xb0>)
  4048a6:	011b      	lsls	r3, r3, #4
  4048a8:	4413      	add	r3, r2
  4048aa:	681b      	ldr	r3, [r3, #0]
  4048ac:	4618      	mov	r0, r3
  4048ae:	4b20      	ldr	r3, [pc, #128]	; (404930 <drv_gpio_config_interrupt_handler+0xb8>)
  4048b0:	4798      	blx	r3
  4048b2:	6138      	str	r0, [r7, #16]
	uint32_t PinPio = pio_get_pin_group_id(gpioConfig[pin].pinId);	//Pin ID
  4048b4:	79fb      	ldrb	r3, [r7, #7]
  4048b6:	4a1c      	ldr	r2, [pc, #112]	; (404928 <drv_gpio_config_interrupt_handler+0xb0>)
  4048b8:	011b      	lsls	r3, r3, #4
  4048ba:	4413      	add	r3, r2
  4048bc:	681b      	ldr	r3, [r3, #0]
  4048be:	4618      	mov	r0, r3
  4048c0:	4b1c      	ldr	r3, [pc, #112]	; (404934 <drv_gpio_config_interrupt_handler+0xbc>)
  4048c2:	4798      	blx	r3
  4048c4:	60f8      	str	r0, [r7, #12]
	if (pinInt == DRV_GPIO_INTERRUPT_HIGH_EDGE)
  4048c6:	79bb      	ldrb	r3, [r7, #6]
  4048c8:	2b00      	cmp	r3, #0
  4048ca:	d104      	bne.n	4048d6 <drv_gpio_config_interrupt_handler+0x5e>
	{
		PinFlag = PIO_IT_RISE_EDGE | PIO_IT_AIME;
  4048cc:	2370      	movs	r3, #112	; 0x70
  4048ce:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  4048d0:	2300      	movs	r3, #0
  4048d2:	77fb      	strb	r3, [r7, #31]
  4048d4:	e016      	b.n	404904 <drv_gpio_config_interrupt_handler+0x8c>
	} 
	else if(pinInt == DRV_GPIO_INTERRUPT_LOW_EDGE)
  4048d6:	79bb      	ldrb	r3, [r7, #6]
  4048d8:	2b01      	cmp	r3, #1
  4048da:	d104      	bne.n	4048e6 <drv_gpio_config_interrupt_handler+0x6e>
	{
		PinFlag = PIO_IT_FALL_EDGE | PIO_IT_AIME;
  4048dc:	2350      	movs	r3, #80	; 0x50
  4048de:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  4048e0:	2300      	movs	r3, #0
  4048e2:	77fb      	strb	r3, [r7, #31]
  4048e4:	e00e      	b.n	404904 <drv_gpio_config_interrupt_handler+0x8c>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_HIGH_LVL)
  4048e6:	79bb      	ldrb	r3, [r7, #6]
  4048e8:	2b02      	cmp	r3, #2
  4048ea:	d104      	bne.n	4048f6 <drv_gpio_config_interrupt_handler+0x7e>
	{
		PinFlag = PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  4048ec:	2330      	movs	r3, #48	; 0x30
  4048ee:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  4048f0:	2300      	movs	r3, #0
  4048f2:	77fb      	strb	r3, [r7, #31]
  4048f4:	e006      	b.n	404904 <drv_gpio_config_interrupt_handler+0x8c>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_LOW_LVL)
  4048f6:	79bb      	ldrb	r3, [r7, #6]
  4048f8:	2b03      	cmp	r3, #3
  4048fa:	d103      	bne.n	404904 <drv_gpio_config_interrupt_handler+0x8c>
	{
		PinFlag = PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  4048fc:	2310      	movs	r3, #16
  4048fe:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  404900:	2300      	movs	r3, #0
  404902:	77fb      	strb	r3, [r7, #31]
	}
	pio_handler_set(p_pio, PinPio, PinMask, PinFlag, handler);
  404904:	683b      	ldr	r3, [r7, #0]
  404906:	9300      	str	r3, [sp, #0]
  404908:	6978      	ldr	r0, [r7, #20]
  40490a:	68f9      	ldr	r1, [r7, #12]
  40490c:	693a      	ldr	r2, [r7, #16]
  40490e:	69bb      	ldr	r3, [r7, #24]
  404910:	4c09      	ldr	r4, [pc, #36]	; (404938 <drv_gpio_config_interrupt_handler+0xc0>)
  404912:	47a0      	blx	r4
	pio_configure_interrupt(p_pio, PinMask, PinFlag);
  404914:	6978      	ldr	r0, [r7, #20]
  404916:	6939      	ldr	r1, [r7, #16]
  404918:	69ba      	ldr	r2, [r7, #24]
  40491a:	4b08      	ldr	r3, [pc, #32]	; (40493c <drv_gpio_config_interrupt_handler+0xc4>)
  40491c:	4798      	blx	r3
	return status;
  40491e:	7ffb      	ldrb	r3, [r7, #31]
}
  404920:	4618      	mov	r0, r3
  404922:	3724      	adds	r7, #36	; 0x24
  404924:	46bd      	mov	sp, r7
  404926:	bd90      	pop	{r4, r7, pc}
  404928:	20000090 	.word	0x20000090
  40492c:	00408fa9 	.word	0x00408fa9
  404930:	00408ff1 	.word	0x00408ff1
  404934:	00408fd1 	.word	0x00408fd1
  404938:	004090e1 	.word	0x004090e1
  40493c:	00408c6d 	.word	0x00408c6d

00404940 <drv_gpio_int_pw>:
 * @brief Interrupt routine for Power Switch
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_pw(uint32_t ul_id, uint32_t ul_mask)
{
  404940:	b580      	push	{r7, lr}
  404942:	b084      	sub	sp, #16
  404944:	af00      	add	r7, sp, #0
  404946:	6078      	str	r0, [r7, #4]
  404948:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_PWR_BTN].pinId);
  40494a:	4b0e      	ldr	r3, [pc, #56]	; (404984 <drv_gpio_int_pw+0x44>)
  40494c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
  404950:	4618      	mov	r0, r3
  404952:	4b0d      	ldr	r3, [pc, #52]	; (404988 <drv_gpio_int_pw+0x48>)
  404954:	4798      	blx	r3
  404956:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  404958:	480c      	ldr	r0, [pc, #48]	; (40498c <drv_gpio_int_pw+0x4c>)
  40495a:	68f9      	ldr	r1, [r7, #12]
  40495c:	4b0c      	ldr	r3, [pc, #48]	; (404990 <drv_gpio_int_pw+0x50>)
  40495e:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  404960:	4b0a      	ldr	r3, [pc, #40]	; (40498c <drv_gpio_int_pw+0x4c>)
  404962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  404964:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  404966:	68fa      	ldr	r2, [r7, #12]
  404968:	683b      	ldr	r3, [r7, #0]
  40496a:	429a      	cmp	r2, r3
  40496c:	d103      	bne.n	404976 <drv_gpio_int_pw+0x36>
	{
		gpioConfig[DRV_GPIO_PIN_PWR_BTN].gpioSetFlag = 1;
  40496e:	4b05      	ldr	r3, [pc, #20]	; (404984 <drv_gpio_int_pw+0x44>)
  404970:	2201      	movs	r2, #1
  404972:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
	}
	pio_enable_interrupt(PIOA, PinMask);
  404976:	4805      	ldr	r0, [pc, #20]	; (40498c <drv_gpio_int_pw+0x4c>)
  404978:	68f9      	ldr	r1, [r7, #12]
  40497a:	4b06      	ldr	r3, [pc, #24]	; (404994 <drv_gpio_int_pw+0x54>)
  40497c:	4798      	blx	r3
}
  40497e:	3710      	adds	r7, #16
  404980:	46bd      	mov	sp, r7
  404982:	bd80      	pop	{r7, pc}
  404984:	20000090 	.word	0x20000090
  404988:	00408ff1 	.word	0x00408ff1
  40498c:	400e0e00 	.word	0x400e0e00
  404990:	00408cf9 	.word	0x00408cf9
  404994:	00408cd9 	.word	0x00408cd9

00404998 <drv_gpio_int_dc1>:
 * @brief Interrupt routine for Jack-1 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc1(uint32_t ul_id, uint32_t ul_mask)
{
  404998:	b580      	push	{r7, lr}
  40499a:	b084      	sub	sp, #16
  40499c:	af00      	add	r7, sp, #0
  40499e:	6078      	str	r0, [r7, #4]
  4049a0:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC1_DET].pinId);
  4049a2:	4b0e      	ldr	r3, [pc, #56]	; (4049dc <drv_gpio_int_dc1+0x44>)
  4049a4:	6a1b      	ldr	r3, [r3, #32]
  4049a6:	4618      	mov	r0, r3
  4049a8:	4b0d      	ldr	r3, [pc, #52]	; (4049e0 <drv_gpio_int_dc1+0x48>)
  4049aa:	4798      	blx	r3
  4049ac:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  4049ae:	480d      	ldr	r0, [pc, #52]	; (4049e4 <drv_gpio_int_dc1+0x4c>)
  4049b0:	68f9      	ldr	r1, [r7, #12]
  4049b2:	4b0d      	ldr	r3, [pc, #52]	; (4049e8 <drv_gpio_int_dc1+0x50>)
  4049b4:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  4049b6:	4b0b      	ldr	r3, [pc, #44]	; (4049e4 <drv_gpio_int_dc1+0x4c>)
  4049b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  4049ba:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  4049bc:	68fa      	ldr	r2, [r7, #12]
  4049be:	683b      	ldr	r3, [r7, #0]
  4049c0:	429a      	cmp	r2, r3
  4049c2:	d103      	bne.n	4049cc <drv_gpio_int_dc1+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC1_DET].gpioSetFlag = 1;
  4049c4:	4b05      	ldr	r3, [pc, #20]	; (4049dc <drv_gpio_int_dc1+0x44>)
  4049c6:	2201      	movs	r2, #1
  4049c8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
	pio_enable_interrupt(PIOA, PinMask);
  4049cc:	4805      	ldr	r0, [pc, #20]	; (4049e4 <drv_gpio_int_dc1+0x4c>)
  4049ce:	68f9      	ldr	r1, [r7, #12]
  4049d0:	4b06      	ldr	r3, [pc, #24]	; (4049ec <drv_gpio_int_dc1+0x54>)
  4049d2:	4798      	blx	r3
}
  4049d4:	3710      	adds	r7, #16
  4049d6:	46bd      	mov	sp, r7
  4049d8:	bd80      	pop	{r7, pc}
  4049da:	bf00      	nop
  4049dc:	20000090 	.word	0x20000090
  4049e0:	00408ff1 	.word	0x00408ff1
  4049e4:	400e0e00 	.word	0x400e0e00
  4049e8:	00408cf9 	.word	0x00408cf9
  4049ec:	00408cd9 	.word	0x00408cd9

004049f0 <drv_gpio_int_dc2>:
 * @brief Interrupt routine for Jack-2 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc2(uint32_t ul_id, uint32_t ul_mask)
{
  4049f0:	b580      	push	{r7, lr}
  4049f2:	b084      	sub	sp, #16
  4049f4:	af00      	add	r7, sp, #0
  4049f6:	6078      	str	r0, [r7, #4]
  4049f8:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC2_DET].pinId);
  4049fa:	4b0e      	ldr	r3, [pc, #56]	; (404a34 <drv_gpio_int_dc2+0x44>)
  4049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4049fe:	4618      	mov	r0, r3
  404a00:	4b0d      	ldr	r3, [pc, #52]	; (404a38 <drv_gpio_int_dc2+0x48>)
  404a02:	4798      	blx	r3
  404a04:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  404a06:	480d      	ldr	r0, [pc, #52]	; (404a3c <drv_gpio_int_dc2+0x4c>)
  404a08:	68f9      	ldr	r1, [r7, #12]
  404a0a:	4b0d      	ldr	r3, [pc, #52]	; (404a40 <drv_gpio_int_dc2+0x50>)
  404a0c:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  404a0e:	4b0b      	ldr	r3, [pc, #44]	; (404a3c <drv_gpio_int_dc2+0x4c>)
  404a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  404a12:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  404a14:	68fa      	ldr	r2, [r7, #12]
  404a16:	683b      	ldr	r3, [r7, #0]
  404a18:	429a      	cmp	r2, r3
  404a1a:	d103      	bne.n	404a24 <drv_gpio_int_dc2+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC2_DET].gpioSetFlag = 1;
  404a1c:	4b05      	ldr	r3, [pc, #20]	; (404a34 <drv_gpio_int_dc2+0x44>)
  404a1e:	2201      	movs	r2, #1
  404a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
	pio_enable_interrupt(PIOA, PinMask);
  404a24:	4805      	ldr	r0, [pc, #20]	; (404a3c <drv_gpio_int_dc2+0x4c>)
  404a26:	68f9      	ldr	r1, [r7, #12]
  404a28:	4b06      	ldr	r3, [pc, #24]	; (404a44 <drv_gpio_int_dc2+0x54>)
  404a2a:	4798      	blx	r3
}
  404a2c:	3710      	adds	r7, #16
  404a2e:	46bd      	mov	sp, r7
  404a30:	bd80      	pop	{r7, pc}
  404a32:	bf00      	nop
  404a34:	20000090 	.word	0x20000090
  404a38:	00408ff1 	.word	0x00408ff1
  404a3c:	400e0e00 	.word	0x400e0e00
  404a40:	00408cf9 	.word	0x00408cf9
  404a44:	00408cd9 	.word	0x00408cd9

00404a48 <mgr_managerTask>:
 * @brief Handles queued events for the power board.  
 * @param pvParameters, void pointer to structure containing data router configuration. 
 * @return void
 ***********************************************************************************************/
void mgr_managerTask(void *pvParameters)
{
  404a48:	b590      	push	{r4, r7, lr}
  404a4a:	b089      	sub	sp, #36	; 0x24
  404a4c:	af04      	add	r7, sp, #16
  404a4e:	6078      	str	r0, [r7, #4]
	mgr_eventMessage_t msgEvent; 
	//initialize the board
	
	brd_board_init(); 
  404a50:	4b40      	ldr	r3, [pc, #256]	; (404b54 <mgr_managerTask+0x10c>)
  404a52:	4798      	blx	r3
	printf("startApplication!\r\n");
  404a54:	4840      	ldr	r0, [pc, #256]	; (404b58 <mgr_managerTask+0x110>)
  404a56:	4b41      	ldr	r3, [pc, #260]	; (404b5c <mgr_managerTask+0x114>)
  404a58:	4798      	blx	r3
	//initialize power button listener. 	
	drv_gpio_config_interrupt_handler(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_LOW_EDGE,powerButtonHandler_LowEdge);
  404a5a:	200a      	movs	r0, #10
  404a5c:	2101      	movs	r1, #1
  404a5e:	4a40      	ldr	r2, [pc, #256]	; (404b60 <mgr_managerTask+0x118>)
  404a60:	4b40      	ldr	r3, [pc, #256]	; (404b64 <mgr_managerTask+0x11c>)
  404a62:	4798      	blx	r3
	mgr_eventQueue = xQueueCreate( 10, sizeof(mgr_eventMessage_t));
  404a64:	200a      	movs	r0, #10
  404a66:	2104      	movs	r1, #4
  404a68:	2200      	movs	r2, #0
  404a6a:	4b3f      	ldr	r3, [pc, #252]	; (404b68 <mgr_managerTask+0x120>)
  404a6c:	4798      	blx	r3
  404a6e:	4602      	mov	r2, r0
  404a70:	4b3e      	ldr	r3, [pc, #248]	; (404b6c <mgr_managerTask+0x124>)
  404a72:	601a      	str	r2, [r3, #0]
	pwrButtonTimer = xTimerCreate("PowerBnt timer", (SLEEP_ENTRY_WAIT_TIME/portTICK_RATE_MS), pdFALSE, NULL, powerButtonTimerCallback);
  404a74:	4b3e      	ldr	r3, [pc, #248]	; (404b70 <mgr_managerTask+0x128>)
  404a76:	9300      	str	r3, [sp, #0]
  404a78:	483e      	ldr	r0, [pc, #248]	; (404b74 <mgr_managerTask+0x12c>)
  404a7a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
  404a7e:	2200      	movs	r2, #0
  404a80:	2300      	movs	r3, #0
  404a82:	4c3d      	ldr	r4, [pc, #244]	; (404b78 <mgr_managerTask+0x130>)
  404a84:	47a0      	blx	r4
  404a86:	4602      	mov	r2, r0
  404a88:	4b3c      	ldr	r3, [pc, #240]	; (404b7c <mgr_managerTask+0x134>)
  404a8a:	601a      	str	r2, [r3, #0]
	//start all the other tasks
	int retCode = 0;
  404a8c:	2300      	movs	r3, #0
  404a8e:	60fb      	str	r3, [r7, #12]
	retCode = xTaskCreate(chrg_task_chargeMonitor, "CHRG", TASK_CHRG_MON_STACK_SIZE, &chargeMonitorConfiguration, TASK_CHRG_MON_STACK_PRIORITY, NULL);
  404a90:	2302      	movs	r3, #2
  404a92:	9300      	str	r3, [sp, #0]
  404a94:	2300      	movs	r3, #0
  404a96:	9301      	str	r3, [sp, #4]
  404a98:	2300      	movs	r3, #0
  404a9a:	9302      	str	r3, [sp, #8]
  404a9c:	2300      	movs	r3, #0
  404a9e:	9303      	str	r3, [sp, #12]
  404aa0:	4837      	ldr	r0, [pc, #220]	; (404b80 <mgr_managerTask+0x138>)
  404aa2:	4938      	ldr	r1, [pc, #224]	; (404b84 <mgr_managerTask+0x13c>)
  404aa4:	f44f 7240 	mov.w	r2, #768	; 0x300
  404aa8:	4b37      	ldr	r3, [pc, #220]	; (404b88 <mgr_managerTask+0x140>)
  404aaa:	4c38      	ldr	r4, [pc, #224]	; (404b8c <mgr_managerTask+0x144>)
  404aac:	47a0      	blx	r4
  404aae:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  404ab0:	68fb      	ldr	r3, [r7, #12]
  404ab2:	2b01      	cmp	r3, #1
  404ab4:	d003      	beq.n	404abe <mgr_managerTask+0x76>
	{
		printf("Failed to create CHRG task code %d\r\n", retCode);
  404ab6:	4836      	ldr	r0, [pc, #216]	; (404b90 <mgr_managerTask+0x148>)
  404ab8:	68f9      	ldr	r1, [r7, #12]
  404aba:	4b28      	ldr	r3, [pc, #160]	; (404b5c <mgr_managerTask+0x114>)
  404abc:	4798      	blx	r3
	}
	retCode = xTaskCreate(cmd_task_commandProcesor, "CMD", TASK_COMMAND_PROC_STACK_SIZE, NULL, TASK_COMMAND_PROC_PRIORITY, NULL);
  404abe:	2305      	movs	r3, #5
  404ac0:	9300      	str	r3, [sp, #0]
  404ac2:	2300      	movs	r3, #0
  404ac4:	9301      	str	r3, [sp, #4]
  404ac6:	2300      	movs	r3, #0
  404ac8:	9302      	str	r3, [sp, #8]
  404aca:	2300      	movs	r3, #0
  404acc:	9303      	str	r3, [sp, #12]
  404ace:	4831      	ldr	r0, [pc, #196]	; (404b94 <mgr_managerTask+0x14c>)
  404ad0:	4931      	ldr	r1, [pc, #196]	; (404b98 <mgr_managerTask+0x150>)
  404ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
  404ad6:	2300      	movs	r3, #0
  404ad8:	4c2c      	ldr	r4, [pc, #176]	; (404b8c <mgr_managerTask+0x144>)
  404ada:	47a0      	blx	r4
  404adc:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  404ade:	68fb      	ldr	r3, [r7, #12]
  404ae0:	2b01      	cmp	r3, #1
  404ae2:	d003      	beq.n	404aec <mgr_managerTask+0xa4>
	{
		printf("Failed to create CMD task code %d\r\n", retCode);
  404ae4:	482d      	ldr	r0, [pc, #180]	; (404b9c <mgr_managerTask+0x154>)
  404ae6:	68f9      	ldr	r1, [r7, #12]
  404ae8:	4b1c      	ldr	r3, [pc, #112]	; (404b5c <mgr_managerTask+0x114>)
  404aea:	4798      	blx	r3
	}
	retCode = xTaskCreate(dat_task_dataRouter, "DAT", TASK_DATA_ROUTER_STACK_SIZE, &dataRouterConfiguration, TASK_DATA_ROUTER_PRIORITY, NULL);
  404aec:	2303      	movs	r3, #3
  404aee:	9300      	str	r3, [sp, #0]
  404af0:	2300      	movs	r3, #0
  404af2:	9301      	str	r3, [sp, #4]
  404af4:	2300      	movs	r3, #0
  404af6:	9302      	str	r3, [sp, #8]
  404af8:	2300      	movs	r3, #0
  404afa:	9303      	str	r3, [sp, #12]
  404afc:	4828      	ldr	r0, [pc, #160]	; (404ba0 <mgr_managerTask+0x158>)
  404afe:	4929      	ldr	r1, [pc, #164]	; (404ba4 <mgr_managerTask+0x15c>)
  404b00:	f44f 7240 	mov.w	r2, #768	; 0x300
  404b04:	4b28      	ldr	r3, [pc, #160]	; (404ba8 <mgr_managerTask+0x160>)
  404b06:	4c21      	ldr	r4, [pc, #132]	; (404b8c <mgr_managerTask+0x144>)
  404b08:	47a0      	blx	r4
  404b0a:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  404b0c:	68fb      	ldr	r3, [r7, #12]
  404b0e:	2b01      	cmp	r3, #1
  404b10:	d003      	beq.n	404b1a <mgr_managerTask+0xd2>
	{
		printf("Failed to create CMD task code %d\r\n", retCode);
  404b12:	4822      	ldr	r0, [pc, #136]	; (404b9c <mgr_managerTask+0x154>)
  404b14:	68f9      	ldr	r1, [r7, #12]
  404b16:	4b11      	ldr	r3, [pc, #68]	; (404b5c <mgr_managerTask+0x114>)
  404b18:	4798      	blx	r3
	}
	//enable power to the data board
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_HIGH);
  404b1a:	2004      	movs	r0, #4
  404b1c:	2101      	movs	r1, #1
  404b1e:	4b23      	ldr	r3, [pc, #140]	; (404bac <mgr_managerTask+0x164>)
  404b20:	4798      	blx	r3
	while(1)
	{
		//test code for the power board. 
		while(1)
		{
			drv_led_set(DRV_LED_GREEN, DRV_LED_SOLID);
  404b22:	2002      	movs	r0, #2
  404b24:	2101      	movs	r1, #1
  404b26:	4b22      	ldr	r3, [pc, #136]	; (404bb0 <mgr_managerTask+0x168>)
  404b28:	4798      	blx	r3
			vTaskDelay(500); 
  404b2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  404b2e:	4b21      	ldr	r3, [pc, #132]	; (404bb4 <mgr_managerTask+0x16c>)
  404b30:	4798      	blx	r3
			drv_led_set(DRV_LED_BLUE, DRV_LED_SOLID);
  404b32:	2001      	movs	r0, #1
  404b34:	2101      	movs	r1, #1
  404b36:	4b1e      	ldr	r3, [pc, #120]	; (404bb0 <mgr_managerTask+0x168>)
  404b38:	4798      	blx	r3
			vTaskDelay(500);
  404b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  404b3e:	4b1d      	ldr	r3, [pc, #116]	; (404bb4 <mgr_managerTask+0x16c>)
  404b40:	4798      	blx	r3
			drv_led_set(DRV_LED_RED, DRV_LED_SOLID);
  404b42:	2000      	movs	r0, #0
  404b44:	2101      	movs	r1, #1
  404b46:	4b1a      	ldr	r3, [pc, #104]	; (404bb0 <mgr_managerTask+0x168>)
  404b48:	4798      	blx	r3
			vTaskDelay(1000);
  404b4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  404b4e:	4b19      	ldr	r3, [pc, #100]	; (404bb4 <mgr_managerTask+0x16c>)
  404b50:	4798      	blx	r3
		}	
  404b52:	e7e6      	b.n	404b22 <mgr_managerTask+0xda>
  404b54:	00403f91 	.word	0x00403f91
  404b58:	004132e4 	.word	0x004132e4
  404b5c:	0040a0d9 	.word	0x0040a0d9
  404b60:	00404c25 	.word	0x00404c25
  404b64:	00404879 	.word	0x00404879
  404b68:	00406511 	.word	0x00406511
  404b6c:	20000cb0 	.word	0x20000cb0
  404b70:	00404bb9 	.word	0x00404bb9
  404b74:	004132f8 	.word	0x004132f8
  404b78:	004079a1 	.word	0x004079a1
  404b7c:	20000cb4 	.word	0x20000cb4
  404b80:	00404051 	.word	0x00404051
  404b84:	00413308 	.word	0x00413308
  404b88:	20000188 	.word	0x20000188
  404b8c:	00406c35 	.word	0x00406c35
  404b90:	00413310 	.word	0x00413310
  404b94:	0040413d 	.word	0x0040413d
  404b98:	00413338 	.word	0x00413338
  404b9c:	0041333c 	.word	0x0041333c
  404ba0:	00404299 	.word	0x00404299
  404ba4:	00413360 	.word	0x00413360
  404ba8:	20000180 	.word	0x20000180
  404bac:	00404705 	.word	0x00404705
  404bb0:	0040516d 	.word	0x0040516d
  404bb4:	00406df5 	.word	0x00406df5

00404bb8 <powerButtonTimerCallback>:
}


//static functions
void powerButtonTimerCallback()
{
  404bb8:	b590      	push	{r4, r7, lr}
  404bba:	b083      	sub	sp, #12
  404bbc:	af00      	add	r7, sp, #0
	mgr_eventMessage_t pwrDownEvent = 
  404bbe:	2300      	movs	r3, #0
  404bc0:	713b      	strb	r3, [r7, #4]
  404bc2:	2300      	movs	r3, #0
  404bc4:	80fb      	strh	r3, [r7, #6]
	{
		.sysEvent = SYS_EVENT_POWER_SWITCH,
		.data = 0		
	};
	//The timer has elapsed, this means it's power down time. 
	if(xQueueSendToBack(mgr_eventQueue,&pwrDownEvent,5) != TRUE)
  404bc6:	4b06      	ldr	r3, [pc, #24]	; (404be0 <powerButtonTimerCallback+0x28>)
  404bc8:	681a      	ldr	r2, [r3, #0]
  404bca:	1d3b      	adds	r3, r7, #4
  404bcc:	4610      	mov	r0, r2
  404bce:	4619      	mov	r1, r3
  404bd0:	2205      	movs	r2, #5
  404bd2:	2300      	movs	r3, #0
  404bd4:	4c03      	ldr	r4, [pc, #12]	; (404be4 <powerButtonTimerCallback+0x2c>)
  404bd6:	47a0      	blx	r4
	{
		//this is an error, we should log it.
	}	
	
	
}
  404bd8:	370c      	adds	r7, #12
  404bda:	46bd      	mov	sp, r7
  404bdc:	bd90      	pop	{r4, r7, pc}
  404bde:	bf00      	nop
  404be0:	20000cb0 	.word	0x20000cb0
  404be4:	004065a9 	.word	0x004065a9

00404be8 <powerButtonHandler_HighEdge>:
static void powerButtonHandler_HighEdge()
{
  404be8:	b590      	push	{r4, r7, lr}
  404bea:	b083      	sub	sp, #12
  404bec:	af02      	add	r7, sp, #8
	drv_gpio_config_interrupt_handler(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_LOW_EDGE,powerButtonHandler_LowEdge);
  404bee:	200a      	movs	r0, #10
  404bf0:	2101      	movs	r1, #1
  404bf2:	4a08      	ldr	r2, [pc, #32]	; (404c14 <powerButtonHandler_HighEdge+0x2c>)
  404bf4:	4b08      	ldr	r3, [pc, #32]	; (404c18 <powerButtonHandler_HighEdge+0x30>)
  404bf6:	4798      	blx	r3
	xTimerStopFromISR(pwrButtonTimer,pdFALSE); 
  404bf8:	4b08      	ldr	r3, [pc, #32]	; (404c1c <powerButtonHandler_HighEdge+0x34>)
  404bfa:	681b      	ldr	r3, [r3, #0]
  404bfc:	2200      	movs	r2, #0
  404bfe:	9200      	str	r2, [sp, #0]
  404c00:	4618      	mov	r0, r3
  404c02:	2101      	movs	r1, #1
  404c04:	2200      	movs	r2, #0
  404c06:	2300      	movs	r3, #0
  404c08:	4c05      	ldr	r4, [pc, #20]	; (404c20 <powerButtonHandler_HighEdge+0x38>)
  404c0a:	47a0      	blx	r4
}
  404c0c:	3704      	adds	r7, #4
  404c0e:	46bd      	mov	sp, r7
  404c10:	bd90      	pop	{r4, r7, pc}
  404c12:	bf00      	nop
  404c14:	00404c25 	.word	0x00404c25
  404c18:	00404879 	.word	0x00404879
  404c1c:	20000cb4 	.word	0x20000cb4
  404c20:	00407a1d 	.word	0x00407a1d

00404c24 <powerButtonHandler_LowEdge>:
static void powerButtonHandler_LowEdge()
{
  404c24:	b590      	push	{r4, r7, lr}
  404c26:	b083      	sub	sp, #12
  404c28:	af02      	add	r7, sp, #8
	drv_gpio_config_interrupt_handler(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_HIGH_EDGE,powerButtonHandler_HighEdge);
  404c2a:	200a      	movs	r0, #10
  404c2c:	2100      	movs	r1, #0
  404c2e:	4a09      	ldr	r2, [pc, #36]	; (404c54 <powerButtonHandler_LowEdge+0x30>)
  404c30:	4b09      	ldr	r3, [pc, #36]	; (404c58 <powerButtonHandler_LowEdge+0x34>)
  404c32:	4798      	blx	r3
	xTimerStartFromISR(pwrButtonTimer,pdFALSE); 
  404c34:	4b09      	ldr	r3, [pc, #36]	; (404c5c <powerButtonHandler_LowEdge+0x38>)
  404c36:	681c      	ldr	r4, [r3, #0]
  404c38:	4b09      	ldr	r3, [pc, #36]	; (404c60 <powerButtonHandler_LowEdge+0x3c>)
  404c3a:	4798      	blx	r3
  404c3c:	4603      	mov	r3, r0
  404c3e:	2200      	movs	r2, #0
  404c40:	9200      	str	r2, [sp, #0]
  404c42:	4620      	mov	r0, r4
  404c44:	2100      	movs	r1, #0
  404c46:	461a      	mov	r2, r3
  404c48:	2300      	movs	r3, #0
  404c4a:	4c06      	ldr	r4, [pc, #24]	; (404c64 <powerButtonHandler_LowEdge+0x40>)
  404c4c:	47a0      	blx	r4
}
  404c4e:	3704      	adds	r7, #4
  404c50:	46bd      	mov	sp, r7
  404c52:	bd90      	pop	{r4, r7, pc}
  404c54:	00404be9 	.word	0x00404be9
  404c58:	00404879 	.word	0x00404879
  404c5c:	20000cb4 	.word	0x20000cb4
  404c60:	00407041 	.word	0x00407041
  404c64:	00407a1d 	.word	0x00407a1d

00404c68 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  404c68:	b580      	push	{r7, lr}
  404c6a:	b086      	sub	sp, #24
  404c6c:	af00      	add	r7, sp, #0
  404c6e:	60f8      	str	r0, [r7, #12]
  404c70:	60b9      	str	r1, [r7, #8]
  404c72:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  404c74:	2300      	movs	r3, #0
  404c76:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  404c78:	68fb      	ldr	r3, [r7, #12]
  404c7a:	2b00      	cmp	r3, #0
  404c7c:	d002      	beq.n	404c84 <_read+0x1c>
		return -1;
  404c7e:	f04f 33ff 	mov.w	r3, #4294967295
  404c82:	e014      	b.n	404cae <_read+0x46>
	}

	for (; len > 0; --len) {
  404c84:	e00f      	b.n	404ca6 <_read+0x3e>
		ptr_get(stdio_base, ptr);
  404c86:	4b0c      	ldr	r3, [pc, #48]	; (404cb8 <_read+0x50>)
  404c88:	681b      	ldr	r3, [r3, #0]
  404c8a:	4a0c      	ldr	r2, [pc, #48]	; (404cbc <_read+0x54>)
  404c8c:	6812      	ldr	r2, [r2, #0]
  404c8e:	4610      	mov	r0, r2
  404c90:	68b9      	ldr	r1, [r7, #8]
  404c92:	4798      	blx	r3
		ptr++;
  404c94:	68bb      	ldr	r3, [r7, #8]
  404c96:	3301      	adds	r3, #1
  404c98:	60bb      	str	r3, [r7, #8]
		nChars++;
  404c9a:	697b      	ldr	r3, [r7, #20]
  404c9c:	3301      	adds	r3, #1
  404c9e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  404ca0:	687b      	ldr	r3, [r7, #4]
  404ca2:	3b01      	subs	r3, #1
  404ca4:	607b      	str	r3, [r7, #4]
  404ca6:	687b      	ldr	r3, [r7, #4]
  404ca8:	2b00      	cmp	r3, #0
  404caa:	dcec      	bgt.n	404c86 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  404cac:	697b      	ldr	r3, [r7, #20]
}
  404cae:	4618      	mov	r0, r3
  404cb0:	3718      	adds	r7, #24
  404cb2:	46bd      	mov	sp, r7
  404cb4:	bd80      	pop	{r7, pc}
  404cb6:	bf00      	nop
  404cb8:	2000af6c 	.word	0x2000af6c
  404cbc:	2000c004 	.word	0x2000c004

00404cc0 <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
  404cc0:	b480      	push	{r7}
  404cc2:	b083      	sub	sp, #12
  404cc4:	af00      	add	r7, sp, #0
  404cc6:	6078      	str	r0, [r7, #4]
  404cc8:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
  404cca:	687b      	ldr	r3, [r7, #4]
  404ccc:	683a      	ldr	r2, [r7, #0]
  404cce:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
  404cd0:	687b      	ldr	r3, [r7, #4]
  404cd2:	6a1b      	ldr	r3, [r3, #32]
}
  404cd4:	370c      	adds	r7, #12
  404cd6:	46bd      	mov	sp, r7
  404cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
  404cdc:	4770      	bx	lr
  404cde:	bf00      	nop

00404ce0 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
  404ce0:	b480      	push	{r7}
  404ce2:	b083      	sub	sp, #12
  404ce4:	af00      	add	r7, sp, #0
  404ce6:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
  404ce8:	687b      	ldr	r3, [r7, #4]
  404cea:	6a1b      	ldr	r3, [r3, #32]
}
  404cec:	4618      	mov	r0, r3
  404cee:	370c      	adds	r7, #12
  404cf0:	46bd      	mov	sp, r7
  404cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
  404cf6:	4770      	bx	lr

00404cf8 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
  404cf8:	b480      	push	{r7}
  404cfa:	b083      	sub	sp, #12
  404cfc:	af00      	add	r7, sp, #0
  404cfe:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
  404d00:	687b      	ldr	r3, [r7, #4]
  404d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  404d04:	4618      	mov	r0, r3
  404d06:	370c      	adds	r7, #12
  404d08:	46bd      	mov	sp, r7
  404d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d0e:	4770      	bx	lr

00404d10 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  404d10:	b480      	push	{r7}
  404d12:	b089      	sub	sp, #36	; 0x24
  404d14:	af00      	add	r7, sp, #0
  404d16:	60f8      	str	r0, [r7, #12]
  404d18:	60b9      	str	r1, [r7, #8]
  404d1a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  404d1c:	68bb      	ldr	r3, [r7, #8]
  404d1e:	011a      	lsls	r2, r3, #4
  404d20:	687b      	ldr	r3, [r7, #4]
  404d22:	429a      	cmp	r2, r3
  404d24:	d802      	bhi.n	404d2c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  404d26:	2310      	movs	r3, #16
  404d28:	61fb      	str	r3, [r7, #28]
  404d2a:	e001      	b.n	404d30 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  404d2c:	2308      	movs	r3, #8
  404d2e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  404d30:	687b      	ldr	r3, [r7, #4]
  404d32:	00da      	lsls	r2, r3, #3
  404d34:	69fb      	ldr	r3, [r7, #28]
  404d36:	68b9      	ldr	r1, [r7, #8]
  404d38:	fb01 f303 	mul.w	r3, r1, r3
  404d3c:	085b      	lsrs	r3, r3, #1
  404d3e:	441a      	add	r2, r3
  404d40:	69fb      	ldr	r3, [r7, #28]
  404d42:	68b9      	ldr	r1, [r7, #8]
  404d44:	fb01 f303 	mul.w	r3, r1, r3
  404d48:	fbb2 f3f3 	udiv	r3, r2, r3
  404d4c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  404d4e:	69bb      	ldr	r3, [r7, #24]
  404d50:	08db      	lsrs	r3, r3, #3
  404d52:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  404d54:	69bb      	ldr	r3, [r7, #24]
  404d56:	f003 0307 	and.w	r3, r3, #7
  404d5a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  404d5c:	697b      	ldr	r3, [r7, #20]
  404d5e:	2b00      	cmp	r3, #0
  404d60:	d003      	beq.n	404d6a <usart_set_async_baudrate+0x5a>
  404d62:	697b      	ldr	r3, [r7, #20]
  404d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  404d68:	d301      	bcc.n	404d6e <usart_set_async_baudrate+0x5e>
		return 1;
  404d6a:	2301      	movs	r3, #1
  404d6c:	e00f      	b.n	404d8e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  404d6e:	69fb      	ldr	r3, [r7, #28]
  404d70:	2b08      	cmp	r3, #8
  404d72:	d105      	bne.n	404d80 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  404d74:	68fb      	ldr	r3, [r7, #12]
  404d76:	685b      	ldr	r3, [r3, #4]
  404d78:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  404d7c:	68fb      	ldr	r3, [r7, #12]
  404d7e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  404d80:	693b      	ldr	r3, [r7, #16]
  404d82:	041a      	lsls	r2, r3, #16
  404d84:	697b      	ldr	r3, [r7, #20]
  404d86:	431a      	orrs	r2, r3
  404d88:	68fb      	ldr	r3, [r7, #12]
  404d8a:	621a      	str	r2, [r3, #32]

	return 0;
  404d8c:	2300      	movs	r3, #0
}
  404d8e:	4618      	mov	r0, r3
  404d90:	3724      	adds	r7, #36	; 0x24
  404d92:	46bd      	mov	sp, r7
  404d94:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d98:	4770      	bx	lr
  404d9a:	bf00      	nop

00404d9c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  404d9c:	b580      	push	{r7, lr}
  404d9e:	b082      	sub	sp, #8
  404da0:	af00      	add	r7, sp, #0
  404da2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  404da4:	6878      	ldr	r0, [r7, #4]
  404da6:	4b0e      	ldr	r3, [pc, #56]	; (404de0 <usart_reset+0x44>)
  404da8:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  404daa:	687b      	ldr	r3, [r7, #4]
  404dac:	2200      	movs	r2, #0
  404dae:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  404db0:	687b      	ldr	r3, [r7, #4]
  404db2:	2200      	movs	r2, #0
  404db4:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  404db6:	687b      	ldr	r3, [r7, #4]
  404db8:	2200      	movs	r2, #0
  404dba:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  404dbc:	6878      	ldr	r0, [r7, #4]
  404dbe:	4b09      	ldr	r3, [pc, #36]	; (404de4 <usart_reset+0x48>)
  404dc0:	4798      	blx	r3
	usart_reset_rx(p_usart);
  404dc2:	6878      	ldr	r0, [r7, #4]
  404dc4:	4b08      	ldr	r3, [pc, #32]	; (404de8 <usart_reset+0x4c>)
  404dc6:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  404dc8:	6878      	ldr	r0, [r7, #4]
  404dca:	4b08      	ldr	r3, [pc, #32]	; (404dec <usart_reset+0x50>)
  404dcc:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  404dce:	6878      	ldr	r0, [r7, #4]
  404dd0:	4b07      	ldr	r3, [pc, #28]	; (404df0 <usart_reset+0x54>)
  404dd2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  404dd4:	6878      	ldr	r0, [r7, #4]
  404dd6:	4b07      	ldr	r3, [pc, #28]	; (404df4 <usart_reset+0x58>)
  404dd8:	4798      	blx	r3
#endif
}
  404dda:	3708      	adds	r7, #8
  404ddc:	46bd      	mov	sp, r7
  404dde:	bd80      	pop	{r7, pc}
  404de0:	00405005 	.word	0x00405005
  404de4:	00404e95 	.word	0x00404e95
  404de8:	00404ec5 	.word	0x00404ec5
  404dec:	00404f15 	.word	0x00404f15
  404df0:	00404f4d 	.word	0x00404f4d
  404df4:	00404f31 	.word	0x00404f31

00404df8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  404df8:	b580      	push	{r7, lr}
  404dfa:	b084      	sub	sp, #16
  404dfc:	af00      	add	r7, sp, #0
  404dfe:	60f8      	str	r0, [r7, #12]
  404e00:	60b9      	str	r1, [r7, #8]
  404e02:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  404e04:	68f8      	ldr	r0, [r7, #12]
  404e06:	4b1a      	ldr	r3, [pc, #104]	; (404e70 <usart_init_rs232+0x78>)
  404e08:	4798      	blx	r3

	ul_reg_val = 0;
  404e0a:	4b1a      	ldr	r3, [pc, #104]	; (404e74 <usart_init_rs232+0x7c>)
  404e0c:	2200      	movs	r2, #0
  404e0e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  404e10:	68bb      	ldr	r3, [r7, #8]
  404e12:	2b00      	cmp	r3, #0
  404e14:	d009      	beq.n	404e2a <usart_init_rs232+0x32>
  404e16:	68bb      	ldr	r3, [r7, #8]
  404e18:	681b      	ldr	r3, [r3, #0]
  404e1a:	68f8      	ldr	r0, [r7, #12]
  404e1c:	4619      	mov	r1, r3
  404e1e:	687a      	ldr	r2, [r7, #4]
  404e20:	4b15      	ldr	r3, [pc, #84]	; (404e78 <usart_init_rs232+0x80>)
  404e22:	4798      	blx	r3
  404e24:	4603      	mov	r3, r0
  404e26:	2b00      	cmp	r3, #0
  404e28:	d001      	beq.n	404e2e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  404e2a:	2301      	movs	r3, #1
  404e2c:	e01b      	b.n	404e66 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  404e2e:	68bb      	ldr	r3, [r7, #8]
  404e30:	685a      	ldr	r2, [r3, #4]
  404e32:	68bb      	ldr	r3, [r7, #8]
  404e34:	689b      	ldr	r3, [r3, #8]
  404e36:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  404e38:	68bb      	ldr	r3, [r7, #8]
  404e3a:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  404e3c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  404e3e:	68bb      	ldr	r3, [r7, #8]
  404e40:	68db      	ldr	r3, [r3, #12]
  404e42:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  404e44:	4b0b      	ldr	r3, [pc, #44]	; (404e74 <usart_init_rs232+0x7c>)
  404e46:	681b      	ldr	r3, [r3, #0]
  404e48:	431a      	orrs	r2, r3
  404e4a:	4b0a      	ldr	r3, [pc, #40]	; (404e74 <usart_init_rs232+0x7c>)
  404e4c:	601a      	str	r2, [r3, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  404e4e:	4b09      	ldr	r3, [pc, #36]	; (404e74 <usart_init_rs232+0x7c>)
  404e50:	681a      	ldr	r2, [r3, #0]
  404e52:	4b08      	ldr	r3, [pc, #32]	; (404e74 <usart_init_rs232+0x7c>)
  404e54:	601a      	str	r2, [r3, #0]

	p_usart->US_MR |= ul_reg_val;
  404e56:	68fb      	ldr	r3, [r7, #12]
  404e58:	685a      	ldr	r2, [r3, #4]
  404e5a:	4b06      	ldr	r3, [pc, #24]	; (404e74 <usart_init_rs232+0x7c>)
  404e5c:	681b      	ldr	r3, [r3, #0]
  404e5e:	431a      	orrs	r2, r3
  404e60:	68fb      	ldr	r3, [r7, #12]
  404e62:	605a      	str	r2, [r3, #4]

	return 0;
  404e64:	2300      	movs	r3, #0
}
  404e66:	4618      	mov	r0, r3
  404e68:	3710      	adds	r7, #16
  404e6a:	46bd      	mov	sp, r7
  404e6c:	bd80      	pop	{r7, pc}
  404e6e:	bf00      	nop
  404e70:	00404d9d 	.word	0x00404d9d
  404e74:	20000cb8 	.word	0x20000cb8
  404e78:	00404d11 	.word	0x00404d11

00404e7c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  404e7c:	b480      	push	{r7}
  404e7e:	b083      	sub	sp, #12
  404e80:	af00      	add	r7, sp, #0
  404e82:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  404e84:	687b      	ldr	r3, [r7, #4]
  404e86:	2240      	movs	r2, #64	; 0x40
  404e88:	601a      	str	r2, [r3, #0]
}
  404e8a:	370c      	adds	r7, #12
  404e8c:	46bd      	mov	sp, r7
  404e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e92:	4770      	bx	lr

00404e94 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  404e94:	b480      	push	{r7}
  404e96:	b083      	sub	sp, #12
  404e98:	af00      	add	r7, sp, #0
  404e9a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  404e9c:	687b      	ldr	r3, [r7, #4]
  404e9e:	2288      	movs	r2, #136	; 0x88
  404ea0:	601a      	str	r2, [r3, #0]
}
  404ea2:	370c      	adds	r7, #12
  404ea4:	46bd      	mov	sp, r7
  404ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
  404eaa:	4770      	bx	lr

00404eac <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  404eac:	b480      	push	{r7}
  404eae:	b083      	sub	sp, #12
  404eb0:	af00      	add	r7, sp, #0
  404eb2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  404eb4:	687b      	ldr	r3, [r7, #4]
  404eb6:	2210      	movs	r2, #16
  404eb8:	601a      	str	r2, [r3, #0]
}
  404eba:	370c      	adds	r7, #12
  404ebc:	46bd      	mov	sp, r7
  404ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ec2:	4770      	bx	lr

00404ec4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  404ec4:	b480      	push	{r7}
  404ec6:	b083      	sub	sp, #12
  404ec8:	af00      	add	r7, sp, #0
  404eca:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  404ecc:	687b      	ldr	r3, [r7, #4]
  404ece:	2224      	movs	r2, #36	; 0x24
  404ed0:	601a      	str	r2, [r3, #0]
}
  404ed2:	370c      	adds	r7, #12
  404ed4:	46bd      	mov	sp, r7
  404ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
  404eda:	4770      	bx	lr

00404edc <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  404edc:	b480      	push	{r7}
  404ede:	b083      	sub	sp, #12
  404ee0:	af00      	add	r7, sp, #0
  404ee2:	6078      	str	r0, [r7, #4]
  404ee4:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  404ee6:	687b      	ldr	r3, [r7, #4]
  404ee8:	683a      	ldr	r2, [r7, #0]
  404eea:	609a      	str	r2, [r3, #8]
}
  404eec:	370c      	adds	r7, #12
  404eee:	46bd      	mov	sp, r7
  404ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ef4:	4770      	bx	lr
  404ef6:	bf00      	nop

00404ef8 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  404ef8:	b480      	push	{r7}
  404efa:	b083      	sub	sp, #12
  404efc:	af00      	add	r7, sp, #0
  404efe:	6078      	str	r0, [r7, #4]
  404f00:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  404f02:	687b      	ldr	r3, [r7, #4]
  404f04:	683a      	ldr	r2, [r7, #0]
  404f06:	60da      	str	r2, [r3, #12]
}
  404f08:	370c      	adds	r7, #12
  404f0a:	46bd      	mov	sp, r7
  404f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f10:	4770      	bx	lr
  404f12:	bf00      	nop

00404f14 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  404f14:	b480      	push	{r7}
  404f16:	b083      	sub	sp, #12
  404f18:	af00      	add	r7, sp, #0
  404f1a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  404f1c:	687b      	ldr	r3, [r7, #4]
  404f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
  404f22:	601a      	str	r2, [r3, #0]
}
  404f24:	370c      	adds	r7, #12
  404f26:	46bd      	mov	sp, r7
  404f28:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f2c:	4770      	bx	lr
  404f2e:	bf00      	nop

00404f30 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  404f30:	b480      	push	{r7}
  404f32:	b083      	sub	sp, #12
  404f34:	af00      	add	r7, sp, #0
  404f36:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  404f38:	687b      	ldr	r3, [r7, #4]
  404f3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  404f3e:	601a      	str	r2, [r3, #0]
}
  404f40:	370c      	adds	r7, #12
  404f42:	46bd      	mov	sp, r7
  404f44:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f48:	4770      	bx	lr
  404f4a:	bf00      	nop

00404f4c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  404f4c:	b480      	push	{r7}
  404f4e:	b083      	sub	sp, #12
  404f50:	af00      	add	r7, sp, #0
  404f52:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  404f54:	687b      	ldr	r3, [r7, #4]
  404f56:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  404f5a:	601a      	str	r2, [r3, #0]
}
  404f5c:	370c      	adds	r7, #12
  404f5e:	46bd      	mov	sp, r7
  404f60:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f64:	4770      	bx	lr
  404f66:	bf00      	nop

00404f68 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  404f68:	b480      	push	{r7}
  404f6a:	b083      	sub	sp, #12
  404f6c:	af00      	add	r7, sp, #0
  404f6e:	6078      	str	r0, [r7, #4]
  404f70:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  404f72:	687b      	ldr	r3, [r7, #4]
  404f74:	695b      	ldr	r3, [r3, #20]
  404f76:	f003 0302 	and.w	r3, r3, #2
  404f7a:	2b00      	cmp	r3, #0
  404f7c:	d101      	bne.n	404f82 <usart_write+0x1a>
		return 1;
  404f7e:	2301      	movs	r3, #1
  404f80:	e005      	b.n	404f8e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  404f82:	683b      	ldr	r3, [r7, #0]
  404f84:	f3c3 0208 	ubfx	r2, r3, #0, #9
  404f88:	687b      	ldr	r3, [r7, #4]
  404f8a:	61da      	str	r2, [r3, #28]
	return 0;
  404f8c:	2300      	movs	r3, #0
}
  404f8e:	4618      	mov	r0, r3
  404f90:	370c      	adds	r7, #12
  404f92:	46bd      	mov	sp, r7
  404f94:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f98:	4770      	bx	lr
  404f9a:	bf00      	nop

00404f9c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  404f9c:	b480      	push	{r7}
  404f9e:	b083      	sub	sp, #12
  404fa0:	af00      	add	r7, sp, #0
  404fa2:	6078      	str	r0, [r7, #4]
  404fa4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  404fa6:	687b      	ldr	r3, [r7, #4]
  404fa8:	695b      	ldr	r3, [r3, #20]
  404faa:	f003 0301 	and.w	r3, r3, #1
  404fae:	2b00      	cmp	r3, #0
  404fb0:	d101      	bne.n	404fb6 <usart_read+0x1a>
		return 1;
  404fb2:	2301      	movs	r3, #1
  404fb4:	e006      	b.n	404fc4 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  404fb6:	687b      	ldr	r3, [r7, #4]
  404fb8:	699b      	ldr	r3, [r3, #24]
  404fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
  404fbe:	683b      	ldr	r3, [r7, #0]
  404fc0:	601a      	str	r2, [r3, #0]

	return 0;
  404fc2:	2300      	movs	r3, #0
}
  404fc4:	4618      	mov	r0, r3
  404fc6:	370c      	adds	r7, #12
  404fc8:	46bd      	mov	sp, r7
  404fca:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fce:	4770      	bx	lr

00404fd0 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
  404fd0:	b480      	push	{r7}
  404fd2:	b083      	sub	sp, #12
  404fd4:	af00      	add	r7, sp, #0
  404fd6:	6078      	str	r0, [r7, #4]
  404fd8:	6039      	str	r1, [r7, #0]
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  404fda:	bf00      	nop
  404fdc:	687b      	ldr	r3, [r7, #4]
  404fde:	695b      	ldr	r3, [r3, #20]
  404fe0:	f003 0301 	and.w	r3, r3, #1
  404fe4:	2b00      	cmp	r3, #0
  404fe6:	d0f9      	beq.n	404fdc <usart_getchar+0xc>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  404fe8:	687b      	ldr	r3, [r7, #4]
  404fea:	699b      	ldr	r3, [r3, #24]
  404fec:	f3c3 0208 	ubfx	r2, r3, #0, #9
  404ff0:	683b      	ldr	r3, [r7, #0]
  404ff2:	601a      	str	r2, [r3, #0]

	return 0;
  404ff4:	2300      	movs	r3, #0
}
  404ff6:	4618      	mov	r0, r3
  404ff8:	370c      	adds	r7, #12
  404ffa:	46bd      	mov	sp, r7
  404ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405000:	4770      	bx	lr
  405002:	bf00      	nop

00405004 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  405004:	b480      	push	{r7}
  405006:	b083      	sub	sp, #12
  405008:	af00      	add	r7, sp, #0
  40500a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40500c:	687b      	ldr	r3, [r7, #4]
  40500e:	4a04      	ldr	r2, [pc, #16]	; (405020 <usart_disable_writeprotect+0x1c>)
  405010:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  405014:	370c      	adds	r7, #12
  405016:	46bd      	mov	sp, r7
  405018:	f85d 7b04 	ldr.w	r7, [sp], #4
  40501c:	4770      	bx	lr
  40501e:	bf00      	nop
  405020:	55534100 	.word	0x55534100

00405024 <vLedTimerCallback>:
drv_led_color_type_t vledColor;	//global variable to store led color, used in timer callback
drv_led_state_type_t vledState; //global variable to store led state, used in timer callback

//Led Timer callback function
void vLedTimerCallback( xTimerHandle xTimer )
{
  405024:	b590      	push	{r4, r7, lr}
  405026:	b085      	sub	sp, #20
  405028:	af02      	add	r7, sp, #8
  40502a:	6078      	str	r0, [r7, #4]
	if(vledState == DRV_LED_FLASH)	//perform the action only if state is flashing
  40502c:	4b2f      	ldr	r3, [pc, #188]	; (4050ec <vLedTimerCallback+0xc8>)
  40502e:	781b      	ldrb	r3, [r3, #0]
  405030:	2b00      	cmp	r3, #0
  405032:	d14d      	bne.n	4050d0 <vLedTimerCallback+0xac>
	{
		//check which led color is set and toggle the pin state
		switch(vledColor)
  405034:	4b2e      	ldr	r3, [pc, #184]	; (4050f0 <vLedTimerCallback+0xcc>)
  405036:	781b      	ldrb	r3, [r3, #0]
  405038:	2b05      	cmp	r3, #5
  40503a:	d847      	bhi.n	4050cc <vLedTimerCallback+0xa8>
  40503c:	a201      	add	r2, pc, #4	; (adr r2, 405044 <vLedTimerCallback+0x20>)
  40503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405042:	bf00      	nop
  405044:	0040505d 	.word	0x0040505d
  405048:	00405069 	.word	0x00405069
  40504c:	00405075 	.word	0x00405075
  405050:	00405081 	.word	0x00405081
  405054:	00405097 	.word	0x00405097
  405058:	004050b7 	.word	0x004050b7
		{
			case DRV_LED_RED:
				drv_gpio_togglePin(ledConfig.redLed);
  40505c:	4b25      	ldr	r3, [pc, #148]	; (4050f4 <vLedTimerCallback+0xd0>)
  40505e:	781b      	ldrb	r3, [r3, #0]
  405060:	4618      	mov	r0, r3
  405062:	4b25      	ldr	r3, [pc, #148]	; (4050f8 <vLedTimerCallback+0xd4>)
  405064:	4798      	blx	r3
				break;
  405066:	e032      	b.n	4050ce <vLedTimerCallback+0xaa>
			case DRV_LED_BLUE:
				drv_gpio_togglePin(ledConfig.blueLed);
  405068:	4b22      	ldr	r3, [pc, #136]	; (4050f4 <vLedTimerCallback+0xd0>)
  40506a:	785b      	ldrb	r3, [r3, #1]
  40506c:	4618      	mov	r0, r3
  40506e:	4b22      	ldr	r3, [pc, #136]	; (4050f8 <vLedTimerCallback+0xd4>)
  405070:	4798      	blx	r3
				break;
  405072:	e02c      	b.n	4050ce <vLedTimerCallback+0xaa>
			case DRV_LED_GREEN:
				drv_gpio_togglePin(ledConfig.greenLed);
  405074:	4b1f      	ldr	r3, [pc, #124]	; (4050f4 <vLedTimerCallback+0xd0>)
  405076:	789b      	ldrb	r3, [r3, #2]
  405078:	4618      	mov	r0, r3
  40507a:	4b1f      	ldr	r3, [pc, #124]	; (4050f8 <vLedTimerCallback+0xd4>)
  40507c:	4798      	blx	r3
				break;
  40507e:	e026      	b.n	4050ce <vLedTimerCallback+0xaa>
			case DRV_LED_YELLOW:
				drv_gpio_togglePin(ledConfig.redLed);
  405080:	4b1c      	ldr	r3, [pc, #112]	; (4050f4 <vLedTimerCallback+0xd0>)
  405082:	781b      	ldrb	r3, [r3, #0]
  405084:	4618      	mov	r0, r3
  405086:	4b1c      	ldr	r3, [pc, #112]	; (4050f8 <vLedTimerCallback+0xd4>)
  405088:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.greenLed);
  40508a:	4b1a      	ldr	r3, [pc, #104]	; (4050f4 <vLedTimerCallback+0xd0>)
  40508c:	789b      	ldrb	r3, [r3, #2]
  40508e:	4618      	mov	r0, r3
  405090:	4b19      	ldr	r3, [pc, #100]	; (4050f8 <vLedTimerCallback+0xd4>)
  405092:	4798      	blx	r3
				break;
  405094:	e01b      	b.n	4050ce <vLedTimerCallback+0xaa>
			case DRV_LED_WHITE:
				drv_gpio_togglePin(ledConfig.redLed);
  405096:	4b17      	ldr	r3, [pc, #92]	; (4050f4 <vLedTimerCallback+0xd0>)
  405098:	781b      	ldrb	r3, [r3, #0]
  40509a:	4618      	mov	r0, r3
  40509c:	4b16      	ldr	r3, [pc, #88]	; (4050f8 <vLedTimerCallback+0xd4>)
  40509e:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.greenLed);
  4050a0:	4b14      	ldr	r3, [pc, #80]	; (4050f4 <vLedTimerCallback+0xd0>)
  4050a2:	789b      	ldrb	r3, [r3, #2]
  4050a4:	4618      	mov	r0, r3
  4050a6:	4b14      	ldr	r3, [pc, #80]	; (4050f8 <vLedTimerCallback+0xd4>)
  4050a8:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.blueLed);
  4050aa:	4b12      	ldr	r3, [pc, #72]	; (4050f4 <vLedTimerCallback+0xd0>)
  4050ac:	785b      	ldrb	r3, [r3, #1]
  4050ae:	4618      	mov	r0, r3
  4050b0:	4b11      	ldr	r3, [pc, #68]	; (4050f8 <vLedTimerCallback+0xd4>)
  4050b2:	4798      	blx	r3
				break;
  4050b4:	e00b      	b.n	4050ce <vLedTimerCallback+0xaa>
			case DRV_LED_TURQUOISE:
				drv_gpio_togglePin(ledConfig.greenLed);
  4050b6:	4b0f      	ldr	r3, [pc, #60]	; (4050f4 <vLedTimerCallback+0xd0>)
  4050b8:	789b      	ldrb	r3, [r3, #2]
  4050ba:	4618      	mov	r0, r3
  4050bc:	4b0e      	ldr	r3, [pc, #56]	; (4050f8 <vLedTimerCallback+0xd4>)
  4050be:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.blueLed);
  4050c0:	4b0c      	ldr	r3, [pc, #48]	; (4050f4 <vLedTimerCallback+0xd0>)
  4050c2:	785b      	ldrb	r3, [r3, #1]
  4050c4:	4618      	mov	r0, r3
  4050c6:	4b0c      	ldr	r3, [pc, #48]	; (4050f8 <vLedTimerCallback+0xd4>)
  4050c8:	4798      	blx	r3
				break;
  4050ca:	e000      	b.n	4050ce <vLedTimerCallback+0xaa>
			default:
				break;
  4050cc:	bf00      	nop
  4050ce:	e009      	b.n	4050e4 <vLedTimerCallback+0xc0>
	}
	else
	{
		//usually shouldn't end up here
		//if it does the timer was not stopped while initializing led to SOLID state
		xTimerStop(LedTimer, 0);
  4050d0:	4b0a      	ldr	r3, [pc, #40]	; (4050fc <vLedTimerCallback+0xd8>)
  4050d2:	681b      	ldr	r3, [r3, #0]
  4050d4:	2200      	movs	r2, #0
  4050d6:	9200      	str	r2, [sp, #0]
  4050d8:	4618      	mov	r0, r3
  4050da:	2101      	movs	r1, #1
  4050dc:	2200      	movs	r2, #0
  4050de:	2300      	movs	r3, #0
  4050e0:	4c07      	ldr	r4, [pc, #28]	; (405100 <vLedTimerCallback+0xdc>)
  4050e2:	47a0      	blx	r4
	}
}
  4050e4:	370c      	adds	r7, #12
  4050e6:	46bd      	mov	sp, r7
  4050e8:	bd90      	pop	{r4, r7, pc}
  4050ea:	bf00      	nop
  4050ec:	2000af78 	.word	0x2000af78
  4050f0:	2000af70 	.word	0x2000af70
  4050f4:	2000af7c 	.word	0x2000af7c
  4050f8:	00404849 	.word	0x00404849
  4050fc:	2000af74 	.word	0x2000af74
  405100:	00407a1d 	.word	0x00407a1d

00405104 <drv_led_init>:
int timerId = 0;
//store the led configuration
status_t drv_led_init(drv_led_config_t* configLed)
{
  405104:	b590      	push	{r4, r7, lr}
  405106:	b087      	sub	sp, #28
  405108:	af02      	add	r7, sp, #8
  40510a:	6078      	str	r0, [r7, #4]
	status_t result = STATUS_PASS;
  40510c:	2300      	movs	r3, #0
  40510e:	73fb      	strb	r3, [r7, #15]
	//store the led configuration
	ledConfig.redLed = configLed->redLed;
  405110:	687b      	ldr	r3, [r7, #4]
  405112:	781a      	ldrb	r2, [r3, #0]
  405114:	4b0f      	ldr	r3, [pc, #60]	; (405154 <drv_led_init+0x50>)
  405116:	701a      	strb	r2, [r3, #0]
	ledConfig.blueLed = configLed->blueLed;
  405118:	687b      	ldr	r3, [r7, #4]
  40511a:	785a      	ldrb	r2, [r3, #1]
  40511c:	4b0d      	ldr	r3, [pc, #52]	; (405154 <drv_led_init+0x50>)
  40511e:	705a      	strb	r2, [r3, #1]
	ledConfig.greenLed = configLed->greenLed;
  405120:	687b      	ldr	r3, [r7, #4]
  405122:	789a      	ldrb	r2, [r3, #2]
  405124:	4b0b      	ldr	r3, [pc, #44]	; (405154 <drv_led_init+0x50>)
  405126:	709a      	strb	r2, [r3, #2]
	
	//create LedTimer task
	LedTimer = xTimerCreate("Led Timer", (LED_BLINK_RATE/portTICK_RATE_MS), pdTRUE, &timerId, vLedTimerCallback);
  405128:	4b0b      	ldr	r3, [pc, #44]	; (405158 <drv_led_init+0x54>)
  40512a:	9300      	str	r3, [sp, #0]
  40512c:	480b      	ldr	r0, [pc, #44]	; (40515c <drv_led_init+0x58>)
  40512e:	21fa      	movs	r1, #250	; 0xfa
  405130:	2201      	movs	r2, #1
  405132:	4b0b      	ldr	r3, [pc, #44]	; (405160 <drv_led_init+0x5c>)
  405134:	4c0b      	ldr	r4, [pc, #44]	; (405164 <drv_led_init+0x60>)
  405136:	47a0      	blx	r4
  405138:	4602      	mov	r2, r0
  40513a:	4b0b      	ldr	r3, [pc, #44]	; (405168 <drv_led_init+0x64>)
  40513c:	601a      	str	r2, [r3, #0]
	if (LedTimer == NULL)
  40513e:	4b0a      	ldr	r3, [pc, #40]	; (405168 <drv_led_init+0x64>)
  405140:	681b      	ldr	r3, [r3, #0]
  405142:	2b00      	cmp	r3, #0
  405144:	d101      	bne.n	40514a <drv_led_init+0x46>
	{
		result = STATUS_FAIL;
  405146:	2301      	movs	r3, #1
  405148:	73fb      	strb	r3, [r7, #15]
	}
	return result;
  40514a:	7bfb      	ldrb	r3, [r7, #15]
}
  40514c:	4618      	mov	r0, r3
  40514e:	3714      	adds	r7, #20
  405150:	46bd      	mov	sp, r7
  405152:	bd90      	pop	{r4, r7, pc}
  405154:	2000af7c 	.word	0x2000af7c
  405158:	00405025 	.word	0x00405025
  40515c:	0041336c 	.word	0x0041336c
  405160:	20000cbc 	.word	0x20000cbc
  405164:	004079a1 	.word	0x004079a1
  405168:	2000af74 	.word	0x2000af74

0040516c <drv_led_set>:

status_t drv_led_set(drv_led_color_type_t ledColor, drv_led_state_type_t ledState)
{
  40516c:	b590      	push	{r4, r7, lr}
  40516e:	b087      	sub	sp, #28
  405170:	af02      	add	r7, sp, #8
  405172:	4602      	mov	r2, r0
  405174:	460b      	mov	r3, r1
  405176:	71fa      	strb	r2, [r7, #7]
  405178:	71bb      	strb	r3, [r7, #6]
	status_t result = STATUS_PASS;
  40517a:	2300      	movs	r3, #0
  40517c:	73fb      	strb	r3, [r7, #15]
	if(LedTimer != NULL)
  40517e:	4b6b      	ldr	r3, [pc, #428]	; (40532c <drv_led_set+0x1c0>)
  405180:	681b      	ldr	r3, [r3, #0]
  405182:	2b00      	cmp	r3, #0
  405184:	d011      	beq.n	4051aa <drv_led_set+0x3e>
	{
		if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  405186:	4b69      	ldr	r3, [pc, #420]	; (40532c <drv_led_set+0x1c0>)
  405188:	681b      	ldr	r3, [r3, #0]
  40518a:	4618      	mov	r0, r3
  40518c:	4b68      	ldr	r3, [pc, #416]	; (405330 <drv_led_set+0x1c4>)
  40518e:	4798      	blx	r3
  405190:	4603      	mov	r3, r0
  405192:	2b00      	cmp	r3, #0
  405194:	d009      	beq.n	4051aa <drv_led_set+0x3e>
		{
			//timer is active, stop it
			xTimerStop(LedTimer, 0);		
  405196:	4b65      	ldr	r3, [pc, #404]	; (40532c <drv_led_set+0x1c0>)
  405198:	681b      	ldr	r3, [r3, #0]
  40519a:	2200      	movs	r2, #0
  40519c:	9200      	str	r2, [sp, #0]
  40519e:	4618      	mov	r0, r3
  4051a0:	2101      	movs	r1, #1
  4051a2:	2200      	movs	r2, #0
  4051a4:	2300      	movs	r3, #0
  4051a6:	4c63      	ldr	r4, [pc, #396]	; (405334 <drv_led_set+0x1c8>)
  4051a8:	47a0      	blx	r4
		}
	}
	//switch off all LEDs
	drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_HIGH);
  4051aa:	4b63      	ldr	r3, [pc, #396]	; (405338 <drv_led_set+0x1cc>)
  4051ac:	781b      	ldrb	r3, [r3, #0]
  4051ae:	4618      	mov	r0, r3
  4051b0:	2101      	movs	r1, #1
  4051b2:	4b62      	ldr	r3, [pc, #392]	; (40533c <drv_led_set+0x1d0>)
  4051b4:	4798      	blx	r3
	drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_HIGH);
  4051b6:	4b60      	ldr	r3, [pc, #384]	; (405338 <drv_led_set+0x1cc>)
  4051b8:	785b      	ldrb	r3, [r3, #1]
  4051ba:	4618      	mov	r0, r3
  4051bc:	2101      	movs	r1, #1
  4051be:	4b5f      	ldr	r3, [pc, #380]	; (40533c <drv_led_set+0x1d0>)
  4051c0:	4798      	blx	r3
	drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_HIGH);
  4051c2:	4b5d      	ldr	r3, [pc, #372]	; (405338 <drv_led_set+0x1cc>)
  4051c4:	789b      	ldrb	r3, [r3, #2]
  4051c6:	4618      	mov	r0, r3
  4051c8:	2101      	movs	r1, #1
  4051ca:	4b5c      	ldr	r3, [pc, #368]	; (40533c <drv_led_set+0x1d0>)
  4051cc:	4798      	blx	r3
	
	vledColor = ledColor;	//copy the color to a global variable used in timer callback
  4051ce:	4b5c      	ldr	r3, [pc, #368]	; (405340 <drv_led_set+0x1d4>)
  4051d0:	79fa      	ldrb	r2, [r7, #7]
  4051d2:	701a      	strb	r2, [r3, #0]
	vledState = ledState;	//copy the state to a global variable used in timer callback
  4051d4:	4b5b      	ldr	r3, [pc, #364]	; (405344 <drv_led_set+0x1d8>)
  4051d6:	79ba      	ldrb	r2, [r7, #6]
  4051d8:	701a      	strb	r2, [r3, #0]
	switch (ledColor)
  4051da:	79fb      	ldrb	r3, [r7, #7]
  4051dc:	2b06      	cmp	r3, #6
  4051de:	d866      	bhi.n	4052ae <drv_led_set+0x142>
  4051e0:	a201      	add	r2, pc, #4	; (adr r2, 4051e8 <drv_led_set+0x7c>)
  4051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4051e6:	bf00      	nop
  4051e8:	00405205 	.word	0x00405205
  4051ec:	00405213 	.word	0x00405213
  4051f0:	00405221 	.word	0x00405221
  4051f4:	0040522f 	.word	0x0040522f
  4051f8:	00405249 	.word	0x00405249
  4051fc:	0040526f 	.word	0x0040526f
  405200:	00405289 	.word	0x00405289
	{
		case DRV_LED_RED:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  405204:	4b4c      	ldr	r3, [pc, #304]	; (405338 <drv_led_set+0x1cc>)
  405206:	781b      	ldrb	r3, [r3, #0]
  405208:	4618      	mov	r0, r3
  40520a:	2100      	movs	r1, #0
  40520c:	4b4b      	ldr	r3, [pc, #300]	; (40533c <drv_led_set+0x1d0>)
  40520e:	4798      	blx	r3
			break;
  405210:	e04e      	b.n	4052b0 <drv_led_set+0x144>
		case DRV_LED_BLUE:
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  405212:	4b49      	ldr	r3, [pc, #292]	; (405338 <drv_led_set+0x1cc>)
  405214:	785b      	ldrb	r3, [r3, #1]
  405216:	4618      	mov	r0, r3
  405218:	2100      	movs	r1, #0
  40521a:	4b48      	ldr	r3, [pc, #288]	; (40533c <drv_led_set+0x1d0>)
  40521c:	4798      	blx	r3
			break;
  40521e:	e047      	b.n	4052b0 <drv_led_set+0x144>
		case DRV_LED_GREEN:
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  405220:	4b45      	ldr	r3, [pc, #276]	; (405338 <drv_led_set+0x1cc>)
  405222:	789b      	ldrb	r3, [r3, #2]
  405224:	4618      	mov	r0, r3
  405226:	2100      	movs	r1, #0
  405228:	4b44      	ldr	r3, [pc, #272]	; (40533c <drv_led_set+0x1d0>)
  40522a:	4798      	blx	r3
			break;
  40522c:	e040      	b.n	4052b0 <drv_led_set+0x144>
		case DRV_LED_YELLOW:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  40522e:	4b42      	ldr	r3, [pc, #264]	; (405338 <drv_led_set+0x1cc>)
  405230:	781b      	ldrb	r3, [r3, #0]
  405232:	4618      	mov	r0, r3
  405234:	2100      	movs	r1, #0
  405236:	4b41      	ldr	r3, [pc, #260]	; (40533c <drv_led_set+0x1d0>)
  405238:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  40523a:	4b3f      	ldr	r3, [pc, #252]	; (405338 <drv_led_set+0x1cc>)
  40523c:	789b      	ldrb	r3, [r3, #2]
  40523e:	4618      	mov	r0, r3
  405240:	2100      	movs	r1, #0
  405242:	4b3e      	ldr	r3, [pc, #248]	; (40533c <drv_led_set+0x1d0>)
  405244:	4798      	blx	r3
			break;
  405246:	e033      	b.n	4052b0 <drv_led_set+0x144>
		case DRV_LED_WHITE:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  405248:	4b3b      	ldr	r3, [pc, #236]	; (405338 <drv_led_set+0x1cc>)
  40524a:	781b      	ldrb	r3, [r3, #0]
  40524c:	4618      	mov	r0, r3
  40524e:	2100      	movs	r1, #0
  405250:	4b3a      	ldr	r3, [pc, #232]	; (40533c <drv_led_set+0x1d0>)
  405252:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  405254:	4b38      	ldr	r3, [pc, #224]	; (405338 <drv_led_set+0x1cc>)
  405256:	789b      	ldrb	r3, [r3, #2]
  405258:	4618      	mov	r0, r3
  40525a:	2100      	movs	r1, #0
  40525c:	4b37      	ldr	r3, [pc, #220]	; (40533c <drv_led_set+0x1d0>)
  40525e:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  405260:	4b35      	ldr	r3, [pc, #212]	; (405338 <drv_led_set+0x1cc>)
  405262:	785b      	ldrb	r3, [r3, #1]
  405264:	4618      	mov	r0, r3
  405266:	2100      	movs	r1, #0
  405268:	4b34      	ldr	r3, [pc, #208]	; (40533c <drv_led_set+0x1d0>)
  40526a:	4798      	blx	r3
			break;
  40526c:	e020      	b.n	4052b0 <drv_led_set+0x144>
		case DRV_LED_TURQUOISE:
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  40526e:	4b32      	ldr	r3, [pc, #200]	; (405338 <drv_led_set+0x1cc>)
  405270:	789b      	ldrb	r3, [r3, #2]
  405272:	4618      	mov	r0, r3
  405274:	2100      	movs	r1, #0
  405276:	4b31      	ldr	r3, [pc, #196]	; (40533c <drv_led_set+0x1d0>)
  405278:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  40527a:	4b2f      	ldr	r3, [pc, #188]	; (405338 <drv_led_set+0x1cc>)
  40527c:	785b      	ldrb	r3, [r3, #1]
  40527e:	4618      	mov	r0, r3
  405280:	2100      	movs	r1, #0
  405282:	4b2e      	ldr	r3, [pc, #184]	; (40533c <drv_led_set+0x1d0>)
  405284:	4798      	blx	r3
			break;
  405286:	e013      	b.n	4052b0 <drv_led_set+0x144>
		case DRV_LED_OFF:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_HIGH);
  405288:	4b2b      	ldr	r3, [pc, #172]	; (405338 <drv_led_set+0x1cc>)
  40528a:	781b      	ldrb	r3, [r3, #0]
  40528c:	4618      	mov	r0, r3
  40528e:	2101      	movs	r1, #1
  405290:	4b2a      	ldr	r3, [pc, #168]	; (40533c <drv_led_set+0x1d0>)
  405292:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_HIGH);
  405294:	4b28      	ldr	r3, [pc, #160]	; (405338 <drv_led_set+0x1cc>)
  405296:	789b      	ldrb	r3, [r3, #2]
  405298:	4618      	mov	r0, r3
  40529a:	2101      	movs	r1, #1
  40529c:	4b27      	ldr	r3, [pc, #156]	; (40533c <drv_led_set+0x1d0>)
  40529e:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_HIGH);
  4052a0:	4b25      	ldr	r3, [pc, #148]	; (405338 <drv_led_set+0x1cc>)
  4052a2:	785b      	ldrb	r3, [r3, #1]
  4052a4:	4618      	mov	r0, r3
  4052a6:	2101      	movs	r1, #1
  4052a8:	4b24      	ldr	r3, [pc, #144]	; (40533c <drv_led_set+0x1d0>)
  4052aa:	4798      	blx	r3
			break;
  4052ac:	e000      	b.n	4052b0 <drv_led_set+0x144>
		default:
			break;
  4052ae:	bf00      	nop
	}
	
	if ((ledState == DRV_LED_FLASH) & (ledColor != DRV_LED_OFF))
  4052b0:	79bb      	ldrb	r3, [r7, #6]
  4052b2:	2b00      	cmp	r3, #0
  4052b4:	bf14      	ite	ne
  4052b6:	2300      	movne	r3, #0
  4052b8:	2301      	moveq	r3, #1
  4052ba:	b2da      	uxtb	r2, r3
  4052bc:	79fb      	ldrb	r3, [r7, #7]
  4052be:	2b06      	cmp	r3, #6
  4052c0:	bf0c      	ite	eq
  4052c2:	2300      	moveq	r3, #0
  4052c4:	2301      	movne	r3, #1
  4052c6:	b2db      	uxtb	r3, r3
  4052c8:	4013      	ands	r3, r2
  4052ca:	b2db      	uxtb	r3, r3
  4052cc:	2b00      	cmp	r3, #0
  4052ce:	d011      	beq.n	4052f4 <drv_led_set+0x188>
	{
		if(LedTimer != NULL)
  4052d0:	4b16      	ldr	r3, [pc, #88]	; (40532c <drv_led_set+0x1c0>)
  4052d2:	681b      	ldr	r3, [r3, #0]
  4052d4:	2b00      	cmp	r3, #0
  4052d6:	d023      	beq.n	405320 <drv_led_set+0x1b4>
		{
			xTimerReset(LedTimer, 0);	
  4052d8:	4b14      	ldr	r3, [pc, #80]	; (40532c <drv_led_set+0x1c0>)
  4052da:	681c      	ldr	r4, [r3, #0]
  4052dc:	4b1a      	ldr	r3, [pc, #104]	; (405348 <drv_led_set+0x1dc>)
  4052de:	4798      	blx	r3
  4052e0:	4603      	mov	r3, r0
  4052e2:	2200      	movs	r2, #0
  4052e4:	9200      	str	r2, [sp, #0]
  4052e6:	4620      	mov	r0, r4
  4052e8:	2100      	movs	r1, #0
  4052ea:	461a      	mov	r2, r3
  4052ec:	2300      	movs	r3, #0
  4052ee:	4c11      	ldr	r4, [pc, #68]	; (405334 <drv_led_set+0x1c8>)
  4052f0:	47a0      	blx	r4
  4052f2:	e015      	b.n	405320 <drv_led_set+0x1b4>
		}
		
	}
	else
	{
		if(LedTimer != NULL)
  4052f4:	4b0d      	ldr	r3, [pc, #52]	; (40532c <drv_led_set+0x1c0>)
  4052f6:	681b      	ldr	r3, [r3, #0]
  4052f8:	2b00      	cmp	r3, #0
  4052fa:	d011      	beq.n	405320 <drv_led_set+0x1b4>
		{				
			//stop the timer
			if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  4052fc:	4b0b      	ldr	r3, [pc, #44]	; (40532c <drv_led_set+0x1c0>)
  4052fe:	681b      	ldr	r3, [r3, #0]
  405300:	4618      	mov	r0, r3
  405302:	4b0b      	ldr	r3, [pc, #44]	; (405330 <drv_led_set+0x1c4>)
  405304:	4798      	blx	r3
  405306:	4603      	mov	r3, r0
  405308:	2b00      	cmp	r3, #0
  40530a:	d009      	beq.n	405320 <drv_led_set+0x1b4>
			{
				xTimerStop(LedTimer, 0);
  40530c:	4b07      	ldr	r3, [pc, #28]	; (40532c <drv_led_set+0x1c0>)
  40530e:	681b      	ldr	r3, [r3, #0]
  405310:	2200      	movs	r2, #0
  405312:	9200      	str	r2, [sp, #0]
  405314:	4618      	mov	r0, r3
  405316:	2101      	movs	r1, #1
  405318:	2200      	movs	r2, #0
  40531a:	2300      	movs	r3, #0
  40531c:	4c05      	ldr	r4, [pc, #20]	; (405334 <drv_led_set+0x1c8>)
  40531e:	47a0      	blx	r4
			}
		}
	}
	return result;
  405320:	7bfb      	ldrb	r3, [r7, #15]
}
  405322:	4618      	mov	r0, r3
  405324:	3714      	adds	r7, #20
  405326:	46bd      	mov	sp, r7
  405328:	bd90      	pop	{r4, r7, pc}
  40532a:	bf00      	nop
  40532c:	2000af74 	.word	0x2000af74
  405330:	00407f49 	.word	0x00407f49
  405334:	00407a1d 	.word	0x00407a1d
  405338:	2000af7c 	.word	0x2000af7c
  40533c:	00404705 	.word	0x00404705
  405340:	2000af70 	.word	0x2000af70
  405344:	2000af78 	.word	0x2000af78
  405348:	00407015 	.word	0x00407015

0040534c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40534c:	b480      	push	{r7}
  40534e:	b083      	sub	sp, #12
  405350:	af00      	add	r7, sp, #0
  405352:	4603      	mov	r3, r0
  405354:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405356:	4b08      	ldr	r3, [pc, #32]	; (405378 <NVIC_EnableIRQ+0x2c>)
  405358:	f997 2007 	ldrsb.w	r2, [r7, #7]
  40535c:	0952      	lsrs	r2, r2, #5
  40535e:	79f9      	ldrb	r1, [r7, #7]
  405360:	f001 011f 	and.w	r1, r1, #31
  405364:	2001      	movs	r0, #1
  405366:	fa00 f101 	lsl.w	r1, r0, r1
  40536a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40536e:	370c      	adds	r7, #12
  405370:	46bd      	mov	sp, r7
  405372:	f85d 7b04 	ldr.w	r7, [sp], #4
  405376:	4770      	bx	lr
  405378:	e000e100 	.word	0xe000e100

0040537c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40537c:	b480      	push	{r7}
  40537e:	b083      	sub	sp, #12
  405380:	af00      	add	r7, sp, #0
  405382:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  405384:	687b      	ldr	r3, [r7, #4]
  405386:	2b07      	cmp	r3, #7
  405388:	d825      	bhi.n	4053d6 <osc_get_rate+0x5a>
  40538a:	a201      	add	r2, pc, #4	; (adr r2, 405390 <osc_get_rate+0x14>)
  40538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405390:	004053b1 	.word	0x004053b1
  405394:	004053b7 	.word	0x004053b7
  405398:	004053bd 	.word	0x004053bd
  40539c:	004053c3 	.word	0x004053c3
  4053a0:	004053c7 	.word	0x004053c7
  4053a4:	004053cb 	.word	0x004053cb
  4053a8:	004053cf 	.word	0x004053cf
  4053ac:	004053d3 	.word	0x004053d3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4053b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4053b4:	e010      	b.n	4053d8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4053b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4053ba:	e00d      	b.n	4053d8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4053bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4053c0:	e00a      	b.n	4053d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4053c2:	4b08      	ldr	r3, [pc, #32]	; (4053e4 <osc_get_rate+0x68>)
  4053c4:	e008      	b.n	4053d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4053c6:	4b08      	ldr	r3, [pc, #32]	; (4053e8 <osc_get_rate+0x6c>)
  4053c8:	e006      	b.n	4053d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4053ca:	4b08      	ldr	r3, [pc, #32]	; (4053ec <osc_get_rate+0x70>)
  4053cc:	e004      	b.n	4053d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4053ce:	4b07      	ldr	r3, [pc, #28]	; (4053ec <osc_get_rate+0x70>)
  4053d0:	e002      	b.n	4053d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4053d2:	4b06      	ldr	r3, [pc, #24]	; (4053ec <osc_get_rate+0x70>)
  4053d4:	e000      	b.n	4053d8 <osc_get_rate+0x5c>
	}

	return 0;
  4053d6:	2300      	movs	r3, #0
}
  4053d8:	4618      	mov	r0, r3
  4053da:	370c      	adds	r7, #12
  4053dc:	46bd      	mov	sp, r7
  4053de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053e2:	4770      	bx	lr
  4053e4:	003d0900 	.word	0x003d0900
  4053e8:	007a1200 	.word	0x007a1200
  4053ec:	00b71b00 	.word	0x00b71b00

004053f0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4053f0:	b580      	push	{r7, lr}
  4053f2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4053f4:	2006      	movs	r0, #6
  4053f6:	4b04      	ldr	r3, [pc, #16]	; (405408 <sysclk_get_main_hz+0x18>)
  4053f8:	4798      	blx	r3
  4053fa:	4602      	mov	r2, r0
  4053fc:	4613      	mov	r3, r2
  4053fe:	009b      	lsls	r3, r3, #2
  405400:	4413      	add	r3, r2
  405402:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  405404:	4618      	mov	r0, r3
  405406:	bd80      	pop	{r7, pc}
  405408:	0040537d 	.word	0x0040537d

0040540c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  40540c:	b580      	push	{r7, lr}
  40540e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  405410:	4b02      	ldr	r3, [pc, #8]	; (40541c <sysclk_get_peripheral_hz+0x10>)
  405412:	4798      	blx	r3
  405414:	4603      	mov	r3, r0
  405416:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  405418:	4618      	mov	r0, r3
  40541a:	bd80      	pop	{r7, pc}
  40541c:	004053f1 	.word	0x004053f1

00405420 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  405420:	b580      	push	{r7, lr}
  405422:	b082      	sub	sp, #8
  405424:	af00      	add	r7, sp, #0
  405426:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  405428:	6878      	ldr	r0, [r7, #4]
  40542a:	4b02      	ldr	r3, [pc, #8]	; (405434 <sysclk_enable_peripheral_clock+0x14>)
  40542c:	4798      	blx	r3
}
  40542e:	3708      	adds	r7, #8
  405430:	46bd      	mov	sp, r7
  405432:	bd80      	pop	{r7, pc}
  405434:	004093d5 	.word	0x004093d5

00405438 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  405438:	b580      	push	{r7, lr}
  40543a:	b08c      	sub	sp, #48	; 0x30
  40543c:	af00      	add	r7, sp, #0
  40543e:	6078      	str	r0, [r7, #4]
  405440:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  405442:	4b26      	ldr	r3, [pc, #152]	; (4054dc <usart_serial_init+0xa4>)
  405444:	4798      	blx	r3
  405446:	4603      	mov	r3, r0
  405448:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40544a:	683b      	ldr	r3, [r7, #0]
  40544c:	681b      	ldr	r3, [r3, #0]
  40544e:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  405450:	683b      	ldr	r3, [r7, #0]
  405452:	689b      	ldr	r3, [r3, #8]
  405454:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  405456:	683b      	ldr	r3, [r7, #0]
  405458:	681b      	ldr	r3, [r3, #0]
  40545a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40545c:	683b      	ldr	r3, [r7, #0]
  40545e:	685b      	ldr	r3, [r3, #4]
  405460:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  405462:	683b      	ldr	r3, [r7, #0]
  405464:	689b      	ldr	r3, [r3, #8]
  405466:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  405468:	683b      	ldr	r3, [r7, #0]
  40546a:	7b1b      	ldrb	r3, [r3, #12]
  40546c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40546e:	2300      	movs	r3, #0
  405470:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  405472:	687a      	ldr	r2, [r7, #4]
  405474:	4b1a      	ldr	r3, [pc, #104]	; (4054e0 <usart_serial_init+0xa8>)
  405476:	429a      	cmp	r2, r3
  405478:	d108      	bne.n	40548c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40547a:	2008      	movs	r0, #8
  40547c:	4b19      	ldr	r3, [pc, #100]	; (4054e4 <usart_serial_init+0xac>)
  40547e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  405480:	f107 0324 	add.w	r3, r7, #36	; 0x24
  405484:	6878      	ldr	r0, [r7, #4]
  405486:	4619      	mov	r1, r3
  405488:	4b17      	ldr	r3, [pc, #92]	; (4054e8 <usart_serial_init+0xb0>)
  40548a:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40548c:	687a      	ldr	r2, [r7, #4]
  40548e:	4b17      	ldr	r3, [pc, #92]	; (4054ec <usart_serial_init+0xb4>)
  405490:	429a      	cmp	r2, r3
  405492:	d108      	bne.n	4054a6 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  405494:	2009      	movs	r0, #9
  405496:	4b13      	ldr	r3, [pc, #76]	; (4054e4 <usart_serial_init+0xac>)
  405498:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40549a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40549e:	6878      	ldr	r0, [r7, #4]
  4054a0:	4619      	mov	r1, r3
  4054a2:	4b11      	ldr	r3, [pc, #68]	; (4054e8 <usart_serial_init+0xb0>)
  4054a4:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4054a6:	687a      	ldr	r2, [r7, #4]
  4054a8:	4b11      	ldr	r3, [pc, #68]	; (4054f0 <usart_serial_init+0xb8>)
  4054aa:	429a      	cmp	r2, r3
  4054ac:	d112      	bne.n	4054d4 <usart_serial_init+0x9c>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4054ae:	200e      	movs	r0, #14
  4054b0:	4b0c      	ldr	r3, [pc, #48]	; (4054e4 <usart_serial_init+0xac>)
  4054b2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4054b4:	4b09      	ldr	r3, [pc, #36]	; (4054dc <usart_serial_init+0xa4>)
  4054b6:	4798      	blx	r3
  4054b8:	4603      	mov	r3, r0
  4054ba:	f107 020c 	add.w	r2, r7, #12
  4054be:	6878      	ldr	r0, [r7, #4]
  4054c0:	4611      	mov	r1, r2
  4054c2:	461a      	mov	r2, r3
  4054c4:	4b0b      	ldr	r3, [pc, #44]	; (4054f4 <usart_serial_init+0xbc>)
  4054c6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4054c8:	6878      	ldr	r0, [r7, #4]
  4054ca:	4b0b      	ldr	r3, [pc, #44]	; (4054f8 <usart_serial_init+0xc0>)
  4054cc:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4054ce:	6878      	ldr	r0, [r7, #4]
  4054d0:	4b0a      	ldr	r3, [pc, #40]	; (4054fc <usart_serial_init+0xc4>)
  4054d2:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4054d4:	3730      	adds	r7, #48	; 0x30
  4054d6:	46bd      	mov	sp, r7
  4054d8:	bd80      	pop	{r7, pc}
  4054da:	bf00      	nop
  4054dc:	0040540d 	.word	0x0040540d
  4054e0:	400e0600 	.word	0x400e0600
  4054e4:	00405421 	.word	0x00405421
  4054e8:	004082bd 	.word	0x004082bd
  4054ec:	400e0800 	.word	0x400e0800
  4054f0:	40024000 	.word	0x40024000
  4054f4:	00404df9 	.word	0x00404df9
  4054f8:	00404e7d 	.word	0x00404e7d
  4054fc:	00404ead 	.word	0x00404ead

00405500 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  405500:	b580      	push	{r7, lr}
  405502:	b082      	sub	sp, #8
  405504:	af00      	add	r7, sp, #0
  405506:	6078      	str	r0, [r7, #4]
  405508:	460b      	mov	r3, r1
  40550a:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40550c:	687a      	ldr	r2, [r7, #4]
  40550e:	4b18      	ldr	r3, [pc, #96]	; (405570 <usart_serial_putchar+0x70>)
  405510:	429a      	cmp	r2, r3
  405512:	d10a      	bne.n	40552a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  405514:	bf00      	nop
  405516:	78fb      	ldrb	r3, [r7, #3]
  405518:	6878      	ldr	r0, [r7, #4]
  40551a:	4619      	mov	r1, r3
  40551c:	4b15      	ldr	r3, [pc, #84]	; (405574 <usart_serial_putchar+0x74>)
  40551e:	4798      	blx	r3
  405520:	4603      	mov	r3, r0
  405522:	2b00      	cmp	r3, #0
  405524:	d1f7      	bne.n	405516 <usart_serial_putchar+0x16>
		return 1;
  405526:	2301      	movs	r3, #1
  405528:	e01e      	b.n	405568 <usart_serial_putchar+0x68>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40552a:	687a      	ldr	r2, [r7, #4]
  40552c:	4b12      	ldr	r3, [pc, #72]	; (405578 <usart_serial_putchar+0x78>)
  40552e:	429a      	cmp	r2, r3
  405530:	d10a      	bne.n	405548 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  405532:	bf00      	nop
  405534:	78fb      	ldrb	r3, [r7, #3]
  405536:	6878      	ldr	r0, [r7, #4]
  405538:	4619      	mov	r1, r3
  40553a:	4b0e      	ldr	r3, [pc, #56]	; (405574 <usart_serial_putchar+0x74>)
  40553c:	4798      	blx	r3
  40553e:	4603      	mov	r3, r0
  405540:	2b00      	cmp	r3, #0
  405542:	d1f7      	bne.n	405534 <usart_serial_putchar+0x34>
		return 1;
  405544:	2301      	movs	r3, #1
  405546:	e00f      	b.n	405568 <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  405548:	687a      	ldr	r2, [r7, #4]
  40554a:	4b0c      	ldr	r3, [pc, #48]	; (40557c <usart_serial_putchar+0x7c>)
  40554c:	429a      	cmp	r2, r3
  40554e:	d10a      	bne.n	405566 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  405550:	bf00      	nop
  405552:	78fb      	ldrb	r3, [r7, #3]
  405554:	6878      	ldr	r0, [r7, #4]
  405556:	4619      	mov	r1, r3
  405558:	4b09      	ldr	r3, [pc, #36]	; (405580 <usart_serial_putchar+0x80>)
  40555a:	4798      	blx	r3
  40555c:	4603      	mov	r3, r0
  40555e:	2b00      	cmp	r3, #0
  405560:	d1f7      	bne.n	405552 <usart_serial_putchar+0x52>
		return 1;
  405562:	2301      	movs	r3, #1
  405564:	e000      	b.n	405568 <usart_serial_putchar+0x68>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  405566:	2300      	movs	r3, #0
}
  405568:	4618      	mov	r0, r3
  40556a:	3708      	adds	r7, #8
  40556c:	46bd      	mov	sp, r7
  40556e:	bd80      	pop	{r7, pc}
  405570:	400e0600 	.word	0x400e0600
  405574:	00408355 	.word	0x00408355
  405578:	400e0800 	.word	0x400e0800
  40557c:	40024000 	.word	0x40024000
  405580:	00404f69 	.word	0x00404f69

00405584 <drv_uart_init>:
 * @brief initialize uart driver and circular buffer
 * @param uartConfig, the configuration structure for the uart, contains settings.  
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_init(drv_uart_config_t* uartConfig)
{
  405584:	b580      	push	{r7, lr}
  405586:	b084      	sub	sp, #16
  405588:	af00      	add	r7, sp, #0
  40558a:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS; 
  40558c:	2300      	movs	r3, #0
  40558e:	73fb      	strb	r3, [r7, #15]
	
	if(uartConfig->p_usart == UART0)
  405590:	687b      	ldr	r3, [r7, #4]
  405592:	681a      	ldr	r2, [r3, #0]
  405594:	4b5b      	ldr	r3, [pc, #364]	; (405704 <drv_uart_init+0x180>)
  405596:	429a      	cmp	r2, r3
  405598:	d103      	bne.n	4055a2 <drv_uart_init+0x1e>
	{
		uartConfig->mem_index = 0;
  40559a:	687b      	ldr	r3, [r7, #4]
  40559c:	2200      	movs	r2, #0
  40559e:	615a      	str	r2, [r3, #20]
  4055a0:	e013      	b.n	4055ca <drv_uart_init+0x46>
	}
	else if(uartConfig->p_usart == UART1)
  4055a2:	687b      	ldr	r3, [r7, #4]
  4055a4:	681a      	ldr	r2, [r3, #0]
  4055a6:	4b58      	ldr	r3, [pc, #352]	; (405708 <drv_uart_init+0x184>)
  4055a8:	429a      	cmp	r2, r3
  4055aa:	d103      	bne.n	4055b4 <drv_uart_init+0x30>
	{	
		uartConfig->mem_index = 1;
  4055ac:	687b      	ldr	r3, [r7, #4]
  4055ae:	2201      	movs	r2, #1
  4055b0:	615a      	str	r2, [r3, #20]
  4055b2:	e00a      	b.n	4055ca <drv_uart_init+0x46>
	}
	else if(uartConfig->p_usart == USART0)
  4055b4:	687b      	ldr	r3, [r7, #4]
  4055b6:	681a      	ldr	r2, [r3, #0]
  4055b8:	4b54      	ldr	r3, [pc, #336]	; (40570c <drv_uart_init+0x188>)
  4055ba:	429a      	cmp	r2, r3
  4055bc:	d103      	bne.n	4055c6 <drv_uart_init+0x42>
	{	
		uartConfig->mem_index = 2;
  4055be:	687b      	ldr	r3, [r7, #4]
  4055c0:	2202      	movs	r2, #2
  4055c2:	615a      	str	r2, [r3, #20]
  4055c4:	e001      	b.n	4055ca <drv_uart_init+0x46>
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  4055c6:	2301      	movs	r3, #1
  4055c8:	e172      	b.n	4058b0 <drv_uart_init+0x32c>
	}

	//initialize the circular buffers. 
	if(uartConfig->mem_index < 0 || uartConfig->mem_index > 4)
  4055ca:	687b      	ldr	r3, [r7, #4]
  4055cc:	695b      	ldr	r3, [r3, #20]
  4055ce:	2b00      	cmp	r3, #0
  4055d0:	db03      	blt.n	4055da <drv_uart_init+0x56>
  4055d2:	687b      	ldr	r3, [r7, #4]
  4055d4:	695b      	ldr	r3, [r3, #20]
  4055d6:	2b04      	cmp	r3, #4
  4055d8:	dd01      	ble.n	4055de <drv_uart_init+0x5a>
	{
		//ERROR! an incorrect buffer index has been used.  
		return STATUS_FAIL; 
  4055da:	2301      	movs	r3, #1
  4055dc:	e168      	b.n	4058b0 <drv_uart_init+0x32c>
	}
	//make sure the buffer isn't already initialized. 
	if(uartMemBuf[uartConfig->mem_index].isinit == true)
  4055de:	687b      	ldr	r3, [r7, #4]
  4055e0:	695a      	ldr	r2, [r3, #20]
  4055e2:	494b      	ldr	r1, [pc, #300]	; (405710 <drv_uart_init+0x18c>)
  4055e4:	4613      	mov	r3, r2
  4055e6:	015b      	lsls	r3, r3, #5
  4055e8:	4413      	add	r3, r2
  4055ea:	015b      	lsls	r3, r3, #5
  4055ec:	440b      	add	r3, r1
  4055ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4055f2:	799b      	ldrb	r3, [r3, #6]
  4055f4:	b2db      	uxtb	r3, r3
  4055f6:	2b01      	cmp	r3, #1
  4055f8:	d101      	bne.n	4055fe <drv_uart_init+0x7a>
	{
		//buffer already in use, call drv_uart_deinit() first
		return STATUS_FAIL; 
  4055fa:	2301      	movs	r3, #1
  4055fc:	e158      	b.n	4058b0 <drv_uart_init+0x32c>
	}
	
	//initialize the UART hardware 
	usart_serial_init(uartConfig->p_usart, &uartConfig->uart_options);
  4055fe:	687b      	ldr	r3, [r7, #4]
  405600:	681a      	ldr	r2, [r3, #0]
  405602:	687b      	ldr	r3, [r7, #4]
  405604:	3304      	adds	r3, #4
  405606:	4610      	mov	r0, r2
  405608:	4619      	mov	r1, r3
  40560a:	4b42      	ldr	r3, [pc, #264]	; (405714 <drv_uart_init+0x190>)
  40560c:	4798      	blx	r3
	
	//setup interrupts for the UART
	/* Disable all the interrupts. */
	usart_disable_interrupt(uartConfig->p_usart, ALL_INTERRUPT_MASK);
  40560e:	687b      	ldr	r3, [r7, #4]
  405610:	681b      	ldr	r3, [r3, #0]
  405612:	4618      	mov	r0, r3
  405614:	f04f 31ff 	mov.w	r1, #4294967295
  405618:	4b3f      	ldr	r3, [pc, #252]	; (405718 <drv_uart_init+0x194>)
  40561a:	4798      	blx	r3
	/* Configure and enable interrupt of USART. */
	if(uartConfig->p_usart == UART0)
  40561c:	687b      	ldr	r3, [r7, #4]
  40561e:	681a      	ldr	r2, [r3, #0]
  405620:	4b38      	ldr	r3, [pc, #224]	; (405704 <drv_uart_init+0x180>)
  405622:	429a      	cmp	r2, r3
  405624:	d11e      	bne.n	405664 <drv_uart_init+0xe0>
	{
		sysclk_enable_peripheral_clock(ID_PIOA);
  405626:	200b      	movs	r0, #11
  405628:	4b3c      	ldr	r3, [pc, #240]	; (40571c <drv_uart_init+0x198>)
  40562a:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  40562c:	4b3c      	ldr	r3, [pc, #240]	; (405720 <drv_uart_init+0x19c>)
  40562e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  405632:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  405634:	4b3a      	ldr	r3, [pc, #232]	; (405720 <drv_uart_init+0x19c>)
  405636:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40563a:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  40563c:	4b38      	ldr	r3, [pc, #224]	; (405720 <drv_uart_init+0x19c>)
  40563e:	4a38      	ldr	r2, [pc, #224]	; (405720 <drv_uart_init+0x19c>)
  405640:	6f12      	ldr	r2, [r2, #112]	; 0x70
  405642:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  405646:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  405648:	4b35      	ldr	r3, [pc, #212]	; (405720 <drv_uart_init+0x19c>)
  40564a:	4a35      	ldr	r2, [pc, #212]	; (405720 <drv_uart_init+0x19c>)
  40564c:	6f52      	ldr	r2, [r2, #116]	; 0x74
  40564e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  405652:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);				
  405654:	4b32      	ldr	r3, [pc, #200]	; (405720 <drv_uart_init+0x19c>)
  405656:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40565a:	605a      	str	r2, [r3, #4]
		NVIC_EnableIRQ(UART0_IRQn);
  40565c:	2008      	movs	r0, #8
  40565e:	4b31      	ldr	r3, [pc, #196]	; (405724 <drv_uart_init+0x1a0>)
  405660:	4798      	blx	r3
  405662:	e063      	b.n	40572c <drv_uart_init+0x1a8>
	}
	else if(uartConfig->p_usart == UART1)
  405664:	687b      	ldr	r3, [r7, #4]
  405666:	681a      	ldr	r2, [r3, #0]
  405668:	4b27      	ldr	r3, [pc, #156]	; (405708 <drv_uart_init+0x184>)
  40566a:	429a      	cmp	r2, r3
  40566c:	d11b      	bne.n	4056a6 <drv_uart_init+0x122>
	{
		sysclk_enable_peripheral_clock(ID_PIOB);
  40566e:	200c      	movs	r0, #12
  405670:	4b2a      	ldr	r3, [pc, #168]	; (40571c <drv_uart_init+0x198>)
  405672:	4798      	blx	r3
		PIOB->PIO_IDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  405674:	4b2c      	ldr	r3, [pc, #176]	; (405728 <drv_uart_init+0x1a4>)
  405676:	220c      	movs	r2, #12
  405678:	645a      	str	r2, [r3, #68]	; 0x44
		PIOB->PIO_PUDR       =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40567a:	4b2b      	ldr	r3, [pc, #172]	; (405728 <drv_uart_init+0x1a4>)
  40567c:	220c      	movs	r2, #12
  40567e:	661a      	str	r2, [r3, #96]	; 0x60
		PIOB->PIO_ABCDSR[0] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  405680:	4b29      	ldr	r3, [pc, #164]	; (405728 <drv_uart_init+0x1a4>)
  405682:	4a29      	ldr	r2, [pc, #164]	; (405728 <drv_uart_init+0x1a4>)
  405684:	6f12      	ldr	r2, [r2, #112]	; 0x70
  405686:	f022 020c 	bic.w	r2, r2, #12
  40568a:	671a      	str	r2, [r3, #112]	; 0x70
		PIOB->PIO_ABCDSR[1] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40568c:	4b26      	ldr	r3, [pc, #152]	; (405728 <drv_uart_init+0x1a4>)
  40568e:	4a26      	ldr	r2, [pc, #152]	; (405728 <drv_uart_init+0x1a4>)
  405690:	6f52      	ldr	r2, [r2, #116]	; 0x74
  405692:	f022 020c 	bic.w	r2, r2, #12
  405696:	675a      	str	r2, [r3, #116]	; 0x74
		PIOB->PIO_PDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);			
  405698:	4b23      	ldr	r3, [pc, #140]	; (405728 <drv_uart_init+0x1a4>)
  40569a:	220c      	movs	r2, #12
  40569c:	605a      	str	r2, [r3, #4]
		NVIC_EnableIRQ(UART1_IRQn);
  40569e:	2009      	movs	r0, #9
  4056a0:	4b20      	ldr	r3, [pc, #128]	; (405724 <drv_uart_init+0x1a0>)
  4056a2:	4798      	blx	r3
  4056a4:	e042      	b.n	40572c <drv_uart_init+0x1a8>
	}
	else if(uartConfig->p_usart == USART0)
  4056a6:	687b      	ldr	r3, [r7, #4]
  4056a8:	681a      	ldr	r2, [r3, #0]
  4056aa:	4b18      	ldr	r3, [pc, #96]	; (40570c <drv_uart_init+0x188>)
  4056ac:	429a      	cmp	r2, r3
  4056ae:	d127      	bne.n	405700 <drv_uart_init+0x17c>
	{
		/* Configure USART0 Pins (PA6 = TX, PA5 = RX). */
		sysclk_enable_peripheral_clock(ID_PIOA);
  4056b0:	200b      	movs	r0, #11
  4056b2:	4b1a      	ldr	r3, [pc, #104]	; (40571c <drv_uart_init+0x198>)
  4056b4:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  4056b6:	4b1a      	ldr	r3, [pc, #104]	; (405720 <drv_uart_init+0x19c>)
  4056b8:	2260      	movs	r2, #96	; 0x60
  4056ba:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  4056bc:	4b18      	ldr	r3, [pc, #96]	; (405720 <drv_uart_init+0x19c>)
  4056be:	2260      	movs	r2, #96	; 0x60
  4056c0:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  4056c2:	4b17      	ldr	r3, [pc, #92]	; (405720 <drv_uart_init+0x19c>)
  4056c4:	4a16      	ldr	r2, [pc, #88]	; (405720 <drv_uart_init+0x19c>)
  4056c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
  4056c8:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  4056cc:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  4056ce:	4b14      	ldr	r3, [pc, #80]	; (405720 <drv_uart_init+0x19c>)
  4056d0:	4a13      	ldr	r2, [pc, #76]	; (405720 <drv_uart_init+0x19c>)
  4056d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
  4056d4:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  4056d8:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  4056da:	4b11      	ldr	r3, [pc, #68]	; (405720 <drv_uart_init+0x19c>)
  4056dc:	2260      	movs	r2, #96	; 0x60
  4056de:	605a      	str	r2, [r3, #4]
	
		/* configure USART0 enable Pin (PA2) Peripheral-B */
		PIOA->PIO_PUDR   =  (PIO_PA2);
  4056e0:	4b0f      	ldr	r3, [pc, #60]	; (405720 <drv_uart_init+0x19c>)
  4056e2:	2204      	movs	r2, #4
  4056e4:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_CODR   =  (PIO_PA2);
  4056e6:	4b0e      	ldr	r3, [pc, #56]	; (405720 <drv_uart_init+0x19c>)
  4056e8:	2204      	movs	r2, #4
  4056ea:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_OER    =  (PIO_PA2);
  4056ec:	4b0c      	ldr	r3, [pc, #48]	; (405720 <drv_uart_init+0x19c>)
  4056ee:	2204      	movs	r2, #4
  4056f0:	611a      	str	r2, [r3, #16]
		PIOA->PIO_PER    =  (PIO_PA2);	
  4056f2:	4b0b      	ldr	r3, [pc, #44]	; (405720 <drv_uart_init+0x19c>)
  4056f4:	2204      	movs	r2, #4
  4056f6:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(USART0_IRQn);
  4056f8:	200e      	movs	r0, #14
  4056fa:	4b0a      	ldr	r3, [pc, #40]	; (405724 <drv_uart_init+0x1a0>)
  4056fc:	4798      	blx	r3
  4056fe:	e015      	b.n	40572c <drv_uart_init+0x1a8>
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  405700:	2301      	movs	r3, #1
  405702:	e0d5      	b.n	4058b0 <drv_uart_init+0x32c>
  405704:	400e0600 	.word	0x400e0600
  405708:	400e0800 	.word	0x400e0800
  40570c:	40024000 	.word	0x40024000
  405710:	2000af80 	.word	0x2000af80
  405714:	00405439 	.word	0x00405439
  405718:	00404ef9 	.word	0x00404ef9
  40571c:	00405421 	.word	0x00405421
  405720:	400e0e00 	.word	0x400e0e00
  405724:	0040534d 	.word	0x0040534d
  405728:	400e1000 	.word	0x400e1000
	}
	uartMemBuf[uartConfig->mem_index].isinit = true;
  40572c:	687b      	ldr	r3, [r7, #4]
  40572e:	695a      	ldr	r2, [r3, #20]
  405730:	4961      	ldr	r1, [pc, #388]	; (4058b8 <drv_uart_init+0x334>)
  405732:	4613      	mov	r3, r2
  405734:	015b      	lsls	r3, r3, #5
  405736:	4413      	add	r3, r2
  405738:	015b      	lsls	r3, r3, #5
  40573a:	440b      	add	r3, r1
  40573c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  405740:	2201      	movs	r2, #1
  405742:	719a      	strb	r2, [r3, #6]
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY | UART_SR_TXEMPTY); //enable RXRDY interrupt	
  405744:	687b      	ldr	r3, [r7, #4]
  405746:	681b      	ldr	r3, [r3, #0]
  405748:	4618      	mov	r0, r3
  40574a:	f240 2101 	movw	r1, #513	; 0x201
  40574e:	4b5b      	ldr	r3, [pc, #364]	; (4058bc <drv_uart_init+0x338>)
  405750:	4798      	blx	r3
	
	//clear the buffer
	memset(uartMemBuf[uartConfig->mem_index].rx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  405752:	687b      	ldr	r3, [r7, #4]
  405754:	695a      	ldr	r2, [r3, #20]
  405756:	4613      	mov	r3, r2
  405758:	015b      	lsls	r3, r3, #5
  40575a:	4413      	add	r3, r2
  40575c:	015b      	lsls	r3, r3, #5
  40575e:	4a56      	ldr	r2, [pc, #344]	; (4058b8 <drv_uart_init+0x334>)
  405760:	4413      	add	r3, r2
  405762:	4618      	mov	r0, r3
  405764:	2100      	movs	r1, #0
  405766:	f44f 7200 	mov.w	r2, #512	; 0x200
  40576a:	4b55      	ldr	r3, [pc, #340]	; (4058c0 <drv_uart_init+0x33c>)
  40576c:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_first = 0;
  40576e:	687b      	ldr	r3, [r7, #4]
  405770:	695a      	ldr	r2, [r3, #20]
  405772:	4951      	ldr	r1, [pc, #324]	; (4058b8 <drv_uart_init+0x334>)
  405774:	4613      	mov	r3, r2
  405776:	015b      	lsls	r3, r3, #5
  405778:	4413      	add	r3, r2
  40577a:	015b      	lsls	r3, r3, #5
  40577c:	440b      	add	r3, r1
  40577e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  405782:	2200      	movs	r2, #0
  405784:	801a      	strh	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_last = 0;
  405786:	687b      	ldr	r3, [r7, #4]
  405788:	695a      	ldr	r2, [r3, #20]
  40578a:	494b      	ldr	r1, [pc, #300]	; (4058b8 <drv_uart_init+0x334>)
  40578c:	4613      	mov	r3, r2
  40578e:	015b      	lsls	r3, r3, #5
  405790:	4413      	add	r3, r2
  405792:	015b      	lsls	r3, r3, #5
  405794:	440b      	add	r3, r1
  405796:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40579a:	2200      	movs	r2, #0
  40579c:	805a      	strh	r2, [r3, #2]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_full_flag = 0;
  40579e:	687b      	ldr	r3, [r7, #4]
  4057a0:	695a      	ldr	r2, [r3, #20]
  4057a2:	4945      	ldr	r1, [pc, #276]	; (4058b8 <drv_uart_init+0x334>)
  4057a4:	4613      	mov	r3, r2
  4057a6:	015b      	lsls	r3, r3, #5
  4057a8:	4413      	add	r3, r2
  4057aa:	015b      	lsls	r3, r3, #5
  4057ac:	440b      	add	r3, r1
  4057ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4057b2:	2200      	movs	r2, #0
  4057b4:	701a      	strb	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag = 0;
  4057b6:	687b      	ldr	r3, [r7, #4]
  4057b8:	695a      	ldr	r2, [r3, #20]
  4057ba:	493f      	ldr	r1, [pc, #252]	; (4058b8 <drv_uart_init+0x334>)
  4057bc:	4613      	mov	r3, r2
  4057be:	015b      	lsls	r3, r3, #5
  4057c0:	4413      	add	r3, r2
  4057c2:	015b      	lsls	r3, r3, #5
  4057c4:	440b      	add	r3, r1
  4057c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4057ca:	2200      	movs	r2, #0
  4057cc:	71da      	strb	r2, [r3, #7]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_ovf_flag = 0;
  4057ce:	687b      	ldr	r3, [r7, #4]
  4057d0:	695a      	ldr	r2, [r3, #20]
  4057d2:	4939      	ldr	r1, [pc, #228]	; (4058b8 <drv_uart_init+0x334>)
  4057d4:	4613      	mov	r3, r2
  4057d6:	015b      	lsls	r3, r3, #5
  4057d8:	4413      	add	r3, r2
  4057da:	015b      	lsls	r3, r3, #5
  4057dc:	440b      	add	r3, r1
  4057de:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4057e2:	2200      	movs	r2, #0
  4057e4:	705a      	strb	r2, [r3, #1]
	uartMemBuf[uartConfig->mem_index].rx_fifo.num_bytes = 0;
  4057e6:	687b      	ldr	r3, [r7, #4]
  4057e8:	695a      	ldr	r2, [r3, #20]
  4057ea:	4933      	ldr	r1, [pc, #204]	; (4058b8 <drv_uart_init+0x334>)
  4057ec:	4613      	mov	r3, r2
  4057ee:	015b      	lsls	r3, r3, #5
  4057f0:	4413      	add	r3, r2
  4057f2:	015b      	lsls	r3, r3, #5
  4057f4:	440b      	add	r3, r1
  4057f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4057fa:	2200      	movs	r2, #0
  4057fc:	809a      	strh	r2, [r3, #4]

	memset(uartMemBuf[uartConfig->mem_index].tx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  4057fe:	687b      	ldr	r3, [r7, #4]
  405800:	695a      	ldr	r2, [r3, #20]
  405802:	4613      	mov	r3, r2
  405804:	015b      	lsls	r3, r3, #5
  405806:	4413      	add	r3, r2
  405808:	015b      	lsls	r3, r3, #5
  40580a:	f503 7204 	add.w	r2, r3, #528	; 0x210
  40580e:	4b2a      	ldr	r3, [pc, #168]	; (4058b8 <drv_uart_init+0x334>)
  405810:	4413      	add	r3, r2
  405812:	4618      	mov	r0, r3
  405814:	2100      	movs	r1, #0
  405816:	f44f 7200 	mov.w	r2, #512	; 0x200
  40581a:	4b29      	ldr	r3, [pc, #164]	; (4058c0 <drv_uart_init+0x33c>)
  40581c:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].tx_fifo.i_first = 0;
  40581e:	687b      	ldr	r3, [r7, #4]
  405820:	695a      	ldr	r2, [r3, #20]
  405822:	4925      	ldr	r1, [pc, #148]	; (4058b8 <drv_uart_init+0x334>)
  405824:	4613      	mov	r3, r2
  405826:	015b      	lsls	r3, r3, #5
  405828:	4413      	add	r3, r2
  40582a:	015b      	lsls	r3, r3, #5
  40582c:	440b      	add	r3, r1
  40582e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  405832:	2200      	movs	r2, #0
  405834:	801a      	strh	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].tx_fifo.i_last = 0;
  405836:	687b      	ldr	r3, [r7, #4]
  405838:	695a      	ldr	r2, [r3, #20]
  40583a:	491f      	ldr	r1, [pc, #124]	; (4058b8 <drv_uart_init+0x334>)
  40583c:	4613      	mov	r3, r2
  40583e:	015b      	lsls	r3, r3, #5
  405840:	4413      	add	r3, r2
  405842:	015b      	lsls	r3, r3, #5
  405844:	440b      	add	r3, r1
  405846:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40584a:	2200      	movs	r2, #0
  40584c:	805a      	strh	r2, [r3, #2]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_full_flag = 0;
  40584e:	687b      	ldr	r3, [r7, #4]
  405850:	695a      	ldr	r2, [r3, #20]
  405852:	4919      	ldr	r1, [pc, #100]	; (4058b8 <drv_uart_init+0x334>)
  405854:	4613      	mov	r3, r2
  405856:	015b      	lsls	r3, r3, #5
  405858:	4413      	add	r3, r2
  40585a:	015b      	lsls	r3, r3, #5
  40585c:	440b      	add	r3, r1
  40585e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  405862:	2200      	movs	r2, #0
  405864:	71da      	strb	r2, [r3, #7]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_not_empty_flag = 0;
  405866:	687b      	ldr	r3, [r7, #4]
  405868:	695a      	ldr	r2, [r3, #20]
  40586a:	4913      	ldr	r1, [pc, #76]	; (4058b8 <drv_uart_init+0x334>)
  40586c:	4613      	mov	r3, r2
  40586e:	015b      	lsls	r3, r3, #5
  405870:	4413      	add	r3, r2
  405872:	015b      	lsls	r3, r3, #5
  405874:	440b      	add	r3, r1
  405876:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40587a:	2200      	movs	r2, #0
  40587c:	719a      	strb	r2, [r3, #6]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_ovf_flag = 0;
  40587e:	687b      	ldr	r3, [r7, #4]
  405880:	695a      	ldr	r2, [r3, #20]
  405882:	490d      	ldr	r1, [pc, #52]	; (4058b8 <drv_uart_init+0x334>)
  405884:	4613      	mov	r3, r2
  405886:	015b      	lsls	r3, r3, #5
  405888:	4413      	add	r3, r2
  40588a:	015b      	lsls	r3, r3, #5
  40588c:	440b      	add	r3, r1
  40588e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
  405892:	2200      	movs	r2, #0
  405894:	701a      	strb	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].tx_fifo.num_bytes = 0;
  405896:	687b      	ldr	r3, [r7, #4]
  405898:	695a      	ldr	r2, [r3, #20]
  40589a:	4907      	ldr	r1, [pc, #28]	; (4058b8 <drv_uart_init+0x334>)
  40589c:	4613      	mov	r3, r2
  40589e:	015b      	lsls	r3, r3, #5
  4058a0:	4413      	add	r3, r2
  4058a2:	015b      	lsls	r3, r3, #5
  4058a4:	440b      	add	r3, r1
  4058a6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  4058aa:	2200      	movs	r2, #0
  4058ac:	809a      	strh	r2, [r3, #4]
	
	return status; 
  4058ae:	7bfb      	ldrb	r3, [r7, #15]
}
  4058b0:	4618      	mov	r0, r3
  4058b2:	3710      	adds	r7, #16
  4058b4:	46bd      	mov	sp, r7
  4058b6:	bd80      	pop	{r7, pc}
  4058b8:	2000af80 	.word	0x2000af80
  4058bc:	00404edd 	.word	0x00404edd
  4058c0:	0040a235 	.word	0x0040a235

004058c4 <drv_uart_putChar>:
 * the character
 * @param c, the character that will be sent through the uart. 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_putChar(drv_uart_config_t* uartConfig, char c)
{
  4058c4:	b580      	push	{r7, lr}
  4058c6:	b086      	sub	sp, #24
  4058c8:	af00      	add	r7, sp, #0
  4058ca:	6078      	str	r0, [r7, #4]
  4058cc:	460b      	mov	r3, r1
  4058ce:	70fb      	strb	r3, [r7, #3]
	status_t status = STATUS_PASS;
  4058d0:	2300      	movs	r3, #0
  4058d2:	75fb      	strb	r3, [r7, #23]
	//disable the interrupts so we don't fuck up the pointers	
	usart_disable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);	
  4058d4:	687b      	ldr	r3, [r7, #4]
  4058d6:	681b      	ldr	r3, [r3, #0]
  4058d8:	4618      	mov	r0, r3
  4058da:	f44f 7100 	mov.w	r1, #512	; 0x200
  4058de:	4b30      	ldr	r3, [pc, #192]	; (4059a0 <drv_uart_putChar+0xdc>)
  4058e0:	4798      	blx	r3
	uint32_t val = 0;
  4058e2:	2300      	movs	r3, #0
  4058e4:	613b      	str	r3, [r7, #16]
	drv_uart_memory_buf_t* memBuf = &uartMemBuf[uartConfig->mem_index]; 
  4058e6:	687b      	ldr	r3, [r7, #4]
  4058e8:	695a      	ldr	r2, [r3, #20]
  4058ea:	4613      	mov	r3, r2
  4058ec:	015b      	lsls	r3, r3, #5
  4058ee:	4413      	add	r3, r2
  4058f0:	015b      	lsls	r3, r3, #5
  4058f2:	4a2c      	ldr	r2, [pc, #176]	; (4059a4 <drv_uart_putChar+0xe0>)
  4058f4:	4413      	add	r3, r2
  4058f6:	60fb      	str	r3, [r7, #12]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  4058f8:	68fb      	ldr	r3, [r7, #12]
  4058fa:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  4058fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405902:	d10b      	bne.n	40591c <drv_uart_putChar+0x58>
	{
		memBuf->uart_tx_fifo_ovf_flag = 1;                     // set the overflow flag
  405904:	68fb      	ldr	r3, [r7, #12]
  405906:	2201      	movs	r2, #1
  405908:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
  40590c:	68fb      	ldr	r3, [r7, #12]
  40590e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
  405912:	1c5a      	adds	r2, r3, #1
  405914:	68fb      	ldr	r3, [r7, #12]
  405916:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  40591a:	e01d      	b.n	405958 <drv_uart_putChar+0x94>
	}
	else if(memBuf->tx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  40591c:	68fb      	ldr	r3, [r7, #12]
  40591e:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  405922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405926:	d217      	bcs.n	405958 <drv_uart_putChar+0x94>
	{
		memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_last] = c;
  405928:	68fb      	ldr	r3, [r7, #12]
  40592a:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  40592e:	68fa      	ldr	r2, [r7, #12]
  405930:	4413      	add	r3, r2
  405932:	78fa      	ldrb	r2, [r7, #3]
  405934:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
		memBuf->tx_fifo.i_last++;                              // increment the index of the most recently added element
  405938:	68fb      	ldr	r3, [r7, #12]
  40593a:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  40593e:	3301      	adds	r3, #1
  405940:	b29a      	uxth	r2, r3
  405942:	68fb      	ldr	r3, [r7, #12]
  405944:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
		memBuf->tx_fifo.num_bytes++;                           // increment the bytes counter
  405948:	68fb      	ldr	r3, [r7, #12]
  40594a:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40594e:	3301      	adds	r3, #1
  405950:	b29a      	uxth	r2, r3
  405952:	68fb      	ldr	r3, [r7, #12]
  405954:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		//if(uartConfig->p_usart == UART1)
		//{
			//usart_putchar(UART0, c);
		//}
	}
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  405958:	68fb      	ldr	r3, [r7, #12]
  40595a:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40595e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405962:	d103      	bne.n	40596c <drv_uart_putChar+0xa8>
	{      // if sw buffer just filled up
		memBuf->uart_tx_fifo_full_flag = 1;                    // set the tx FIFO full flag
  405964:	68fb      	ldr	r3, [r7, #12]
  405966:	2201      	movs	r2, #1
  405968:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	}
	if(memBuf->tx_fifo.i_last == FIFO_BUFFER_SIZE)
  40596c:	68fb      	ldr	r3, [r7, #12]
  40596e:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  405972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405976:	d103      	bne.n	405980 <drv_uart_putChar+0xbc>
	{         // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_last = 0;                            // roll over the index counter
  405978:	68fb      	ldr	r3, [r7, #12]
  40597a:	2200      	movs	r2, #0
  40597c:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
	}
	memBuf->uart_tx_fifo_not_empty_flag = 1;                 // set tx-data ready flag	
  405980:	68fb      	ldr	r3, [r7, #12]
  405982:	2201      	movs	r2, #1
  405984:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	//re-enable the interrupts
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);		
  405988:	687b      	ldr	r3, [r7, #4]
  40598a:	681b      	ldr	r3, [r3, #0]
  40598c:	4618      	mov	r0, r3
  40598e:	f44f 7100 	mov.w	r1, #512	; 0x200
  405992:	4b05      	ldr	r3, [pc, #20]	; (4059a8 <drv_uart_putChar+0xe4>)
  405994:	4798      	blx	r3
	return status;	
  405996:	7dfb      	ldrb	r3, [r7, #23]
}
  405998:	4618      	mov	r0, r3
  40599a:	3718      	adds	r7, #24
  40599c:	46bd      	mov	sp, r7
  40599e:	bd80      	pop	{r7, pc}
  4059a0:	00404ef9 	.word	0x00404ef9
  4059a4:	2000af80 	.word	0x2000af80
  4059a8:	00404edd 	.word	0x00404edd

004059ac <drv_uart_getChar>:
 * @param *c, the return character
 * @return STATUS_PASS if successful, STATUS_EOF if there were no bytes to read
 *	STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_getChar(drv_uart_config_t* uartConfig, char* c)
{
  4059ac:	b580      	push	{r7, lr}
  4059ae:	b084      	sub	sp, #16
  4059b0:	af00      	add	r7, sp, #0
  4059b2:	6078      	str	r0, [r7, #4]
  4059b4:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  4059b6:	2300      	movs	r3, #0
  4059b8:	73fb      	strb	r3, [r7, #15]
	
	if(uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag == 1) //check if the buffer has information in it
  4059ba:	687b      	ldr	r3, [r7, #4]
  4059bc:	695a      	ldr	r2, [r3, #20]
  4059be:	4917      	ldr	r1, [pc, #92]	; (405a1c <drv_uart_getChar+0x70>)
  4059c0:	4613      	mov	r3, r2
  4059c2:	015b      	lsls	r3, r3, #5
  4059c4:	4413      	add	r3, r2
  4059c6:	015b      	lsls	r3, r3, #5
  4059c8:	440b      	add	r3, r1
  4059ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4059ce:	79db      	ldrb	r3, [r3, #7]
  4059d0:	b2db      	uxtb	r3, r3
  4059d2:	2b01      	cmp	r3, #1
  4059d4:	d11a      	bne.n	405a0c <drv_uart_getChar+0x60>
	{
		usart_disable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);
  4059d6:	687b      	ldr	r3, [r7, #4]
  4059d8:	681b      	ldr	r3, [r3, #0]
  4059da:	4618      	mov	r0, r3
  4059dc:	2101      	movs	r1, #1
  4059de:	4b10      	ldr	r3, [pc, #64]	; (405a20 <drv_uart_getChar+0x74>)
  4059e0:	4798      	blx	r3
		//disable the interrupts so we don't fuck up the pointers		
		status = uart_get_byte(&(uartMemBuf[uartConfig->mem_index]), c); //get the byte from the buffer	
  4059e2:	687b      	ldr	r3, [r7, #4]
  4059e4:	695a      	ldr	r2, [r3, #20]
  4059e6:	4613      	mov	r3, r2
  4059e8:	015b      	lsls	r3, r3, #5
  4059ea:	4413      	add	r3, r2
  4059ec:	015b      	lsls	r3, r3, #5
  4059ee:	4a0b      	ldr	r2, [pc, #44]	; (405a1c <drv_uart_getChar+0x70>)
  4059f0:	4413      	add	r3, r2
  4059f2:	4618      	mov	r0, r3
  4059f4:	6839      	ldr	r1, [r7, #0]
  4059f6:	4b0b      	ldr	r3, [pc, #44]	; (405a24 <drv_uart_getChar+0x78>)
  4059f8:	4798      	blx	r3
  4059fa:	4603      	mov	r3, r0
  4059fc:	73fb      	strb	r3, [r7, #15]
		//re-enable the interrupts
		usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);				
  4059fe:	687b      	ldr	r3, [r7, #4]
  405a00:	681b      	ldr	r3, [r3, #0]
  405a02:	4618      	mov	r0, r3
  405a04:	2101      	movs	r1, #1
  405a06:	4b08      	ldr	r3, [pc, #32]	; (405a28 <drv_uart_getChar+0x7c>)
  405a08:	4798      	blx	r3
  405a0a:	e001      	b.n	405a10 <drv_uart_getChar+0x64>
	}
	else
	{
		status = STATUS_EOF; //there's no data return End Of File status code.
  405a0c:	2302      	movs	r3, #2
  405a0e:	73fb      	strb	r3, [r7, #15]
	}
	
	return status;	
  405a10:	7bfb      	ldrb	r3, [r7, #15]
}
  405a12:	4618      	mov	r0, r3
  405a14:	3710      	adds	r7, #16
  405a16:	46bd      	mov	sp, r7
  405a18:	bd80      	pop	{r7, pc}
  405a1a:	bf00      	nop
  405a1c:	2000af80 	.word	0x2000af80
  405a20:	00404ef9 	.word	0x00404ef9
  405a24:	00405be1 	.word	0x00405be1
  405a28:	00404edd 	.word	0x00404edd

00405a2c <drv_uart_isInit>:
 * @brief returns the initialized status of the uart
 * @param uartConfig, the configuration structure for the uart
 * @return STATUS_PASS if the driver is initialized,	STATUS_FAIL if not
 ***********************************************************************************************/	
status_t drv_uart_isInit(drv_uart_config_t* uartConfig)
{
  405a2c:	b480      	push	{r7}
  405a2e:	b083      	sub	sp, #12
  405a30:	af00      	add	r7, sp, #0
  405a32:	6078      	str	r0, [r7, #4]
	if(uartMemBuf[uartConfig->mem_index].isinit)
  405a34:	687b      	ldr	r3, [r7, #4]
  405a36:	695a      	ldr	r2, [r3, #20]
  405a38:	490a      	ldr	r1, [pc, #40]	; (405a64 <drv_uart_isInit+0x38>)
  405a3a:	4613      	mov	r3, r2
  405a3c:	015b      	lsls	r3, r3, #5
  405a3e:	4413      	add	r3, r2
  405a40:	015b      	lsls	r3, r3, #5
  405a42:	440b      	add	r3, r1
  405a44:	f503 7300 	add.w	r3, r3, #512	; 0x200
  405a48:	799b      	ldrb	r3, [r3, #6]
  405a4a:	b2db      	uxtb	r3, r3
  405a4c:	2b00      	cmp	r3, #0
  405a4e:	d001      	beq.n	405a54 <drv_uart_isInit+0x28>
	{
		return STATUS_PASS;
  405a50:	2300      	movs	r3, #0
  405a52:	e000      	b.n	405a56 <drv_uart_isInit+0x2a>
	}
	else
	{
		return STATUS_FAIL; 
  405a54:	2301      	movs	r3, #1
	}
}
  405a56:	4618      	mov	r0, r3
  405a58:	370c      	adds	r7, #12
  405a5a:	46bd      	mov	sp, r7
  405a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a60:	4770      	bx	lr
  405a62:	bf00      	nop
  405a64:	2000af80 	.word	0x2000af80

00405a68 <drv_uart_putData>:
		}		
	}
}

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
  405a68:	b580      	push	{r7, lr}
  405a6a:	b086      	sub	sp, #24
  405a6c:	af00      	add	r7, sp, #0
  405a6e:	60f8      	str	r0, [r7, #12]
  405a70:	60b9      	str	r1, [r7, #8]
  405a72:	607a      	str	r2, [r7, #4]
	int i=0;
  405a74:	2300      	movs	r3, #0
  405a76:	617b      	str	r3, [r7, #20]
	for (i=0;i<length;)
  405a78:	2300      	movs	r3, #0
  405a7a:	617b      	str	r3, [r7, #20]
  405a7c:	e00d      	b.n	405a9a <drv_uart_putData+0x32>
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  405a7e:	697b      	ldr	r3, [r7, #20]
  405a80:	68ba      	ldr	r2, [r7, #8]
  405a82:	4413      	add	r3, r2
  405a84:	781b      	ldrb	r3, [r3, #0]
  405a86:	68f8      	ldr	r0, [r7, #12]
  405a88:	4619      	mov	r1, r3
  405a8a:	4b07      	ldr	r3, [pc, #28]	; (405aa8 <drv_uart_putData+0x40>)
  405a8c:	4798      	blx	r3
  405a8e:	4603      	mov	r3, r0
  405a90:	2b00      	cmp	r3, #0
  405a92:	d102      	bne.n	405a9a <drv_uart_putData+0x32>
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
  405a94:	697b      	ldr	r3, [r7, #20]
  405a96:	3301      	adds	r3, #1
  405a98:	617b      	str	r3, [r7, #20]
}

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
	int i=0;
	for (i=0;i<length;)
  405a9a:	697a      	ldr	r2, [r7, #20]
  405a9c:	687b      	ldr	r3, [r7, #4]
  405a9e:	429a      	cmp	r2, r3
  405aa0:	d3ed      	bcc.n	405a7e <drv_uart_putData+0x16>
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
		}
	}
}
  405aa2:	3718      	adds	r7, #24
  405aa4:	46bd      	mov	sp, r7
  405aa6:	bd80      	pop	{r7, pc}
  405aa8:	004058c5 	.word	0x004058c5

00405aac <UART0_Handler>:
	}
}

// interrupt handlers
void UART0_Handler()
{	
  405aac:	b580      	push	{r7, lr}
  405aae:	b082      	sub	sp, #8
  405ab0:	af00      	add	r7, sp, #0
	//if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized. 
	//{
		//uart_process_byte(UART0, &(uartMemBuf[0]));	
	//}
	uint32_t status = uart_get_status(UART0); 
  405ab2:	4812      	ldr	r0, [pc, #72]	; (405afc <UART0_Handler+0x50>)
  405ab4:	4b12      	ldr	r3, [pc, #72]	; (405b00 <UART0_Handler+0x54>)
  405ab6:	4798      	blx	r3
  405ab8:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  405aba:	687b      	ldr	r3, [r7, #4]
  405abc:	f003 0301 	and.w	r3, r3, #1
  405ac0:	2b00      	cmp	r3, #0
  405ac2:	d009      	beq.n	405ad8 <UART0_Handler+0x2c>
	{	
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  405ac4:	4b0f      	ldr	r3, [pc, #60]	; (405b04 <UART0_Handler+0x58>)
  405ac6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
  405aca:	b2db      	uxtb	r3, r3
  405acc:	2b00      	cmp	r3, #0
  405ace:	d003      	beq.n	405ad8 <UART0_Handler+0x2c>
		{
			uart_process_byte(UART0, &(uartMemBuf[0]));
  405ad0:	480a      	ldr	r0, [pc, #40]	; (405afc <UART0_Handler+0x50>)
  405ad2:	490c      	ldr	r1, [pc, #48]	; (405b04 <UART0_Handler+0x58>)
  405ad4:	4b0c      	ldr	r3, [pc, #48]	; (405b08 <UART0_Handler+0x5c>)
  405ad6:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  405ad8:	687b      	ldr	r3, [r7, #4]
  405ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
  405ade:	2b00      	cmp	r3, #0
  405ae0:	d009      	beq.n	405af6 <UART0_Handler+0x4a>
	{
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  405ae2:	4b08      	ldr	r3, [pc, #32]	; (405b04 <UART0_Handler+0x58>)
  405ae4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
  405ae8:	b2db      	uxtb	r3, r3
  405aea:	2b00      	cmp	r3, #0
  405aec:	d003      	beq.n	405af6 <UART0_Handler+0x4a>
		{
			uart_process_tx_byte(UART0, &(uartMemBuf[0])); 	
  405aee:	4803      	ldr	r0, [pc, #12]	; (405afc <UART0_Handler+0x50>)
  405af0:	4904      	ldr	r1, [pc, #16]	; (405b04 <UART0_Handler+0x58>)
  405af2:	4b06      	ldr	r3, [pc, #24]	; (405b0c <UART0_Handler+0x60>)
  405af4:	4798      	blx	r3
		}
	}	
}
  405af6:	3708      	adds	r7, #8
  405af8:	46bd      	mov	sp, r7
  405afa:	bd80      	pop	{r7, pc}
  405afc:	400e0600 	.word	0x400e0600
  405b00:	0040833d 	.word	0x0040833d
  405b04:	2000af80 	.word	0x2000af80
  405b08:	00405c6d 	.word	0x00405c6d
  405b0c:	00405d31 	.word	0x00405d31

00405b10 <UART1_Handler>:

void UART1_Handler()
{
  405b10:	b580      	push	{r7, lr}
  405b12:	b082      	sub	sp, #8
  405b14:	af00      	add	r7, sp, #0
	uint32_t status = uart_get_status(UART1); 
  405b16:	4812      	ldr	r0, [pc, #72]	; (405b60 <UART1_Handler+0x50>)
  405b18:	4b12      	ldr	r3, [pc, #72]	; (405b64 <UART1_Handler+0x54>)
  405b1a:	4798      	blx	r3
  405b1c:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  405b1e:	687b      	ldr	r3, [r7, #4]
  405b20:	f003 0301 	and.w	r3, r3, #1
  405b24:	2b00      	cmp	r3, #0
  405b26:	d009      	beq.n	405b3c <UART1_Handler+0x2c>
	{	
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  405b28:	4b0f      	ldr	r3, [pc, #60]	; (405b68 <UART1_Handler+0x58>)
  405b2a:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
  405b2e:	b2db      	uxtb	r3, r3
  405b30:	2b00      	cmp	r3, #0
  405b32:	d003      	beq.n	405b3c <UART1_Handler+0x2c>
		{
			uart_process_byte(UART1, &(uartMemBuf[1]));
  405b34:	480a      	ldr	r0, [pc, #40]	; (405b60 <UART1_Handler+0x50>)
  405b36:	490d      	ldr	r1, [pc, #52]	; (405b6c <UART1_Handler+0x5c>)
  405b38:	4b0d      	ldr	r3, [pc, #52]	; (405b70 <UART1_Handler+0x60>)
  405b3a:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  405b3c:	687b      	ldr	r3, [r7, #4]
  405b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
  405b42:	2b00      	cmp	r3, #0
  405b44:	d009      	beq.n	405b5a <UART1_Handler+0x4a>
	{
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  405b46:	4b08      	ldr	r3, [pc, #32]	; (405b68 <UART1_Handler+0x58>)
  405b48:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
  405b4c:	b2db      	uxtb	r3, r3
  405b4e:	2b00      	cmp	r3, #0
  405b50:	d003      	beq.n	405b5a <UART1_Handler+0x4a>
		{
			uart_process_tx_byte(UART1, &(uartMemBuf[1])); 	
  405b52:	4803      	ldr	r0, [pc, #12]	; (405b60 <UART1_Handler+0x50>)
  405b54:	4905      	ldr	r1, [pc, #20]	; (405b6c <UART1_Handler+0x5c>)
  405b56:	4b07      	ldr	r3, [pc, #28]	; (405b74 <UART1_Handler+0x64>)
  405b58:	4798      	blx	r3
		}
	}
}
  405b5a:	3708      	adds	r7, #8
  405b5c:	46bd      	mov	sp, r7
  405b5e:	bd80      	pop	{r7, pc}
  405b60:	400e0800 	.word	0x400e0800
  405b64:	0040833d 	.word	0x0040833d
  405b68:	2000af80 	.word	0x2000af80
  405b6c:	2000b3a0 	.word	0x2000b3a0
  405b70:	00405c6d 	.word	0x00405c6d
  405b74:	00405d31 	.word	0x00405d31

00405b78 <USART0_Handler>:

void USART0_Handler()
{
  405b78:	b580      	push	{r7, lr}
  405b7a:	b082      	sub	sp, #8
  405b7c:	af00      	add	r7, sp, #0
	//if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART0, &(uartMemBuf[2]));
	//}
	uint32_t status = uart_get_status(USART0); 
  405b7e:	4812      	ldr	r0, [pc, #72]	; (405bc8 <USART0_Handler+0x50>)
  405b80:	4b12      	ldr	r3, [pc, #72]	; (405bcc <USART0_Handler+0x54>)
  405b82:	4798      	blx	r3
  405b84:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  405b86:	687b      	ldr	r3, [r7, #4]
  405b88:	f003 0301 	and.w	r3, r3, #1
  405b8c:	2b00      	cmp	r3, #0
  405b8e:	d009      	beq.n	405ba4 <USART0_Handler+0x2c>
	{	
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  405b90:	4b0f      	ldr	r3, [pc, #60]	; (405bd0 <USART0_Handler+0x58>)
  405b92:	f893 3a46 	ldrb.w	r3, [r3, #2630]	; 0xa46
  405b96:	b2db      	uxtb	r3, r3
  405b98:	2b00      	cmp	r3, #0
  405b9a:	d003      	beq.n	405ba4 <USART0_Handler+0x2c>
		{
			uart_process_byte(USART0, &(uartMemBuf[2]));
  405b9c:	480a      	ldr	r0, [pc, #40]	; (405bc8 <USART0_Handler+0x50>)
  405b9e:	490d      	ldr	r1, [pc, #52]	; (405bd4 <USART0_Handler+0x5c>)
  405ba0:	4b0d      	ldr	r3, [pc, #52]	; (405bd8 <USART0_Handler+0x60>)
  405ba2:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  405ba4:	687b      	ldr	r3, [r7, #4]
  405ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
  405baa:	2b00      	cmp	r3, #0
  405bac:	d009      	beq.n	405bc2 <USART0_Handler+0x4a>
	{
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  405bae:	4b08      	ldr	r3, [pc, #32]	; (405bd0 <USART0_Handler+0x58>)
  405bb0:	f893 3a46 	ldrb.w	r3, [r3, #2630]	; 0xa46
  405bb4:	b2db      	uxtb	r3, r3
  405bb6:	2b00      	cmp	r3, #0
  405bb8:	d003      	beq.n	405bc2 <USART0_Handler+0x4a>
		{
			uart_process_tx_byte(USART0, &(uartMemBuf[2])); 	
  405bba:	4803      	ldr	r0, [pc, #12]	; (405bc8 <USART0_Handler+0x50>)
  405bbc:	4905      	ldr	r1, [pc, #20]	; (405bd4 <USART0_Handler+0x5c>)
  405bbe:	4b07      	ldr	r3, [pc, #28]	; (405bdc <USART0_Handler+0x64>)
  405bc0:	4798      	blx	r3
		}
	}	
}
  405bc2:	3708      	adds	r7, #8
  405bc4:	46bd      	mov	sp, r7
  405bc6:	bd80      	pop	{r7, pc}
  405bc8:	40024000 	.word	0x40024000
  405bcc:	0040833d 	.word	0x0040833d
  405bd0:	2000af80 	.word	0x2000af80
  405bd4:	2000b7c0 	.word	0x2000b7c0
  405bd8:	00405c6d 	.word	0x00405c6d
  405bdc:	00405d31 	.word	0x00405d31

00405be0 <uart_get_byte>:
}


//static functions
static int uart_get_byte(drv_uart_memory_buf_t* memBuf, char* c)
{
  405be0:	b480      	push	{r7}
  405be2:	b085      	sub	sp, #20
  405be4:	af00      	add	r7, sp, #0
  405be6:	6078      	str	r0, [r7, #4]
  405be8:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  405bea:	2300      	movs	r3, #0
  405bec:	73fb      	strb	r3, [r7, #15]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  405bee:	687b      	ldr	r3, [r7, #4]
  405bf0:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405bf8:	d103      	bne.n	405c02 <uart_get_byte+0x22>
	{ // if the sw buffer is full
		memBuf->uart_rx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  405bfa:	687b      	ldr	r3, [r7, #4]
  405bfc:	2200      	movs	r2, #0
  405bfe:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	}
	if(memBuf->rx_fifo.num_bytes > 0)
  405c02:	687b      	ldr	r3, [r7, #4]
  405c04:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405c08:	2b00      	cmp	r3, #0
  405c0a:	d017      	beq.n	405c3c <uart_get_byte+0x5c>
	{
		// if data exists in the sw buffer
		*c = memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_first]; // grab the oldest element in the buffer
  405c0c:	687b      	ldr	r3, [r7, #4]
  405c0e:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  405c12:	687a      	ldr	r2, [r7, #4]
  405c14:	5cd2      	ldrb	r2, [r2, r3]
  405c16:	683b      	ldr	r3, [r7, #0]
  405c18:	701a      	strb	r2, [r3, #0]
		memBuf->rx_fifo.i_first++;                        // increment the index of the oldest element
  405c1a:	687b      	ldr	r3, [r7, #4]
  405c1c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  405c20:	3301      	adds	r3, #1
  405c22:	b29a      	uxth	r2, r3
  405c24:	687b      	ldr	r3, [r7, #4]
  405c26:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
		memBuf->rx_fifo.num_bytes--;                      // decrement the bytes counter
  405c2a:	687b      	ldr	r3, [r7, #4]
  405c2c:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405c30:	3b01      	subs	r3, #1
  405c32:	b29a      	uxth	r2, r3
  405c34:	687b      	ldr	r3, [r7, #4]
  405c36:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
  405c3a:	e005      	b.n	405c48 <uart_get_byte+0x68>
	}
	else
	{                                      // RX sw buffer is empty
		memBuf->uart_rx_fifo_not_empty_flag = 0;          // clear the rx flag
  405c3c:	687b      	ldr	r3, [r7, #4]
  405c3e:	2200      	movs	r2, #0
  405c40:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
		status = STATUS_EOF;
  405c44:	2302      	movs	r3, #2
  405c46:	73fb      	strb	r3, [r7, #15]
	}
	if(memBuf->rx_fifo.i_first == FIFO_BUFFER_SIZE)
  405c48:	687b      	ldr	r3, [r7, #4]
  405c4a:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  405c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405c52:	d103      	bne.n	405c5c <uart_get_byte+0x7c>
	{   // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_first = 0;                      // roll over the index counter
  405c54:	687b      	ldr	r3, [r7, #4]
  405c56:	2200      	movs	r2, #0
  405c58:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}		
	return status;
  405c5c:	7bfb      	ldrb	r3, [r7, #15]
}
  405c5e:	4618      	mov	r0, r3
  405c60:	3714      	adds	r7, #20
  405c62:	46bd      	mov	sp, r7
  405c64:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c68:	4770      	bx	lr
  405c6a:	bf00      	nop

00405c6c <uart_process_byte>:

static void uart_process_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  405c6c:	b580      	push	{r7, lr}
  405c6e:	b084      	sub	sp, #16
  405c70:	af00      	add	r7, sp, #0
  405c72:	6078      	str	r0, [r7, #4]
  405c74:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  405c76:	2300      	movs	r3, #0
  405c78:	60fb      	str	r3, [r7, #12]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  405c7a:	683b      	ldr	r3, [r7, #0]
  405c7c:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405c84:	d111      	bne.n	405caa <uart_process_byte+0x3e>
	{
		memBuf->uart_rx_fifo_ovf_flag = 1;                     // set the overflow flag
  405c86:	683b      	ldr	r3, [r7, #0]
  405c88:	2201      	movs	r2, #1
  405c8a:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		//the buffer is full, but we have to clear the interrupt
		memBuf->uart_rx_fifo_dropped_bytes++; //our data stream will be out of sync now...
  405c8e:	683b      	ldr	r3, [r7, #0]
  405c90:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  405c94:	1c5a      	adds	r2, r3, #1
  405c96:	683b      	ldr	r3, [r7, #0]
  405c98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		usart_getchar(p_usart,&val);		
  405c9c:	f107 030c 	add.w	r3, r7, #12
  405ca0:	6878      	ldr	r0, [r7, #4]
  405ca2:	4619      	mov	r1, r3
  405ca4:	4b21      	ldr	r3, [pc, #132]	; (405d2c <uart_process_byte+0xc0>)
  405ca6:	4798      	blx	r3
  405ca8:	e025      	b.n	405cf6 <uart_process_byte+0x8a>
	}
	else if(memBuf->rx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  405caa:	683b      	ldr	r3, [r7, #0]
  405cac:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405cb4:	d21f      	bcs.n	405cf6 <uart_process_byte+0x8a>
	{		
		//while((UART0->UART_SR & UART_SR_RXRDY) == 0);
		if(usart_getchar(p_usart,&val) == STATUS_PASS)
  405cb6:	f107 030c 	add.w	r3, r7, #12
  405cba:	6878      	ldr	r0, [r7, #4]
  405cbc:	4619      	mov	r1, r3
  405cbe:	4b1b      	ldr	r3, [pc, #108]	; (405d2c <uart_process_byte+0xc0>)
  405cc0:	4798      	blx	r3
  405cc2:	4603      	mov	r3, r0
  405cc4:	2b00      	cmp	r3, #0
  405cc6:	d116      	bne.n	405cf6 <uart_process_byte+0x8a>
		{		
			memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_last] = (uint8_t)val;
  405cc8:	683b      	ldr	r3, [r7, #0]
  405cca:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  405cce:	68fa      	ldr	r2, [r7, #12]
  405cd0:	b2d1      	uxtb	r1, r2
  405cd2:	683a      	ldr	r2, [r7, #0]
  405cd4:	54d1      	strb	r1, [r2, r3]
			memBuf->rx_fifo.i_last++;                              // increment the index of the most recently added element
  405cd6:	683b      	ldr	r3, [r7, #0]
  405cd8:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  405cdc:	3301      	adds	r3, #1
  405cde:	b29a      	uxth	r2, r3
  405ce0:	683b      	ldr	r3, [r7, #0]
  405ce2:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
			memBuf->rx_fifo.num_bytes++;                           // increment the bytes counter
  405ce6:	683b      	ldr	r3, [r7, #0]
  405ce8:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405cec:	3301      	adds	r3, #1
  405cee:	b29a      	uxth	r2, r3
  405cf0:	683b      	ldr	r3, [r7, #0]
  405cf2:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		//if(p_usart == UART1)
		//{
			//usart_putchar(UART0, val);
		//}
	}
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  405cf6:	683b      	ldr	r3, [r7, #0]
  405cf8:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405d00:	d103      	bne.n	405d0a <uart_process_byte+0x9e>
	{      // if sw buffer just filled up
		memBuf->uart_rx_fifo_full_flag = 1;                    // set the RX FIFO full flag
  405d02:	683b      	ldr	r3, [r7, #0]
  405d04:	2201      	movs	r2, #1
  405d06:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	}
	if(memBuf->rx_fifo.i_last == FIFO_BUFFER_SIZE)
  405d0a:	683b      	ldr	r3, [r7, #0]
  405d0c:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  405d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405d14:	d103      	bne.n	405d1e <uart_process_byte+0xb2>
	{         // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_last = 0;                            // roll over the index counter
  405d16:	683b      	ldr	r3, [r7, #0]
  405d18:	2200      	movs	r2, #0
  405d1a:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	}
	memBuf->uart_rx_fifo_not_empty_flag = 1;                 // set received-data flag	
  405d1e:	683b      	ldr	r3, [r7, #0]
  405d20:	2201      	movs	r2, #1
  405d22:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
}
  405d26:	3710      	adds	r7, #16
  405d28:	46bd      	mov	sp, r7
  405d2a:	bd80      	pop	{r7, pc}
  405d2c:	00404fd1 	.word	0x00404fd1

00405d30 <uart_process_tx_byte>:

static void uart_process_tx_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  405d30:	b580      	push	{r7, lr}
  405d32:	b082      	sub	sp, #8
  405d34:	af00      	add	r7, sp, #0
  405d36:	6078      	str	r0, [r7, #4]
  405d38:	6039      	str	r1, [r7, #0]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  405d3a:	683b      	ldr	r3, [r7, #0]
  405d3c:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  405d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405d44:	d103      	bne.n	405d4e <uart_process_tx_byte+0x1e>
	{ // if the sw buffer is full
		memBuf->uart_tx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  405d46:	683b      	ldr	r3, [r7, #0]
  405d48:	2200      	movs	r2, #0
  405d4a:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	}
	if(memBuf->tx_fifo.num_bytes > 0)
  405d4e:	683b      	ldr	r3, [r7, #0]
  405d50:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  405d54:	2b00      	cmp	r3, #0
  405d56:	d01b      	beq.n	405d90 <uart_process_tx_byte+0x60>
	{
		// if data exists in the sw buffer
		usart_serial_putchar(p_usart,memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_first]); // send the next value from buffer
  405d58:	683b      	ldr	r3, [r7, #0]
  405d5a:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  405d5e:	683a      	ldr	r2, [r7, #0]
  405d60:	4413      	add	r3, r2
  405d62:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
  405d66:	6878      	ldr	r0, [r7, #4]
  405d68:	4619      	mov	r1, r3
  405d6a:	4b14      	ldr	r3, [pc, #80]	; (405dbc <uart_process_tx_byte+0x8c>)
  405d6c:	4798      	blx	r3
		memBuf->tx_fifo.i_first++;                        // increment the index of the oldest element
  405d6e:	683b      	ldr	r3, [r7, #0]
  405d70:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  405d74:	3301      	adds	r3, #1
  405d76:	b29a      	uxth	r2, r3
  405d78:	683b      	ldr	r3, [r7, #0]
  405d7a:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		memBuf->tx_fifo.num_bytes--;                      // decrement the bytes counter
  405d7e:	683b      	ldr	r3, [r7, #0]
  405d80:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  405d84:	3b01      	subs	r3, #1
  405d86:	b29a      	uxth	r2, r3
  405d88:	683b      	ldr	r3, [r7, #0]
  405d8a:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
  405d8e:	e008      	b.n	405da2 <uart_process_tx_byte+0x72>
	}
	else
	{   // tx sw buffer is empty
		memBuf->uart_tx_fifo_not_empty_flag = 0;          // clear the tx flag
  405d90:	683b      	ldr	r3, [r7, #0]
  405d92:	2200      	movs	r2, #0
  405d94:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
		uart_disable_interrupt(p_usart,UART_IER_TXEMPTY); //the buffer is empty, stop the interrupt. 
  405d98:	6878      	ldr	r0, [r7, #4]
  405d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
  405d9e:	4b08      	ldr	r3, [pc, #32]	; (405dc0 <uart_process_tx_byte+0x90>)
  405da0:	4798      	blx	r3
	}
	if(memBuf->tx_fifo.i_first == FIFO_BUFFER_SIZE)
  405da2:	683b      	ldr	r3, [r7, #0]
  405da4:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  405da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405dac:	d103      	bne.n	405db6 <uart_process_tx_byte+0x86>
	{   // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_first = 0;                      // roll over the index counter
  405dae:	683b      	ldr	r3, [r7, #0]
  405db0:	2200      	movs	r2, #0
  405db2:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}	
  405db6:	3708      	adds	r7, #8
  405db8:	46bd      	mov	sp, r7
  405dba:	bd80      	pop	{r7, pc}
  405dbc:	00405501 	.word	0x00405501
  405dc0:	00408321 	.word	0x00408321

00405dc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  405dc4:	b480      	push	{r7}
  405dc6:	b083      	sub	sp, #12
  405dc8:	af00      	add	r7, sp, #0
  405dca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  405dcc:	687b      	ldr	r3, [r7, #4]
  405dce:	f103 0208 	add.w	r2, r3, #8
  405dd2:	687b      	ldr	r3, [r7, #4]
  405dd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  405dd6:	687b      	ldr	r3, [r7, #4]
  405dd8:	f04f 32ff 	mov.w	r2, #4294967295
  405ddc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  405dde:	687b      	ldr	r3, [r7, #4]
  405de0:	f103 0208 	add.w	r2, r3, #8
  405de4:	687b      	ldr	r3, [r7, #4]
  405de6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  405de8:	687b      	ldr	r3, [r7, #4]
  405dea:	f103 0208 	add.w	r2, r3, #8
  405dee:	687b      	ldr	r3, [r7, #4]
  405df0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  405df2:	687b      	ldr	r3, [r7, #4]
  405df4:	2200      	movs	r2, #0
  405df6:	601a      	str	r2, [r3, #0]
}
  405df8:	370c      	adds	r7, #12
  405dfa:	46bd      	mov	sp, r7
  405dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e00:	4770      	bx	lr
  405e02:	bf00      	nop

00405e04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  405e04:	b480      	push	{r7}
  405e06:	b083      	sub	sp, #12
  405e08:	af00      	add	r7, sp, #0
  405e0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  405e0c:	687b      	ldr	r3, [r7, #4]
  405e0e:	2200      	movs	r2, #0
  405e10:	611a      	str	r2, [r3, #16]
}
  405e12:	370c      	adds	r7, #12
  405e14:	46bd      	mov	sp, r7
  405e16:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e1a:	4770      	bx	lr

00405e1c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  405e1c:	b480      	push	{r7}
  405e1e:	b085      	sub	sp, #20
  405e20:	af00      	add	r7, sp, #0
  405e22:	6078      	str	r0, [r7, #4]
  405e24:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  405e26:	687b      	ldr	r3, [r7, #4]
  405e28:	685b      	ldr	r3, [r3, #4]
  405e2a:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  405e2c:	68fb      	ldr	r3, [r7, #12]
  405e2e:	685a      	ldr	r2, [r3, #4]
  405e30:	683b      	ldr	r3, [r7, #0]
  405e32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  405e34:	687b      	ldr	r3, [r7, #4]
  405e36:	685a      	ldr	r2, [r3, #4]
  405e38:	683b      	ldr	r3, [r7, #0]
  405e3a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  405e3c:	68fb      	ldr	r3, [r7, #12]
  405e3e:	685b      	ldr	r3, [r3, #4]
  405e40:	683a      	ldr	r2, [r7, #0]
  405e42:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  405e44:	68fb      	ldr	r3, [r7, #12]
  405e46:	683a      	ldr	r2, [r7, #0]
  405e48:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  405e4a:	687b      	ldr	r3, [r7, #4]
  405e4c:	683a      	ldr	r2, [r7, #0]
  405e4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  405e50:	683b      	ldr	r3, [r7, #0]
  405e52:	687a      	ldr	r2, [r7, #4]
  405e54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  405e56:	687b      	ldr	r3, [r7, #4]
  405e58:	681b      	ldr	r3, [r3, #0]
  405e5a:	1c5a      	adds	r2, r3, #1
  405e5c:	687b      	ldr	r3, [r7, #4]
  405e5e:	601a      	str	r2, [r3, #0]
}
  405e60:	3714      	adds	r7, #20
  405e62:	46bd      	mov	sp, r7
  405e64:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e68:	4770      	bx	lr
  405e6a:	bf00      	nop

00405e6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  405e6c:	b480      	push	{r7}
  405e6e:	b085      	sub	sp, #20
  405e70:	af00      	add	r7, sp, #0
  405e72:	6078      	str	r0, [r7, #4]
  405e74:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  405e76:	683b      	ldr	r3, [r7, #0]
  405e78:	681b      	ldr	r3, [r3, #0]
  405e7a:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  405e7c:	68bb      	ldr	r3, [r7, #8]
  405e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
  405e82:	d103      	bne.n	405e8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  405e84:	687b      	ldr	r3, [r7, #4]
  405e86:	691b      	ldr	r3, [r3, #16]
  405e88:	60fb      	str	r3, [r7, #12]
  405e8a:	e00c      	b.n	405ea6 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  405e8c:	687b      	ldr	r3, [r7, #4]
  405e8e:	3308      	adds	r3, #8
  405e90:	60fb      	str	r3, [r7, #12]
  405e92:	e002      	b.n	405e9a <vListInsert+0x2e>
  405e94:	68fb      	ldr	r3, [r7, #12]
  405e96:	685b      	ldr	r3, [r3, #4]
  405e98:	60fb      	str	r3, [r7, #12]
  405e9a:	68fb      	ldr	r3, [r7, #12]
  405e9c:	685b      	ldr	r3, [r3, #4]
  405e9e:	681a      	ldr	r2, [r3, #0]
  405ea0:	68bb      	ldr	r3, [r7, #8]
  405ea2:	429a      	cmp	r2, r3
  405ea4:	d9f6      	bls.n	405e94 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  405ea6:	68fb      	ldr	r3, [r7, #12]
  405ea8:	685a      	ldr	r2, [r3, #4]
  405eaa:	683b      	ldr	r3, [r7, #0]
  405eac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  405eae:	683b      	ldr	r3, [r7, #0]
  405eb0:	685b      	ldr	r3, [r3, #4]
  405eb2:	683a      	ldr	r2, [r7, #0]
  405eb4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  405eb6:	683b      	ldr	r3, [r7, #0]
  405eb8:	68fa      	ldr	r2, [r7, #12]
  405eba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  405ebc:	68fb      	ldr	r3, [r7, #12]
  405ebe:	683a      	ldr	r2, [r7, #0]
  405ec0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  405ec2:	683b      	ldr	r3, [r7, #0]
  405ec4:	687a      	ldr	r2, [r7, #4]
  405ec6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  405ec8:	687b      	ldr	r3, [r7, #4]
  405eca:	681b      	ldr	r3, [r3, #0]
  405ecc:	1c5a      	adds	r2, r3, #1
  405ece:	687b      	ldr	r3, [r7, #4]
  405ed0:	601a      	str	r2, [r3, #0]
}
  405ed2:	3714      	adds	r7, #20
  405ed4:	46bd      	mov	sp, r7
  405ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
  405eda:	4770      	bx	lr

00405edc <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  405edc:	b480      	push	{r7}
  405ede:	b085      	sub	sp, #20
  405ee0:	af00      	add	r7, sp, #0
  405ee2:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  405ee4:	687b      	ldr	r3, [r7, #4]
  405ee6:	685b      	ldr	r3, [r3, #4]
  405ee8:	687a      	ldr	r2, [r7, #4]
  405eea:	6892      	ldr	r2, [r2, #8]
  405eec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  405eee:	687b      	ldr	r3, [r7, #4]
  405ef0:	689b      	ldr	r3, [r3, #8]
  405ef2:	687a      	ldr	r2, [r7, #4]
  405ef4:	6852      	ldr	r2, [r2, #4]
  405ef6:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  405ef8:	687b      	ldr	r3, [r7, #4]
  405efa:	691b      	ldr	r3, [r3, #16]
  405efc:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  405efe:	68fb      	ldr	r3, [r7, #12]
  405f00:	685a      	ldr	r2, [r3, #4]
  405f02:	687b      	ldr	r3, [r7, #4]
  405f04:	429a      	cmp	r2, r3
  405f06:	d103      	bne.n	405f10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  405f08:	687b      	ldr	r3, [r7, #4]
  405f0a:	689a      	ldr	r2, [r3, #8]
  405f0c:	68fb      	ldr	r3, [r7, #12]
  405f0e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  405f10:	687b      	ldr	r3, [r7, #4]
  405f12:	2200      	movs	r2, #0
  405f14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  405f16:	68fb      	ldr	r3, [r7, #12]
  405f18:	681b      	ldr	r3, [r3, #0]
  405f1a:	1e5a      	subs	r2, r3, #1
  405f1c:	68fb      	ldr	r3, [r7, #12]
  405f1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  405f20:	68fb      	ldr	r3, [r7, #12]
  405f22:	681b      	ldr	r3, [r3, #0]
}
  405f24:	4618      	mov	r0, r3
  405f26:	3714      	adds	r7, #20
  405f28:	46bd      	mov	sp, r7
  405f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f2e:	4770      	bx	lr

00405f30 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  405f30:	b480      	push	{r7}
  405f32:	b083      	sub	sp, #12
  405f34:	af00      	add	r7, sp, #0
  405f36:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  405f38:	687b      	ldr	r3, [r7, #4]
  405f3a:	2b07      	cmp	r3, #7
  405f3c:	d825      	bhi.n	405f8a <osc_get_rate+0x5a>
  405f3e:	a201      	add	r2, pc, #4	; (adr r2, 405f44 <osc_get_rate+0x14>)
  405f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405f44:	00405f65 	.word	0x00405f65
  405f48:	00405f6b 	.word	0x00405f6b
  405f4c:	00405f71 	.word	0x00405f71
  405f50:	00405f77 	.word	0x00405f77
  405f54:	00405f7b 	.word	0x00405f7b
  405f58:	00405f7f 	.word	0x00405f7f
  405f5c:	00405f83 	.word	0x00405f83
  405f60:	00405f87 	.word	0x00405f87
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  405f64:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  405f68:	e010      	b.n	405f8c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  405f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  405f6e:	e00d      	b.n	405f8c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  405f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  405f74:	e00a      	b.n	405f8c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  405f76:	4b08      	ldr	r3, [pc, #32]	; (405f98 <osc_get_rate+0x68>)
  405f78:	e008      	b.n	405f8c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  405f7a:	4b08      	ldr	r3, [pc, #32]	; (405f9c <osc_get_rate+0x6c>)
  405f7c:	e006      	b.n	405f8c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  405f7e:	4b08      	ldr	r3, [pc, #32]	; (405fa0 <osc_get_rate+0x70>)
  405f80:	e004      	b.n	405f8c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  405f82:	4b07      	ldr	r3, [pc, #28]	; (405fa0 <osc_get_rate+0x70>)
  405f84:	e002      	b.n	405f8c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  405f86:	4b06      	ldr	r3, [pc, #24]	; (405fa0 <osc_get_rate+0x70>)
  405f88:	e000      	b.n	405f8c <osc_get_rate+0x5c>
	}

	return 0;
  405f8a:	2300      	movs	r3, #0
}
  405f8c:	4618      	mov	r0, r3
  405f8e:	370c      	adds	r7, #12
  405f90:	46bd      	mov	sp, r7
  405f92:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f96:	4770      	bx	lr
  405f98:	003d0900 	.word	0x003d0900
  405f9c:	007a1200 	.word	0x007a1200
  405fa0:	00b71b00 	.word	0x00b71b00

00405fa4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  405fa4:	b580      	push	{r7, lr}
  405fa6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  405fa8:	2006      	movs	r0, #6
  405faa:	4b04      	ldr	r3, [pc, #16]	; (405fbc <sysclk_get_main_hz+0x18>)
  405fac:	4798      	blx	r3
  405fae:	4602      	mov	r2, r0
  405fb0:	4613      	mov	r3, r2
  405fb2:	009b      	lsls	r3, r3, #2
  405fb4:	4413      	add	r3, r2
  405fb6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  405fb8:	4618      	mov	r0, r3
  405fba:	bd80      	pop	{r7, pc}
  405fbc:	00405f31 	.word	0x00405f31

00405fc0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  405fc0:	b580      	push	{r7, lr}
  405fc2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  405fc4:	4b02      	ldr	r3, [pc, #8]	; (405fd0 <sysclk_get_cpu_hz+0x10>)
  405fc6:	4798      	blx	r3
  405fc8:	4603      	mov	r3, r0
  405fca:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  405fcc:	4618      	mov	r0, r3
  405fce:	bd80      	pop	{r7, pc}
  405fd0:	00405fa5 	.word	0x00405fa5

00405fd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
  405fd4:	b480      	push	{r7}
  405fd6:	b085      	sub	sp, #20
  405fd8:	af00      	add	r7, sp, #0
  405fda:	60f8      	str	r0, [r7, #12]
  405fdc:	60b9      	str	r1, [r7, #8]
  405fde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
  405fe0:	68fb      	ldr	r3, [r7, #12]
  405fe2:	3b04      	subs	r3, #4
  405fe4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  405fe6:	68fb      	ldr	r3, [r7, #12]
  405fe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  405fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  405fee:	68fb      	ldr	r3, [r7, #12]
  405ff0:	3b04      	subs	r3, #4
  405ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  405ff4:	68ba      	ldr	r2, [r7, #8]
  405ff6:	68fb      	ldr	r3, [r7, #12]
  405ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  405ffa:	68fb      	ldr	r3, [r7, #12]
  405ffc:	3b04      	subs	r3, #4
  405ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
  406000:	68fb      	ldr	r3, [r7, #12]
  406002:	2200      	movs	r2, #0
  406004:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  406006:	68fb      	ldr	r3, [r7, #12]
  406008:	3b14      	subs	r3, #20
  40600a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  40600c:	687a      	ldr	r2, [r7, #4]
  40600e:	68fb      	ldr	r3, [r7, #12]
  406010:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  406012:	68fb      	ldr	r3, [r7, #12]
  406014:	3b20      	subs	r3, #32
  406016:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  406018:	68fb      	ldr	r3, [r7, #12]
}
  40601a:	4618      	mov	r0, r3
  40601c:	3714      	adds	r7, #20
  40601e:	46bd      	mov	sp, r7
  406020:	f85d 7b04 	ldr.w	r7, [sp], #4
  406024:	4770      	bx	lr
  406026:	bf00      	nop

00406028 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
  406028:	4b06      	ldr	r3, [pc, #24]	; (406044 <pxCurrentTCBConst2>)
  40602a:	6819      	ldr	r1, [r3, #0]
  40602c:	6808      	ldr	r0, [r1, #0]
  40602e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  406032:	f380 8809 	msr	PSP, r0
  406036:	f04f 0000 	mov.w	r0, #0
  40603a:	f380 8811 	msr	BASEPRI, r0
  40603e:	f04e 0e0d 	orr.w	lr, lr, #13
  406042:	4770      	bx	lr

00406044 <pxCurrentTCBConst2>:
  406044:	2000ac94 	.word	0x2000ac94

00406048 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  406048:	4803      	ldr	r0, [pc, #12]	; (406058 <prvPortStartFirstTask+0x10>)
  40604a:	6800      	ldr	r0, [r0, #0]
  40604c:	6800      	ldr	r0, [r0, #0]
  40604e:	f380 8808 	msr	MSP, r0
  406052:	b662      	cpsie	i
  406054:	df00      	svc	0
  406056:	bf00      	nop
  406058:	e000ed08 	.word	0xe000ed08

0040605c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  40605c:	b580      	push	{r7, lr}
  40605e:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  406060:	4b0a      	ldr	r3, [pc, #40]	; (40608c <xPortStartScheduler+0x30>)
  406062:	4a0a      	ldr	r2, [pc, #40]	; (40608c <xPortStartScheduler+0x30>)
  406064:	6812      	ldr	r2, [r2, #0]
  406066:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  40606a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40606c:	4b07      	ldr	r3, [pc, #28]	; (40608c <xPortStartScheduler+0x30>)
  40606e:	4a07      	ldr	r2, [pc, #28]	; (40608c <xPortStartScheduler+0x30>)
  406070:	6812      	ldr	r2, [r2, #0]
  406072:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  406076:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  406078:	4b05      	ldr	r3, [pc, #20]	; (406090 <xPortStartScheduler+0x34>)
  40607a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  40607c:	4b05      	ldr	r3, [pc, #20]	; (406094 <xPortStartScheduler+0x38>)
  40607e:	2200      	movs	r2, #0
  406080:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  406082:	4b05      	ldr	r3, [pc, #20]	; (406098 <xPortStartScheduler+0x3c>)
  406084:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  406086:	2300      	movs	r3, #0
}
  406088:	4618      	mov	r0, r3
  40608a:	bd80      	pop	{r7, pc}
  40608c:	e000ed20 	.word	0xe000ed20
  406090:	0040617d 	.word	0x0040617d
  406094:	20000200 	.word	0x20000200
  406098:	00406049 	.word	0x00406049

0040609c <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  40609c:	b480      	push	{r7}
  40609e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4060a0:	4b03      	ldr	r3, [pc, #12]	; (4060b0 <vPortYieldFromISR+0x14>)
  4060a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4060a6:	601a      	str	r2, [r3, #0]
}
  4060a8:	46bd      	mov	sp, r7
  4060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4060ae:	4770      	bx	lr
  4060b0:	e000ed04 	.word	0xe000ed04

004060b4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  4060b4:	b580      	push	{r7, lr}
  4060b6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  4060b8:	4b03      	ldr	r3, [pc, #12]	; (4060c8 <vPortEnterCritical+0x14>)
  4060ba:	4798      	blx	r3
	uxCriticalNesting++;
  4060bc:	4b03      	ldr	r3, [pc, #12]	; (4060cc <vPortEnterCritical+0x18>)
  4060be:	681b      	ldr	r3, [r3, #0]
  4060c0:	1c5a      	adds	r2, r3, #1
  4060c2:	4b02      	ldr	r3, [pc, #8]	; (4060cc <vPortEnterCritical+0x18>)
  4060c4:	601a      	str	r2, [r3, #0]
}
  4060c6:	bd80      	pop	{r7, pc}
  4060c8:	004060f9 	.word	0x004060f9
  4060cc:	20000200 	.word	0x20000200

004060d0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  4060d0:	b580      	push	{r7, lr}
  4060d2:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  4060d4:	4b06      	ldr	r3, [pc, #24]	; (4060f0 <vPortExitCritical+0x20>)
  4060d6:	681b      	ldr	r3, [r3, #0]
  4060d8:	1e5a      	subs	r2, r3, #1
  4060da:	4b05      	ldr	r3, [pc, #20]	; (4060f0 <vPortExitCritical+0x20>)
  4060dc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
  4060de:	4b04      	ldr	r3, [pc, #16]	; (4060f0 <vPortExitCritical+0x20>)
  4060e0:	681b      	ldr	r3, [r3, #0]
  4060e2:	2b00      	cmp	r3, #0
  4060e4:	d102      	bne.n	4060ec <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
  4060e6:	2000      	movs	r0, #0
  4060e8:	4b02      	ldr	r3, [pc, #8]	; (4060f4 <vPortExitCritical+0x24>)
  4060ea:	4798      	blx	r3
	}
}
  4060ec:	bd80      	pop	{r7, pc}
  4060ee:	bf00      	nop
  4060f0:	20000200 	.word	0x20000200
  4060f4:	0040610d 	.word	0x0040610d

004060f8 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
  4060f8:	f3ef 8011 	mrs	r0, BASEPRI
  4060fc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  406100:	f381 8811 	msr	BASEPRI, r1
  406104:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
  406106:	2300      	movs	r3, #0
}
  406108:	4618      	mov	r0, r3
  40610a:	bf00      	nop

0040610c <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
  40610c:	f380 8811 	msr	BASEPRI, r0
  406110:	4770      	bx	lr
  406112:	bf00      	nop

00406114 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
  406114:	f3ef 8009 	mrs	r0, PSP
  406118:	4b0c      	ldr	r3, [pc, #48]	; (40614c <pxCurrentTCBConst>)
  40611a:	681a      	ldr	r2, [r3, #0]
  40611c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  406120:	6010      	str	r0, [r2, #0]
  406122:	e92d 4008 	stmdb	sp!, {r3, lr}
  406126:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  40612a:	f380 8811 	msr	BASEPRI, r0
  40612e:	f001 f843 	bl	4071b8 <vTaskSwitchContext>
  406132:	f04f 0000 	mov.w	r0, #0
  406136:	f380 8811 	msr	BASEPRI, r0
  40613a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  40613e:	6819      	ldr	r1, [r3, #0]
  406140:	6808      	ldr	r0, [r1, #0]
  406142:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  406146:	f380 8809 	msr	PSP, r0
  40614a:	4770      	bx	lr

0040614c <pxCurrentTCBConst>:
  40614c:	2000ac94 	.word	0x2000ac94

00406150 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
  406150:	b580      	push	{r7, lr}
  406152:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  406154:	4b05      	ldr	r3, [pc, #20]	; (40616c <SysTick_Handler+0x1c>)
  406156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40615a:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  40615c:	4b04      	ldr	r3, [pc, #16]	; (406170 <SysTick_Handler+0x20>)
  40615e:	4798      	blx	r3
	{
		vTaskIncrementTick();
  406160:	4b04      	ldr	r3, [pc, #16]	; (406174 <SysTick_Handler+0x24>)
  406162:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  406164:	2000      	movs	r0, #0
  406166:	4b04      	ldr	r3, [pc, #16]	; (406178 <SysTick_Handler+0x28>)
  406168:	4798      	blx	r3
}
  40616a:	bd80      	pop	{r7, pc}
  40616c:	e000ed04 	.word	0xe000ed04
  406170:	004060f9 	.word	0x004060f9
  406174:	00407071 	.word	0x00407071
  406178:	0040610d 	.word	0x0040610d

0040617c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
  40617c:	b598      	push	{r3, r4, r7, lr}
  40617e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
  406180:	4c06      	ldr	r4, [pc, #24]	; (40619c <vPortSetupTimerInterrupt+0x20>)
  406182:	4b07      	ldr	r3, [pc, #28]	; (4061a0 <vPortSetupTimerInterrupt+0x24>)
  406184:	4798      	blx	r3
  406186:	4602      	mov	r2, r0
  406188:	4b06      	ldr	r3, [pc, #24]	; (4061a4 <vPortSetupTimerInterrupt+0x28>)
  40618a:	fba3 1302 	umull	r1, r3, r3, r2
  40618e:	099b      	lsrs	r3, r3, #6
  406190:	3b01      	subs	r3, #1
  406192:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
  406194:	4b04      	ldr	r3, [pc, #16]	; (4061a8 <vPortSetupTimerInterrupt+0x2c>)
  406196:	2207      	movs	r2, #7
  406198:	601a      	str	r2, [r3, #0]
}
  40619a:	bd98      	pop	{r3, r4, r7, pc}
  40619c:	e000e014 	.word	0xe000e014
  4061a0:	00405fc1 	.word	0x00405fc1
  4061a4:	10624dd3 	.word	0x10624dd3
  4061a8:	e000e010 	.word	0xe000e010

004061ac <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4061ac:	b580      	push	{r7, lr}
  4061ae:	b086      	sub	sp, #24
  4061b0:	af00      	add	r7, sp, #0
  4061b2:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  4061b4:	2300      	movs	r3, #0
  4061b6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  4061b8:	4b36      	ldr	r3, [pc, #216]	; (406294 <pvPortMalloc+0xe8>)
  4061ba:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  4061bc:	4b36      	ldr	r3, [pc, #216]	; (406298 <pvPortMalloc+0xec>)
  4061be:	681b      	ldr	r3, [r3, #0]
  4061c0:	2b00      	cmp	r3, #0
  4061c2:	d101      	bne.n	4061c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  4061c4:	4b35      	ldr	r3, [pc, #212]	; (40629c <pvPortMalloc+0xf0>)
  4061c6:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  4061c8:	687b      	ldr	r3, [r7, #4]
  4061ca:	2b00      	cmp	r3, #0
  4061cc:	d00d      	beq.n	4061ea <pvPortMalloc+0x3e>
		{
			xWantedSize += heapSTRUCT_SIZE;
  4061ce:	2310      	movs	r3, #16
  4061d0:	687a      	ldr	r2, [r7, #4]
  4061d2:	4413      	add	r3, r2
  4061d4:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4061d6:	687b      	ldr	r3, [r7, #4]
  4061d8:	f003 0307 	and.w	r3, r3, #7
  4061dc:	2b00      	cmp	r3, #0
  4061de:	d004      	beq.n	4061ea <pvPortMalloc+0x3e>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4061e0:	687b      	ldr	r3, [r7, #4]
  4061e2:	f023 0307 	bic.w	r3, r3, #7
  4061e6:	3308      	adds	r3, #8
  4061e8:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  4061ea:	687b      	ldr	r3, [r7, #4]
  4061ec:	2b00      	cmp	r3, #0
  4061ee:	d045      	beq.n	40627c <pvPortMalloc+0xd0>
  4061f0:	f649 73c0 	movw	r3, #40896	; 0x9fc0
  4061f4:	687a      	ldr	r2, [r7, #4]
  4061f6:	429a      	cmp	r2, r3
  4061f8:	d240      	bcs.n	40627c <pvPortMalloc+0xd0>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  4061fa:	4b29      	ldr	r3, [pc, #164]	; (4062a0 <pvPortMalloc+0xf4>)
  4061fc:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  4061fe:	4b28      	ldr	r3, [pc, #160]	; (4062a0 <pvPortMalloc+0xf4>)
  406200:	681b      	ldr	r3, [r3, #0]
  406202:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  406204:	e004      	b.n	406210 <pvPortMalloc+0x64>
			{
				pxPreviousBlock = pxBlock;
  406206:	697b      	ldr	r3, [r7, #20]
  406208:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  40620a:	697b      	ldr	r3, [r7, #20]
  40620c:	681b      	ldr	r3, [r3, #0]
  40620e:	617b      	str	r3, [r7, #20]
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  406210:	697b      	ldr	r3, [r7, #20]
  406212:	685a      	ldr	r2, [r3, #4]
  406214:	687b      	ldr	r3, [r7, #4]
  406216:	429a      	cmp	r2, r3
  406218:	d203      	bcs.n	406222 <pvPortMalloc+0x76>
  40621a:	697b      	ldr	r3, [r7, #20]
  40621c:	681b      	ldr	r3, [r3, #0]
  40621e:	2b00      	cmp	r3, #0
  406220:	d1f1      	bne.n	406206 <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  406222:	4b1d      	ldr	r3, [pc, #116]	; (406298 <pvPortMalloc+0xec>)
  406224:	681b      	ldr	r3, [r3, #0]
  406226:	697a      	ldr	r2, [r7, #20]
  406228:	429a      	cmp	r2, r3
  40622a:	d027      	beq.n	40627c <pvPortMalloc+0xd0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  40622c:	693b      	ldr	r3, [r7, #16]
  40622e:	681a      	ldr	r2, [r3, #0]
  406230:	2310      	movs	r3, #16
  406232:	4413      	add	r3, r2
  406234:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  406236:	697b      	ldr	r3, [r7, #20]
  406238:	681a      	ldr	r2, [r3, #0]
  40623a:	693b      	ldr	r3, [r7, #16]
  40623c:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  40623e:	697b      	ldr	r3, [r7, #20]
  406240:	685a      	ldr	r2, [r3, #4]
  406242:	687b      	ldr	r3, [r7, #4]
  406244:	1ad2      	subs	r2, r2, r3
  406246:	2310      	movs	r3, #16
  406248:	005b      	lsls	r3, r3, #1
  40624a:	429a      	cmp	r2, r3
  40624c:	d90f      	bls.n	40626e <pvPortMalloc+0xc2>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  40624e:	697a      	ldr	r2, [r7, #20]
  406250:	687b      	ldr	r3, [r7, #4]
  406252:	4413      	add	r3, r2
  406254:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  406256:	697b      	ldr	r3, [r7, #20]
  406258:	685a      	ldr	r2, [r3, #4]
  40625a:	687b      	ldr	r3, [r7, #4]
  40625c:	1ad2      	subs	r2, r2, r3
  40625e:	68bb      	ldr	r3, [r7, #8]
  406260:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  406262:	697b      	ldr	r3, [r7, #20]
  406264:	687a      	ldr	r2, [r7, #4]
  406266:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  406268:	68b8      	ldr	r0, [r7, #8]
  40626a:	4b0e      	ldr	r3, [pc, #56]	; (4062a4 <pvPortMalloc+0xf8>)
  40626c:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  40626e:	4b0e      	ldr	r3, [pc, #56]	; (4062a8 <pvPortMalloc+0xfc>)
  406270:	681a      	ldr	r2, [r3, #0]
  406272:	697b      	ldr	r3, [r7, #20]
  406274:	685b      	ldr	r3, [r3, #4]
  406276:	1ad2      	subs	r2, r2, r3
  406278:	4b0b      	ldr	r3, [pc, #44]	; (4062a8 <pvPortMalloc+0xfc>)
  40627a:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
  40627c:	4b0b      	ldr	r3, [pc, #44]	; (4062ac <pvPortMalloc+0x100>)
  40627e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  406280:	68fb      	ldr	r3, [r7, #12]
  406282:	2b00      	cmp	r3, #0
  406284:	d101      	bne.n	40628a <pvPortMalloc+0xde>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  406286:	4b0a      	ldr	r3, [pc, #40]	; (4062b0 <pvPortMalloc+0x104>)
  406288:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
  40628a:	68fb      	ldr	r3, [r7, #12]
}
  40628c:	4618      	mov	r0, r3
  40628e:	3718      	adds	r7, #24
  406290:	46bd      	mov	sp, r7
  406292:	bd80      	pop	{r7, pc}
  406294:	00406ed9 	.word	0x00406ed9
  406298:	2000ac90 	.word	0x2000ac90
  40629c:	00406309 	.word	0x00406309
  4062a0:	2000ac88 	.word	0x2000ac88
  4062a4:	00406399 	.word	0x00406399
  4062a8:	20000204 	.word	0x20000204
  4062ac:	00406ef5 	.word	0x00406ef5
  4062b0:	00409a35 	.word	0x00409a35

004062b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  4062b4:	b580      	push	{r7, lr}
  4062b6:	b084      	sub	sp, #16
  4062b8:	af00      	add	r7, sp, #0
  4062ba:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  4062bc:	687b      	ldr	r3, [r7, #4]
  4062be:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  4062c0:	687b      	ldr	r3, [r7, #4]
  4062c2:	2b00      	cmp	r3, #0
  4062c4:	d014      	beq.n	4062f0 <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  4062c6:	2310      	movs	r3, #16
  4062c8:	425b      	negs	r3, r3
  4062ca:	68fa      	ldr	r2, [r7, #12]
  4062cc:	4413      	add	r3, r2
  4062ce:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  4062d0:	68fb      	ldr	r3, [r7, #12]
  4062d2:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  4062d4:	4b08      	ldr	r3, [pc, #32]	; (4062f8 <vPortFree+0x44>)
  4062d6:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  4062d8:	68bb      	ldr	r3, [r7, #8]
  4062da:	685a      	ldr	r2, [r3, #4]
  4062dc:	4b07      	ldr	r3, [pc, #28]	; (4062fc <vPortFree+0x48>)
  4062de:	681b      	ldr	r3, [r3, #0]
  4062e0:	441a      	add	r2, r3
  4062e2:	4b06      	ldr	r3, [pc, #24]	; (4062fc <vPortFree+0x48>)
  4062e4:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  4062e6:	68b8      	ldr	r0, [r7, #8]
  4062e8:	4b05      	ldr	r3, [pc, #20]	; (406300 <vPortFree+0x4c>)
  4062ea:	4798      	blx	r3
		}
		xTaskResumeAll();
  4062ec:	4b05      	ldr	r3, [pc, #20]	; (406304 <vPortFree+0x50>)
  4062ee:	4798      	blx	r3
	}
}
  4062f0:	3710      	adds	r7, #16
  4062f2:	46bd      	mov	sp, r7
  4062f4:	bd80      	pop	{r7, pc}
  4062f6:	bf00      	nop
  4062f8:	00406ed9 	.word	0x00406ed9
  4062fc:	20000204 	.word	0x20000204
  406300:	00406399 	.word	0x00406399
  406304:	00406ef5 	.word	0x00406ef5

00406308 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  406308:	b580      	push	{r7, lr}
  40630a:	b082      	sub	sp, #8
  40630c:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  40630e:	4b1d      	ldr	r3, [pc, #116]	; (406384 <prvHeapInit+0x7c>)
  406310:	4a1d      	ldr	r2, [pc, #116]	; (406388 <prvHeapInit+0x80>)
  406312:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  406314:	4b1b      	ldr	r3, [pc, #108]	; (406384 <prvHeapInit+0x7c>)
  406316:	2200      	movs	r2, #0
  406318:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  40631a:	f649 72c0 	movw	r2, #40896	; 0x9fc0
  40631e:	4b1a      	ldr	r3, [pc, #104]	; (406388 <prvHeapInit+0x80>)
  406320:	4413      	add	r3, r2
  406322:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  406324:	2310      	movs	r3, #16
  406326:	425b      	negs	r3, r3
  406328:	687a      	ldr	r2, [r7, #4]
  40632a:	4413      	add	r3, r2
  40632c:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  40632e:	4b17      	ldr	r3, [pc, #92]	; (40638c <prvHeapInit+0x84>)
  406330:	687a      	ldr	r2, [r7, #4]
  406332:	601a      	str	r2, [r3, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  406334:	4b15      	ldr	r3, [pc, #84]	; (40638c <prvHeapInit+0x84>)
  406336:	681b      	ldr	r3, [r3, #0]
  406338:	f003 0307 	and.w	r3, r3, #7
  40633c:	2b00      	cmp	r3, #0
  40633e:	d003      	beq.n	406348 <prvHeapInit+0x40>
  406340:	4b13      	ldr	r3, [pc, #76]	; (406390 <prvHeapInit+0x88>)
  406342:	4798      	blx	r3
  406344:	bf00      	nop
  406346:	e7fd      	b.n	406344 <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  406348:	4b10      	ldr	r3, [pc, #64]	; (40638c <prvHeapInit+0x84>)
  40634a:	681b      	ldr	r3, [r3, #0]
  40634c:	2200      	movs	r2, #0
  40634e:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  406350:	4b0e      	ldr	r3, [pc, #56]	; (40638c <prvHeapInit+0x84>)
  406352:	681b      	ldr	r3, [r3, #0]
  406354:	2200      	movs	r2, #0
  406356:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  406358:	4b0b      	ldr	r3, [pc, #44]	; (406388 <prvHeapInit+0x80>)
  40635a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  40635c:	f649 72c0 	movw	r2, #40896	; 0x9fc0
  406360:	2310      	movs	r3, #16
  406362:	1ad2      	subs	r2, r2, r3
  406364:	683b      	ldr	r3, [r7, #0]
  406366:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  406368:	4b08      	ldr	r3, [pc, #32]	; (40638c <prvHeapInit+0x84>)
  40636a:	681a      	ldr	r2, [r3, #0]
  40636c:	683b      	ldr	r3, [r7, #0]
  40636e:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  406370:	4b08      	ldr	r3, [pc, #32]	; (406394 <prvHeapInit+0x8c>)
  406372:	681a      	ldr	r2, [r3, #0]
  406374:	2310      	movs	r3, #16
  406376:	1ad2      	subs	r2, r2, r3
  406378:	4b06      	ldr	r3, [pc, #24]	; (406394 <prvHeapInit+0x8c>)
  40637a:	601a      	str	r2, [r3, #0]
}
  40637c:	3708      	adds	r7, #8
  40637e:	46bd      	mov	sp, r7
  406380:	bd80      	pop	{r7, pc}
  406382:	bf00      	nop
  406384:	2000ac88 	.word	0x2000ac88
  406388:	20000cc0 	.word	0x20000cc0
  40638c:	2000ac90 	.word	0x2000ac90
  406390:	004060f9 	.word	0x004060f9
  406394:	20000204 	.word	0x20000204

00406398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  406398:	b480      	push	{r7}
  40639a:	b085      	sub	sp, #20
  40639c:	af00      	add	r7, sp, #0
  40639e:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  4063a0:	4b27      	ldr	r3, [pc, #156]	; (406440 <prvInsertBlockIntoFreeList+0xa8>)
  4063a2:	60fb      	str	r3, [r7, #12]
  4063a4:	e002      	b.n	4063ac <prvInsertBlockIntoFreeList+0x14>
  4063a6:	68fb      	ldr	r3, [r7, #12]
  4063a8:	681b      	ldr	r3, [r3, #0]
  4063aa:	60fb      	str	r3, [r7, #12]
  4063ac:	68fb      	ldr	r3, [r7, #12]
  4063ae:	681a      	ldr	r2, [r3, #0]
  4063b0:	687b      	ldr	r3, [r7, #4]
  4063b2:	429a      	cmp	r2, r3
  4063b4:	d3f7      	bcc.n	4063a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  4063b6:	68fb      	ldr	r3, [r7, #12]
  4063b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  4063ba:	68fb      	ldr	r3, [r7, #12]
  4063bc:	685b      	ldr	r3, [r3, #4]
  4063be:	68ba      	ldr	r2, [r7, #8]
  4063c0:	441a      	add	r2, r3
  4063c2:	687b      	ldr	r3, [r7, #4]
  4063c4:	429a      	cmp	r2, r3
  4063c6:	d108      	bne.n	4063da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4063c8:	68fb      	ldr	r3, [r7, #12]
  4063ca:	685a      	ldr	r2, [r3, #4]
  4063cc:	687b      	ldr	r3, [r7, #4]
  4063ce:	685b      	ldr	r3, [r3, #4]
  4063d0:	441a      	add	r2, r3
  4063d2:	68fb      	ldr	r3, [r7, #12]
  4063d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  4063d6:	68fb      	ldr	r3, [r7, #12]
  4063d8:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  4063da:	687b      	ldr	r3, [r7, #4]
  4063dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  4063de:	687b      	ldr	r3, [r7, #4]
  4063e0:	685b      	ldr	r3, [r3, #4]
  4063e2:	68ba      	ldr	r2, [r7, #8]
  4063e4:	441a      	add	r2, r3
  4063e6:	68fb      	ldr	r3, [r7, #12]
  4063e8:	681b      	ldr	r3, [r3, #0]
  4063ea:	429a      	cmp	r2, r3
  4063ec:	d118      	bne.n	406420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4063ee:	68fb      	ldr	r3, [r7, #12]
  4063f0:	681a      	ldr	r2, [r3, #0]
  4063f2:	4b14      	ldr	r3, [pc, #80]	; (406444 <prvInsertBlockIntoFreeList+0xac>)
  4063f4:	681b      	ldr	r3, [r3, #0]
  4063f6:	429a      	cmp	r2, r3
  4063f8:	d00d      	beq.n	406416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4063fa:	687b      	ldr	r3, [r7, #4]
  4063fc:	685a      	ldr	r2, [r3, #4]
  4063fe:	68fb      	ldr	r3, [r7, #12]
  406400:	681b      	ldr	r3, [r3, #0]
  406402:	685b      	ldr	r3, [r3, #4]
  406404:	441a      	add	r2, r3
  406406:	687b      	ldr	r3, [r7, #4]
  406408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  40640a:	68fb      	ldr	r3, [r7, #12]
  40640c:	681b      	ldr	r3, [r3, #0]
  40640e:	681a      	ldr	r2, [r3, #0]
  406410:	687b      	ldr	r3, [r7, #4]
  406412:	601a      	str	r2, [r3, #0]
  406414:	e008      	b.n	406428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  406416:	4b0b      	ldr	r3, [pc, #44]	; (406444 <prvInsertBlockIntoFreeList+0xac>)
  406418:	681a      	ldr	r2, [r3, #0]
  40641a:	687b      	ldr	r3, [r7, #4]
  40641c:	601a      	str	r2, [r3, #0]
  40641e:	e003      	b.n	406428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  406420:	68fb      	ldr	r3, [r7, #12]
  406422:	681a      	ldr	r2, [r3, #0]
  406424:	687b      	ldr	r3, [r7, #4]
  406426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  406428:	68fa      	ldr	r2, [r7, #12]
  40642a:	687b      	ldr	r3, [r7, #4]
  40642c:	429a      	cmp	r2, r3
  40642e:	d002      	beq.n	406436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  406430:	68fb      	ldr	r3, [r7, #12]
  406432:	687a      	ldr	r2, [r7, #4]
  406434:	601a      	str	r2, [r3, #0]
	}
}
  406436:	3714      	adds	r7, #20
  406438:	46bd      	mov	sp, r7
  40643a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40643e:	4770      	bx	lr
  406440:	2000ac88 	.word	0x2000ac88
  406444:	2000ac90 	.word	0x2000ac90

00406448 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  406448:	b580      	push	{r7, lr}
  40644a:	b082      	sub	sp, #8
  40644c:	af00      	add	r7, sp, #0
  40644e:	6078      	str	r0, [r7, #4]
  406450:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  406452:	687b      	ldr	r3, [r7, #4]
  406454:	2b00      	cmp	r3, #0
  406456:	d103      	bne.n	406460 <xQueueGenericReset+0x18>
  406458:	4b27      	ldr	r3, [pc, #156]	; (4064f8 <xQueueGenericReset+0xb0>)
  40645a:	4798      	blx	r3
  40645c:	bf00      	nop
  40645e:	e7fd      	b.n	40645c <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  406460:	4b26      	ldr	r3, [pc, #152]	; (4064fc <xQueueGenericReset+0xb4>)
  406462:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  406464:	687b      	ldr	r3, [r7, #4]
  406466:	681a      	ldr	r2, [r3, #0]
  406468:	687b      	ldr	r3, [r7, #4]
  40646a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40646c:	6879      	ldr	r1, [r7, #4]
  40646e:	6c09      	ldr	r1, [r1, #64]	; 0x40
  406470:	fb01 f303 	mul.w	r3, r1, r3
  406474:	441a      	add	r2, r3
  406476:	687b      	ldr	r3, [r7, #4]
  406478:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  40647a:	687b      	ldr	r3, [r7, #4]
  40647c:	2200      	movs	r2, #0
  40647e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  406480:	687b      	ldr	r3, [r7, #4]
  406482:	681a      	ldr	r2, [r3, #0]
  406484:	687b      	ldr	r3, [r7, #4]
  406486:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  406488:	687b      	ldr	r3, [r7, #4]
  40648a:	681a      	ldr	r2, [r3, #0]
  40648c:	687b      	ldr	r3, [r7, #4]
  40648e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  406490:	3b01      	subs	r3, #1
  406492:	6879      	ldr	r1, [r7, #4]
  406494:	6c09      	ldr	r1, [r1, #64]	; 0x40
  406496:	fb01 f303 	mul.w	r3, r1, r3
  40649a:	441a      	add	r2, r3
  40649c:	687b      	ldr	r3, [r7, #4]
  40649e:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4064a0:	687b      	ldr	r3, [r7, #4]
  4064a2:	f04f 32ff 	mov.w	r2, #4294967295
  4064a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4064a8:	687b      	ldr	r3, [r7, #4]
  4064aa:	f04f 32ff 	mov.w	r2, #4294967295
  4064ae:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  4064b0:	683b      	ldr	r3, [r7, #0]
  4064b2:	2b00      	cmp	r3, #0
  4064b4:	d10e      	bne.n	4064d4 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4064b6:	687b      	ldr	r3, [r7, #4]
  4064b8:	691b      	ldr	r3, [r3, #16]
  4064ba:	2b00      	cmp	r3, #0
  4064bc:	d014      	beq.n	4064e8 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4064be:	687b      	ldr	r3, [r7, #4]
  4064c0:	3310      	adds	r3, #16
  4064c2:	4618      	mov	r0, r3
  4064c4:	4b0e      	ldr	r3, [pc, #56]	; (406500 <xQueueGenericReset+0xb8>)
  4064c6:	4798      	blx	r3
  4064c8:	4603      	mov	r3, r0
  4064ca:	2b01      	cmp	r3, #1
  4064cc:	d10c      	bne.n	4064e8 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  4064ce:	4b0d      	ldr	r3, [pc, #52]	; (406504 <xQueueGenericReset+0xbc>)
  4064d0:	4798      	blx	r3
  4064d2:	e009      	b.n	4064e8 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4064d4:	687b      	ldr	r3, [r7, #4]
  4064d6:	3310      	adds	r3, #16
  4064d8:	4618      	mov	r0, r3
  4064da:	4b0b      	ldr	r3, [pc, #44]	; (406508 <xQueueGenericReset+0xc0>)
  4064dc:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4064de:	687b      	ldr	r3, [r7, #4]
  4064e0:	3324      	adds	r3, #36	; 0x24
  4064e2:	4618      	mov	r0, r3
  4064e4:	4b08      	ldr	r3, [pc, #32]	; (406508 <xQueueGenericReset+0xc0>)
  4064e6:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  4064e8:	4b08      	ldr	r3, [pc, #32]	; (40650c <xQueueGenericReset+0xc4>)
  4064ea:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  4064ec:	2301      	movs	r3, #1
}
  4064ee:	4618      	mov	r0, r3
  4064f0:	3708      	adds	r7, #8
  4064f2:	46bd      	mov	sp, r7
  4064f4:	bd80      	pop	{r7, pc}
  4064f6:	bf00      	nop
  4064f8:	004060f9 	.word	0x004060f9
  4064fc:	004060b5 	.word	0x004060b5
  406500:	0040733d 	.word	0x0040733d
  406504:	0040609d 	.word	0x0040609d
  406508:	00405dc5 	.word	0x00405dc5
  40650c:	004060d1 	.word	0x004060d1

00406510 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  406510:	b580      	push	{r7, lr}
  406512:	b088      	sub	sp, #32
  406514:	af00      	add	r7, sp, #0
  406516:	60f8      	str	r0, [r7, #12]
  406518:	60b9      	str	r1, [r7, #8]
  40651a:	4613      	mov	r3, r2
  40651c:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  40651e:	2300      	movs	r3, #0
  406520:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  406522:	68fb      	ldr	r3, [r7, #12]
  406524:	2b00      	cmp	r3, #0
  406526:	d02a      	beq.n	40657e <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  406528:	2050      	movs	r0, #80	; 0x50
  40652a:	4b1b      	ldr	r3, [pc, #108]	; (406598 <xQueueGenericCreate+0x88>)
  40652c:	4798      	blx	r3
  40652e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  406530:	69bb      	ldr	r3, [r7, #24]
  406532:	2b00      	cmp	r3, #0
  406534:	d023      	beq.n	40657e <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  406536:	68fb      	ldr	r3, [r7, #12]
  406538:	68ba      	ldr	r2, [r7, #8]
  40653a:	fb02 f303 	mul.w	r3, r2, r3
  40653e:	3301      	adds	r3, #1
  406540:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  406542:	6978      	ldr	r0, [r7, #20]
  406544:	4b14      	ldr	r3, [pc, #80]	; (406598 <xQueueGenericCreate+0x88>)
  406546:	4798      	blx	r3
  406548:	4602      	mov	r2, r0
  40654a:	69bb      	ldr	r3, [r7, #24]
  40654c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  40654e:	69bb      	ldr	r3, [r7, #24]
  406550:	681b      	ldr	r3, [r3, #0]
  406552:	2b00      	cmp	r3, #0
  406554:	d010      	beq.n	406578 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  406556:	69bb      	ldr	r3, [r7, #24]
  406558:	68fa      	ldr	r2, [r7, #12]
  40655a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  40655c:	69bb      	ldr	r3, [r7, #24]
  40655e:	68ba      	ldr	r2, [r7, #8]
  406560:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  406562:	69b8      	ldr	r0, [r7, #24]
  406564:	2101      	movs	r1, #1
  406566:	4b0d      	ldr	r3, [pc, #52]	; (40659c <xQueueGenericCreate+0x8c>)
  406568:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  40656a:	69bb      	ldr	r3, [r7, #24]
  40656c:	79fa      	ldrb	r2, [r7, #7]
  40656e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  406572:	69bb      	ldr	r3, [r7, #24]
  406574:	61fb      	str	r3, [r7, #28]
  406576:	e002      	b.n	40657e <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  406578:	69b8      	ldr	r0, [r7, #24]
  40657a:	4b09      	ldr	r3, [pc, #36]	; (4065a0 <xQueueGenericCreate+0x90>)
  40657c:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  40657e:	69fb      	ldr	r3, [r7, #28]
  406580:	2b00      	cmp	r3, #0
  406582:	d103      	bne.n	40658c <xQueueGenericCreate+0x7c>
  406584:	4b07      	ldr	r3, [pc, #28]	; (4065a4 <xQueueGenericCreate+0x94>)
  406586:	4798      	blx	r3
  406588:	bf00      	nop
  40658a:	e7fd      	b.n	406588 <xQueueGenericCreate+0x78>

	return xReturn;
  40658c:	69fb      	ldr	r3, [r7, #28]
}
  40658e:	4618      	mov	r0, r3
  406590:	3720      	adds	r7, #32
  406592:	46bd      	mov	sp, r7
  406594:	bd80      	pop	{r7, pc}
  406596:	bf00      	nop
  406598:	004061ad 	.word	0x004061ad
  40659c:	00406449 	.word	0x00406449
  4065a0:	004062b5 	.word	0x004062b5
  4065a4:	004060f9 	.word	0x004060f9

004065a8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  4065a8:	b580      	push	{r7, lr}
  4065aa:	b088      	sub	sp, #32
  4065ac:	af00      	add	r7, sp, #0
  4065ae:	60f8      	str	r0, [r7, #12]
  4065b0:	60b9      	str	r1, [r7, #8]
  4065b2:	607a      	str	r2, [r7, #4]
  4065b4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  4065b6:	2300      	movs	r3, #0
  4065b8:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  4065ba:	68fb      	ldr	r3, [r7, #12]
  4065bc:	2b00      	cmp	r3, #0
  4065be:	d103      	bne.n	4065c8 <xQueueGenericSend+0x20>
  4065c0:	4b48      	ldr	r3, [pc, #288]	; (4066e4 <xQueueGenericSend+0x13c>)
  4065c2:	4798      	blx	r3
  4065c4:	bf00      	nop
  4065c6:	e7fd      	b.n	4065c4 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  4065c8:	68bb      	ldr	r3, [r7, #8]
  4065ca:	2b00      	cmp	r3, #0
  4065cc:	d103      	bne.n	4065d6 <xQueueGenericSend+0x2e>
  4065ce:	68fb      	ldr	r3, [r7, #12]
  4065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4065d2:	2b00      	cmp	r3, #0
  4065d4:	d101      	bne.n	4065da <xQueueGenericSend+0x32>
  4065d6:	2301      	movs	r3, #1
  4065d8:	e000      	b.n	4065dc <xQueueGenericSend+0x34>
  4065da:	2300      	movs	r3, #0
  4065dc:	2b00      	cmp	r3, #0
  4065de:	d103      	bne.n	4065e8 <xQueueGenericSend+0x40>
  4065e0:	4b40      	ldr	r3, [pc, #256]	; (4066e4 <xQueueGenericSend+0x13c>)
  4065e2:	4798      	blx	r3
  4065e4:	bf00      	nop
  4065e6:	e7fd      	b.n	4065e4 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  4065e8:	4b3f      	ldr	r3, [pc, #252]	; (4066e8 <xQueueGenericSend+0x140>)
  4065ea:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4065ec:	68fb      	ldr	r3, [r7, #12]
  4065ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4065f0:	68fb      	ldr	r3, [r7, #12]
  4065f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4065f4:	429a      	cmp	r2, r3
  4065f6:	d216      	bcs.n	406626 <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4065f8:	68f8      	ldr	r0, [r7, #12]
  4065fa:	68b9      	ldr	r1, [r7, #8]
  4065fc:	683a      	ldr	r2, [r7, #0]
  4065fe:	4b3b      	ldr	r3, [pc, #236]	; (4066ec <xQueueGenericSend+0x144>)
  406600:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  406602:	68fb      	ldr	r3, [r7, #12]
  406604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406606:	2b00      	cmp	r3, #0
  406608:	d009      	beq.n	40661e <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40660a:	68fb      	ldr	r3, [r7, #12]
  40660c:	3324      	adds	r3, #36	; 0x24
  40660e:	4618      	mov	r0, r3
  406610:	4b37      	ldr	r3, [pc, #220]	; (4066f0 <xQueueGenericSend+0x148>)
  406612:	4798      	blx	r3
  406614:	4603      	mov	r3, r0
  406616:	2b01      	cmp	r3, #1
  406618:	d101      	bne.n	40661e <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  40661a:	4b36      	ldr	r3, [pc, #216]	; (4066f4 <xQueueGenericSend+0x14c>)
  40661c:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  40661e:	4b36      	ldr	r3, [pc, #216]	; (4066f8 <xQueueGenericSend+0x150>)
  406620:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  406622:	2301      	movs	r3, #1
  406624:	e059      	b.n	4066da <xQueueGenericSend+0x132>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  406626:	687b      	ldr	r3, [r7, #4]
  406628:	2b00      	cmp	r3, #0
  40662a:	d103      	bne.n	406634 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  40662c:	4b32      	ldr	r3, [pc, #200]	; (4066f8 <xQueueGenericSend+0x150>)
  40662e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  406630:	2300      	movs	r3, #0
  406632:	e052      	b.n	4066da <xQueueGenericSend+0x132>
				}
				else if( xEntryTimeSet == pdFALSE )
  406634:	69fb      	ldr	r3, [r7, #28]
  406636:	2b00      	cmp	r3, #0
  406638:	d106      	bne.n	406648 <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40663a:	f107 0314 	add.w	r3, r7, #20
  40663e:	4618      	mov	r0, r3
  406640:	4b2e      	ldr	r3, [pc, #184]	; (4066fc <xQueueGenericSend+0x154>)
  406642:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  406644:	2301      	movs	r3, #1
  406646:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  406648:	4b2b      	ldr	r3, [pc, #172]	; (4066f8 <xQueueGenericSend+0x150>)
  40664a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  40664c:	4b2c      	ldr	r3, [pc, #176]	; (406700 <xQueueGenericSend+0x158>)
  40664e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  406650:	4b25      	ldr	r3, [pc, #148]	; (4066e8 <xQueueGenericSend+0x140>)
  406652:	4798      	blx	r3
  406654:	68fb      	ldr	r3, [r7, #12]
  406656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406658:	f1b3 3fff 	cmp.w	r3, #4294967295
  40665c:	d102      	bne.n	406664 <xQueueGenericSend+0xbc>
  40665e:	68fb      	ldr	r3, [r7, #12]
  406660:	2200      	movs	r2, #0
  406662:	645a      	str	r2, [r3, #68]	; 0x44
  406664:	68fb      	ldr	r3, [r7, #12]
  406666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406668:	f1b3 3fff 	cmp.w	r3, #4294967295
  40666c:	d102      	bne.n	406674 <xQueueGenericSend+0xcc>
  40666e:	68fb      	ldr	r3, [r7, #12]
  406670:	2200      	movs	r2, #0
  406672:	649a      	str	r2, [r3, #72]	; 0x48
  406674:	4b20      	ldr	r3, [pc, #128]	; (4066f8 <xQueueGenericSend+0x150>)
  406676:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  406678:	f107 0214 	add.w	r2, r7, #20
  40667c:	1d3b      	adds	r3, r7, #4
  40667e:	4610      	mov	r0, r2
  406680:	4619      	mov	r1, r3
  406682:	4b20      	ldr	r3, [pc, #128]	; (406704 <xQueueGenericSend+0x15c>)
  406684:	4798      	blx	r3
  406686:	4603      	mov	r3, r0
  406688:	2b00      	cmp	r3, #0
  40668a:	d11e      	bne.n	4066ca <xQueueGenericSend+0x122>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40668c:	68f8      	ldr	r0, [r7, #12]
  40668e:	4b1e      	ldr	r3, [pc, #120]	; (406708 <xQueueGenericSend+0x160>)
  406690:	4798      	blx	r3
  406692:	4603      	mov	r3, r0
  406694:	2b00      	cmp	r3, #0
  406696:	d012      	beq.n	4066be <xQueueGenericSend+0x116>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  406698:	68fb      	ldr	r3, [r7, #12]
  40669a:	f103 0210 	add.w	r2, r3, #16
  40669e:	687b      	ldr	r3, [r7, #4]
  4066a0:	4610      	mov	r0, r2
  4066a2:	4619      	mov	r1, r3
  4066a4:	4b19      	ldr	r3, [pc, #100]	; (40670c <xQueueGenericSend+0x164>)
  4066a6:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  4066a8:	68f8      	ldr	r0, [r7, #12]
  4066aa:	4b19      	ldr	r3, [pc, #100]	; (406710 <xQueueGenericSend+0x168>)
  4066ac:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  4066ae:	4b19      	ldr	r3, [pc, #100]	; (406714 <xQueueGenericSend+0x16c>)
  4066b0:	4798      	blx	r3
  4066b2:	4603      	mov	r3, r0
  4066b4:	2b00      	cmp	r3, #0
  4066b6:	d10f      	bne.n	4066d8 <xQueueGenericSend+0x130>
				{
					portYIELD_WITHIN_API();
  4066b8:	4b0e      	ldr	r3, [pc, #56]	; (4066f4 <xQueueGenericSend+0x14c>)
  4066ba:	4798      	blx	r3
  4066bc:	e00c      	b.n	4066d8 <xQueueGenericSend+0x130>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4066be:	68f8      	ldr	r0, [r7, #12]
  4066c0:	4b13      	ldr	r3, [pc, #76]	; (406710 <xQueueGenericSend+0x168>)
  4066c2:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4066c4:	4b13      	ldr	r3, [pc, #76]	; (406714 <xQueueGenericSend+0x16c>)
  4066c6:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
  4066c8:	e78e      	b.n	4065e8 <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  4066ca:	68f8      	ldr	r0, [r7, #12]
  4066cc:	4b10      	ldr	r3, [pc, #64]	; (406710 <xQueueGenericSend+0x168>)
  4066ce:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4066d0:	4b10      	ldr	r3, [pc, #64]	; (406714 <xQueueGenericSend+0x16c>)
  4066d2:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  4066d4:	2300      	movs	r3, #0
  4066d6:	e000      	b.n	4066da <xQueueGenericSend+0x132>
		}
	}
  4066d8:	e786      	b.n	4065e8 <xQueueGenericSend+0x40>
}
  4066da:	4618      	mov	r0, r3
  4066dc:	3720      	adds	r7, #32
  4066de:	46bd      	mov	sp, r7
  4066e0:	bd80      	pop	{r7, pc}
  4066e2:	bf00      	nop
  4066e4:	004060f9 	.word	0x004060f9
  4066e8:	004060b5 	.word	0x004060b5
  4066ec:	004069ad 	.word	0x004069ad
  4066f0:	0040733d 	.word	0x0040733d
  4066f4:	0040609d 	.word	0x0040609d
  4066f8:	004060d1 	.word	0x004060d1
  4066fc:	004073f9 	.word	0x004073f9
  406700:	00406ed9 	.word	0x00406ed9
  406704:	00407431 	.word	0x00407431
  406708:	00406b99 	.word	0x00406b99
  40670c:	0040725d 	.word	0x0040725d
  406710:	00406abd 	.word	0x00406abd
  406714:	00406ef5 	.word	0x00406ef5

00406718 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  406718:	b580      	push	{r7, lr}
  40671a:	b086      	sub	sp, #24
  40671c:	af00      	add	r7, sp, #0
  40671e:	60f8      	str	r0, [r7, #12]
  406720:	60b9      	str	r1, [r7, #8]
  406722:	607a      	str	r2, [r7, #4]
  406724:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  406726:	68fb      	ldr	r3, [r7, #12]
  406728:	2b00      	cmp	r3, #0
  40672a:	d103      	bne.n	406734 <xQueueGenericSendFromISR+0x1c>
  40672c:	4b25      	ldr	r3, [pc, #148]	; (4067c4 <xQueueGenericSendFromISR+0xac>)
  40672e:	4798      	blx	r3
  406730:	bf00      	nop
  406732:	e7fd      	b.n	406730 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  406734:	68bb      	ldr	r3, [r7, #8]
  406736:	2b00      	cmp	r3, #0
  406738:	d103      	bne.n	406742 <xQueueGenericSendFromISR+0x2a>
  40673a:	68fb      	ldr	r3, [r7, #12]
  40673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40673e:	2b00      	cmp	r3, #0
  406740:	d101      	bne.n	406746 <xQueueGenericSendFromISR+0x2e>
  406742:	2301      	movs	r3, #1
  406744:	e000      	b.n	406748 <xQueueGenericSendFromISR+0x30>
  406746:	2300      	movs	r3, #0
  406748:	2b00      	cmp	r3, #0
  40674a:	d103      	bne.n	406754 <xQueueGenericSendFromISR+0x3c>
  40674c:	4b1d      	ldr	r3, [pc, #116]	; (4067c4 <xQueueGenericSendFromISR+0xac>)
  40674e:	4798      	blx	r3
  406750:	bf00      	nop
  406752:	e7fd      	b.n	406750 <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  406754:	4b1b      	ldr	r3, [pc, #108]	; (4067c4 <xQueueGenericSendFromISR+0xac>)
  406756:	4798      	blx	r3
  406758:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40675a:	68fb      	ldr	r3, [r7, #12]
  40675c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40675e:	68fb      	ldr	r3, [r7, #12]
  406760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  406762:	429a      	cmp	r2, r3
  406764:	d224      	bcs.n	4067b0 <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  406766:	68f8      	ldr	r0, [r7, #12]
  406768:	68b9      	ldr	r1, [r7, #8]
  40676a:	683a      	ldr	r2, [r7, #0]
  40676c:	4b16      	ldr	r3, [pc, #88]	; (4067c8 <xQueueGenericSendFromISR+0xb0>)
  40676e:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  406770:	68fb      	ldr	r3, [r7, #12]
  406772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406774:	f1b3 3fff 	cmp.w	r3, #4294967295
  406778:	d112      	bne.n	4067a0 <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40677a:	68fb      	ldr	r3, [r7, #12]
  40677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40677e:	2b00      	cmp	r3, #0
  406780:	d013      	beq.n	4067aa <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  406782:	68fb      	ldr	r3, [r7, #12]
  406784:	3324      	adds	r3, #36	; 0x24
  406786:	4618      	mov	r0, r3
  406788:	4b10      	ldr	r3, [pc, #64]	; (4067cc <xQueueGenericSendFromISR+0xb4>)
  40678a:	4798      	blx	r3
  40678c:	4603      	mov	r3, r0
  40678e:	2b00      	cmp	r3, #0
  406790:	d00b      	beq.n	4067aa <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  406792:	687b      	ldr	r3, [r7, #4]
  406794:	2b00      	cmp	r3, #0
  406796:	d008      	beq.n	4067aa <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  406798:	687b      	ldr	r3, [r7, #4]
  40679a:	2201      	movs	r2, #1
  40679c:	601a      	str	r2, [r3, #0]
  40679e:	e004      	b.n	4067aa <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  4067a0:	68fb      	ldr	r3, [r7, #12]
  4067a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4067a4:	1c5a      	adds	r2, r3, #1
  4067a6:	68fb      	ldr	r3, [r7, #12]
  4067a8:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  4067aa:	2301      	movs	r3, #1
  4067ac:	617b      	str	r3, [r7, #20]
  4067ae:	e001      	b.n	4067b4 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  4067b0:	2300      	movs	r3, #0
  4067b2:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  4067b4:	6938      	ldr	r0, [r7, #16]
  4067b6:	4b06      	ldr	r3, [pc, #24]	; (4067d0 <xQueueGenericSendFromISR+0xb8>)
  4067b8:	4798      	blx	r3

	return xReturn;
  4067ba:	697b      	ldr	r3, [r7, #20]
}
  4067bc:	4618      	mov	r0, r3
  4067be:	3718      	adds	r7, #24
  4067c0:	46bd      	mov	sp, r7
  4067c2:	bd80      	pop	{r7, pc}
  4067c4:	004060f9 	.word	0x004060f9
  4067c8:	004069ad 	.word	0x004069ad
  4067cc:	0040733d 	.word	0x0040733d
  4067d0:	0040610d 	.word	0x0040610d

004067d4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  4067d4:	b580      	push	{r7, lr}
  4067d6:	b088      	sub	sp, #32
  4067d8:	af00      	add	r7, sp, #0
  4067da:	60f8      	str	r0, [r7, #12]
  4067dc:	60b9      	str	r1, [r7, #8]
  4067de:	607a      	str	r2, [r7, #4]
  4067e0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  4067e2:	2300      	movs	r3, #0
  4067e4:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  4067e6:	68fb      	ldr	r3, [r7, #12]
  4067e8:	2b00      	cmp	r3, #0
  4067ea:	d103      	bne.n	4067f4 <xQueueGenericReceive+0x20>
  4067ec:	4b60      	ldr	r3, [pc, #384]	; (406970 <xQueueGenericReceive+0x19c>)
  4067ee:	4798      	blx	r3
  4067f0:	bf00      	nop
  4067f2:	e7fd      	b.n	4067f0 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  4067f4:	68bb      	ldr	r3, [r7, #8]
  4067f6:	2b00      	cmp	r3, #0
  4067f8:	d103      	bne.n	406802 <xQueueGenericReceive+0x2e>
  4067fa:	68fb      	ldr	r3, [r7, #12]
  4067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4067fe:	2b00      	cmp	r3, #0
  406800:	d101      	bne.n	406806 <xQueueGenericReceive+0x32>
  406802:	2301      	movs	r3, #1
  406804:	e000      	b.n	406808 <xQueueGenericReceive+0x34>
  406806:	2300      	movs	r3, #0
  406808:	2b00      	cmp	r3, #0
  40680a:	d103      	bne.n	406814 <xQueueGenericReceive+0x40>
  40680c:	4b58      	ldr	r3, [pc, #352]	; (406970 <xQueueGenericReceive+0x19c>)
  40680e:	4798      	blx	r3
  406810:	bf00      	nop
  406812:	e7fd      	b.n	406810 <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  406814:	4b57      	ldr	r3, [pc, #348]	; (406974 <xQueueGenericReceive+0x1a0>)
  406816:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  406818:	68fb      	ldr	r3, [r7, #12]
  40681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40681c:	2b00      	cmp	r3, #0
  40681e:	d03b      	beq.n	406898 <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  406820:	68fb      	ldr	r3, [r7, #12]
  406822:	68db      	ldr	r3, [r3, #12]
  406824:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  406826:	68f8      	ldr	r0, [r7, #12]
  406828:	68b9      	ldr	r1, [r7, #8]
  40682a:	4b53      	ldr	r3, [pc, #332]	; (406978 <xQueueGenericReceive+0x1a4>)
  40682c:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  40682e:	683b      	ldr	r3, [r7, #0]
  406830:	2b00      	cmp	r3, #0
  406832:	d11c      	bne.n	40686e <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  406834:	68fb      	ldr	r3, [r7, #12]
  406836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406838:	1e5a      	subs	r2, r3, #1
  40683a:	68fb      	ldr	r3, [r7, #12]
  40683c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40683e:	68fb      	ldr	r3, [r7, #12]
  406840:	681b      	ldr	r3, [r3, #0]
  406842:	2b00      	cmp	r3, #0
  406844:	d104      	bne.n	406850 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  406846:	4b4d      	ldr	r3, [pc, #308]	; (40697c <xQueueGenericReceive+0x1a8>)
  406848:	4798      	blx	r3
  40684a:	4602      	mov	r2, r0
  40684c:	68fb      	ldr	r3, [r7, #12]
  40684e:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  406850:	68fb      	ldr	r3, [r7, #12]
  406852:	691b      	ldr	r3, [r3, #16]
  406854:	2b00      	cmp	r3, #0
  406856:	d01b      	beq.n	406890 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  406858:	68fb      	ldr	r3, [r7, #12]
  40685a:	3310      	adds	r3, #16
  40685c:	4618      	mov	r0, r3
  40685e:	4b48      	ldr	r3, [pc, #288]	; (406980 <xQueueGenericReceive+0x1ac>)
  406860:	4798      	blx	r3
  406862:	4603      	mov	r3, r0
  406864:	2b01      	cmp	r3, #1
  406866:	d113      	bne.n	406890 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  406868:	4b46      	ldr	r3, [pc, #280]	; (406984 <xQueueGenericReceive+0x1b0>)
  40686a:	4798      	blx	r3
  40686c:	e010      	b.n	406890 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  40686e:	68fb      	ldr	r3, [r7, #12]
  406870:	69ba      	ldr	r2, [r7, #24]
  406872:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  406874:	68fb      	ldr	r3, [r7, #12]
  406876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406878:	2b00      	cmp	r3, #0
  40687a:	d009      	beq.n	406890 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40687c:	68fb      	ldr	r3, [r7, #12]
  40687e:	3324      	adds	r3, #36	; 0x24
  406880:	4618      	mov	r0, r3
  406882:	4b3f      	ldr	r3, [pc, #252]	; (406980 <xQueueGenericReceive+0x1ac>)
  406884:	4798      	blx	r3
  406886:	4603      	mov	r3, r0
  406888:	2b00      	cmp	r3, #0
  40688a:	d001      	beq.n	406890 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  40688c:	4b3d      	ldr	r3, [pc, #244]	; (406984 <xQueueGenericReceive+0x1b0>)
  40688e:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  406890:	4b3d      	ldr	r3, [pc, #244]	; (406988 <xQueueGenericReceive+0x1b4>)
  406892:	4798      	blx	r3
				return pdPASS;
  406894:	2301      	movs	r3, #1
  406896:	e066      	b.n	406966 <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  406898:	687b      	ldr	r3, [r7, #4]
  40689a:	2b00      	cmp	r3, #0
  40689c:	d103      	bne.n	4068a6 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  40689e:	4b3a      	ldr	r3, [pc, #232]	; (406988 <xQueueGenericReceive+0x1b4>)
  4068a0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  4068a2:	2300      	movs	r3, #0
  4068a4:	e05f      	b.n	406966 <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
  4068a6:	69fb      	ldr	r3, [r7, #28]
  4068a8:	2b00      	cmp	r3, #0
  4068aa:	d106      	bne.n	4068ba <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4068ac:	f107 0310 	add.w	r3, r7, #16
  4068b0:	4618      	mov	r0, r3
  4068b2:	4b36      	ldr	r3, [pc, #216]	; (40698c <xQueueGenericReceive+0x1b8>)
  4068b4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  4068b6:	2301      	movs	r3, #1
  4068b8:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  4068ba:	4b33      	ldr	r3, [pc, #204]	; (406988 <xQueueGenericReceive+0x1b4>)
  4068bc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4068be:	4b34      	ldr	r3, [pc, #208]	; (406990 <xQueueGenericReceive+0x1bc>)
  4068c0:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4068c2:	4b2c      	ldr	r3, [pc, #176]	; (406974 <xQueueGenericReceive+0x1a0>)
  4068c4:	4798      	blx	r3
  4068c6:	68fb      	ldr	r3, [r7, #12]
  4068c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4068ca:	f1b3 3fff 	cmp.w	r3, #4294967295
  4068ce:	d102      	bne.n	4068d6 <xQueueGenericReceive+0x102>
  4068d0:	68fb      	ldr	r3, [r7, #12]
  4068d2:	2200      	movs	r2, #0
  4068d4:	645a      	str	r2, [r3, #68]	; 0x44
  4068d6:	68fb      	ldr	r3, [r7, #12]
  4068d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4068da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4068de:	d102      	bne.n	4068e6 <xQueueGenericReceive+0x112>
  4068e0:	68fb      	ldr	r3, [r7, #12]
  4068e2:	2200      	movs	r2, #0
  4068e4:	649a      	str	r2, [r3, #72]	; 0x48
  4068e6:	4b28      	ldr	r3, [pc, #160]	; (406988 <xQueueGenericReceive+0x1b4>)
  4068e8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4068ea:	f107 0210 	add.w	r2, r7, #16
  4068ee:	1d3b      	adds	r3, r7, #4
  4068f0:	4610      	mov	r0, r2
  4068f2:	4619      	mov	r1, r3
  4068f4:	4b27      	ldr	r3, [pc, #156]	; (406994 <xQueueGenericReceive+0x1c0>)
  4068f6:	4798      	blx	r3
  4068f8:	4603      	mov	r3, r0
  4068fa:	2b00      	cmp	r3, #0
  4068fc:	d12b      	bne.n	406956 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4068fe:	68f8      	ldr	r0, [r7, #12]
  406900:	4b25      	ldr	r3, [pc, #148]	; (406998 <xQueueGenericReceive+0x1c4>)
  406902:	4798      	blx	r3
  406904:	4603      	mov	r3, r0
  406906:	2b00      	cmp	r3, #0
  406908:	d01f      	beq.n	40694a <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40690a:	68fb      	ldr	r3, [r7, #12]
  40690c:	681b      	ldr	r3, [r3, #0]
  40690e:	2b00      	cmp	r3, #0
  406910:	d108      	bne.n	406924 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  406912:	4b18      	ldr	r3, [pc, #96]	; (406974 <xQueueGenericReceive+0x1a0>)
  406914:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  406916:	68fb      	ldr	r3, [r7, #12]
  406918:	685b      	ldr	r3, [r3, #4]
  40691a:	4618      	mov	r0, r3
  40691c:	4b1f      	ldr	r3, [pc, #124]	; (40699c <xQueueGenericReceive+0x1c8>)
  40691e:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  406920:	4b19      	ldr	r3, [pc, #100]	; (406988 <xQueueGenericReceive+0x1b4>)
  406922:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  406924:	68fb      	ldr	r3, [r7, #12]
  406926:	f103 0224 	add.w	r2, r3, #36	; 0x24
  40692a:	687b      	ldr	r3, [r7, #4]
  40692c:	4610      	mov	r0, r2
  40692e:	4619      	mov	r1, r3
  406930:	4b1b      	ldr	r3, [pc, #108]	; (4069a0 <xQueueGenericReceive+0x1cc>)
  406932:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  406934:	68f8      	ldr	r0, [r7, #12]
  406936:	4b1b      	ldr	r3, [pc, #108]	; (4069a4 <xQueueGenericReceive+0x1d0>)
  406938:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40693a:	4b1b      	ldr	r3, [pc, #108]	; (4069a8 <xQueueGenericReceive+0x1d4>)
  40693c:	4798      	blx	r3
  40693e:	4603      	mov	r3, r0
  406940:	2b00      	cmp	r3, #0
  406942:	d10f      	bne.n	406964 <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
  406944:	4b0f      	ldr	r3, [pc, #60]	; (406984 <xQueueGenericReceive+0x1b0>)
  406946:	4798      	blx	r3
  406948:	e00c      	b.n	406964 <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  40694a:	68f8      	ldr	r0, [r7, #12]
  40694c:	4b15      	ldr	r3, [pc, #84]	; (4069a4 <xQueueGenericReceive+0x1d0>)
  40694e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  406950:	4b15      	ldr	r3, [pc, #84]	; (4069a8 <xQueueGenericReceive+0x1d4>)
  406952:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
  406954:	e75e      	b.n	406814 <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  406956:	68f8      	ldr	r0, [r7, #12]
  406958:	4b12      	ldr	r3, [pc, #72]	; (4069a4 <xQueueGenericReceive+0x1d0>)
  40695a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40695c:	4b12      	ldr	r3, [pc, #72]	; (4069a8 <xQueueGenericReceive+0x1d4>)
  40695e:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  406960:	2300      	movs	r3, #0
  406962:	e000      	b.n	406966 <xQueueGenericReceive+0x192>
		}
	}
  406964:	e756      	b.n	406814 <xQueueGenericReceive+0x40>
}
  406966:	4618      	mov	r0, r3
  406968:	3720      	adds	r7, #32
  40696a:	46bd      	mov	sp, r7
  40696c:	bd80      	pop	{r7, pc}
  40696e:	bf00      	nop
  406970:	004060f9 	.word	0x004060f9
  406974:	004060b5 	.word	0x004060b5
  406978:	00406a6d 	.word	0x00406a6d
  40697c:	004077a9 	.word	0x004077a9
  406980:	0040733d 	.word	0x0040733d
  406984:	0040609d 	.word	0x0040609d
  406988:	004060d1 	.word	0x004060d1
  40698c:	004073f9 	.word	0x004073f9
  406990:	00406ed9 	.word	0x00406ed9
  406994:	00407431 	.word	0x00407431
  406998:	00406b65 	.word	0x00406b65
  40699c:	00407805 	.word	0x00407805
  4069a0:	0040725d 	.word	0x0040725d
  4069a4:	00406abd 	.word	0x00406abd
  4069a8:	00406ef5 	.word	0x00406ef5

004069ac <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  4069ac:	b580      	push	{r7, lr}
  4069ae:	b084      	sub	sp, #16
  4069b0:	af00      	add	r7, sp, #0
  4069b2:	60f8      	str	r0, [r7, #12]
  4069b4:	60b9      	str	r1, [r7, #8]
  4069b6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  4069b8:	68fb      	ldr	r3, [r7, #12]
  4069ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4069bc:	2b00      	cmp	r3, #0
  4069be:	d10c      	bne.n	4069da <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4069c0:	68fb      	ldr	r3, [r7, #12]
  4069c2:	681b      	ldr	r3, [r3, #0]
  4069c4:	2b00      	cmp	r3, #0
  4069c6:	d145      	bne.n	406a54 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4069c8:	68fb      	ldr	r3, [r7, #12]
  4069ca:	685b      	ldr	r3, [r3, #4]
  4069cc:	4618      	mov	r0, r3
  4069ce:	4b25      	ldr	r3, [pc, #148]	; (406a64 <prvCopyDataToQueue+0xb8>)
  4069d0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4069d2:	68fb      	ldr	r3, [r7, #12]
  4069d4:	2200      	movs	r2, #0
  4069d6:	605a      	str	r2, [r3, #4]
  4069d8:	e03c      	b.n	406a54 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  4069da:	687b      	ldr	r3, [r7, #4]
  4069dc:	2b00      	cmp	r3, #0
  4069de:	d11a      	bne.n	406a16 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  4069e0:	68fb      	ldr	r3, [r7, #12]
  4069e2:	689a      	ldr	r2, [r3, #8]
  4069e4:	68fb      	ldr	r3, [r7, #12]
  4069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4069e8:	4610      	mov	r0, r2
  4069ea:	68b9      	ldr	r1, [r7, #8]
  4069ec:	461a      	mov	r2, r3
  4069ee:	4b1e      	ldr	r3, [pc, #120]	; (406a68 <prvCopyDataToQueue+0xbc>)
  4069f0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4069f2:	68fb      	ldr	r3, [r7, #12]
  4069f4:	689a      	ldr	r2, [r3, #8]
  4069f6:	68fb      	ldr	r3, [r7, #12]
  4069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4069fa:	441a      	add	r2, r3
  4069fc:	68fb      	ldr	r3, [r7, #12]
  4069fe:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  406a00:	68fb      	ldr	r3, [r7, #12]
  406a02:	689a      	ldr	r2, [r3, #8]
  406a04:	68fb      	ldr	r3, [r7, #12]
  406a06:	685b      	ldr	r3, [r3, #4]
  406a08:	429a      	cmp	r2, r3
  406a0a:	d323      	bcc.n	406a54 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  406a0c:	68fb      	ldr	r3, [r7, #12]
  406a0e:	681a      	ldr	r2, [r3, #0]
  406a10:	68fb      	ldr	r3, [r7, #12]
  406a12:	609a      	str	r2, [r3, #8]
  406a14:	e01e      	b.n	406a54 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  406a16:	68fb      	ldr	r3, [r7, #12]
  406a18:	68da      	ldr	r2, [r3, #12]
  406a1a:	68fb      	ldr	r3, [r7, #12]
  406a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406a1e:	4610      	mov	r0, r2
  406a20:	68b9      	ldr	r1, [r7, #8]
  406a22:	461a      	mov	r2, r3
  406a24:	4b10      	ldr	r3, [pc, #64]	; (406a68 <prvCopyDataToQueue+0xbc>)
  406a26:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  406a28:	68fb      	ldr	r3, [r7, #12]
  406a2a:	68da      	ldr	r2, [r3, #12]
  406a2c:	68fb      	ldr	r3, [r7, #12]
  406a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406a30:	425b      	negs	r3, r3
  406a32:	441a      	add	r2, r3
  406a34:	68fb      	ldr	r3, [r7, #12]
  406a36:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  406a38:	68fb      	ldr	r3, [r7, #12]
  406a3a:	68da      	ldr	r2, [r3, #12]
  406a3c:	68fb      	ldr	r3, [r7, #12]
  406a3e:	681b      	ldr	r3, [r3, #0]
  406a40:	429a      	cmp	r2, r3
  406a42:	d207      	bcs.n	406a54 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  406a44:	68fb      	ldr	r3, [r7, #12]
  406a46:	685a      	ldr	r2, [r3, #4]
  406a48:	68fb      	ldr	r3, [r7, #12]
  406a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406a4c:	425b      	negs	r3, r3
  406a4e:	441a      	add	r2, r3
  406a50:	68fb      	ldr	r3, [r7, #12]
  406a52:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  406a54:	68fb      	ldr	r3, [r7, #12]
  406a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406a58:	1c5a      	adds	r2, r3, #1
  406a5a:	68fb      	ldr	r3, [r7, #12]
  406a5c:	639a      	str	r2, [r3, #56]	; 0x38
}
  406a5e:	3710      	adds	r7, #16
  406a60:	46bd      	mov	sp, r7
  406a62:	bd80      	pop	{r7, pc}
  406a64:	004078b5 	.word	0x004078b5
  406a68:	0040a101 	.word	0x0040a101

00406a6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  406a6c:	b580      	push	{r7, lr}
  406a6e:	b082      	sub	sp, #8
  406a70:	af00      	add	r7, sp, #0
  406a72:	6078      	str	r0, [r7, #4]
  406a74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  406a76:	687b      	ldr	r3, [r7, #4]
  406a78:	681b      	ldr	r3, [r3, #0]
  406a7a:	2b00      	cmp	r3, #0
  406a7c:	d019      	beq.n	406ab2 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  406a7e:	687b      	ldr	r3, [r7, #4]
  406a80:	68da      	ldr	r2, [r3, #12]
  406a82:	687b      	ldr	r3, [r7, #4]
  406a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406a86:	441a      	add	r2, r3
  406a88:	687b      	ldr	r3, [r7, #4]
  406a8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  406a8c:	687b      	ldr	r3, [r7, #4]
  406a8e:	68da      	ldr	r2, [r3, #12]
  406a90:	687b      	ldr	r3, [r7, #4]
  406a92:	685b      	ldr	r3, [r3, #4]
  406a94:	429a      	cmp	r2, r3
  406a96:	d303      	bcc.n	406aa0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  406a98:	687b      	ldr	r3, [r7, #4]
  406a9a:	681a      	ldr	r2, [r3, #0]
  406a9c:	687b      	ldr	r3, [r7, #4]
  406a9e:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  406aa0:	687b      	ldr	r3, [r7, #4]
  406aa2:	68da      	ldr	r2, [r3, #12]
  406aa4:	687b      	ldr	r3, [r7, #4]
  406aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406aa8:	6838      	ldr	r0, [r7, #0]
  406aaa:	4611      	mov	r1, r2
  406aac:	461a      	mov	r2, r3
  406aae:	4b02      	ldr	r3, [pc, #8]	; (406ab8 <prvCopyDataFromQueue+0x4c>)
  406ab0:	4798      	blx	r3
	}
}
  406ab2:	3708      	adds	r7, #8
  406ab4:	46bd      	mov	sp, r7
  406ab6:	bd80      	pop	{r7, pc}
  406ab8:	0040a101 	.word	0x0040a101

00406abc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  406abc:	b580      	push	{r7, lr}
  406abe:	b082      	sub	sp, #8
  406ac0:	af00      	add	r7, sp, #0
  406ac2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  406ac4:	4b23      	ldr	r3, [pc, #140]	; (406b54 <prvUnlockQueue+0x98>)
  406ac6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  406ac8:	e014      	b.n	406af4 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  406aca:	687b      	ldr	r3, [r7, #4]
  406acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406ace:	2b00      	cmp	r3, #0
  406ad0:	d00f      	beq.n	406af2 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  406ad2:	687b      	ldr	r3, [r7, #4]
  406ad4:	3324      	adds	r3, #36	; 0x24
  406ad6:	4618      	mov	r0, r3
  406ad8:	4b1f      	ldr	r3, [pc, #124]	; (406b58 <prvUnlockQueue+0x9c>)
  406ada:	4798      	blx	r3
  406adc:	4603      	mov	r3, r0
  406ade:	2b00      	cmp	r3, #0
  406ae0:	d001      	beq.n	406ae6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  406ae2:	4b1e      	ldr	r3, [pc, #120]	; (406b5c <prvUnlockQueue+0xa0>)
  406ae4:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  406ae6:	687b      	ldr	r3, [r7, #4]
  406ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406aea:	1e5a      	subs	r2, r3, #1
  406aec:	687b      	ldr	r3, [r7, #4]
  406aee:	649a      	str	r2, [r3, #72]	; 0x48
  406af0:	e000      	b.n	406af4 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
  406af2:	e003      	b.n	406afc <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  406af4:	687b      	ldr	r3, [r7, #4]
  406af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406af8:	2b00      	cmp	r3, #0
  406afa:	dce6      	bgt.n	406aca <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  406afc:	687b      	ldr	r3, [r7, #4]
  406afe:	f04f 32ff 	mov.w	r2, #4294967295
  406b02:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  406b04:	4b16      	ldr	r3, [pc, #88]	; (406b60 <prvUnlockQueue+0xa4>)
  406b06:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  406b08:	4b12      	ldr	r3, [pc, #72]	; (406b54 <prvUnlockQueue+0x98>)
  406b0a:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  406b0c:	e014      	b.n	406b38 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  406b0e:	687b      	ldr	r3, [r7, #4]
  406b10:	691b      	ldr	r3, [r3, #16]
  406b12:	2b00      	cmp	r3, #0
  406b14:	d00f      	beq.n	406b36 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  406b16:	687b      	ldr	r3, [r7, #4]
  406b18:	3310      	adds	r3, #16
  406b1a:	4618      	mov	r0, r3
  406b1c:	4b0e      	ldr	r3, [pc, #56]	; (406b58 <prvUnlockQueue+0x9c>)
  406b1e:	4798      	blx	r3
  406b20:	4603      	mov	r3, r0
  406b22:	2b00      	cmp	r3, #0
  406b24:	d001      	beq.n	406b2a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  406b26:	4b0d      	ldr	r3, [pc, #52]	; (406b5c <prvUnlockQueue+0xa0>)
  406b28:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  406b2a:	687b      	ldr	r3, [r7, #4]
  406b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406b2e:	1e5a      	subs	r2, r3, #1
  406b30:	687b      	ldr	r3, [r7, #4]
  406b32:	645a      	str	r2, [r3, #68]	; 0x44
  406b34:	e000      	b.n	406b38 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
  406b36:	e003      	b.n	406b40 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  406b38:	687b      	ldr	r3, [r7, #4]
  406b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406b3c:	2b00      	cmp	r3, #0
  406b3e:	dce6      	bgt.n	406b0e <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  406b40:	687b      	ldr	r3, [r7, #4]
  406b42:	f04f 32ff 	mov.w	r2, #4294967295
  406b46:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  406b48:	4b05      	ldr	r3, [pc, #20]	; (406b60 <prvUnlockQueue+0xa4>)
  406b4a:	4798      	blx	r3
}
  406b4c:	3708      	adds	r7, #8
  406b4e:	46bd      	mov	sp, r7
  406b50:	bd80      	pop	{r7, pc}
  406b52:	bf00      	nop
  406b54:	004060b5 	.word	0x004060b5
  406b58:	0040733d 	.word	0x0040733d
  406b5c:	004074e5 	.word	0x004074e5
  406b60:	004060d1 	.word	0x004060d1

00406b64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  406b64:	b580      	push	{r7, lr}
  406b66:	b084      	sub	sp, #16
  406b68:	af00      	add	r7, sp, #0
  406b6a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  406b6c:	4b08      	ldr	r3, [pc, #32]	; (406b90 <prvIsQueueEmpty+0x2c>)
  406b6e:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  406b70:	687b      	ldr	r3, [r7, #4]
  406b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406b74:	2b00      	cmp	r3, #0
  406b76:	bf14      	ite	ne
  406b78:	2300      	movne	r3, #0
  406b7a:	2301      	moveq	r3, #1
  406b7c:	b2db      	uxtb	r3, r3
  406b7e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  406b80:	4b04      	ldr	r3, [pc, #16]	; (406b94 <prvIsQueueEmpty+0x30>)
  406b82:	4798      	blx	r3

	return xReturn;
  406b84:	68fb      	ldr	r3, [r7, #12]
}
  406b86:	4618      	mov	r0, r3
  406b88:	3710      	adds	r7, #16
  406b8a:	46bd      	mov	sp, r7
  406b8c:	bd80      	pop	{r7, pc}
  406b8e:	bf00      	nop
  406b90:	004060b5 	.word	0x004060b5
  406b94:	004060d1 	.word	0x004060d1

00406b98 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  406b98:	b580      	push	{r7, lr}
  406b9a:	b084      	sub	sp, #16
  406b9c:	af00      	add	r7, sp, #0
  406b9e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  406ba0:	4b09      	ldr	r3, [pc, #36]	; (406bc8 <prvIsQueueFull+0x30>)
  406ba2:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  406ba4:	687b      	ldr	r3, [r7, #4]
  406ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406ba8:	687b      	ldr	r3, [r7, #4]
  406baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  406bac:	429a      	cmp	r2, r3
  406bae:	bf14      	ite	ne
  406bb0:	2300      	movne	r3, #0
  406bb2:	2301      	moveq	r3, #1
  406bb4:	b2db      	uxtb	r3, r3
  406bb6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  406bb8:	4b04      	ldr	r3, [pc, #16]	; (406bcc <prvIsQueueFull+0x34>)
  406bba:	4798      	blx	r3

	return xReturn;
  406bbc:	68fb      	ldr	r3, [r7, #12]
}
  406bbe:	4618      	mov	r0, r3
  406bc0:	3710      	adds	r7, #16
  406bc2:	46bd      	mov	sp, r7
  406bc4:	bd80      	pop	{r7, pc}
  406bc6:	bf00      	nop
  406bc8:	004060b5 	.word	0x004060b5
  406bcc:	004060d1 	.word	0x004060d1

00406bd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  406bd0:	b580      	push	{r7, lr}
  406bd2:	b082      	sub	sp, #8
  406bd4:	af00      	add	r7, sp, #0
  406bd6:	6078      	str	r0, [r7, #4]
  406bd8:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  406bda:	4b12      	ldr	r3, [pc, #72]	; (406c24 <vQueueWaitForMessageRestricted+0x54>)
  406bdc:	4798      	blx	r3
  406bde:	687b      	ldr	r3, [r7, #4]
  406be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406be2:	f1b3 3fff 	cmp.w	r3, #4294967295
  406be6:	d102      	bne.n	406bee <vQueueWaitForMessageRestricted+0x1e>
  406be8:	687b      	ldr	r3, [r7, #4]
  406bea:	2200      	movs	r2, #0
  406bec:	645a      	str	r2, [r3, #68]	; 0x44
  406bee:	687b      	ldr	r3, [r7, #4]
  406bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
  406bf6:	d102      	bne.n	406bfe <vQueueWaitForMessageRestricted+0x2e>
  406bf8:	687b      	ldr	r3, [r7, #4]
  406bfa:	2200      	movs	r2, #0
  406bfc:	649a      	str	r2, [r3, #72]	; 0x48
  406bfe:	4b0a      	ldr	r3, [pc, #40]	; (406c28 <vQueueWaitForMessageRestricted+0x58>)
  406c00:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  406c02:	687b      	ldr	r3, [r7, #4]
  406c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406c06:	2b00      	cmp	r3, #0
  406c08:	d105      	bne.n	406c16 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  406c0a:	687b      	ldr	r3, [r7, #4]
  406c0c:	3324      	adds	r3, #36	; 0x24
  406c0e:	4618      	mov	r0, r3
  406c10:	6839      	ldr	r1, [r7, #0]
  406c12:	4b06      	ldr	r3, [pc, #24]	; (406c2c <vQueueWaitForMessageRestricted+0x5c>)
  406c14:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  406c16:	6878      	ldr	r0, [r7, #4]
  406c18:	4b05      	ldr	r3, [pc, #20]	; (406c30 <vQueueWaitForMessageRestricted+0x60>)
  406c1a:	4798      	blx	r3
	}
  406c1c:	3708      	adds	r7, #8
  406c1e:	46bd      	mov	sp, r7
  406c20:	bd80      	pop	{r7, pc}
  406c22:	bf00      	nop
  406c24:	004060b5 	.word	0x004060b5
  406c28:	004060d1 	.word	0x004060d1
  406c2c:	004072dd 	.word	0x004072dd
  406c30:	00406abd 	.word	0x00406abd

00406c34 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  406c34:	b590      	push	{r4, r7, lr}
  406c36:	b08b      	sub	sp, #44	; 0x2c
  406c38:	af02      	add	r7, sp, #8
  406c3a:	60f8      	str	r0, [r7, #12]
  406c3c:	60b9      	str	r1, [r7, #8]
  406c3e:	603b      	str	r3, [r7, #0]
  406c40:	4613      	mov	r3, r2
  406c42:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  406c44:	68fb      	ldr	r3, [r7, #12]
  406c46:	2b00      	cmp	r3, #0
  406c48:	d103      	bne.n	406c52 <xTaskGenericCreate+0x1e>
  406c4a:	4b5a      	ldr	r3, [pc, #360]	; (406db4 <xTaskGenericCreate+0x180>)
  406c4c:	4798      	blx	r3
  406c4e:	bf00      	nop
  406c50:	e7fd      	b.n	406c4e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  406c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406c54:	2b0e      	cmp	r3, #14
  406c56:	d903      	bls.n	406c60 <xTaskGenericCreate+0x2c>
  406c58:	4b56      	ldr	r3, [pc, #344]	; (406db4 <xTaskGenericCreate+0x180>)
  406c5a:	4798      	blx	r3
  406c5c:	bf00      	nop
  406c5e:	e7fd      	b.n	406c5c <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  406c60:	88fb      	ldrh	r3, [r7, #6]
  406c62:	4618      	mov	r0, r3
  406c64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  406c66:	4b54      	ldr	r3, [pc, #336]	; (406db8 <xTaskGenericCreate+0x184>)
  406c68:	4798      	blx	r3
  406c6a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  406c6c:	69bb      	ldr	r3, [r7, #24]
  406c6e:	2b00      	cmp	r3, #0
  406c70:	f000 8088 	beq.w	406d84 <xTaskGenericCreate+0x150>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  406c74:	69bb      	ldr	r3, [r7, #24]
  406c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406c78:	88fb      	ldrh	r3, [r7, #6]
  406c7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  406c7e:	3b01      	subs	r3, #1
  406c80:	009b      	lsls	r3, r3, #2
  406c82:	4413      	add	r3, r2
  406c84:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  406c86:	697b      	ldr	r3, [r7, #20]
  406c88:	f023 0307 	bic.w	r3, r3, #7
  406c8c:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  406c8e:	697b      	ldr	r3, [r7, #20]
  406c90:	f003 0307 	and.w	r3, r3, #7
  406c94:	2b00      	cmp	r3, #0
  406c96:	d003      	beq.n	406ca0 <xTaskGenericCreate+0x6c>
  406c98:	4b46      	ldr	r3, [pc, #280]	; (406db4 <xTaskGenericCreate+0x180>)
  406c9a:	4798      	blx	r3
  406c9c:	bf00      	nop
  406c9e:	e7fd      	b.n	406c9c <xTaskGenericCreate+0x68>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  406ca0:	88fb      	ldrh	r3, [r7, #6]
  406ca2:	9300      	str	r3, [sp, #0]
  406ca4:	69b8      	ldr	r0, [r7, #24]
  406ca6:	68b9      	ldr	r1, [r7, #8]
  406ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  406caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  406cac:	4c43      	ldr	r4, [pc, #268]	; (406dbc <xTaskGenericCreate+0x188>)
  406cae:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  406cb0:	6978      	ldr	r0, [r7, #20]
  406cb2:	68f9      	ldr	r1, [r7, #12]
  406cb4:	683a      	ldr	r2, [r7, #0]
  406cb6:	4b42      	ldr	r3, [pc, #264]	; (406dc0 <xTaskGenericCreate+0x18c>)
  406cb8:	4798      	blx	r3
  406cba:	4602      	mov	r2, r0
  406cbc:	69bb      	ldr	r3, [r7, #24]
  406cbe:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  406cc0:	69bb      	ldr	r3, [r7, #24]
  406cc2:	681b      	ldr	r3, [r3, #0]
  406cc4:	f003 0307 	and.w	r3, r3, #7
  406cc8:	2b00      	cmp	r3, #0
  406cca:	d003      	beq.n	406cd4 <xTaskGenericCreate+0xa0>
  406ccc:	4b39      	ldr	r3, [pc, #228]	; (406db4 <xTaskGenericCreate+0x180>)
  406cce:	4798      	blx	r3
  406cd0:	bf00      	nop
  406cd2:	e7fd      	b.n	406cd0 <xTaskGenericCreate+0x9c>

		if( ( void * ) pxCreatedTask != NULL )
  406cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  406cd6:	2b00      	cmp	r3, #0
  406cd8:	d002      	beq.n	406ce0 <xTaskGenericCreate+0xac>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  406cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  406cdc:	69ba      	ldr	r2, [r7, #24]
  406cde:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  406ce0:	4b38      	ldr	r3, [pc, #224]	; (406dc4 <xTaskGenericCreate+0x190>)
  406ce2:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  406ce4:	4b38      	ldr	r3, [pc, #224]	; (406dc8 <xTaskGenericCreate+0x194>)
  406ce6:	681b      	ldr	r3, [r3, #0]
  406ce8:	1c5a      	adds	r2, r3, #1
  406cea:	4b37      	ldr	r3, [pc, #220]	; (406dc8 <xTaskGenericCreate+0x194>)
  406cec:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
  406cee:	4b37      	ldr	r3, [pc, #220]	; (406dcc <xTaskGenericCreate+0x198>)
  406cf0:	681b      	ldr	r3, [r3, #0]
  406cf2:	2b00      	cmp	r3, #0
  406cf4:	d109      	bne.n	406d0a <xTaskGenericCreate+0xd6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  406cf6:	4b35      	ldr	r3, [pc, #212]	; (406dcc <xTaskGenericCreate+0x198>)
  406cf8:	69ba      	ldr	r2, [r7, #24]
  406cfa:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  406cfc:	4b32      	ldr	r3, [pc, #200]	; (406dc8 <xTaskGenericCreate+0x194>)
  406cfe:	681b      	ldr	r3, [r3, #0]
  406d00:	2b01      	cmp	r3, #1
  406d02:	d10f      	bne.n	406d24 <xTaskGenericCreate+0xf0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  406d04:	4b32      	ldr	r3, [pc, #200]	; (406dd0 <xTaskGenericCreate+0x19c>)
  406d06:	4798      	blx	r3
  406d08:	e00c      	b.n	406d24 <xTaskGenericCreate+0xf0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  406d0a:	4b32      	ldr	r3, [pc, #200]	; (406dd4 <xTaskGenericCreate+0x1a0>)
  406d0c:	681b      	ldr	r3, [r3, #0]
  406d0e:	2b00      	cmp	r3, #0
  406d10:	d108      	bne.n	406d24 <xTaskGenericCreate+0xf0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  406d12:	4b2e      	ldr	r3, [pc, #184]	; (406dcc <xTaskGenericCreate+0x198>)
  406d14:	681b      	ldr	r3, [r3, #0]
  406d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406d1a:	429a      	cmp	r2, r3
  406d1c:	d802      	bhi.n	406d24 <xTaskGenericCreate+0xf0>
					{
						pxCurrentTCB = pxNewTCB;
  406d1e:	4b2b      	ldr	r3, [pc, #172]	; (406dcc <xTaskGenericCreate+0x198>)
  406d20:	69ba      	ldr	r2, [r7, #24]
  406d22:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  406d24:	69bb      	ldr	r3, [r7, #24]
  406d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406d28:	4b2b      	ldr	r3, [pc, #172]	; (406dd8 <xTaskGenericCreate+0x1a4>)
  406d2a:	681b      	ldr	r3, [r3, #0]
  406d2c:	429a      	cmp	r2, r3
  406d2e:	d903      	bls.n	406d38 <xTaskGenericCreate+0x104>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  406d30:	69bb      	ldr	r3, [r7, #24]
  406d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406d34:	4b28      	ldr	r3, [pc, #160]	; (406dd8 <xTaskGenericCreate+0x1a4>)
  406d36:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  406d38:	4b28      	ldr	r3, [pc, #160]	; (406ddc <xTaskGenericCreate+0x1a8>)
  406d3a:	681a      	ldr	r2, [r3, #0]
  406d3c:	69bb      	ldr	r3, [r7, #24]
  406d3e:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  406d40:	4b26      	ldr	r3, [pc, #152]	; (406ddc <xTaskGenericCreate+0x1a8>)
  406d42:	681b      	ldr	r3, [r3, #0]
  406d44:	1c5a      	adds	r2, r3, #1
  406d46:	4b25      	ldr	r3, [pc, #148]	; (406ddc <xTaskGenericCreate+0x1a8>)
  406d48:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  406d4a:	69bb      	ldr	r3, [r7, #24]
  406d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406d4e:	4b24      	ldr	r3, [pc, #144]	; (406de0 <xTaskGenericCreate+0x1ac>)
  406d50:	681b      	ldr	r3, [r3, #0]
  406d52:	429a      	cmp	r2, r3
  406d54:	d903      	bls.n	406d5e <xTaskGenericCreate+0x12a>
  406d56:	69bb      	ldr	r3, [r7, #24]
  406d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406d5a:	4b21      	ldr	r3, [pc, #132]	; (406de0 <xTaskGenericCreate+0x1ac>)
  406d5c:	601a      	str	r2, [r3, #0]
  406d5e:	69bb      	ldr	r3, [r7, #24]
  406d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406d62:	4613      	mov	r3, r2
  406d64:	009b      	lsls	r3, r3, #2
  406d66:	4413      	add	r3, r2
  406d68:	009b      	lsls	r3, r3, #2
  406d6a:	4a1e      	ldr	r2, [pc, #120]	; (406de4 <xTaskGenericCreate+0x1b0>)
  406d6c:	441a      	add	r2, r3
  406d6e:	69bb      	ldr	r3, [r7, #24]
  406d70:	3304      	adds	r3, #4
  406d72:	4610      	mov	r0, r2
  406d74:	4619      	mov	r1, r3
  406d76:	4b1c      	ldr	r3, [pc, #112]	; (406de8 <xTaskGenericCreate+0x1b4>)
  406d78:	4798      	blx	r3

			xReturn = pdPASS;
  406d7a:	2301      	movs	r3, #1
  406d7c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  406d7e:	4b1b      	ldr	r3, [pc, #108]	; (406dec <xTaskGenericCreate+0x1b8>)
  406d80:	4798      	blx	r3
  406d82:	e002      	b.n	406d8a <xTaskGenericCreate+0x156>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  406d84:	f04f 33ff 	mov.w	r3, #4294967295
  406d88:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  406d8a:	69fb      	ldr	r3, [r7, #28]
  406d8c:	2b01      	cmp	r3, #1
  406d8e:	d10b      	bne.n	406da8 <xTaskGenericCreate+0x174>
	{
		if( xSchedulerRunning != pdFALSE )
  406d90:	4b10      	ldr	r3, [pc, #64]	; (406dd4 <xTaskGenericCreate+0x1a0>)
  406d92:	681b      	ldr	r3, [r3, #0]
  406d94:	2b00      	cmp	r3, #0
  406d96:	d007      	beq.n	406da8 <xTaskGenericCreate+0x174>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  406d98:	4b0c      	ldr	r3, [pc, #48]	; (406dcc <xTaskGenericCreate+0x198>)
  406d9a:	681b      	ldr	r3, [r3, #0]
  406d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406da0:	429a      	cmp	r2, r3
  406da2:	d201      	bcs.n	406da8 <xTaskGenericCreate+0x174>
			{
				portYIELD_WITHIN_API();
  406da4:	4b12      	ldr	r3, [pc, #72]	; (406df0 <xTaskGenericCreate+0x1bc>)
  406da6:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  406da8:	69fb      	ldr	r3, [r7, #28]
}
  406daa:	4618      	mov	r0, r3
  406dac:	3724      	adds	r7, #36	; 0x24
  406dae:	46bd      	mov	sp, r7
  406db0:	bd90      	pop	{r4, r7, pc}
  406db2:	bf00      	nop
  406db4:	004060f9 	.word	0x004060f9
  406db8:	00407715 	.word	0x00407715
  406dbc:	00407525 	.word	0x00407525
  406dc0:	00405fd5 	.word	0x00405fd5
  406dc4:	004060b5 	.word	0x004060b5
  406dc8:	2000ae34 	.word	0x2000ae34
  406dcc:	2000ac94 	.word	0x2000ac94
  406dd0:	00407599 	.word	0x00407599
  406dd4:	2000ae44 	.word	0x2000ae44
  406dd8:	2000ae3c 	.word	0x2000ae3c
  406ddc:	2000ae58 	.word	0x2000ae58
  406de0:	2000ae40 	.word	0x2000ae40
  406de4:	2000ac98 	.word	0x2000ac98
  406de8:	00405e1d 	.word	0x00405e1d
  406dec:	004060d1 	.word	0x004060d1
  406df0:	0040609d 	.word	0x0040609d

00406df4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  406df4:	b580      	push	{r7, lr}
  406df6:	b084      	sub	sp, #16
  406df8:	af00      	add	r7, sp, #0
  406dfa:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  406dfc:	2300      	movs	r3, #0
  406dfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  406e00:	687b      	ldr	r3, [r7, #4]
  406e02:	2b00      	cmp	r3, #0
  406e04:	d012      	beq.n	406e2c <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  406e06:	4b0d      	ldr	r3, [pc, #52]	; (406e3c <vTaskDelay+0x48>)
  406e08:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  406e0a:	4b0d      	ldr	r3, [pc, #52]	; (406e40 <vTaskDelay+0x4c>)
  406e0c:	681a      	ldr	r2, [r3, #0]
  406e0e:	687b      	ldr	r3, [r7, #4]
  406e10:	4413      	add	r3, r2
  406e12:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  406e14:	4b0b      	ldr	r3, [pc, #44]	; (406e44 <vTaskDelay+0x50>)
  406e16:	681b      	ldr	r3, [r3, #0]
  406e18:	3304      	adds	r3, #4
  406e1a:	4618      	mov	r0, r3
  406e1c:	4b0a      	ldr	r3, [pc, #40]	; (406e48 <vTaskDelay+0x54>)
  406e1e:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  406e20:	68b8      	ldr	r0, [r7, #8]
  406e22:	4b0a      	ldr	r3, [pc, #40]	; (406e4c <vTaskDelay+0x58>)
  406e24:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  406e26:	4b0a      	ldr	r3, [pc, #40]	; (406e50 <vTaskDelay+0x5c>)
  406e28:	4798      	blx	r3
  406e2a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  406e2c:	68fb      	ldr	r3, [r7, #12]
  406e2e:	2b00      	cmp	r3, #0
  406e30:	d101      	bne.n	406e36 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  406e32:	4b08      	ldr	r3, [pc, #32]	; (406e54 <vTaskDelay+0x60>)
  406e34:	4798      	blx	r3
		}
	}
  406e36:	3710      	adds	r7, #16
  406e38:	46bd      	mov	sp, r7
  406e3a:	bd80      	pop	{r7, pc}
  406e3c:	00406ed9 	.word	0x00406ed9
  406e40:	2000ae38 	.word	0x2000ae38
  406e44:	2000ac94 	.word	0x2000ac94
  406e48:	00405edd 	.word	0x00405edd
  406e4c:	004076a5 	.word	0x004076a5
  406e50:	00406ef5 	.word	0x00406ef5
  406e54:	0040609d 	.word	0x0040609d

00406e58 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  406e58:	b590      	push	{r4, r7, lr}
  406e5a:	b087      	sub	sp, #28
  406e5c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  406e5e:	2300      	movs	r3, #0
  406e60:	9300      	str	r3, [sp, #0]
  406e62:	2300      	movs	r3, #0
  406e64:	9301      	str	r3, [sp, #4]
  406e66:	2300      	movs	r3, #0
  406e68:	9302      	str	r3, [sp, #8]
  406e6a:	2300      	movs	r3, #0
  406e6c:	9303      	str	r3, [sp, #12]
  406e6e:	4812      	ldr	r0, [pc, #72]	; (406eb8 <vTaskStartScheduler+0x60>)
  406e70:	4912      	ldr	r1, [pc, #72]	; (406ebc <vTaskStartScheduler+0x64>)
  406e72:	2282      	movs	r2, #130	; 0x82
  406e74:	2300      	movs	r3, #0
  406e76:	4c12      	ldr	r4, [pc, #72]	; (406ec0 <vTaskStartScheduler+0x68>)
  406e78:	47a0      	blx	r4
  406e7a:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  406e7c:	687b      	ldr	r3, [r7, #4]
  406e7e:	2b01      	cmp	r3, #1
  406e80:	d102      	bne.n	406e88 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  406e82:	4b10      	ldr	r3, [pc, #64]	; (406ec4 <vTaskStartScheduler+0x6c>)
  406e84:	4798      	blx	r3
  406e86:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  406e88:	687b      	ldr	r3, [r7, #4]
  406e8a:	2b01      	cmp	r3, #1
  406e8c:	d109      	bne.n	406ea2 <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  406e8e:	4b0e      	ldr	r3, [pc, #56]	; (406ec8 <vTaskStartScheduler+0x70>)
  406e90:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  406e92:	4b0e      	ldr	r3, [pc, #56]	; (406ecc <vTaskStartScheduler+0x74>)
  406e94:	2201      	movs	r2, #1
  406e96:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  406e98:	4b0d      	ldr	r3, [pc, #52]	; (406ed0 <vTaskStartScheduler+0x78>)
  406e9a:	2200      	movs	r2, #0
  406e9c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  406e9e:	4b0d      	ldr	r3, [pc, #52]	; (406ed4 <vTaskStartScheduler+0x7c>)
  406ea0:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  406ea2:	687b      	ldr	r3, [r7, #4]
  406ea4:	2b00      	cmp	r3, #0
  406ea6:	d103      	bne.n	406eb0 <vTaskStartScheduler+0x58>
  406ea8:	4b07      	ldr	r3, [pc, #28]	; (406ec8 <vTaskStartScheduler+0x70>)
  406eaa:	4798      	blx	r3
  406eac:	bf00      	nop
  406eae:	e7fd      	b.n	406eac <vTaskStartScheduler+0x54>
}
  406eb0:	370c      	adds	r7, #12
  406eb2:	46bd      	mov	sp, r7
  406eb4:	bd90      	pop	{r4, r7, pc}
  406eb6:	bf00      	nop
  406eb8:	004074fd 	.word	0x004074fd
  406ebc:	00413378 	.word	0x00413378
  406ec0:	00406c35 	.word	0x00406c35
  406ec4:	00407939 	.word	0x00407939
  406ec8:	004060f9 	.word	0x004060f9
  406ecc:	2000ae44 	.word	0x2000ae44
  406ed0:	2000ae38 	.word	0x2000ae38
  406ed4:	0040605d 	.word	0x0040605d

00406ed8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  406ed8:	b480      	push	{r7}
  406eda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  406edc:	4b04      	ldr	r3, [pc, #16]	; (406ef0 <vTaskSuspendAll+0x18>)
  406ede:	681b      	ldr	r3, [r3, #0]
  406ee0:	1c5a      	adds	r2, r3, #1
  406ee2:	4b03      	ldr	r3, [pc, #12]	; (406ef0 <vTaskSuspendAll+0x18>)
  406ee4:	601a      	str	r2, [r3, #0]
}
  406ee6:	46bd      	mov	sp, r7
  406ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
  406eec:	4770      	bx	lr
  406eee:	bf00      	nop
  406ef0:	2000ae48 	.word	0x2000ae48

00406ef4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  406ef4:	b590      	push	{r4, r7, lr}
  406ef6:	b083      	sub	sp, #12
  406ef8:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  406efa:	2300      	movs	r3, #0
  406efc:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  406efe:	4b36      	ldr	r3, [pc, #216]	; (406fd8 <xTaskResumeAll+0xe4>)
  406f00:	681b      	ldr	r3, [r3, #0]
  406f02:	2b00      	cmp	r3, #0
  406f04:	d103      	bne.n	406f0e <xTaskResumeAll+0x1a>
  406f06:	4b35      	ldr	r3, [pc, #212]	; (406fdc <xTaskResumeAll+0xe8>)
  406f08:	4798      	blx	r3
  406f0a:	bf00      	nop
  406f0c:	e7fd      	b.n	406f0a <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  406f0e:	4b34      	ldr	r3, [pc, #208]	; (406fe0 <xTaskResumeAll+0xec>)
  406f10:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  406f12:	4b31      	ldr	r3, [pc, #196]	; (406fd8 <xTaskResumeAll+0xe4>)
  406f14:	681b      	ldr	r3, [r3, #0]
  406f16:	1e5a      	subs	r2, r3, #1
  406f18:	4b2f      	ldr	r3, [pc, #188]	; (406fd8 <xTaskResumeAll+0xe4>)
  406f1a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  406f1c:	4b2e      	ldr	r3, [pc, #184]	; (406fd8 <xTaskResumeAll+0xe4>)
  406f1e:	681b      	ldr	r3, [r3, #0]
  406f20:	2b00      	cmp	r3, #0
  406f22:	d152      	bne.n	406fca <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  406f24:	4b2f      	ldr	r3, [pc, #188]	; (406fe4 <xTaskResumeAll+0xf0>)
  406f26:	681b      	ldr	r3, [r3, #0]
  406f28:	2b00      	cmp	r3, #0
  406f2a:	d04e      	beq.n	406fca <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  406f2c:	2300      	movs	r3, #0
  406f2e:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  406f30:	e027      	b.n	406f82 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  406f32:	4b2d      	ldr	r3, [pc, #180]	; (406fe8 <xTaskResumeAll+0xf4>)
  406f34:	68db      	ldr	r3, [r3, #12]
  406f36:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  406f38:	f104 0318 	add.w	r3, r4, #24
  406f3c:	4618      	mov	r0, r3
  406f3e:	4b2b      	ldr	r3, [pc, #172]	; (406fec <xTaskResumeAll+0xf8>)
  406f40:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  406f42:	1d23      	adds	r3, r4, #4
  406f44:	4618      	mov	r0, r3
  406f46:	4b29      	ldr	r3, [pc, #164]	; (406fec <xTaskResumeAll+0xf8>)
  406f48:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  406f4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  406f4c:	4b28      	ldr	r3, [pc, #160]	; (406ff0 <xTaskResumeAll+0xfc>)
  406f4e:	681b      	ldr	r3, [r3, #0]
  406f50:	429a      	cmp	r2, r3
  406f52:	d902      	bls.n	406f5a <xTaskResumeAll+0x66>
  406f54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  406f56:	4b26      	ldr	r3, [pc, #152]	; (406ff0 <xTaskResumeAll+0xfc>)
  406f58:	601a      	str	r2, [r3, #0]
  406f5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  406f5c:	4613      	mov	r3, r2
  406f5e:	009b      	lsls	r3, r3, #2
  406f60:	4413      	add	r3, r2
  406f62:	009b      	lsls	r3, r3, #2
  406f64:	4a23      	ldr	r2, [pc, #140]	; (406ff4 <xTaskResumeAll+0x100>)
  406f66:	441a      	add	r2, r3
  406f68:	1d23      	adds	r3, r4, #4
  406f6a:	4610      	mov	r0, r2
  406f6c:	4619      	mov	r1, r3
  406f6e:	4b22      	ldr	r3, [pc, #136]	; (406ff8 <xTaskResumeAll+0x104>)
  406f70:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  406f72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  406f74:	4b21      	ldr	r3, [pc, #132]	; (406ffc <xTaskResumeAll+0x108>)
  406f76:	681b      	ldr	r3, [r3, #0]
  406f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406f7a:	429a      	cmp	r2, r3
  406f7c:	d301      	bcc.n	406f82 <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  406f7e:	2301      	movs	r3, #1
  406f80:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  406f82:	4b19      	ldr	r3, [pc, #100]	; (406fe8 <xTaskResumeAll+0xf4>)
  406f84:	681b      	ldr	r3, [r3, #0]
  406f86:	2b00      	cmp	r3, #0
  406f88:	d1d3      	bne.n	406f32 <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  406f8a:	4b1d      	ldr	r3, [pc, #116]	; (407000 <xTaskResumeAll+0x10c>)
  406f8c:	681b      	ldr	r3, [r3, #0]
  406f8e:	2b00      	cmp	r3, #0
  406f90:	d00d      	beq.n	406fae <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  406f92:	e006      	b.n	406fa2 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  406f94:	4b1b      	ldr	r3, [pc, #108]	; (407004 <xTaskResumeAll+0x110>)
  406f96:	4798      	blx	r3
						--uxMissedTicks;
  406f98:	4b19      	ldr	r3, [pc, #100]	; (407000 <xTaskResumeAll+0x10c>)
  406f9a:	681b      	ldr	r3, [r3, #0]
  406f9c:	1e5a      	subs	r2, r3, #1
  406f9e:	4b18      	ldr	r3, [pc, #96]	; (407000 <xTaskResumeAll+0x10c>)
  406fa0:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  406fa2:	4b17      	ldr	r3, [pc, #92]	; (407000 <xTaskResumeAll+0x10c>)
  406fa4:	681b      	ldr	r3, [r3, #0]
  406fa6:	2b00      	cmp	r3, #0
  406fa8:	d1f4      	bne.n	406f94 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  406faa:	2301      	movs	r3, #1
  406fac:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  406fae:	683b      	ldr	r3, [r7, #0]
  406fb0:	2b01      	cmp	r3, #1
  406fb2:	d003      	beq.n	406fbc <xTaskResumeAll+0xc8>
  406fb4:	4b14      	ldr	r3, [pc, #80]	; (407008 <xTaskResumeAll+0x114>)
  406fb6:	681b      	ldr	r3, [r3, #0]
  406fb8:	2b01      	cmp	r3, #1
  406fba:	d106      	bne.n	406fca <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  406fbc:	2301      	movs	r3, #1
  406fbe:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  406fc0:	4b11      	ldr	r3, [pc, #68]	; (407008 <xTaskResumeAll+0x114>)
  406fc2:	2200      	movs	r2, #0
  406fc4:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  406fc6:	4b11      	ldr	r3, [pc, #68]	; (40700c <xTaskResumeAll+0x118>)
  406fc8:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  406fca:	4b11      	ldr	r3, [pc, #68]	; (407010 <xTaskResumeAll+0x11c>)
  406fcc:	4798      	blx	r3

	return xAlreadyYielded;
  406fce:	687b      	ldr	r3, [r7, #4]
}
  406fd0:	4618      	mov	r0, r3
  406fd2:	370c      	adds	r7, #12
  406fd4:	46bd      	mov	sp, r7
  406fd6:	bd90      	pop	{r4, r7, pc}
  406fd8:	2000ae48 	.word	0x2000ae48
  406fdc:	004060f9 	.word	0x004060f9
  406fe0:	004060b5 	.word	0x004060b5
  406fe4:	2000ae34 	.word	0x2000ae34
  406fe8:	2000adf4 	.word	0x2000adf4
  406fec:	00405edd 	.word	0x00405edd
  406ff0:	2000ae40 	.word	0x2000ae40
  406ff4:	2000ac98 	.word	0x2000ac98
  406ff8:	00405e1d 	.word	0x00405e1d
  406ffc:	2000ac94 	.word	0x2000ac94
  407000:	2000ae4c 	.word	0x2000ae4c
  407004:	00407071 	.word	0x00407071
  407008:	2000ae50 	.word	0x2000ae50
  40700c:	0040609d 	.word	0x0040609d
  407010:	004060d1 	.word	0x004060d1

00407014 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  407014:	b580      	push	{r7, lr}
  407016:	b082      	sub	sp, #8
  407018:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  40701a:	4b06      	ldr	r3, [pc, #24]	; (407034 <xTaskGetTickCount+0x20>)
  40701c:	4798      	blx	r3
	{
		xTicks = xTickCount;
  40701e:	4b06      	ldr	r3, [pc, #24]	; (407038 <xTaskGetTickCount+0x24>)
  407020:	681b      	ldr	r3, [r3, #0]
  407022:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  407024:	4b05      	ldr	r3, [pc, #20]	; (40703c <xTaskGetTickCount+0x28>)
  407026:	4798      	blx	r3

	return xTicks;
  407028:	687b      	ldr	r3, [r7, #4]
}
  40702a:	4618      	mov	r0, r3
  40702c:	3708      	adds	r7, #8
  40702e:	46bd      	mov	sp, r7
  407030:	bd80      	pop	{r7, pc}
  407032:	bf00      	nop
  407034:	004060b5 	.word	0x004060b5
  407038:	2000ae38 	.word	0x2000ae38
  40703c:	004060d1 	.word	0x004060d1

00407040 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
  407040:	b580      	push	{r7, lr}
  407042:	b082      	sub	sp, #8
  407044:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  407046:	4b07      	ldr	r3, [pc, #28]	; (407064 <xTaskGetTickCountFromISR+0x24>)
  407048:	4798      	blx	r3
  40704a:	6078      	str	r0, [r7, #4]
	xReturn = xTickCount;
  40704c:	4b06      	ldr	r3, [pc, #24]	; (407068 <xTaskGetTickCountFromISR+0x28>)
  40704e:	681b      	ldr	r3, [r3, #0]
  407050:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  407052:	6878      	ldr	r0, [r7, #4]
  407054:	4b05      	ldr	r3, [pc, #20]	; (40706c <xTaskGetTickCountFromISR+0x2c>)
  407056:	4798      	blx	r3

	return xReturn;
  407058:	683b      	ldr	r3, [r7, #0]
}
  40705a:	4618      	mov	r0, r3
  40705c:	3708      	adds	r7, #8
  40705e:	46bd      	mov	sp, r7
  407060:	bd80      	pop	{r7, pc}
  407062:	bf00      	nop
  407064:	004060f9 	.word	0x004060f9
  407068:	2000ae38 	.word	0x2000ae38
  40706c:	0040610d 	.word	0x0040610d

00407070 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  407070:	b580      	push	{r7, lr}
  407072:	b084      	sub	sp, #16
  407074:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  407076:	4b44      	ldr	r3, [pc, #272]	; (407188 <vTaskIncrementTick+0x118>)
  407078:	681b      	ldr	r3, [r3, #0]
  40707a:	2b00      	cmp	r3, #0
  40707c:	d17c      	bne.n	407178 <vTaskIncrementTick+0x108>
	{
		++xTickCount;
  40707e:	4b43      	ldr	r3, [pc, #268]	; (40718c <vTaskIncrementTick+0x11c>)
  407080:	681b      	ldr	r3, [r3, #0]
  407082:	1c5a      	adds	r2, r3, #1
  407084:	4b41      	ldr	r3, [pc, #260]	; (40718c <vTaskIncrementTick+0x11c>)
  407086:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  407088:	4b40      	ldr	r3, [pc, #256]	; (40718c <vTaskIncrementTick+0x11c>)
  40708a:	681b      	ldr	r3, [r3, #0]
  40708c:	2b00      	cmp	r3, #0
  40708e:	d12a      	bne.n	4070e6 <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  407090:	4b3f      	ldr	r3, [pc, #252]	; (407190 <vTaskIncrementTick+0x120>)
  407092:	681b      	ldr	r3, [r3, #0]
  407094:	681b      	ldr	r3, [r3, #0]
  407096:	2b00      	cmp	r3, #0
  407098:	d003      	beq.n	4070a2 <vTaskIncrementTick+0x32>
  40709a:	4b3e      	ldr	r3, [pc, #248]	; (407194 <vTaskIncrementTick+0x124>)
  40709c:	4798      	blx	r3
  40709e:	bf00      	nop
  4070a0:	e7fd      	b.n	40709e <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  4070a2:	4b3b      	ldr	r3, [pc, #236]	; (407190 <vTaskIncrementTick+0x120>)
  4070a4:	681b      	ldr	r3, [r3, #0]
  4070a6:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  4070a8:	4b3b      	ldr	r3, [pc, #236]	; (407198 <vTaskIncrementTick+0x128>)
  4070aa:	681a      	ldr	r2, [r3, #0]
  4070ac:	4b38      	ldr	r3, [pc, #224]	; (407190 <vTaskIncrementTick+0x120>)
  4070ae:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  4070b0:	4b39      	ldr	r3, [pc, #228]	; (407198 <vTaskIncrementTick+0x128>)
  4070b2:	68fa      	ldr	r2, [r7, #12]
  4070b4:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
  4070b6:	4b39      	ldr	r3, [pc, #228]	; (40719c <vTaskIncrementTick+0x12c>)
  4070b8:	681b      	ldr	r3, [r3, #0]
  4070ba:	1c5a      	adds	r2, r3, #1
  4070bc:	4b37      	ldr	r3, [pc, #220]	; (40719c <vTaskIncrementTick+0x12c>)
  4070be:	601a      	str	r2, [r3, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4070c0:	4b33      	ldr	r3, [pc, #204]	; (407190 <vTaskIncrementTick+0x120>)
  4070c2:	681b      	ldr	r3, [r3, #0]
  4070c4:	681b      	ldr	r3, [r3, #0]
  4070c6:	2b00      	cmp	r3, #0
  4070c8:	d104      	bne.n	4070d4 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  4070ca:	4b35      	ldr	r3, [pc, #212]	; (4071a0 <vTaskIncrementTick+0x130>)
  4070cc:	f04f 32ff 	mov.w	r2, #4294967295
  4070d0:	601a      	str	r2, [r3, #0]
  4070d2:	e008      	b.n	4070e6 <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4070d4:	4b2e      	ldr	r3, [pc, #184]	; (407190 <vTaskIncrementTick+0x120>)
  4070d6:	681b      	ldr	r3, [r3, #0]
  4070d8:	68db      	ldr	r3, [r3, #12]
  4070da:	68db      	ldr	r3, [r3, #12]
  4070dc:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4070de:	68bb      	ldr	r3, [r7, #8]
  4070e0:	685a      	ldr	r2, [r3, #4]
  4070e2:	4b2f      	ldr	r3, [pc, #188]	; (4071a0 <vTaskIncrementTick+0x130>)
  4070e4:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  4070e6:	4b29      	ldr	r3, [pc, #164]	; (40718c <vTaskIncrementTick+0x11c>)
  4070e8:	681a      	ldr	r2, [r3, #0]
  4070ea:	4b2d      	ldr	r3, [pc, #180]	; (4071a0 <vTaskIncrementTick+0x130>)
  4070ec:	681b      	ldr	r3, [r3, #0]
  4070ee:	429a      	cmp	r2, r3
  4070f0:	d341      	bcc.n	407176 <vTaskIncrementTick+0x106>
  4070f2:	4b27      	ldr	r3, [pc, #156]	; (407190 <vTaskIncrementTick+0x120>)
  4070f4:	681b      	ldr	r3, [r3, #0]
  4070f6:	681b      	ldr	r3, [r3, #0]
  4070f8:	2b00      	cmp	r3, #0
  4070fa:	d104      	bne.n	407106 <vTaskIncrementTick+0x96>
  4070fc:	4b28      	ldr	r3, [pc, #160]	; (4071a0 <vTaskIncrementTick+0x130>)
  4070fe:	f04f 32ff 	mov.w	r2, #4294967295
  407102:	601a      	str	r2, [r3, #0]
  407104:	e037      	b.n	407176 <vTaskIncrementTick+0x106>
  407106:	4b22      	ldr	r3, [pc, #136]	; (407190 <vTaskIncrementTick+0x120>)
  407108:	681b      	ldr	r3, [r3, #0]
  40710a:	68db      	ldr	r3, [r3, #12]
  40710c:	68db      	ldr	r3, [r3, #12]
  40710e:	60bb      	str	r3, [r7, #8]
  407110:	68bb      	ldr	r3, [r7, #8]
  407112:	685b      	ldr	r3, [r3, #4]
  407114:	607b      	str	r3, [r7, #4]
  407116:	4b1d      	ldr	r3, [pc, #116]	; (40718c <vTaskIncrementTick+0x11c>)
  407118:	681a      	ldr	r2, [r3, #0]
  40711a:	687b      	ldr	r3, [r7, #4]
  40711c:	429a      	cmp	r2, r3
  40711e:	d203      	bcs.n	407128 <vTaskIncrementTick+0xb8>
  407120:	4b1f      	ldr	r3, [pc, #124]	; (4071a0 <vTaskIncrementTick+0x130>)
  407122:	687a      	ldr	r2, [r7, #4]
  407124:	601a      	str	r2, [r3, #0]
  407126:	e026      	b.n	407176 <vTaskIncrementTick+0x106>
  407128:	68bb      	ldr	r3, [r7, #8]
  40712a:	3304      	adds	r3, #4
  40712c:	4618      	mov	r0, r3
  40712e:	4b1d      	ldr	r3, [pc, #116]	; (4071a4 <vTaskIncrementTick+0x134>)
  407130:	4798      	blx	r3
  407132:	68bb      	ldr	r3, [r7, #8]
  407134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407136:	2b00      	cmp	r3, #0
  407138:	d004      	beq.n	407144 <vTaskIncrementTick+0xd4>
  40713a:	68bb      	ldr	r3, [r7, #8]
  40713c:	3318      	adds	r3, #24
  40713e:	4618      	mov	r0, r3
  407140:	4b18      	ldr	r3, [pc, #96]	; (4071a4 <vTaskIncrementTick+0x134>)
  407142:	4798      	blx	r3
  407144:	68bb      	ldr	r3, [r7, #8]
  407146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407148:	4b17      	ldr	r3, [pc, #92]	; (4071a8 <vTaskIncrementTick+0x138>)
  40714a:	681b      	ldr	r3, [r3, #0]
  40714c:	429a      	cmp	r2, r3
  40714e:	d903      	bls.n	407158 <vTaskIncrementTick+0xe8>
  407150:	68bb      	ldr	r3, [r7, #8]
  407152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407154:	4b14      	ldr	r3, [pc, #80]	; (4071a8 <vTaskIncrementTick+0x138>)
  407156:	601a      	str	r2, [r3, #0]
  407158:	68bb      	ldr	r3, [r7, #8]
  40715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40715c:	4613      	mov	r3, r2
  40715e:	009b      	lsls	r3, r3, #2
  407160:	4413      	add	r3, r2
  407162:	009b      	lsls	r3, r3, #2
  407164:	4a11      	ldr	r2, [pc, #68]	; (4071ac <vTaskIncrementTick+0x13c>)
  407166:	441a      	add	r2, r3
  407168:	68bb      	ldr	r3, [r7, #8]
  40716a:	3304      	adds	r3, #4
  40716c:	4610      	mov	r0, r2
  40716e:	4619      	mov	r1, r3
  407170:	4b0f      	ldr	r3, [pc, #60]	; (4071b0 <vTaskIncrementTick+0x140>)
  407172:	4798      	blx	r3
  407174:	e7bd      	b.n	4070f2 <vTaskIncrementTick+0x82>
  407176:	e004      	b.n	407182 <vTaskIncrementTick+0x112>
	}
	else
	{
		++uxMissedTicks;
  407178:	4b0e      	ldr	r3, [pc, #56]	; (4071b4 <vTaskIncrementTick+0x144>)
  40717a:	681b      	ldr	r3, [r3, #0]
  40717c:	1c5a      	adds	r2, r3, #1
  40717e:	4b0d      	ldr	r3, [pc, #52]	; (4071b4 <vTaskIncrementTick+0x144>)
  407180:	601a      	str	r2, [r3, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  407182:	3710      	adds	r7, #16
  407184:	46bd      	mov	sp, r7
  407186:	bd80      	pop	{r7, pc}
  407188:	2000ae48 	.word	0x2000ae48
  40718c:	2000ae38 	.word	0x2000ae38
  407190:	2000adec 	.word	0x2000adec
  407194:	004060f9 	.word	0x004060f9
  407198:	2000adf0 	.word	0x2000adf0
  40719c:	2000ae54 	.word	0x2000ae54
  4071a0:	20000208 	.word	0x20000208
  4071a4:	00405edd 	.word	0x00405edd
  4071a8:	2000ae40 	.word	0x2000ae40
  4071ac:	2000ac98 	.word	0x2000ac98
  4071b0:	00405e1d 	.word	0x00405e1d
  4071b4:	2000ae4c 	.word	0x2000ae4c

004071b8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  4071b8:	b580      	push	{r7, lr}
  4071ba:	b082      	sub	sp, #8
  4071bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  4071be:	4b21      	ldr	r3, [pc, #132]	; (407244 <vTaskSwitchContext+0x8c>)
  4071c0:	681b      	ldr	r3, [r3, #0]
  4071c2:	2b00      	cmp	r3, #0
  4071c4:	d003      	beq.n	4071ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  4071c6:	4b20      	ldr	r3, [pc, #128]	; (407248 <vTaskSwitchContext+0x90>)
  4071c8:	2201      	movs	r2, #1
  4071ca:	601a      	str	r2, [r3, #0]
  4071cc:	e036      	b.n	40723c <vTaskSwitchContext+0x84>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  4071ce:	e00c      	b.n	4071ea <vTaskSwitchContext+0x32>
  4071d0:	4b1e      	ldr	r3, [pc, #120]	; (40724c <vTaskSwitchContext+0x94>)
  4071d2:	681b      	ldr	r3, [r3, #0]
  4071d4:	2b00      	cmp	r3, #0
  4071d6:	d103      	bne.n	4071e0 <vTaskSwitchContext+0x28>
  4071d8:	4b1d      	ldr	r3, [pc, #116]	; (407250 <vTaskSwitchContext+0x98>)
  4071da:	4798      	blx	r3
  4071dc:	bf00      	nop
  4071de:	e7fd      	b.n	4071dc <vTaskSwitchContext+0x24>
  4071e0:	4b1a      	ldr	r3, [pc, #104]	; (40724c <vTaskSwitchContext+0x94>)
  4071e2:	681b      	ldr	r3, [r3, #0]
  4071e4:	1e5a      	subs	r2, r3, #1
  4071e6:	4b19      	ldr	r3, [pc, #100]	; (40724c <vTaskSwitchContext+0x94>)
  4071e8:	601a      	str	r2, [r3, #0]
  4071ea:	4b18      	ldr	r3, [pc, #96]	; (40724c <vTaskSwitchContext+0x94>)
  4071ec:	681a      	ldr	r2, [r3, #0]
  4071ee:	4919      	ldr	r1, [pc, #100]	; (407254 <vTaskSwitchContext+0x9c>)
  4071f0:	4613      	mov	r3, r2
  4071f2:	009b      	lsls	r3, r3, #2
  4071f4:	4413      	add	r3, r2
  4071f6:	009b      	lsls	r3, r3, #2
  4071f8:	440b      	add	r3, r1
  4071fa:	681b      	ldr	r3, [r3, #0]
  4071fc:	2b00      	cmp	r3, #0
  4071fe:	d0e7      	beq.n	4071d0 <vTaskSwitchContext+0x18>
  407200:	4b12      	ldr	r3, [pc, #72]	; (40724c <vTaskSwitchContext+0x94>)
  407202:	681a      	ldr	r2, [r3, #0]
  407204:	4613      	mov	r3, r2
  407206:	009b      	lsls	r3, r3, #2
  407208:	4413      	add	r3, r2
  40720a:	009b      	lsls	r3, r3, #2
  40720c:	4a11      	ldr	r2, [pc, #68]	; (407254 <vTaskSwitchContext+0x9c>)
  40720e:	4413      	add	r3, r2
  407210:	607b      	str	r3, [r7, #4]
  407212:	687b      	ldr	r3, [r7, #4]
  407214:	685b      	ldr	r3, [r3, #4]
  407216:	685a      	ldr	r2, [r3, #4]
  407218:	687b      	ldr	r3, [r7, #4]
  40721a:	605a      	str	r2, [r3, #4]
  40721c:	687b      	ldr	r3, [r7, #4]
  40721e:	685a      	ldr	r2, [r3, #4]
  407220:	687b      	ldr	r3, [r7, #4]
  407222:	3308      	adds	r3, #8
  407224:	429a      	cmp	r2, r3
  407226:	d104      	bne.n	407232 <vTaskSwitchContext+0x7a>
  407228:	687b      	ldr	r3, [r7, #4]
  40722a:	685b      	ldr	r3, [r3, #4]
  40722c:	685a      	ldr	r2, [r3, #4]
  40722e:	687b      	ldr	r3, [r7, #4]
  407230:	605a      	str	r2, [r3, #4]
  407232:	687b      	ldr	r3, [r7, #4]
  407234:	685b      	ldr	r3, [r3, #4]
  407236:	68da      	ldr	r2, [r3, #12]
  407238:	4b07      	ldr	r3, [pc, #28]	; (407258 <vTaskSwitchContext+0xa0>)
  40723a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
  40723c:	3708      	adds	r7, #8
  40723e:	46bd      	mov	sp, r7
  407240:	bd80      	pop	{r7, pc}
  407242:	bf00      	nop
  407244:	2000ae48 	.word	0x2000ae48
  407248:	2000ae50 	.word	0x2000ae50
  40724c:	2000ae40 	.word	0x2000ae40
  407250:	004060f9 	.word	0x004060f9
  407254:	2000ac98 	.word	0x2000ac98
  407258:	2000ac94 	.word	0x2000ac94

0040725c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  40725c:	b580      	push	{r7, lr}
  40725e:	b084      	sub	sp, #16
  407260:	af00      	add	r7, sp, #0
  407262:	6078      	str	r0, [r7, #4]
  407264:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  407266:	687b      	ldr	r3, [r7, #4]
  407268:	2b00      	cmp	r3, #0
  40726a:	d103      	bne.n	407274 <vTaskPlaceOnEventList+0x18>
  40726c:	4b13      	ldr	r3, [pc, #76]	; (4072bc <vTaskPlaceOnEventList+0x60>)
  40726e:	4798      	blx	r3
  407270:	bf00      	nop
  407272:	e7fd      	b.n	407270 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  407274:	4b12      	ldr	r3, [pc, #72]	; (4072c0 <vTaskPlaceOnEventList+0x64>)
  407276:	681b      	ldr	r3, [r3, #0]
  407278:	3318      	adds	r3, #24
  40727a:	6878      	ldr	r0, [r7, #4]
  40727c:	4619      	mov	r1, r3
  40727e:	4b11      	ldr	r3, [pc, #68]	; (4072c4 <vTaskPlaceOnEventList+0x68>)
  407280:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  407282:	4b0f      	ldr	r3, [pc, #60]	; (4072c0 <vTaskPlaceOnEventList+0x64>)
  407284:	681b      	ldr	r3, [r3, #0]
  407286:	3304      	adds	r3, #4
  407288:	4618      	mov	r0, r3
  40728a:	4b0f      	ldr	r3, [pc, #60]	; (4072c8 <vTaskPlaceOnEventList+0x6c>)
  40728c:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  40728e:	683b      	ldr	r3, [r7, #0]
  407290:	f1b3 3fff 	cmp.w	r3, #4294967295
  407294:	d107      	bne.n	4072a6 <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  407296:	4b0a      	ldr	r3, [pc, #40]	; (4072c0 <vTaskPlaceOnEventList+0x64>)
  407298:	681b      	ldr	r3, [r3, #0]
  40729a:	3304      	adds	r3, #4
  40729c:	480b      	ldr	r0, [pc, #44]	; (4072cc <vTaskPlaceOnEventList+0x70>)
  40729e:	4619      	mov	r1, r3
  4072a0:	4b0b      	ldr	r3, [pc, #44]	; (4072d0 <vTaskPlaceOnEventList+0x74>)
  4072a2:	4798      	blx	r3
  4072a4:	e007      	b.n	4072b6 <vTaskPlaceOnEventList+0x5a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  4072a6:	4b0b      	ldr	r3, [pc, #44]	; (4072d4 <vTaskPlaceOnEventList+0x78>)
  4072a8:	681a      	ldr	r2, [r3, #0]
  4072aa:	683b      	ldr	r3, [r7, #0]
  4072ac:	4413      	add	r3, r2
  4072ae:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4072b0:	68f8      	ldr	r0, [r7, #12]
  4072b2:	4b09      	ldr	r3, [pc, #36]	; (4072d8 <vTaskPlaceOnEventList+0x7c>)
  4072b4:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  4072b6:	3710      	adds	r7, #16
  4072b8:	46bd      	mov	sp, r7
  4072ba:	bd80      	pop	{r7, pc}
  4072bc:	004060f9 	.word	0x004060f9
  4072c0:	2000ac94 	.word	0x2000ac94
  4072c4:	00405e6d 	.word	0x00405e6d
  4072c8:	00405edd 	.word	0x00405edd
  4072cc:	2000ae20 	.word	0x2000ae20
  4072d0:	00405e1d 	.word	0x00405e1d
  4072d4:	2000ae38 	.word	0x2000ae38
  4072d8:	004076a5 	.word	0x004076a5

004072dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  4072dc:	b580      	push	{r7, lr}
  4072de:	b084      	sub	sp, #16
  4072e0:	af00      	add	r7, sp, #0
  4072e2:	6078      	str	r0, [r7, #4]
  4072e4:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  4072e6:	687b      	ldr	r3, [r7, #4]
  4072e8:	2b00      	cmp	r3, #0
  4072ea:	d103      	bne.n	4072f4 <vTaskPlaceOnEventListRestricted+0x18>
  4072ec:	4b0d      	ldr	r3, [pc, #52]	; (407324 <vTaskPlaceOnEventListRestricted+0x48>)
  4072ee:	4798      	blx	r3
  4072f0:	bf00      	nop
  4072f2:	e7fd      	b.n	4072f0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4072f4:	4b0c      	ldr	r3, [pc, #48]	; (407328 <vTaskPlaceOnEventListRestricted+0x4c>)
  4072f6:	681b      	ldr	r3, [r3, #0]
  4072f8:	3318      	adds	r3, #24
  4072fa:	6878      	ldr	r0, [r7, #4]
  4072fc:	4619      	mov	r1, r3
  4072fe:	4b0b      	ldr	r3, [pc, #44]	; (40732c <vTaskPlaceOnEventListRestricted+0x50>)
  407300:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  407302:	4b09      	ldr	r3, [pc, #36]	; (407328 <vTaskPlaceOnEventListRestricted+0x4c>)
  407304:	681b      	ldr	r3, [r3, #0]
  407306:	3304      	adds	r3, #4
  407308:	4618      	mov	r0, r3
  40730a:	4b09      	ldr	r3, [pc, #36]	; (407330 <vTaskPlaceOnEventListRestricted+0x54>)
  40730c:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  40730e:	4b09      	ldr	r3, [pc, #36]	; (407334 <vTaskPlaceOnEventListRestricted+0x58>)
  407310:	681a      	ldr	r2, [r3, #0]
  407312:	683b      	ldr	r3, [r7, #0]
  407314:	4413      	add	r3, r2
  407316:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  407318:	68f8      	ldr	r0, [r7, #12]
  40731a:	4b07      	ldr	r3, [pc, #28]	; (407338 <vTaskPlaceOnEventListRestricted+0x5c>)
  40731c:	4798      	blx	r3
	}
  40731e:	3710      	adds	r7, #16
  407320:	46bd      	mov	sp, r7
  407322:	bd80      	pop	{r7, pc}
  407324:	004060f9 	.word	0x004060f9
  407328:	2000ac94 	.word	0x2000ac94
  40732c:	00405e1d 	.word	0x00405e1d
  407330:	00405edd 	.word	0x00405edd
  407334:	2000ae38 	.word	0x2000ae38
  407338:	004076a5 	.word	0x004076a5

0040733c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  40733c:	b580      	push	{r7, lr}
  40733e:	b084      	sub	sp, #16
  407340:	af00      	add	r7, sp, #0
  407342:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  407344:	687b      	ldr	r3, [r7, #4]
  407346:	68db      	ldr	r3, [r3, #12]
  407348:	68db      	ldr	r3, [r3, #12]
  40734a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  40734c:	68bb      	ldr	r3, [r7, #8]
  40734e:	2b00      	cmp	r3, #0
  407350:	d103      	bne.n	40735a <xTaskRemoveFromEventList+0x1e>
  407352:	4b21      	ldr	r3, [pc, #132]	; (4073d8 <xTaskRemoveFromEventList+0x9c>)
  407354:	4798      	blx	r3
  407356:	bf00      	nop
  407358:	e7fd      	b.n	407356 <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40735a:	68bb      	ldr	r3, [r7, #8]
  40735c:	3318      	adds	r3, #24
  40735e:	4618      	mov	r0, r3
  407360:	4b1e      	ldr	r3, [pc, #120]	; (4073dc <xTaskRemoveFromEventList+0xa0>)
  407362:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  407364:	4b1e      	ldr	r3, [pc, #120]	; (4073e0 <xTaskRemoveFromEventList+0xa4>)
  407366:	681b      	ldr	r3, [r3, #0]
  407368:	2b00      	cmp	r3, #0
  40736a:	d11d      	bne.n	4073a8 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40736c:	68bb      	ldr	r3, [r7, #8]
  40736e:	3304      	adds	r3, #4
  407370:	4618      	mov	r0, r3
  407372:	4b1a      	ldr	r3, [pc, #104]	; (4073dc <xTaskRemoveFromEventList+0xa0>)
  407374:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  407376:	68bb      	ldr	r3, [r7, #8]
  407378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40737a:	4b1a      	ldr	r3, [pc, #104]	; (4073e4 <xTaskRemoveFromEventList+0xa8>)
  40737c:	681b      	ldr	r3, [r3, #0]
  40737e:	429a      	cmp	r2, r3
  407380:	d903      	bls.n	40738a <xTaskRemoveFromEventList+0x4e>
  407382:	68bb      	ldr	r3, [r7, #8]
  407384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407386:	4b17      	ldr	r3, [pc, #92]	; (4073e4 <xTaskRemoveFromEventList+0xa8>)
  407388:	601a      	str	r2, [r3, #0]
  40738a:	68bb      	ldr	r3, [r7, #8]
  40738c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40738e:	4613      	mov	r3, r2
  407390:	009b      	lsls	r3, r3, #2
  407392:	4413      	add	r3, r2
  407394:	009b      	lsls	r3, r3, #2
  407396:	4a14      	ldr	r2, [pc, #80]	; (4073e8 <xTaskRemoveFromEventList+0xac>)
  407398:	441a      	add	r2, r3
  40739a:	68bb      	ldr	r3, [r7, #8]
  40739c:	3304      	adds	r3, #4
  40739e:	4610      	mov	r0, r2
  4073a0:	4619      	mov	r1, r3
  4073a2:	4b12      	ldr	r3, [pc, #72]	; (4073ec <xTaskRemoveFromEventList+0xb0>)
  4073a4:	4798      	blx	r3
  4073a6:	e005      	b.n	4073b4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4073a8:	68bb      	ldr	r3, [r7, #8]
  4073aa:	3318      	adds	r3, #24
  4073ac:	4810      	ldr	r0, [pc, #64]	; (4073f0 <xTaskRemoveFromEventList+0xb4>)
  4073ae:	4619      	mov	r1, r3
  4073b0:	4b0e      	ldr	r3, [pc, #56]	; (4073ec <xTaskRemoveFromEventList+0xb0>)
  4073b2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4073b4:	68bb      	ldr	r3, [r7, #8]
  4073b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4073b8:	4b0e      	ldr	r3, [pc, #56]	; (4073f4 <xTaskRemoveFromEventList+0xb8>)
  4073ba:	681b      	ldr	r3, [r3, #0]
  4073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4073be:	429a      	cmp	r2, r3
  4073c0:	d302      	bcc.n	4073c8 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  4073c2:	2301      	movs	r3, #1
  4073c4:	60fb      	str	r3, [r7, #12]
  4073c6:	e001      	b.n	4073cc <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  4073c8:	2300      	movs	r3, #0
  4073ca:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  4073cc:	68fb      	ldr	r3, [r7, #12]
}
  4073ce:	4618      	mov	r0, r3
  4073d0:	3710      	adds	r7, #16
  4073d2:	46bd      	mov	sp, r7
  4073d4:	bd80      	pop	{r7, pc}
  4073d6:	bf00      	nop
  4073d8:	004060f9 	.word	0x004060f9
  4073dc:	00405edd 	.word	0x00405edd
  4073e0:	2000ae48 	.word	0x2000ae48
  4073e4:	2000ae40 	.word	0x2000ae40
  4073e8:	2000ac98 	.word	0x2000ac98
  4073ec:	00405e1d 	.word	0x00405e1d
  4073f0:	2000adf4 	.word	0x2000adf4
  4073f4:	2000ac94 	.word	0x2000ac94

004073f8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  4073f8:	b580      	push	{r7, lr}
  4073fa:	b082      	sub	sp, #8
  4073fc:	af00      	add	r7, sp, #0
  4073fe:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  407400:	687b      	ldr	r3, [r7, #4]
  407402:	2b00      	cmp	r3, #0
  407404:	d103      	bne.n	40740e <vTaskSetTimeOutState+0x16>
  407406:	4b07      	ldr	r3, [pc, #28]	; (407424 <vTaskSetTimeOutState+0x2c>)
  407408:	4798      	blx	r3
  40740a:	bf00      	nop
  40740c:	e7fd      	b.n	40740a <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40740e:	4b06      	ldr	r3, [pc, #24]	; (407428 <vTaskSetTimeOutState+0x30>)
  407410:	681a      	ldr	r2, [r3, #0]
  407412:	687b      	ldr	r3, [r7, #4]
  407414:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  407416:	4b05      	ldr	r3, [pc, #20]	; (40742c <vTaskSetTimeOutState+0x34>)
  407418:	681a      	ldr	r2, [r3, #0]
  40741a:	687b      	ldr	r3, [r7, #4]
  40741c:	605a      	str	r2, [r3, #4]
}
  40741e:	3708      	adds	r7, #8
  407420:	46bd      	mov	sp, r7
  407422:	bd80      	pop	{r7, pc}
  407424:	004060f9 	.word	0x004060f9
  407428:	2000ae54 	.word	0x2000ae54
  40742c:	2000ae38 	.word	0x2000ae38

00407430 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  407430:	b580      	push	{r7, lr}
  407432:	b084      	sub	sp, #16
  407434:	af00      	add	r7, sp, #0
  407436:	6078      	str	r0, [r7, #4]
  407438:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  40743a:	687b      	ldr	r3, [r7, #4]
  40743c:	2b00      	cmp	r3, #0
  40743e:	d103      	bne.n	407448 <xTaskCheckForTimeOut+0x18>
  407440:	4b22      	ldr	r3, [pc, #136]	; (4074cc <xTaskCheckForTimeOut+0x9c>)
  407442:	4798      	blx	r3
  407444:	bf00      	nop
  407446:	e7fd      	b.n	407444 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  407448:	683b      	ldr	r3, [r7, #0]
  40744a:	2b00      	cmp	r3, #0
  40744c:	d103      	bne.n	407456 <xTaskCheckForTimeOut+0x26>
  40744e:	4b1f      	ldr	r3, [pc, #124]	; (4074cc <xTaskCheckForTimeOut+0x9c>)
  407450:	4798      	blx	r3
  407452:	bf00      	nop
  407454:	e7fd      	b.n	407452 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  407456:	4b1e      	ldr	r3, [pc, #120]	; (4074d0 <xTaskCheckForTimeOut+0xa0>)
  407458:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  40745a:	683b      	ldr	r3, [r7, #0]
  40745c:	681b      	ldr	r3, [r3, #0]
  40745e:	f1b3 3fff 	cmp.w	r3, #4294967295
  407462:	d102      	bne.n	40746a <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  407464:	2300      	movs	r3, #0
  407466:	60fb      	str	r3, [r7, #12]
  407468:	e029      	b.n	4074be <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  40746a:	687b      	ldr	r3, [r7, #4]
  40746c:	681a      	ldr	r2, [r3, #0]
  40746e:	4b19      	ldr	r3, [pc, #100]	; (4074d4 <xTaskCheckForTimeOut+0xa4>)
  407470:	681b      	ldr	r3, [r3, #0]
  407472:	429a      	cmp	r2, r3
  407474:	d008      	beq.n	407488 <xTaskCheckForTimeOut+0x58>
  407476:	687b      	ldr	r3, [r7, #4]
  407478:	685a      	ldr	r2, [r3, #4]
  40747a:	4b17      	ldr	r3, [pc, #92]	; (4074d8 <xTaskCheckForTimeOut+0xa8>)
  40747c:	681b      	ldr	r3, [r3, #0]
  40747e:	429a      	cmp	r2, r3
  407480:	d802      	bhi.n	407488 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  407482:	2301      	movs	r3, #1
  407484:	60fb      	str	r3, [r7, #12]
  407486:	e01a      	b.n	4074be <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  407488:	4b13      	ldr	r3, [pc, #76]	; (4074d8 <xTaskCheckForTimeOut+0xa8>)
  40748a:	681a      	ldr	r2, [r3, #0]
  40748c:	687b      	ldr	r3, [r7, #4]
  40748e:	685b      	ldr	r3, [r3, #4]
  407490:	1ad2      	subs	r2, r2, r3
  407492:	683b      	ldr	r3, [r7, #0]
  407494:	681b      	ldr	r3, [r3, #0]
  407496:	429a      	cmp	r2, r3
  407498:	d20f      	bcs.n	4074ba <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  40749a:	683b      	ldr	r3, [r7, #0]
  40749c:	681a      	ldr	r2, [r3, #0]
  40749e:	687b      	ldr	r3, [r7, #4]
  4074a0:	6859      	ldr	r1, [r3, #4]
  4074a2:	4b0d      	ldr	r3, [pc, #52]	; (4074d8 <xTaskCheckForTimeOut+0xa8>)
  4074a4:	681b      	ldr	r3, [r3, #0]
  4074a6:	1acb      	subs	r3, r1, r3
  4074a8:	441a      	add	r2, r3
  4074aa:	683b      	ldr	r3, [r7, #0]
  4074ac:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4074ae:	6878      	ldr	r0, [r7, #4]
  4074b0:	4b0a      	ldr	r3, [pc, #40]	; (4074dc <xTaskCheckForTimeOut+0xac>)
  4074b2:	4798      	blx	r3
			xReturn = pdFALSE;
  4074b4:	2300      	movs	r3, #0
  4074b6:	60fb      	str	r3, [r7, #12]
  4074b8:	e001      	b.n	4074be <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  4074ba:	2301      	movs	r3, #1
  4074bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  4074be:	4b08      	ldr	r3, [pc, #32]	; (4074e0 <xTaskCheckForTimeOut+0xb0>)
  4074c0:	4798      	blx	r3

	return xReturn;
  4074c2:	68fb      	ldr	r3, [r7, #12]
}
  4074c4:	4618      	mov	r0, r3
  4074c6:	3710      	adds	r7, #16
  4074c8:	46bd      	mov	sp, r7
  4074ca:	bd80      	pop	{r7, pc}
  4074cc:	004060f9 	.word	0x004060f9
  4074d0:	004060b5 	.word	0x004060b5
  4074d4:	2000ae54 	.word	0x2000ae54
  4074d8:	2000ae38 	.word	0x2000ae38
  4074dc:	004073f9 	.word	0x004073f9
  4074e0:	004060d1 	.word	0x004060d1

004074e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  4074e4:	b480      	push	{r7}
  4074e6:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  4074e8:	4b03      	ldr	r3, [pc, #12]	; (4074f8 <vTaskMissedYield+0x14>)
  4074ea:	2201      	movs	r2, #1
  4074ec:	601a      	str	r2, [r3, #0]
}
  4074ee:	46bd      	mov	sp, r7
  4074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4074f4:	4770      	bx	lr
  4074f6:	bf00      	nop
  4074f8:	2000ae50 	.word	0x2000ae50

004074fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  4074fc:	b580      	push	{r7, lr}
  4074fe:	b082      	sub	sp, #8
  407500:	af00      	add	r7, sp, #0
  407502:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  407504:	4b04      	ldr	r3, [pc, #16]	; (407518 <prvIdleTask+0x1c>)
  407506:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  407508:	4b04      	ldr	r3, [pc, #16]	; (40751c <prvIdleTask+0x20>)
  40750a:	681b      	ldr	r3, [r3, #0]
  40750c:	2b01      	cmp	r3, #1
  40750e:	d902      	bls.n	407516 <prvIdleTask+0x1a>
			{
				taskYIELD();
  407510:	4b03      	ldr	r3, [pc, #12]	; (407520 <prvIdleTask+0x24>)
  407512:	4798      	blx	r3
				}
				xTaskResumeAll();
			}
		}
		#endif
	}
  407514:	e7f6      	b.n	407504 <prvIdleTask+0x8>
  407516:	e7f5      	b.n	407504 <prvIdleTask+0x8>
  407518:	00407619 	.word	0x00407619
  40751c:	2000ac98 	.word	0x2000ac98
  407520:	0040609d 	.word	0x0040609d

00407524 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  407524:	b580      	push	{r7, lr}
  407526:	b084      	sub	sp, #16
  407528:	af00      	add	r7, sp, #0
  40752a:	60f8      	str	r0, [r7, #12]
  40752c:	60b9      	str	r1, [r7, #8]
  40752e:	607a      	str	r2, [r7, #4]
  407530:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  407532:	68fb      	ldr	r3, [r7, #12]
  407534:	3334      	adds	r3, #52	; 0x34
  407536:	4618      	mov	r0, r3
  407538:	68b9      	ldr	r1, [r7, #8]
  40753a:	220a      	movs	r2, #10
  40753c:	4b14      	ldr	r3, [pc, #80]	; (407590 <prvInitialiseTCBVariables+0x6c>)
  40753e:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  407540:	68fb      	ldr	r3, [r7, #12]
  407542:	2200      	movs	r2, #0
  407544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  407548:	687b      	ldr	r3, [r7, #4]
  40754a:	2b0e      	cmp	r3, #14
  40754c:	d901      	bls.n	407552 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  40754e:	230e      	movs	r3, #14
  407550:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  407552:	68fb      	ldr	r3, [r7, #12]
  407554:	687a      	ldr	r2, [r7, #4]
  407556:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  407558:	68fb      	ldr	r3, [r7, #12]
  40755a:	687a      	ldr	r2, [r7, #4]
  40755c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40755e:	68fb      	ldr	r3, [r7, #12]
  407560:	3304      	adds	r3, #4
  407562:	4618      	mov	r0, r3
  407564:	4b0b      	ldr	r3, [pc, #44]	; (407594 <prvInitialiseTCBVariables+0x70>)
  407566:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  407568:	68fb      	ldr	r3, [r7, #12]
  40756a:	3318      	adds	r3, #24
  40756c:	4618      	mov	r0, r3
  40756e:	4b09      	ldr	r3, [pc, #36]	; (407594 <prvInitialiseTCBVariables+0x70>)
  407570:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  407572:	68fb      	ldr	r3, [r7, #12]
  407574:	68fa      	ldr	r2, [r7, #12]
  407576:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  407578:	687b      	ldr	r3, [r7, #4]
  40757a:	f1c3 020f 	rsb	r2, r3, #15
  40757e:	68fb      	ldr	r3, [r7, #12]
  407580:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  407582:	68fb      	ldr	r3, [r7, #12]
  407584:	68fa      	ldr	r2, [r7, #12]
  407586:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  407588:	3710      	adds	r7, #16
  40758a:	46bd      	mov	sp, r7
  40758c:	bd80      	pop	{r7, pc}
  40758e:	bf00      	nop
  407590:	0040a619 	.word	0x0040a619
  407594:	00405e05 	.word	0x00405e05

00407598 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  407598:	b580      	push	{r7, lr}
  40759a:	b082      	sub	sp, #8
  40759c:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  40759e:	2300      	movs	r3, #0
  4075a0:	607b      	str	r3, [r7, #4]
  4075a2:	e00c      	b.n	4075be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  4075a4:	687a      	ldr	r2, [r7, #4]
  4075a6:	4613      	mov	r3, r2
  4075a8:	009b      	lsls	r3, r3, #2
  4075aa:	4413      	add	r3, r2
  4075ac:	009b      	lsls	r3, r3, #2
  4075ae:	4a11      	ldr	r2, [pc, #68]	; (4075f4 <prvInitialiseTaskLists+0x5c>)
  4075b0:	4413      	add	r3, r2
  4075b2:	4618      	mov	r0, r3
  4075b4:	4b10      	ldr	r3, [pc, #64]	; (4075f8 <prvInitialiseTaskLists+0x60>)
  4075b6:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4075b8:	687b      	ldr	r3, [r7, #4]
  4075ba:	3301      	adds	r3, #1
  4075bc:	607b      	str	r3, [r7, #4]
  4075be:	687b      	ldr	r3, [r7, #4]
  4075c0:	2b0e      	cmp	r3, #14
  4075c2:	d9ef      	bls.n	4075a4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  4075c4:	480d      	ldr	r0, [pc, #52]	; (4075fc <prvInitialiseTaskLists+0x64>)
  4075c6:	4b0c      	ldr	r3, [pc, #48]	; (4075f8 <prvInitialiseTaskLists+0x60>)
  4075c8:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  4075ca:	480d      	ldr	r0, [pc, #52]	; (407600 <prvInitialiseTaskLists+0x68>)
  4075cc:	4b0a      	ldr	r3, [pc, #40]	; (4075f8 <prvInitialiseTaskLists+0x60>)
  4075ce:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  4075d0:	480c      	ldr	r0, [pc, #48]	; (407604 <prvInitialiseTaskLists+0x6c>)
  4075d2:	4b09      	ldr	r3, [pc, #36]	; (4075f8 <prvInitialiseTaskLists+0x60>)
  4075d4:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  4075d6:	480c      	ldr	r0, [pc, #48]	; (407608 <prvInitialiseTaskLists+0x70>)
  4075d8:	4b07      	ldr	r3, [pc, #28]	; (4075f8 <prvInitialiseTaskLists+0x60>)
  4075da:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  4075dc:	480b      	ldr	r0, [pc, #44]	; (40760c <prvInitialiseTaskLists+0x74>)
  4075de:	4b06      	ldr	r3, [pc, #24]	; (4075f8 <prvInitialiseTaskLists+0x60>)
  4075e0:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  4075e2:	4b0b      	ldr	r3, [pc, #44]	; (407610 <prvInitialiseTaskLists+0x78>)
  4075e4:	4a05      	ldr	r2, [pc, #20]	; (4075fc <prvInitialiseTaskLists+0x64>)
  4075e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4075e8:	4b0a      	ldr	r3, [pc, #40]	; (407614 <prvInitialiseTaskLists+0x7c>)
  4075ea:	4a05      	ldr	r2, [pc, #20]	; (407600 <prvInitialiseTaskLists+0x68>)
  4075ec:	601a      	str	r2, [r3, #0]
}
  4075ee:	3708      	adds	r7, #8
  4075f0:	46bd      	mov	sp, r7
  4075f2:	bd80      	pop	{r7, pc}
  4075f4:	2000ac98 	.word	0x2000ac98
  4075f8:	00405dc5 	.word	0x00405dc5
  4075fc:	2000adc4 	.word	0x2000adc4
  407600:	2000add8 	.word	0x2000add8
  407604:	2000adf4 	.word	0x2000adf4
  407608:	2000ae08 	.word	0x2000ae08
  40760c:	2000ae20 	.word	0x2000ae20
  407610:	2000adec 	.word	0x2000adec
  407614:	2000adf0 	.word	0x2000adf0

00407618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  407618:	b580      	push	{r7, lr}
  40761a:	b082      	sub	sp, #8
  40761c:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  40761e:	e028      	b.n	407672 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  407620:	4b17      	ldr	r3, [pc, #92]	; (407680 <prvCheckTasksWaitingTermination+0x68>)
  407622:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  407624:	4b17      	ldr	r3, [pc, #92]	; (407684 <prvCheckTasksWaitingTermination+0x6c>)
  407626:	681b      	ldr	r3, [r3, #0]
  407628:	2b00      	cmp	r3, #0
  40762a:	bf14      	ite	ne
  40762c:	2300      	movne	r3, #0
  40762e:	2301      	moveq	r3, #1
  407630:	b2db      	uxtb	r3, r3
  407632:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  407634:	4b14      	ldr	r3, [pc, #80]	; (407688 <prvCheckTasksWaitingTermination+0x70>)
  407636:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  407638:	687b      	ldr	r3, [r7, #4]
  40763a:	2b00      	cmp	r3, #0
  40763c:	d119      	bne.n	407672 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  40763e:	4b13      	ldr	r3, [pc, #76]	; (40768c <prvCheckTasksWaitingTermination+0x74>)
  407640:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  407642:	4b10      	ldr	r3, [pc, #64]	; (407684 <prvCheckTasksWaitingTermination+0x6c>)
  407644:	68db      	ldr	r3, [r3, #12]
  407646:	68db      	ldr	r3, [r3, #12]
  407648:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  40764a:	683b      	ldr	r3, [r7, #0]
  40764c:	3304      	adds	r3, #4
  40764e:	4618      	mov	r0, r3
  407650:	4b0f      	ldr	r3, [pc, #60]	; (407690 <prvCheckTasksWaitingTermination+0x78>)
  407652:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  407654:	4b0f      	ldr	r3, [pc, #60]	; (407694 <prvCheckTasksWaitingTermination+0x7c>)
  407656:	681b      	ldr	r3, [r3, #0]
  407658:	1e5a      	subs	r2, r3, #1
  40765a:	4b0e      	ldr	r3, [pc, #56]	; (407694 <prvCheckTasksWaitingTermination+0x7c>)
  40765c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
  40765e:	4b0e      	ldr	r3, [pc, #56]	; (407698 <prvCheckTasksWaitingTermination+0x80>)
  407660:	681b      	ldr	r3, [r3, #0]
  407662:	1e5a      	subs	r2, r3, #1
  407664:	4b0c      	ldr	r3, [pc, #48]	; (407698 <prvCheckTasksWaitingTermination+0x80>)
  407666:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
  407668:	4b0c      	ldr	r3, [pc, #48]	; (40769c <prvCheckTasksWaitingTermination+0x84>)
  40766a:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  40766c:	6838      	ldr	r0, [r7, #0]
  40766e:	4b0c      	ldr	r3, [pc, #48]	; (4076a0 <prvCheckTasksWaitingTermination+0x88>)
  407670:	4798      	blx	r3
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  407672:	4b09      	ldr	r3, [pc, #36]	; (407698 <prvCheckTasksWaitingTermination+0x80>)
  407674:	681b      	ldr	r3, [r3, #0]
  407676:	2b00      	cmp	r3, #0
  407678:	d1d2      	bne.n	407620 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif
}
  40767a:	3708      	adds	r7, #8
  40767c:	46bd      	mov	sp, r7
  40767e:	bd80      	pop	{r7, pc}
  407680:	00406ed9 	.word	0x00406ed9
  407684:	2000ae08 	.word	0x2000ae08
  407688:	00406ef5 	.word	0x00406ef5
  40768c:	004060b5 	.word	0x004060b5
  407690:	00405edd 	.word	0x00405edd
  407694:	2000ae34 	.word	0x2000ae34
  407698:	2000ae1c 	.word	0x2000ae1c
  40769c:	004060d1 	.word	0x004060d1
  4076a0:	00407785 	.word	0x00407785

004076a4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  4076a4:	b580      	push	{r7, lr}
  4076a6:	b082      	sub	sp, #8
  4076a8:	af00      	add	r7, sp, #0
  4076aa:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4076ac:	4b13      	ldr	r3, [pc, #76]	; (4076fc <prvAddCurrentTaskToDelayedList+0x58>)
  4076ae:	681b      	ldr	r3, [r3, #0]
  4076b0:	687a      	ldr	r2, [r7, #4]
  4076b2:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  4076b4:	4b12      	ldr	r3, [pc, #72]	; (407700 <prvAddCurrentTaskToDelayedList+0x5c>)
  4076b6:	681b      	ldr	r3, [r3, #0]
  4076b8:	687a      	ldr	r2, [r7, #4]
  4076ba:	429a      	cmp	r2, r3
  4076bc:	d209      	bcs.n	4076d2 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4076be:	4b11      	ldr	r3, [pc, #68]	; (407704 <prvAddCurrentTaskToDelayedList+0x60>)
  4076c0:	681a      	ldr	r2, [r3, #0]
  4076c2:	4b0e      	ldr	r3, [pc, #56]	; (4076fc <prvAddCurrentTaskToDelayedList+0x58>)
  4076c4:	681b      	ldr	r3, [r3, #0]
  4076c6:	3304      	adds	r3, #4
  4076c8:	4610      	mov	r0, r2
  4076ca:	4619      	mov	r1, r3
  4076cc:	4b0e      	ldr	r3, [pc, #56]	; (407708 <prvAddCurrentTaskToDelayedList+0x64>)
  4076ce:	4798      	blx	r3
  4076d0:	e010      	b.n	4076f4 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4076d2:	4b0e      	ldr	r3, [pc, #56]	; (40770c <prvAddCurrentTaskToDelayedList+0x68>)
  4076d4:	681a      	ldr	r2, [r3, #0]
  4076d6:	4b09      	ldr	r3, [pc, #36]	; (4076fc <prvAddCurrentTaskToDelayedList+0x58>)
  4076d8:	681b      	ldr	r3, [r3, #0]
  4076da:	3304      	adds	r3, #4
  4076dc:	4610      	mov	r0, r2
  4076de:	4619      	mov	r1, r3
  4076e0:	4b09      	ldr	r3, [pc, #36]	; (407708 <prvAddCurrentTaskToDelayedList+0x64>)
  4076e2:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4076e4:	4b0a      	ldr	r3, [pc, #40]	; (407710 <prvAddCurrentTaskToDelayedList+0x6c>)
  4076e6:	681b      	ldr	r3, [r3, #0]
  4076e8:	687a      	ldr	r2, [r7, #4]
  4076ea:	429a      	cmp	r2, r3
  4076ec:	d202      	bcs.n	4076f4 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
  4076ee:	4b08      	ldr	r3, [pc, #32]	; (407710 <prvAddCurrentTaskToDelayedList+0x6c>)
  4076f0:	687a      	ldr	r2, [r7, #4]
  4076f2:	601a      	str	r2, [r3, #0]
		}
	}
}
  4076f4:	3708      	adds	r7, #8
  4076f6:	46bd      	mov	sp, r7
  4076f8:	bd80      	pop	{r7, pc}
  4076fa:	bf00      	nop
  4076fc:	2000ac94 	.word	0x2000ac94
  407700:	2000ae38 	.word	0x2000ae38
  407704:	2000adf0 	.word	0x2000adf0
  407708:	00405e6d 	.word	0x00405e6d
  40770c:	2000adec 	.word	0x2000adec
  407710:	20000208 	.word	0x20000208

00407714 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  407714:	b580      	push	{r7, lr}
  407716:	b084      	sub	sp, #16
  407718:	af00      	add	r7, sp, #0
  40771a:	4603      	mov	r3, r0
  40771c:	6039      	str	r1, [r7, #0]
  40771e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  407720:	204c      	movs	r0, #76	; 0x4c
  407722:	4b15      	ldr	r3, [pc, #84]	; (407778 <prvAllocateTCBAndStack+0x64>)
  407724:	4798      	blx	r3
  407726:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  407728:	68fb      	ldr	r3, [r7, #12]
  40772a:	2b00      	cmp	r3, #0
  40772c:	d01f      	beq.n	40776e <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  40772e:	683b      	ldr	r3, [r7, #0]
  407730:	2b00      	cmp	r3, #0
  407732:	d106      	bne.n	407742 <prvAllocateTCBAndStack+0x2e>
  407734:	88fb      	ldrh	r3, [r7, #6]
  407736:	009b      	lsls	r3, r3, #2
  407738:	4618      	mov	r0, r3
  40773a:	4b0f      	ldr	r3, [pc, #60]	; (407778 <prvAllocateTCBAndStack+0x64>)
  40773c:	4798      	blx	r3
  40773e:	4603      	mov	r3, r0
  407740:	e000      	b.n	407744 <prvAllocateTCBAndStack+0x30>
  407742:	683b      	ldr	r3, [r7, #0]
  407744:	68fa      	ldr	r2, [r7, #12]
  407746:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  407748:	68fb      	ldr	r3, [r7, #12]
  40774a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40774c:	2b00      	cmp	r3, #0
  40774e:	d105      	bne.n	40775c <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  407750:	68f8      	ldr	r0, [r7, #12]
  407752:	4b0a      	ldr	r3, [pc, #40]	; (40777c <prvAllocateTCBAndStack+0x68>)
  407754:	4798      	blx	r3
			pxNewTCB = NULL;
  407756:	2300      	movs	r3, #0
  407758:	60fb      	str	r3, [r7, #12]
  40775a:	e008      	b.n	40776e <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  40775c:	68fb      	ldr	r3, [r7, #12]
  40775e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  407760:	88fb      	ldrh	r3, [r7, #6]
  407762:	009b      	lsls	r3, r3, #2
  407764:	4610      	mov	r0, r2
  407766:	21a5      	movs	r1, #165	; 0xa5
  407768:	461a      	mov	r2, r3
  40776a:	4b05      	ldr	r3, [pc, #20]	; (407780 <prvAllocateTCBAndStack+0x6c>)
  40776c:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  40776e:	68fb      	ldr	r3, [r7, #12]
}
  407770:	4618      	mov	r0, r3
  407772:	3710      	adds	r7, #16
  407774:	46bd      	mov	sp, r7
  407776:	bd80      	pop	{r7, pc}
  407778:	004061ad 	.word	0x004061ad
  40777c:	004062b5 	.word	0x004062b5
  407780:	0040a235 	.word	0x0040a235

00407784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  407784:	b580      	push	{r7, lr}
  407786:	b082      	sub	sp, #8
  407788:	af00      	add	r7, sp, #0
  40778a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  40778c:	687b      	ldr	r3, [r7, #4]
  40778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  407790:	4618      	mov	r0, r3
  407792:	4b04      	ldr	r3, [pc, #16]	; (4077a4 <prvDeleteTCB+0x20>)
  407794:	4798      	blx	r3
		vPortFree( pxTCB );
  407796:	6878      	ldr	r0, [r7, #4]
  407798:	4b02      	ldr	r3, [pc, #8]	; (4077a4 <prvDeleteTCB+0x20>)
  40779a:	4798      	blx	r3
	}
  40779c:	3708      	adds	r7, #8
  40779e:	46bd      	mov	sp, r7
  4077a0:	bd80      	pop	{r7, pc}
  4077a2:	bf00      	nop
  4077a4:	004062b5 	.word	0x004062b5

004077a8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  4077a8:	b480      	push	{r7}
  4077aa:	b083      	sub	sp, #12
  4077ac:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  4077ae:	4b05      	ldr	r3, [pc, #20]	; (4077c4 <xTaskGetCurrentTaskHandle+0x1c>)
  4077b0:	681b      	ldr	r3, [r3, #0]
  4077b2:	607b      	str	r3, [r7, #4]

		return xReturn;
  4077b4:	687b      	ldr	r3, [r7, #4]
	}
  4077b6:	4618      	mov	r0, r3
  4077b8:	370c      	adds	r7, #12
  4077ba:	46bd      	mov	sp, r7
  4077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4077c0:	4770      	bx	lr
  4077c2:	bf00      	nop
  4077c4:	2000ac94 	.word	0x2000ac94

004077c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  4077c8:	b480      	push	{r7}
  4077ca:	b083      	sub	sp, #12
  4077cc:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  4077ce:	4b0b      	ldr	r3, [pc, #44]	; (4077fc <xTaskGetSchedulerState+0x34>)
  4077d0:	681b      	ldr	r3, [r3, #0]
  4077d2:	2b00      	cmp	r3, #0
  4077d4:	d102      	bne.n	4077dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  4077d6:	2300      	movs	r3, #0
  4077d8:	607b      	str	r3, [r7, #4]
  4077da:	e008      	b.n	4077ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4077dc:	4b08      	ldr	r3, [pc, #32]	; (407800 <xTaskGetSchedulerState+0x38>)
  4077de:	681b      	ldr	r3, [r3, #0]
  4077e0:	2b00      	cmp	r3, #0
  4077e2:	d102      	bne.n	4077ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  4077e4:	2301      	movs	r3, #1
  4077e6:	607b      	str	r3, [r7, #4]
  4077e8:	e001      	b.n	4077ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4077ea:	2302      	movs	r3, #2
  4077ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  4077ee:	687b      	ldr	r3, [r7, #4]
	}
  4077f0:	4618      	mov	r0, r3
  4077f2:	370c      	adds	r7, #12
  4077f4:	46bd      	mov	sp, r7
  4077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4077fa:	4770      	bx	lr
  4077fc:	2000ae44 	.word	0x2000ae44
  407800:	2000ae48 	.word	0x2000ae48

00407804 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  407804:	b580      	push	{r7, lr}
  407806:	b084      	sub	sp, #16
  407808:	af00      	add	r7, sp, #0
  40780a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  40780c:	687b      	ldr	r3, [r7, #4]
  40780e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  407810:	687b      	ldr	r3, [r7, #4]
  407812:	2b00      	cmp	r3, #0
  407814:	d041      	beq.n	40789a <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  407816:	68fb      	ldr	r3, [r7, #12]
  407818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40781a:	4b21      	ldr	r3, [pc, #132]	; (4078a0 <vTaskPriorityInherit+0x9c>)
  40781c:	681b      	ldr	r3, [r3, #0]
  40781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  407820:	429a      	cmp	r2, r3
  407822:	d23a      	bcs.n	40789a <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  407824:	4b1e      	ldr	r3, [pc, #120]	; (4078a0 <vTaskPriorityInherit+0x9c>)
  407826:	681b      	ldr	r3, [r3, #0]
  407828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40782a:	f1c3 020f 	rsb	r2, r3, #15
  40782e:	68fb      	ldr	r3, [r7, #12]
  407830:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  407832:	68fb      	ldr	r3, [r7, #12]
  407834:	6959      	ldr	r1, [r3, #20]
  407836:	68fb      	ldr	r3, [r7, #12]
  407838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40783a:	4613      	mov	r3, r2
  40783c:	009b      	lsls	r3, r3, #2
  40783e:	4413      	add	r3, r2
  407840:	009b      	lsls	r3, r3, #2
  407842:	4a18      	ldr	r2, [pc, #96]	; (4078a4 <vTaskPriorityInherit+0xa0>)
  407844:	4413      	add	r3, r2
  407846:	4299      	cmp	r1, r3
  407848:	d122      	bne.n	407890 <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  40784a:	68fb      	ldr	r3, [r7, #12]
  40784c:	3304      	adds	r3, #4
  40784e:	4618      	mov	r0, r3
  407850:	4b15      	ldr	r3, [pc, #84]	; (4078a8 <vTaskPriorityInherit+0xa4>)
  407852:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  407854:	4b12      	ldr	r3, [pc, #72]	; (4078a0 <vTaskPriorityInherit+0x9c>)
  407856:	681b      	ldr	r3, [r3, #0]
  407858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40785a:	68fb      	ldr	r3, [r7, #12]
  40785c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  40785e:	68fb      	ldr	r3, [r7, #12]
  407860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407862:	4b12      	ldr	r3, [pc, #72]	; (4078ac <vTaskPriorityInherit+0xa8>)
  407864:	681b      	ldr	r3, [r3, #0]
  407866:	429a      	cmp	r2, r3
  407868:	d903      	bls.n	407872 <vTaskPriorityInherit+0x6e>
  40786a:	68fb      	ldr	r3, [r7, #12]
  40786c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40786e:	4b0f      	ldr	r3, [pc, #60]	; (4078ac <vTaskPriorityInherit+0xa8>)
  407870:	601a      	str	r2, [r3, #0]
  407872:	68fb      	ldr	r3, [r7, #12]
  407874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407876:	4613      	mov	r3, r2
  407878:	009b      	lsls	r3, r3, #2
  40787a:	4413      	add	r3, r2
  40787c:	009b      	lsls	r3, r3, #2
  40787e:	4a09      	ldr	r2, [pc, #36]	; (4078a4 <vTaskPriorityInherit+0xa0>)
  407880:	441a      	add	r2, r3
  407882:	68fb      	ldr	r3, [r7, #12]
  407884:	3304      	adds	r3, #4
  407886:	4610      	mov	r0, r2
  407888:	4619      	mov	r1, r3
  40788a:	4b09      	ldr	r3, [pc, #36]	; (4078b0 <vTaskPriorityInherit+0xac>)
  40788c:	4798      	blx	r3
  40788e:	e004      	b.n	40789a <vTaskPriorityInherit+0x96>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  407890:	4b03      	ldr	r3, [pc, #12]	; (4078a0 <vTaskPriorityInherit+0x9c>)
  407892:	681b      	ldr	r3, [r3, #0]
  407894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407896:	68fb      	ldr	r3, [r7, #12]
  407898:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  40789a:	3710      	adds	r7, #16
  40789c:	46bd      	mov	sp, r7
  40789e:	bd80      	pop	{r7, pc}
  4078a0:	2000ac94 	.word	0x2000ac94
  4078a4:	2000ac98 	.word	0x2000ac98
  4078a8:	00405edd 	.word	0x00405edd
  4078ac:	2000ae40 	.word	0x2000ae40
  4078b0:	00405e1d 	.word	0x00405e1d

004078b4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  4078b4:	b580      	push	{r7, lr}
  4078b6:	b084      	sub	sp, #16
  4078b8:	af00      	add	r7, sp, #0
  4078ba:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  4078bc:	687b      	ldr	r3, [r7, #4]
  4078be:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  4078c0:	687b      	ldr	r3, [r7, #4]
  4078c2:	2b00      	cmp	r3, #0
  4078c4:	d02c      	beq.n	407920 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4078c6:	68fb      	ldr	r3, [r7, #12]
  4078c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4078ca:	68fb      	ldr	r3, [r7, #12]
  4078cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4078ce:	429a      	cmp	r2, r3
  4078d0:	d026      	beq.n	407920 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  4078d2:	68fb      	ldr	r3, [r7, #12]
  4078d4:	3304      	adds	r3, #4
  4078d6:	4618      	mov	r0, r3
  4078d8:	4b13      	ldr	r3, [pc, #76]	; (407928 <vTaskPriorityDisinherit+0x74>)
  4078da:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  4078dc:	68fb      	ldr	r3, [r7, #12]
  4078de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  4078e0:	68fb      	ldr	r3, [r7, #12]
  4078e2:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  4078e4:	68fb      	ldr	r3, [r7, #12]
  4078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4078e8:	f1c3 020f 	rsb	r2, r3, #15
  4078ec:	68fb      	ldr	r3, [r7, #12]
  4078ee:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  4078f0:	68fb      	ldr	r3, [r7, #12]
  4078f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4078f4:	4b0d      	ldr	r3, [pc, #52]	; (40792c <vTaskPriorityDisinherit+0x78>)
  4078f6:	681b      	ldr	r3, [r3, #0]
  4078f8:	429a      	cmp	r2, r3
  4078fa:	d903      	bls.n	407904 <vTaskPriorityDisinherit+0x50>
  4078fc:	68fb      	ldr	r3, [r7, #12]
  4078fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407900:	4b0a      	ldr	r3, [pc, #40]	; (40792c <vTaskPriorityDisinherit+0x78>)
  407902:	601a      	str	r2, [r3, #0]
  407904:	68fb      	ldr	r3, [r7, #12]
  407906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407908:	4613      	mov	r3, r2
  40790a:	009b      	lsls	r3, r3, #2
  40790c:	4413      	add	r3, r2
  40790e:	009b      	lsls	r3, r3, #2
  407910:	4a07      	ldr	r2, [pc, #28]	; (407930 <vTaskPriorityDisinherit+0x7c>)
  407912:	441a      	add	r2, r3
  407914:	68fb      	ldr	r3, [r7, #12]
  407916:	3304      	adds	r3, #4
  407918:	4610      	mov	r0, r2
  40791a:	4619      	mov	r1, r3
  40791c:	4b05      	ldr	r3, [pc, #20]	; (407934 <vTaskPriorityDisinherit+0x80>)
  40791e:	4798      	blx	r3
			}
		}
	}
  407920:	3710      	adds	r7, #16
  407922:	46bd      	mov	sp, r7
  407924:	bd80      	pop	{r7, pc}
  407926:	bf00      	nop
  407928:	00405edd 	.word	0x00405edd
  40792c:	2000ae40 	.word	0x2000ae40
  407930:	2000ac98 	.word	0x2000ac98
  407934:	00405e1d 	.word	0x00405e1d

00407938 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  407938:	b590      	push	{r4, r7, lr}
  40793a:	b087      	sub	sp, #28
  40793c:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  40793e:	2300      	movs	r3, #0
  407940:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  407942:	4b11      	ldr	r3, [pc, #68]	; (407988 <xTimerCreateTimerTask+0x50>)
  407944:	4798      	blx	r3

	if( xTimerQueue != NULL )
  407946:	4b11      	ldr	r3, [pc, #68]	; (40798c <xTimerCreateTimerTask+0x54>)
  407948:	681b      	ldr	r3, [r3, #0]
  40794a:	2b00      	cmp	r3, #0
  40794c:	d00f      	beq.n	40796e <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40794e:	230e      	movs	r3, #14
  407950:	9300      	str	r3, [sp, #0]
  407952:	2300      	movs	r3, #0
  407954:	9301      	str	r3, [sp, #4]
  407956:	2300      	movs	r3, #0
  407958:	9302      	str	r3, [sp, #8]
  40795a:	2300      	movs	r3, #0
  40795c:	9303      	str	r3, [sp, #12]
  40795e:	480c      	ldr	r0, [pc, #48]	; (407990 <xTimerCreateTimerTask+0x58>)
  407960:	490c      	ldr	r1, [pc, #48]	; (407994 <xTimerCreateTimerTask+0x5c>)
  407962:	f44f 7282 	mov.w	r2, #260	; 0x104
  407966:	2300      	movs	r3, #0
  407968:	4c0b      	ldr	r4, [pc, #44]	; (407998 <xTimerCreateTimerTask+0x60>)
  40796a:	47a0      	blx	r4
  40796c:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  40796e:	687b      	ldr	r3, [r7, #4]
  407970:	2b00      	cmp	r3, #0
  407972:	d103      	bne.n	40797c <xTimerCreateTimerTask+0x44>
  407974:	4b09      	ldr	r3, [pc, #36]	; (40799c <xTimerCreateTimerTask+0x64>)
  407976:	4798      	blx	r3
  407978:	bf00      	nop
  40797a:	e7fd      	b.n	407978 <xTimerCreateTimerTask+0x40>
	return xReturn;
  40797c:	687b      	ldr	r3, [r7, #4]
}
  40797e:	4618      	mov	r0, r3
  407980:	370c      	adds	r7, #12
  407982:	46bd      	mov	sp, r7
  407984:	bd90      	pop	{r4, r7, pc}
  407986:	bf00      	nop
  407988:	00407ee5 	.word	0x00407ee5
  40798c:	2000ae8c 	.word	0x2000ae8c
  407990:	00407b39 	.word	0x00407b39
  407994:	00413398 	.word	0x00413398
  407998:	00406c35 	.word	0x00406c35
  40799c:	004060f9 	.word	0x004060f9

004079a0 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
  4079a0:	b580      	push	{r7, lr}
  4079a2:	b086      	sub	sp, #24
  4079a4:	af00      	add	r7, sp, #0
  4079a6:	60f8      	str	r0, [r7, #12]
  4079a8:	60b9      	str	r1, [r7, #8]
  4079aa:	607a      	str	r2, [r7, #4]
  4079ac:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
  4079ae:	68bb      	ldr	r3, [r7, #8]
  4079b0:	2b00      	cmp	r3, #0
  4079b2:	d108      	bne.n	4079c6 <xTimerCreate+0x26>
	{
		pxNewTimer = NULL;
  4079b4:	2300      	movs	r3, #0
  4079b6:	617b      	str	r3, [r7, #20]
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
  4079b8:	68bb      	ldr	r3, [r7, #8]
  4079ba:	2b00      	cmp	r3, #0
  4079bc:	d120      	bne.n	407a00 <xTimerCreate+0x60>
  4079be:	4b13      	ldr	r3, [pc, #76]	; (407a0c <xTimerCreate+0x6c>)
  4079c0:	4798      	blx	r3
  4079c2:	bf00      	nop
  4079c4:	e7fd      	b.n	4079c2 <xTimerCreate+0x22>
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
  4079c6:	2028      	movs	r0, #40	; 0x28
  4079c8:	4b11      	ldr	r3, [pc, #68]	; (407a10 <xTimerCreate+0x70>)
  4079ca:	4798      	blx	r3
  4079cc:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
  4079ce:	697b      	ldr	r3, [r7, #20]
  4079d0:	2b00      	cmp	r3, #0
  4079d2:	d015      	beq.n	407a00 <xTimerCreate+0x60>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
  4079d4:	4b0f      	ldr	r3, [pc, #60]	; (407a14 <xTimerCreate+0x74>)
  4079d6:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
  4079d8:	697b      	ldr	r3, [r7, #20]
  4079da:	68fa      	ldr	r2, [r7, #12]
  4079dc:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  4079de:	697b      	ldr	r3, [r7, #20]
  4079e0:	68ba      	ldr	r2, [r7, #8]
  4079e2:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  4079e4:	697b      	ldr	r3, [r7, #20]
  4079e6:	687a      	ldr	r2, [r7, #4]
  4079e8:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  4079ea:	697b      	ldr	r3, [r7, #20]
  4079ec:	683a      	ldr	r2, [r7, #0]
  4079ee:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  4079f0:	697b      	ldr	r3, [r7, #20]
  4079f2:	6a3a      	ldr	r2, [r7, #32]
  4079f4:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  4079f6:	697b      	ldr	r3, [r7, #20]
  4079f8:	3304      	adds	r3, #4
  4079fa:	4618      	mov	r0, r3
  4079fc:	4b06      	ldr	r3, [pc, #24]	; (407a18 <xTimerCreate+0x78>)
  4079fe:	4798      	blx	r3
		{
			traceTIMER_CREATE_FAILED();
		}
	}

	return ( xTimerHandle ) pxNewTimer;
  407a00:	697b      	ldr	r3, [r7, #20]
}
  407a02:	4618      	mov	r0, r3
  407a04:	3718      	adds	r7, #24
  407a06:	46bd      	mov	sp, r7
  407a08:	bd80      	pop	{r7, pc}
  407a0a:	bf00      	nop
  407a0c:	004060f9 	.word	0x004060f9
  407a10:	004061ad 	.word	0x004061ad
  407a14:	00407ee5 	.word	0x00407ee5
  407a18:	00405e05 	.word	0x00405e05

00407a1c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  407a1c:	b590      	push	{r4, r7, lr}
  407a1e:	b089      	sub	sp, #36	; 0x24
  407a20:	af00      	add	r7, sp, #0
  407a22:	60f8      	str	r0, [r7, #12]
  407a24:	60b9      	str	r1, [r7, #8]
  407a26:	607a      	str	r2, [r7, #4]
  407a28:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  407a2a:	2300      	movs	r3, #0
  407a2c:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  407a2e:	4b1d      	ldr	r3, [pc, #116]	; (407aa4 <xTimerGenericCommand+0x88>)
  407a30:	681b      	ldr	r3, [r3, #0]
  407a32:	2b00      	cmp	r3, #0
  407a34:	d030      	beq.n	407a98 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  407a36:	68bb      	ldr	r3, [r7, #8]
  407a38:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  407a3a:	687b      	ldr	r3, [r7, #4]
  407a3c:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  407a3e:	68fb      	ldr	r3, [r7, #12]
  407a40:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  407a42:	683b      	ldr	r3, [r7, #0]
  407a44:	2b00      	cmp	r3, #0
  407a46:	d11c      	bne.n	407a82 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  407a48:	4b17      	ldr	r3, [pc, #92]	; (407aa8 <xTimerGenericCommand+0x8c>)
  407a4a:	4798      	blx	r3
  407a4c:	4603      	mov	r3, r0
  407a4e:	2b01      	cmp	r3, #1
  407a50:	d10b      	bne.n	407a6a <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  407a52:	4b14      	ldr	r3, [pc, #80]	; (407aa4 <xTimerGenericCommand+0x88>)
  407a54:	681a      	ldr	r2, [r3, #0]
  407a56:	f107 0310 	add.w	r3, r7, #16
  407a5a:	4610      	mov	r0, r2
  407a5c:	4619      	mov	r1, r3
  407a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  407a60:	2300      	movs	r3, #0
  407a62:	4c12      	ldr	r4, [pc, #72]	; (407aac <xTimerGenericCommand+0x90>)
  407a64:	47a0      	blx	r4
  407a66:	61f8      	str	r0, [r7, #28]
  407a68:	e016      	b.n	407a98 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  407a6a:	4b0e      	ldr	r3, [pc, #56]	; (407aa4 <xTimerGenericCommand+0x88>)
  407a6c:	681a      	ldr	r2, [r3, #0]
  407a6e:	f107 0310 	add.w	r3, r7, #16
  407a72:	4610      	mov	r0, r2
  407a74:	4619      	mov	r1, r3
  407a76:	2200      	movs	r2, #0
  407a78:	2300      	movs	r3, #0
  407a7a:	4c0c      	ldr	r4, [pc, #48]	; (407aac <xTimerGenericCommand+0x90>)
  407a7c:	47a0      	blx	r4
  407a7e:	61f8      	str	r0, [r7, #28]
  407a80:	e00a      	b.n	407a98 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  407a82:	4b08      	ldr	r3, [pc, #32]	; (407aa4 <xTimerGenericCommand+0x88>)
  407a84:	681a      	ldr	r2, [r3, #0]
  407a86:	f107 0310 	add.w	r3, r7, #16
  407a8a:	4610      	mov	r0, r2
  407a8c:	4619      	mov	r1, r3
  407a8e:	683a      	ldr	r2, [r7, #0]
  407a90:	2300      	movs	r3, #0
  407a92:	4c07      	ldr	r4, [pc, #28]	; (407ab0 <xTimerGenericCommand+0x94>)
  407a94:	47a0      	blx	r4
  407a96:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  407a98:	69fb      	ldr	r3, [r7, #28]
}
  407a9a:	4618      	mov	r0, r3
  407a9c:	3724      	adds	r7, #36	; 0x24
  407a9e:	46bd      	mov	sp, r7
  407aa0:	bd90      	pop	{r4, r7, pc}
  407aa2:	bf00      	nop
  407aa4:	2000ae8c 	.word	0x2000ae8c
  407aa8:	004077c9 	.word	0x004077c9
  407aac:	004065a9 	.word	0x004065a9
  407ab0:	00406719 	.word	0x00406719

00407ab4 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  407ab4:	b590      	push	{r4, r7, lr}
  407ab6:	b087      	sub	sp, #28
  407ab8:	af02      	add	r7, sp, #8
  407aba:	6078      	str	r0, [r7, #4]
  407abc:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  407abe:	4b19      	ldr	r3, [pc, #100]	; (407b24 <prvProcessExpiredTimer+0x70>)
  407ac0:	681b      	ldr	r3, [r3, #0]
  407ac2:	68db      	ldr	r3, [r3, #12]
  407ac4:	68db      	ldr	r3, [r3, #12]
  407ac6:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  407ac8:	68fb      	ldr	r3, [r7, #12]
  407aca:	3304      	adds	r3, #4
  407acc:	4618      	mov	r0, r3
  407ace:	4b16      	ldr	r3, [pc, #88]	; (407b28 <prvProcessExpiredTimer+0x74>)
  407ad0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  407ad2:	68fb      	ldr	r3, [r7, #12]
  407ad4:	69db      	ldr	r3, [r3, #28]
  407ad6:	2b01      	cmp	r3, #1
  407ad8:	d11c      	bne.n	407b14 <prvProcessExpiredTimer+0x60>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  407ada:	68fb      	ldr	r3, [r7, #12]
  407adc:	699a      	ldr	r2, [r3, #24]
  407ade:	687b      	ldr	r3, [r7, #4]
  407ae0:	4413      	add	r3, r2
  407ae2:	68f8      	ldr	r0, [r7, #12]
  407ae4:	4619      	mov	r1, r3
  407ae6:	683a      	ldr	r2, [r7, #0]
  407ae8:	687b      	ldr	r3, [r7, #4]
  407aea:	4c10      	ldr	r4, [pc, #64]	; (407b2c <prvProcessExpiredTimer+0x78>)
  407aec:	47a0      	blx	r4
  407aee:	4603      	mov	r3, r0
  407af0:	2b01      	cmp	r3, #1
  407af2:	d10f      	bne.n	407b14 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  407af4:	2300      	movs	r3, #0
  407af6:	9300      	str	r3, [sp, #0]
  407af8:	68f8      	ldr	r0, [r7, #12]
  407afa:	2100      	movs	r1, #0
  407afc:	687a      	ldr	r2, [r7, #4]
  407afe:	2300      	movs	r3, #0
  407b00:	4c0b      	ldr	r4, [pc, #44]	; (407b30 <prvProcessExpiredTimer+0x7c>)
  407b02:	47a0      	blx	r4
  407b04:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  407b06:	68bb      	ldr	r3, [r7, #8]
  407b08:	2b00      	cmp	r3, #0
  407b0a:	d103      	bne.n	407b14 <prvProcessExpiredTimer+0x60>
  407b0c:	4b09      	ldr	r3, [pc, #36]	; (407b34 <prvProcessExpiredTimer+0x80>)
  407b0e:	4798      	blx	r3
  407b10:	bf00      	nop
  407b12:	e7fd      	b.n	407b10 <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  407b14:	68fb      	ldr	r3, [r7, #12]
  407b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  407b18:	68f8      	ldr	r0, [r7, #12]
  407b1a:	4798      	blx	r3
}
  407b1c:	3714      	adds	r7, #20
  407b1e:	46bd      	mov	sp, r7
  407b20:	bd90      	pop	{r4, r7, pc}
  407b22:	bf00      	nop
  407b24:	2000ae84 	.word	0x2000ae84
  407b28:	00405edd 	.word	0x00405edd
  407b2c:	00407c81 	.word	0x00407c81
  407b30:	00407a1d 	.word	0x00407a1d
  407b34:	004060f9 	.word	0x004060f9

00407b38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  407b38:	b580      	push	{r7, lr}
  407b3a:	b084      	sub	sp, #16
  407b3c:	af00      	add	r7, sp, #0
  407b3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  407b40:	f107 0308 	add.w	r3, r7, #8
  407b44:	4618      	mov	r0, r3
  407b46:	4b05      	ldr	r3, [pc, #20]	; (407b5c <prvTimerTask+0x24>)
  407b48:	4798      	blx	r3
  407b4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  407b4c:	68bb      	ldr	r3, [r7, #8]
  407b4e:	68f8      	ldr	r0, [r7, #12]
  407b50:	4619      	mov	r1, r3
  407b52:	4b03      	ldr	r3, [pc, #12]	; (407b60 <prvTimerTask+0x28>)
  407b54:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  407b56:	4b03      	ldr	r3, [pc, #12]	; (407b64 <prvTimerTask+0x2c>)
  407b58:	4798      	blx	r3
	}
  407b5a:	e7f1      	b.n	407b40 <prvTimerTask+0x8>
  407b5c:	00407bed 	.word	0x00407bed
  407b60:	00407b69 	.word	0x00407b69
  407b64:	00407d09 	.word	0x00407d09

00407b68 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  407b68:	b580      	push	{r7, lr}
  407b6a:	b084      	sub	sp, #16
  407b6c:	af00      	add	r7, sp, #0
  407b6e:	6078      	str	r0, [r7, #4]
  407b70:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  407b72:	4b17      	ldr	r3, [pc, #92]	; (407bd0 <prvProcessTimerOrBlockTask+0x68>)
  407b74:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  407b76:	f107 0308 	add.w	r3, r7, #8
  407b7a:	4618      	mov	r0, r3
  407b7c:	4b15      	ldr	r3, [pc, #84]	; (407bd4 <prvProcessTimerOrBlockTask+0x6c>)
  407b7e:	4798      	blx	r3
  407b80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  407b82:	68bb      	ldr	r3, [r7, #8]
  407b84:	2b00      	cmp	r3, #0
  407b86:	d11e      	bne.n	407bc6 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  407b88:	683b      	ldr	r3, [r7, #0]
  407b8a:	2b00      	cmp	r3, #0
  407b8c:	d10a      	bne.n	407ba4 <prvProcessTimerOrBlockTask+0x3c>
  407b8e:	687a      	ldr	r2, [r7, #4]
  407b90:	68fb      	ldr	r3, [r7, #12]
  407b92:	429a      	cmp	r2, r3
  407b94:	d806      	bhi.n	407ba4 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  407b96:	4b10      	ldr	r3, [pc, #64]	; (407bd8 <prvProcessTimerOrBlockTask+0x70>)
  407b98:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  407b9a:	6878      	ldr	r0, [r7, #4]
  407b9c:	68f9      	ldr	r1, [r7, #12]
  407b9e:	4b0f      	ldr	r3, [pc, #60]	; (407bdc <prvProcessTimerOrBlockTask+0x74>)
  407ba0:	4798      	blx	r3
  407ba2:	e012      	b.n	407bca <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  407ba4:	4b0e      	ldr	r3, [pc, #56]	; (407be0 <prvProcessTimerOrBlockTask+0x78>)
  407ba6:	681a      	ldr	r2, [r3, #0]
  407ba8:	6879      	ldr	r1, [r7, #4]
  407baa:	68fb      	ldr	r3, [r7, #12]
  407bac:	1acb      	subs	r3, r1, r3
  407bae:	4610      	mov	r0, r2
  407bb0:	4619      	mov	r1, r3
  407bb2:	4b0c      	ldr	r3, [pc, #48]	; (407be4 <prvProcessTimerOrBlockTask+0x7c>)
  407bb4:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  407bb6:	4b08      	ldr	r3, [pc, #32]	; (407bd8 <prvProcessTimerOrBlockTask+0x70>)
  407bb8:	4798      	blx	r3
  407bba:	4603      	mov	r3, r0
  407bbc:	2b00      	cmp	r3, #0
  407bbe:	d104      	bne.n	407bca <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  407bc0:	4b09      	ldr	r3, [pc, #36]	; (407be8 <prvProcessTimerOrBlockTask+0x80>)
  407bc2:	4798      	blx	r3
  407bc4:	e001      	b.n	407bca <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  407bc6:	4b04      	ldr	r3, [pc, #16]	; (407bd8 <prvProcessTimerOrBlockTask+0x70>)
  407bc8:	4798      	blx	r3
		}
	}
}
  407bca:	3710      	adds	r7, #16
  407bcc:	46bd      	mov	sp, r7
  407bce:	bd80      	pop	{r7, pc}
  407bd0:	00406ed9 	.word	0x00406ed9
  407bd4:	00407c35 	.word	0x00407c35
  407bd8:	00406ef5 	.word	0x00406ef5
  407bdc:	00407ab5 	.word	0x00407ab5
  407be0:	2000ae8c 	.word	0x2000ae8c
  407be4:	00406bd1 	.word	0x00406bd1
  407be8:	0040609d 	.word	0x0040609d

00407bec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  407bec:	b480      	push	{r7}
  407bee:	b085      	sub	sp, #20
  407bf0:	af00      	add	r7, sp, #0
  407bf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  407bf4:	4b0e      	ldr	r3, [pc, #56]	; (407c30 <prvGetNextExpireTime+0x44>)
  407bf6:	681b      	ldr	r3, [r3, #0]
  407bf8:	681b      	ldr	r3, [r3, #0]
  407bfa:	2b00      	cmp	r3, #0
  407bfc:	bf14      	ite	ne
  407bfe:	2300      	movne	r3, #0
  407c00:	2301      	moveq	r3, #1
  407c02:	b2db      	uxtb	r3, r3
  407c04:	461a      	mov	r2, r3
  407c06:	687b      	ldr	r3, [r7, #4]
  407c08:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  407c0a:	687b      	ldr	r3, [r7, #4]
  407c0c:	681b      	ldr	r3, [r3, #0]
  407c0e:	2b00      	cmp	r3, #0
  407c10:	d105      	bne.n	407c1e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  407c12:	4b07      	ldr	r3, [pc, #28]	; (407c30 <prvGetNextExpireTime+0x44>)
  407c14:	681b      	ldr	r3, [r3, #0]
  407c16:	68db      	ldr	r3, [r3, #12]
  407c18:	681b      	ldr	r3, [r3, #0]
  407c1a:	60fb      	str	r3, [r7, #12]
  407c1c:	e001      	b.n	407c22 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  407c1e:	2300      	movs	r3, #0
  407c20:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  407c22:	68fb      	ldr	r3, [r7, #12]
}
  407c24:	4618      	mov	r0, r3
  407c26:	3714      	adds	r7, #20
  407c28:	46bd      	mov	sp, r7
  407c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  407c2e:	4770      	bx	lr
  407c30:	2000ae84 	.word	0x2000ae84

00407c34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  407c34:	b580      	push	{r7, lr}
  407c36:	b084      	sub	sp, #16
  407c38:	af00      	add	r7, sp, #0
  407c3a:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  407c3c:	4b0d      	ldr	r3, [pc, #52]	; (407c74 <prvSampleTimeNow+0x40>)
  407c3e:	4798      	blx	r3
  407c40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  407c42:	4b0d      	ldr	r3, [pc, #52]	; (407c78 <prvSampleTimeNow+0x44>)
  407c44:	681b      	ldr	r3, [r3, #0]
  407c46:	68fa      	ldr	r2, [r7, #12]
  407c48:	429a      	cmp	r2, r3
  407c4a:	d208      	bcs.n	407c5e <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  407c4c:	4b0a      	ldr	r3, [pc, #40]	; (407c78 <prvSampleTimeNow+0x44>)
  407c4e:	681b      	ldr	r3, [r3, #0]
  407c50:	4618      	mov	r0, r3
  407c52:	4b0a      	ldr	r3, [pc, #40]	; (407c7c <prvSampleTimeNow+0x48>)
  407c54:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  407c56:	687b      	ldr	r3, [r7, #4]
  407c58:	2201      	movs	r2, #1
  407c5a:	601a      	str	r2, [r3, #0]
  407c5c:	e002      	b.n	407c64 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  407c5e:	687b      	ldr	r3, [r7, #4]
  407c60:	2200      	movs	r2, #0
  407c62:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  407c64:	4b04      	ldr	r3, [pc, #16]	; (407c78 <prvSampleTimeNow+0x44>)
  407c66:	68fa      	ldr	r2, [r7, #12]
  407c68:	601a      	str	r2, [r3, #0]

	return xTimeNow;
  407c6a:	68fb      	ldr	r3, [r7, #12]
}
  407c6c:	4618      	mov	r0, r3
  407c6e:	3710      	adds	r7, #16
  407c70:	46bd      	mov	sp, r7
  407c72:	bd80      	pop	{r7, pc}
  407c74:	00407015 	.word	0x00407015
  407c78:	2000ae90 	.word	0x2000ae90
  407c7c:	00407e21 	.word	0x00407e21

00407c80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  407c80:	b580      	push	{r7, lr}
  407c82:	b086      	sub	sp, #24
  407c84:	af00      	add	r7, sp, #0
  407c86:	60f8      	str	r0, [r7, #12]
  407c88:	60b9      	str	r1, [r7, #8]
  407c8a:	607a      	str	r2, [r7, #4]
  407c8c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  407c8e:	2300      	movs	r3, #0
  407c90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  407c92:	68fb      	ldr	r3, [r7, #12]
  407c94:	68ba      	ldr	r2, [r7, #8]
  407c96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  407c98:	68fb      	ldr	r3, [r7, #12]
  407c9a:	68fa      	ldr	r2, [r7, #12]
  407c9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  407c9e:	68ba      	ldr	r2, [r7, #8]
  407ca0:	687b      	ldr	r3, [r7, #4]
  407ca2:	429a      	cmp	r2, r3
  407ca4:	d812      	bhi.n	407ccc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  407ca6:	687a      	ldr	r2, [r7, #4]
  407ca8:	683b      	ldr	r3, [r7, #0]
  407caa:	1ad2      	subs	r2, r2, r3
  407cac:	68fb      	ldr	r3, [r7, #12]
  407cae:	699b      	ldr	r3, [r3, #24]
  407cb0:	429a      	cmp	r2, r3
  407cb2:	d302      	bcc.n	407cba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  407cb4:	2301      	movs	r3, #1
  407cb6:	617b      	str	r3, [r7, #20]
  407cb8:	e01b      	b.n	407cf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  407cba:	4b10      	ldr	r3, [pc, #64]	; (407cfc <prvInsertTimerInActiveList+0x7c>)
  407cbc:	681a      	ldr	r2, [r3, #0]
  407cbe:	68fb      	ldr	r3, [r7, #12]
  407cc0:	3304      	adds	r3, #4
  407cc2:	4610      	mov	r0, r2
  407cc4:	4619      	mov	r1, r3
  407cc6:	4b0e      	ldr	r3, [pc, #56]	; (407d00 <prvInsertTimerInActiveList+0x80>)
  407cc8:	4798      	blx	r3
  407cca:	e012      	b.n	407cf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  407ccc:	687a      	ldr	r2, [r7, #4]
  407cce:	683b      	ldr	r3, [r7, #0]
  407cd0:	429a      	cmp	r2, r3
  407cd2:	d206      	bcs.n	407ce2 <prvInsertTimerInActiveList+0x62>
  407cd4:	68ba      	ldr	r2, [r7, #8]
  407cd6:	683b      	ldr	r3, [r7, #0]
  407cd8:	429a      	cmp	r2, r3
  407cda:	d302      	bcc.n	407ce2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  407cdc:	2301      	movs	r3, #1
  407cde:	617b      	str	r3, [r7, #20]
  407ce0:	e007      	b.n	407cf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  407ce2:	4b08      	ldr	r3, [pc, #32]	; (407d04 <prvInsertTimerInActiveList+0x84>)
  407ce4:	681a      	ldr	r2, [r3, #0]
  407ce6:	68fb      	ldr	r3, [r7, #12]
  407ce8:	3304      	adds	r3, #4
  407cea:	4610      	mov	r0, r2
  407cec:	4619      	mov	r1, r3
  407cee:	4b04      	ldr	r3, [pc, #16]	; (407d00 <prvInsertTimerInActiveList+0x80>)
  407cf0:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  407cf2:	697b      	ldr	r3, [r7, #20]
}
  407cf4:	4618      	mov	r0, r3
  407cf6:	3718      	adds	r7, #24
  407cf8:	46bd      	mov	sp, r7
  407cfa:	bd80      	pop	{r7, pc}
  407cfc:	2000ae88 	.word	0x2000ae88
  407d00:	00405e6d 	.word	0x00405e6d
  407d04:	2000ae84 	.word	0x2000ae84

00407d08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  407d08:	b590      	push	{r4, r7, lr}
  407d0a:	b08b      	sub	sp, #44	; 0x2c
  407d0c:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  407d0e:	1d3b      	adds	r3, r7, #4
  407d10:	4618      	mov	r0, r3
  407d12:	4b3b      	ldr	r3, [pc, #236]	; (407e00 <prvProcessReceivedCommands+0xf8>)
  407d14:	4798      	blx	r3
  407d16:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  407d18:	e061      	b.n	407dde <prvProcessReceivedCommands+0xd6>
	{
		pxTimer = xMessage.pxTimer;
  407d1a:	693b      	ldr	r3, [r7, #16]
  407d1c:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  407d1e:	69bb      	ldr	r3, [r7, #24]
  407d20:	2b00      	cmp	r3, #0
  407d22:	d008      	beq.n	407d36 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  407d24:	69bb      	ldr	r3, [r7, #24]
  407d26:	695b      	ldr	r3, [r3, #20]
  407d28:	2b00      	cmp	r3, #0
  407d2a:	d004      	beq.n	407d36 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  407d2c:	69bb      	ldr	r3, [r7, #24]
  407d2e:	3304      	adds	r3, #4
  407d30:	4618      	mov	r0, r3
  407d32:	4b34      	ldr	r3, [pc, #208]	; (407e04 <prvProcessReceivedCommands+0xfc>)
  407d34:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  407d36:	68bb      	ldr	r3, [r7, #8]
  407d38:	2b03      	cmp	r3, #3
  407d3a:	d84f      	bhi.n	407ddc <prvProcessReceivedCommands+0xd4>
  407d3c:	a201      	add	r2, pc, #4	; (adr r2, 407d44 <prvProcessReceivedCommands+0x3c>)
  407d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407d42:	bf00      	nop
  407d44:	00407d55 	.word	0x00407d55
  407d48:	00407ddd 	.word	0x00407ddd
  407d4c:	00407da9 	.word	0x00407da9
  407d50:	00407dd5 	.word	0x00407dd5
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  407d54:	68fa      	ldr	r2, [r7, #12]
  407d56:	69bb      	ldr	r3, [r7, #24]
  407d58:	699b      	ldr	r3, [r3, #24]
  407d5a:	441a      	add	r2, r3
  407d5c:	68fb      	ldr	r3, [r7, #12]
  407d5e:	69b8      	ldr	r0, [r7, #24]
  407d60:	4611      	mov	r1, r2
  407d62:	69fa      	ldr	r2, [r7, #28]
  407d64:	4c28      	ldr	r4, [pc, #160]	; (407e08 <prvProcessReceivedCommands+0x100>)
  407d66:	47a0      	blx	r4
  407d68:	4603      	mov	r3, r0
  407d6a:	2b01      	cmp	r3, #1
  407d6c:	d11b      	bne.n	407da6 <prvProcessReceivedCommands+0x9e>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  407d6e:	69bb      	ldr	r3, [r7, #24]
  407d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  407d72:	69b8      	ldr	r0, [r7, #24]
  407d74:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  407d76:	69bb      	ldr	r3, [r7, #24]
  407d78:	69db      	ldr	r3, [r3, #28]
  407d7a:	2b01      	cmp	r3, #1
  407d7c:	d113      	bne.n	407da6 <prvProcessReceivedCommands+0x9e>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  407d7e:	68fa      	ldr	r2, [r7, #12]
  407d80:	69bb      	ldr	r3, [r7, #24]
  407d82:	699b      	ldr	r3, [r3, #24]
  407d84:	4413      	add	r3, r2
  407d86:	2200      	movs	r2, #0
  407d88:	9200      	str	r2, [sp, #0]
  407d8a:	69b8      	ldr	r0, [r7, #24]
  407d8c:	2100      	movs	r1, #0
  407d8e:	461a      	mov	r2, r3
  407d90:	2300      	movs	r3, #0
  407d92:	4c1e      	ldr	r4, [pc, #120]	; (407e0c <prvProcessReceivedCommands+0x104>)
  407d94:	47a0      	blx	r4
  407d96:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  407d98:	697b      	ldr	r3, [r7, #20]
  407d9a:	2b00      	cmp	r3, #0
  407d9c:	d103      	bne.n	407da6 <prvProcessReceivedCommands+0x9e>
  407d9e:	4b1c      	ldr	r3, [pc, #112]	; (407e10 <prvProcessReceivedCommands+0x108>)
  407da0:	4798      	blx	r3
  407da2:	bf00      	nop
  407da4:	e7fd      	b.n	407da2 <prvProcessReceivedCommands+0x9a>
						( void ) xResult;
					}
				}
				break;
  407da6:	e01a      	b.n	407dde <prvProcessReceivedCommands+0xd6>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  407da8:	68fa      	ldr	r2, [r7, #12]
  407daa:	69bb      	ldr	r3, [r7, #24]
  407dac:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  407dae:	69bb      	ldr	r3, [r7, #24]
  407db0:	699b      	ldr	r3, [r3, #24]
  407db2:	2b00      	cmp	r3, #0
  407db4:	d103      	bne.n	407dbe <prvProcessReceivedCommands+0xb6>
  407db6:	4b16      	ldr	r3, [pc, #88]	; (407e10 <prvProcessReceivedCommands+0x108>)
  407db8:	4798      	blx	r3
  407dba:	bf00      	nop
  407dbc:	e7fd      	b.n	407dba <prvProcessReceivedCommands+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  407dbe:	69bb      	ldr	r3, [r7, #24]
  407dc0:	699a      	ldr	r2, [r3, #24]
  407dc2:	69fb      	ldr	r3, [r7, #28]
  407dc4:	4413      	add	r3, r2
  407dc6:	69b8      	ldr	r0, [r7, #24]
  407dc8:	4619      	mov	r1, r3
  407dca:	69fa      	ldr	r2, [r7, #28]
  407dcc:	69fb      	ldr	r3, [r7, #28]
  407dce:	4c0e      	ldr	r4, [pc, #56]	; (407e08 <prvProcessReceivedCommands+0x100>)
  407dd0:	47a0      	blx	r4
				break;
  407dd2:	e004      	b.n	407dde <prvProcessReceivedCommands+0xd6>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  407dd4:	69b8      	ldr	r0, [r7, #24]
  407dd6:	4b0f      	ldr	r3, [pc, #60]	; (407e14 <prvProcessReceivedCommands+0x10c>)
  407dd8:	4798      	blx	r3
				break;
  407dda:	e000      	b.n	407dde <prvProcessReceivedCommands+0xd6>

			default	:
				/* Don't expect to get here. */
				break;
  407ddc:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  407dde:	4b0e      	ldr	r3, [pc, #56]	; (407e18 <prvProcessReceivedCommands+0x110>)
  407de0:	681a      	ldr	r2, [r3, #0]
  407de2:	f107 0308 	add.w	r3, r7, #8
  407de6:	4610      	mov	r0, r2
  407de8:	4619      	mov	r1, r3
  407dea:	2200      	movs	r2, #0
  407dec:	2300      	movs	r3, #0
  407dee:	4c0b      	ldr	r4, [pc, #44]	; (407e1c <prvProcessReceivedCommands+0x114>)
  407df0:	47a0      	blx	r4
  407df2:	4603      	mov	r3, r0
  407df4:	2b00      	cmp	r3, #0
  407df6:	d190      	bne.n	407d1a <prvProcessReceivedCommands+0x12>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
  407df8:	3724      	adds	r7, #36	; 0x24
  407dfa:	46bd      	mov	sp, r7
  407dfc:	bd90      	pop	{r4, r7, pc}
  407dfe:	bf00      	nop
  407e00:	00407c35 	.word	0x00407c35
  407e04:	00405edd 	.word	0x00405edd
  407e08:	00407c81 	.word	0x00407c81
  407e0c:	00407a1d 	.word	0x00407a1d
  407e10:	004060f9 	.word	0x004060f9
  407e14:	004062b5 	.word	0x004062b5
  407e18:	2000ae8c 	.word	0x2000ae8c
  407e1c:	004067d5 	.word	0x004067d5

00407e20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  407e20:	b590      	push	{r4, r7, lr}
  407e22:	b08b      	sub	sp, #44	; 0x2c
  407e24:	af02      	add	r7, sp, #8
  407e26:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  407e28:	e03e      	b.n	407ea8 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  407e2a:	4b28      	ldr	r3, [pc, #160]	; (407ecc <prvSwitchTimerLists+0xac>)
  407e2c:	681b      	ldr	r3, [r3, #0]
  407e2e:	68db      	ldr	r3, [r3, #12]
  407e30:	681b      	ldr	r3, [r3, #0]
  407e32:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  407e34:	4b25      	ldr	r3, [pc, #148]	; (407ecc <prvSwitchTimerLists+0xac>)
  407e36:	681b      	ldr	r3, [r3, #0]
  407e38:	68db      	ldr	r3, [r3, #12]
  407e3a:	68db      	ldr	r3, [r3, #12]
  407e3c:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  407e3e:	69bb      	ldr	r3, [r7, #24]
  407e40:	3304      	adds	r3, #4
  407e42:	4618      	mov	r0, r3
  407e44:	4b22      	ldr	r3, [pc, #136]	; (407ed0 <prvSwitchTimerLists+0xb0>)
  407e46:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  407e48:	69bb      	ldr	r3, [r7, #24]
  407e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  407e4c:	69b8      	ldr	r0, [r7, #24]
  407e4e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  407e50:	69bb      	ldr	r3, [r7, #24]
  407e52:	69db      	ldr	r3, [r3, #28]
  407e54:	2b01      	cmp	r3, #1
  407e56:	d127      	bne.n	407ea8 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  407e58:	69bb      	ldr	r3, [r7, #24]
  407e5a:	699a      	ldr	r2, [r3, #24]
  407e5c:	69fb      	ldr	r3, [r7, #28]
  407e5e:	4413      	add	r3, r2
  407e60:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  407e62:	697a      	ldr	r2, [r7, #20]
  407e64:	69fb      	ldr	r3, [r7, #28]
  407e66:	429a      	cmp	r2, r3
  407e68:	d90e      	bls.n	407e88 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  407e6a:	69bb      	ldr	r3, [r7, #24]
  407e6c:	697a      	ldr	r2, [r7, #20]
  407e6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  407e70:	69bb      	ldr	r3, [r7, #24]
  407e72:	69ba      	ldr	r2, [r7, #24]
  407e74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  407e76:	4b15      	ldr	r3, [pc, #84]	; (407ecc <prvSwitchTimerLists+0xac>)
  407e78:	681a      	ldr	r2, [r3, #0]
  407e7a:	69bb      	ldr	r3, [r7, #24]
  407e7c:	3304      	adds	r3, #4
  407e7e:	4610      	mov	r0, r2
  407e80:	4619      	mov	r1, r3
  407e82:	4b14      	ldr	r3, [pc, #80]	; (407ed4 <prvSwitchTimerLists+0xb4>)
  407e84:	4798      	blx	r3
  407e86:	e00f      	b.n	407ea8 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  407e88:	2300      	movs	r3, #0
  407e8a:	9300      	str	r3, [sp, #0]
  407e8c:	69b8      	ldr	r0, [r7, #24]
  407e8e:	2100      	movs	r1, #0
  407e90:	69fa      	ldr	r2, [r7, #28]
  407e92:	2300      	movs	r3, #0
  407e94:	4c10      	ldr	r4, [pc, #64]	; (407ed8 <prvSwitchTimerLists+0xb8>)
  407e96:	47a0      	blx	r4
  407e98:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  407e9a:	693b      	ldr	r3, [r7, #16]
  407e9c:	2b00      	cmp	r3, #0
  407e9e:	d103      	bne.n	407ea8 <prvSwitchTimerLists+0x88>
  407ea0:	4b0e      	ldr	r3, [pc, #56]	; (407edc <prvSwitchTimerLists+0xbc>)
  407ea2:	4798      	blx	r3
  407ea4:	bf00      	nop
  407ea6:	e7fd      	b.n	407ea4 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  407ea8:	4b08      	ldr	r3, [pc, #32]	; (407ecc <prvSwitchTimerLists+0xac>)
  407eaa:	681b      	ldr	r3, [r3, #0]
  407eac:	681b      	ldr	r3, [r3, #0]
  407eae:	2b00      	cmp	r3, #0
  407eb0:	d1bb      	bne.n	407e2a <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  407eb2:	4b06      	ldr	r3, [pc, #24]	; (407ecc <prvSwitchTimerLists+0xac>)
  407eb4:	681b      	ldr	r3, [r3, #0]
  407eb6:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  407eb8:	4b09      	ldr	r3, [pc, #36]	; (407ee0 <prvSwitchTimerLists+0xc0>)
  407eba:	681a      	ldr	r2, [r3, #0]
  407ebc:	4b03      	ldr	r3, [pc, #12]	; (407ecc <prvSwitchTimerLists+0xac>)
  407ebe:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
  407ec0:	4b07      	ldr	r3, [pc, #28]	; (407ee0 <prvSwitchTimerLists+0xc0>)
  407ec2:	68fa      	ldr	r2, [r7, #12]
  407ec4:	601a      	str	r2, [r3, #0]
}
  407ec6:	3724      	adds	r7, #36	; 0x24
  407ec8:	46bd      	mov	sp, r7
  407eca:	bd90      	pop	{r4, r7, pc}
  407ecc:	2000ae84 	.word	0x2000ae84
  407ed0:	00405edd 	.word	0x00405edd
  407ed4:	00405e6d 	.word	0x00405e6d
  407ed8:	00407a1d 	.word	0x00407a1d
  407edc:	004060f9 	.word	0x004060f9
  407ee0:	2000ae88 	.word	0x2000ae88

00407ee4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  407ee4:	b580      	push	{r7, lr}
  407ee6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  407ee8:	4b0e      	ldr	r3, [pc, #56]	; (407f24 <prvCheckForValidListAndQueue+0x40>)
  407eea:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  407eec:	4b0e      	ldr	r3, [pc, #56]	; (407f28 <prvCheckForValidListAndQueue+0x44>)
  407eee:	681b      	ldr	r3, [r3, #0]
  407ef0:	2b00      	cmp	r3, #0
  407ef2:	d113      	bne.n	407f1c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  407ef4:	480d      	ldr	r0, [pc, #52]	; (407f2c <prvCheckForValidListAndQueue+0x48>)
  407ef6:	4b0e      	ldr	r3, [pc, #56]	; (407f30 <prvCheckForValidListAndQueue+0x4c>)
  407ef8:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  407efa:	480e      	ldr	r0, [pc, #56]	; (407f34 <prvCheckForValidListAndQueue+0x50>)
  407efc:	4b0c      	ldr	r3, [pc, #48]	; (407f30 <prvCheckForValidListAndQueue+0x4c>)
  407efe:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  407f00:	4b0d      	ldr	r3, [pc, #52]	; (407f38 <prvCheckForValidListAndQueue+0x54>)
  407f02:	4a0a      	ldr	r2, [pc, #40]	; (407f2c <prvCheckForValidListAndQueue+0x48>)
  407f04:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  407f06:	4b0d      	ldr	r3, [pc, #52]	; (407f3c <prvCheckForValidListAndQueue+0x58>)
  407f08:	4a0a      	ldr	r2, [pc, #40]	; (407f34 <prvCheckForValidListAndQueue+0x50>)
  407f0a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  407f0c:	2005      	movs	r0, #5
  407f0e:	210c      	movs	r1, #12
  407f10:	2200      	movs	r2, #0
  407f12:	4b0b      	ldr	r3, [pc, #44]	; (407f40 <prvCheckForValidListAndQueue+0x5c>)
  407f14:	4798      	blx	r3
  407f16:	4602      	mov	r2, r0
  407f18:	4b03      	ldr	r3, [pc, #12]	; (407f28 <prvCheckForValidListAndQueue+0x44>)
  407f1a:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  407f1c:	4b09      	ldr	r3, [pc, #36]	; (407f44 <prvCheckForValidListAndQueue+0x60>)
  407f1e:	4798      	blx	r3
}
  407f20:	bd80      	pop	{r7, pc}
  407f22:	bf00      	nop
  407f24:	004060b5 	.word	0x004060b5
  407f28:	2000ae8c 	.word	0x2000ae8c
  407f2c:	2000ae5c 	.word	0x2000ae5c
  407f30:	00405dc5 	.word	0x00405dc5
  407f34:	2000ae70 	.word	0x2000ae70
  407f38:	2000ae84 	.word	0x2000ae84
  407f3c:	2000ae88 	.word	0x2000ae88
  407f40:	00406511 	.word	0x00406511
  407f44:	004060d1 	.word	0x004060d1

00407f48 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer )
{
  407f48:	b580      	push	{r7, lr}
  407f4a:	b084      	sub	sp, #16
  407f4c:	af00      	add	r7, sp, #0
  407f4e:	6078      	str	r0, [r7, #4]
portBASE_TYPE xTimerIsInActiveList;
xTIMER *pxTimer = ( xTIMER * ) xTimer;
  407f50:	687b      	ldr	r3, [r7, #4]
  407f52:	60fb      	str	r3, [r7, #12]

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
  407f54:	4b08      	ldr	r3, [pc, #32]	; (407f78 <xTimerIsTimerActive+0x30>)
  407f56:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
  407f58:	68fb      	ldr	r3, [r7, #12]
  407f5a:	695b      	ldr	r3, [r3, #20]
  407f5c:	2b00      	cmp	r3, #0
  407f5e:	bf0c      	ite	eq
  407f60:	2300      	moveq	r3, #0
  407f62:	2301      	movne	r3, #1
  407f64:	b2db      	uxtb	r3, r3
  407f66:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
  407f68:	4b04      	ldr	r3, [pc, #16]	; (407f7c <xTimerIsTimerActive+0x34>)
  407f6a:	4798      	blx	r3

	return xTimerIsInActiveList;
  407f6c:	68bb      	ldr	r3, [r7, #8]
}
  407f6e:	4618      	mov	r0, r3
  407f70:	3710      	adds	r7, #16
  407f72:	46bd      	mov	sp, r7
  407f74:	bd80      	pop	{r7, pc}
  407f76:	bf00      	nop
  407f78:	004060b5 	.word	0x004060b5
  407f7c:	004060d1 	.word	0x004060d1

00407f80 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  407f80:	b580      	push	{r7, lr}
  407f82:	b086      	sub	sp, #24
  407f84:	af00      	add	r7, sp, #0
  407f86:	60f8      	str	r0, [r7, #12]
  407f88:	60b9      	str	r1, [r7, #8]
  407f8a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  407f8c:	2300      	movs	r3, #0
  407f8e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  407f90:	68fb      	ldr	r3, [r7, #12]
  407f92:	2b01      	cmp	r3, #1
  407f94:	d008      	beq.n	407fa8 <_write+0x28>
  407f96:	68fb      	ldr	r3, [r7, #12]
  407f98:	2b02      	cmp	r3, #2
  407f9a:	d005      	beq.n	407fa8 <_write+0x28>
  407f9c:	68fb      	ldr	r3, [r7, #12]
  407f9e:	2b03      	cmp	r3, #3
  407fa0:	d002      	beq.n	407fa8 <_write+0x28>
		return -1;
  407fa2:	f04f 33ff 	mov.w	r3, #4294967295
  407fa6:	e01b      	b.n	407fe0 <_write+0x60>
	}

	for (; len != 0; --len) {
  407fa8:	e016      	b.n	407fd8 <_write+0x58>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  407faa:	4b0f      	ldr	r3, [pc, #60]	; (407fe8 <_write+0x68>)
  407fac:	681a      	ldr	r2, [r3, #0]
  407fae:	4b0f      	ldr	r3, [pc, #60]	; (407fec <_write+0x6c>)
  407fb0:	6819      	ldr	r1, [r3, #0]
  407fb2:	68bb      	ldr	r3, [r7, #8]
  407fb4:	1c58      	adds	r0, r3, #1
  407fb6:	60b8      	str	r0, [r7, #8]
  407fb8:	781b      	ldrb	r3, [r3, #0]
  407fba:	4608      	mov	r0, r1
  407fbc:	4619      	mov	r1, r3
  407fbe:	4790      	blx	r2
  407fc0:	4603      	mov	r3, r0
  407fc2:	2b00      	cmp	r3, #0
  407fc4:	da02      	bge.n	407fcc <_write+0x4c>
			return -1;
  407fc6:	f04f 33ff 	mov.w	r3, #4294967295
  407fca:	e009      	b.n	407fe0 <_write+0x60>
		}
		++nChars;
  407fcc:	697b      	ldr	r3, [r7, #20]
  407fce:	3301      	adds	r3, #1
  407fd0:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  407fd2:	687b      	ldr	r3, [r7, #4]
  407fd4:	3b01      	subs	r3, #1
  407fd6:	607b      	str	r3, [r7, #4]
  407fd8:	687b      	ldr	r3, [r7, #4]
  407fda:	2b00      	cmp	r3, #0
  407fdc:	d1e5      	bne.n	407faa <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  407fde:	697b      	ldr	r3, [r7, #20]
}
  407fe0:	4618      	mov	r0, r3
  407fe2:	3718      	adds	r7, #24
  407fe4:	46bd      	mov	sp, r7
  407fe6:	bd80      	pop	{r7, pc}
  407fe8:	2000c000 	.word	0x2000c000
  407fec:	2000c004 	.word	0x2000c004

00407ff0 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  407ff0:	b480      	push	{r7}
  407ff2:	b083      	sub	sp, #12
  407ff4:	af00      	add	r7, sp, #0
  407ff6:	6078      	str	r0, [r7, #4]
  407ff8:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  407ffa:	683a      	ldr	r2, [r7, #0]
  407ffc:	f240 2302 	movw	r3, #514	; 0x202
  408000:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  408002:	687a      	ldr	r2, [r7, #4]
  408004:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
}
  408006:	370c      	adds	r7, #12
  408008:	46bd      	mov	sp, r7
  40800a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40800e:	4770      	bx	lr

00408010 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  408010:	b480      	push	{r7}
  408012:	b083      	sub	sp, #12
  408014:	af00      	add	r7, sp, #0
  408016:	6078      	str	r0, [r7, #4]
  408018:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  40801a:	683b      	ldr	r3, [r7, #0]
  40801c:	2b00      	cmp	r3, #0
  40801e:	d006      	beq.n	40802e <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  408020:	687b      	ldr	r3, [r7, #4]
  408022:	685b      	ldr	r3, [r3, #4]
  408024:	f043 0201 	orr.w	r2, r3, #1
  408028:	687b      	ldr	r3, [r7, #4]
  40802a:	605a      	str	r2, [r3, #4]
  40802c:	e005      	b.n	40803a <rtc_set_hour_mode+0x2a>
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  40802e:	687b      	ldr	r3, [r7, #4]
  408030:	685b      	ldr	r3, [r3, #4]
  408032:	f023 0201 	bic.w	r2, r3, #1
  408036:	687b      	ldr	r3, [r7, #4]
  408038:	605a      	str	r2, [r3, #4]
	}
}
  40803a:	370c      	adds	r7, #12
  40803c:	46bd      	mov	sp, r7
  40803e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408042:	4770      	bx	lr

00408044 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  408044:	b480      	push	{r7}
  408046:	b087      	sub	sp, #28
  408048:	af00      	add	r7, sp, #0
  40804a:	60f8      	str	r0, [r7, #12]
  40804c:	60b9      	str	r1, [r7, #8]
  40804e:	607a      	str	r2, [r7, #4]
  408050:	603b      	str	r3, [r7, #0]
	uint32_t ul_time = 0;
  408052:	2300      	movs	r3, #0
  408054:	617b      	str	r3, [r7, #20]

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  408056:	68fb      	ldr	r3, [r7, #12]
  408058:	685b      	ldr	r3, [r3, #4]
  40805a:	f003 0301 	and.w	r3, r3, #1
  40805e:	2b00      	cmp	r3, #0
  408060:	d009      	beq.n	408076 <rtc_set_time+0x32>
		if (ul_hour > 12) {
  408062:	68bb      	ldr	r3, [r7, #8]
  408064:	2b0c      	cmp	r3, #12
  408066:	d906      	bls.n	408076 <rtc_set_time+0x32>
			ul_hour -= 12;
  408068:	68bb      	ldr	r3, [r7, #8]
  40806a:	3b0c      	subs	r3, #12
  40806c:	60bb      	str	r3, [r7, #8]
			ul_time |= RTC_TIMR_AMPM;
  40806e:	697b      	ldr	r3, [r7, #20]
  408070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  408074:	617b      	str	r3, [r7, #20]
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  408076:	68ba      	ldr	r2, [r7, #8]
  408078:	4b33      	ldr	r3, [pc, #204]	; (408148 <rtc_set_time+0x104>)
  40807a:	fba3 1302 	umull	r1, r3, r3, r2
  40807e:	08db      	lsrs	r3, r3, #3
  408080:	0518      	lsls	r0, r3, #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  408082:	68b9      	ldr	r1, [r7, #8]
  408084:	4b30      	ldr	r3, [pc, #192]	; (408148 <rtc_set_time+0x104>)
  408086:	fba3 2301 	umull	r2, r3, r3, r1
  40808a:	08da      	lsrs	r2, r3, #3
  40808c:	4613      	mov	r3, r2
  40808e:	009b      	lsls	r3, r3, #2
  408090:	4413      	add	r3, r2
  408092:	005b      	lsls	r3, r3, #1
  408094:	1aca      	subs	r2, r1, r3
  408096:	0413      	lsls	r3, r2, #16
			ul_time |= RTC_TIMR_AMPM;
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  408098:	4303      	orrs	r3, r0
  40809a:	697a      	ldr	r2, [r7, #20]
  40809c:	4313      	orrs	r3, r2
  40809e:	617b      	str	r3, [r7, #20]
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4080a0:	687a      	ldr	r2, [r7, #4]
  4080a2:	4b29      	ldr	r3, [pc, #164]	; (408148 <rtc_set_time+0x104>)
  4080a4:	fba3 1302 	umull	r1, r3, r3, r2
  4080a8:	08db      	lsrs	r3, r3, #3
  4080aa:	0318      	lsls	r0, r3, #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4080ac:	6879      	ldr	r1, [r7, #4]
  4080ae:	4b26      	ldr	r3, [pc, #152]	; (408148 <rtc_set_time+0x104>)
  4080b0:	fba3 2301 	umull	r2, r3, r3, r1
  4080b4:	08da      	lsrs	r2, r3, #3
  4080b6:	4613      	mov	r3, r2
  4080b8:	009b      	lsls	r3, r3, #2
  4080ba:	4413      	add	r3, r2
  4080bc:	005b      	lsls	r3, r3, #1
  4080be:	1aca      	subs	r2, r1, r3
  4080c0:	0213      	lsls	r3, r2, #8
	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4080c2:	4303      	orrs	r3, r0
  4080c4:	697a      	ldr	r2, [r7, #20]
  4080c6:	4313      	orrs	r3, r2
  4080c8:	617b      	str	r3, [r7, #20]
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4080ca:	683a      	ldr	r2, [r7, #0]
  4080cc:	4b1e      	ldr	r3, [pc, #120]	; (408148 <rtc_set_time+0x104>)
  4080ce:	fba3 1302 	umull	r1, r3, r3, r2
  4080d2:	08db      	lsrs	r3, r3, #3
  4080d4:	0118      	lsls	r0, r3, #4
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4080d6:	6839      	ldr	r1, [r7, #0]
  4080d8:	4b1b      	ldr	r3, [pc, #108]	; (408148 <rtc_set_time+0x104>)
  4080da:	fba3 2301 	umull	r2, r3, r3, r1
  4080de:	08da      	lsrs	r2, r3, #3
  4080e0:	4613      	mov	r3, r2
  4080e2:	009b      	lsls	r3, r3, #2
  4080e4:	4413      	add	r3, r2
  4080e6:	005b      	lsls	r3, r3, #1
  4080e8:	1aca      	subs	r2, r1, r3
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4080ea:	ea40 0302 	orr.w	r3, r0, r2
  4080ee:	697a      	ldr	r2, [r7, #20]
  4080f0:	4313      	orrs	r3, r2
  4080f2:	617b      	str	r3, [r7, #20]
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);

	/* Update time register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  4080f4:	68fb      	ldr	r3, [r7, #12]
  4080f6:	681b      	ldr	r3, [r3, #0]
  4080f8:	f043 0201 	orr.w	r2, r3, #1
  4080fc:	68fb      	ldr	r3, [r7, #12]
  4080fe:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  408100:	bf00      	nop
  408102:	68fb      	ldr	r3, [r7, #12]
  408104:	699b      	ldr	r3, [r3, #24]
  408106:	f003 0301 	and.w	r3, r3, #1
  40810a:	2b00      	cmp	r3, #0
  40810c:	d0f9      	beq.n	408102 <rtc_set_time+0xbe>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40810e:	68fb      	ldr	r3, [r7, #12]
  408110:	2201      	movs	r2, #1
  408112:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_TIMR = ul_time;
  408114:	68fb      	ldr	r3, [r7, #12]
  408116:	697a      	ldr	r2, [r7, #20]
  408118:	609a      	str	r2, [r3, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  40811a:	68fb      	ldr	r3, [r7, #12]
  40811c:	681b      	ldr	r3, [r3, #0]
  40811e:	f023 0201 	bic.w	r2, r3, #1
  408122:	68fb      	ldr	r3, [r7, #12]
  408124:	601a      	str	r2, [r3, #0]
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  408126:	68fb      	ldr	r3, [r7, #12]
  408128:	69db      	ldr	r3, [r3, #28]
  40812a:	f043 0204 	orr.w	r2, r3, #4
  40812e:	68fb      	ldr	r3, [r7, #12]
  408130:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  408132:	68fb      	ldr	r3, [r7, #12]
  408134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  408136:	f003 0301 	and.w	r3, r3, #1
}
  40813a:	4618      	mov	r0, r3
  40813c:	371c      	adds	r7, #28
  40813e:	46bd      	mov	sp, r7
  408140:	f85d 7b04 	ldr.w	r7, [sp], #4
  408144:	4770      	bx	lr
  408146:	bf00      	nop
  408148:	cccccccd 	.word	0xcccccccd

0040814c <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  40814c:	b480      	push	{r7}
  40814e:	b087      	sub	sp, #28
  408150:	af00      	add	r7, sp, #0
  408152:	60f8      	str	r0, [r7, #12]
  408154:	60b9      	str	r1, [r7, #8]
  408156:	607a      	str	r2, [r7, #4]
  408158:	603b      	str	r3, [r7, #0]
	uint32_t ul_date = 0;
  40815a:	2300      	movs	r3, #0
  40815c:	617b      	str	r3, [r7, #20]

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  40815e:	68ba      	ldr	r2, [r7, #8]
  408160:	4b46      	ldr	r3, [pc, #280]	; (40827c <rtc_set_date+0x130>)
  408162:	fba3 1302 	umull	r1, r3, r3, r2
  408166:	099b      	lsrs	r3, r3, #6
  408168:	0118      	lsls	r0, r3, #4
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  40816a:	68ba      	ldr	r2, [r7, #8]
  40816c:	4b44      	ldr	r3, [pc, #272]	; (408280 <rtc_set_date+0x134>)
  40816e:	fba3 1302 	umull	r1, r3, r3, r2
  408172:	0959      	lsrs	r1, r3, #5
  408174:	4b43      	ldr	r3, [pc, #268]	; (408284 <rtc_set_date+0x138>)
  408176:	fba3 2301 	umull	r2, r3, r3, r1
  40817a:	08da      	lsrs	r2, r3, #3
  40817c:	4613      	mov	r3, r2
  40817e:	009b      	lsls	r3, r3, #2
  408180:	4413      	add	r3, r2
  408182:	005b      	lsls	r3, r3, #1
  408184:	1aca      	subs	r2, r1, r3
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  408186:	ea40 0302 	orr.w	r3, r0, r2
		uint32_t ul_day, uint32_t ul_week)
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  40818a:	697a      	ldr	r2, [r7, #20]
  40818c:	4313      	orrs	r3, r2
  40818e:	617b      	str	r3, [r7, #20]
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  408190:	68ba      	ldr	r2, [r7, #8]
  408192:	4b3c      	ldr	r3, [pc, #240]	; (408284 <rtc_set_date+0x138>)
  408194:	fba3 1302 	umull	r1, r3, r3, r2
  408198:	08d9      	lsrs	r1, r3, #3
  40819a:	4b3a      	ldr	r3, [pc, #232]	; (408284 <rtc_set_date+0x138>)
  40819c:	fba3 2301 	umull	r2, r3, r3, r1
  4081a0:	08da      	lsrs	r2, r3, #3
  4081a2:	4613      	mov	r3, r2
  4081a4:	009b      	lsls	r3, r3, #2
  4081a6:	4413      	add	r3, r2
  4081a8:	005b      	lsls	r3, r3, #1
  4081aa:	1aca      	subs	r2, r1, r3
  4081ac:	0310      	lsls	r0, r2, #12
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  4081ae:	68b9      	ldr	r1, [r7, #8]
  4081b0:	4b34      	ldr	r3, [pc, #208]	; (408284 <rtc_set_date+0x138>)
  4081b2:	fba3 2301 	umull	r2, r3, r3, r1
  4081b6:	08da      	lsrs	r2, r3, #3
  4081b8:	4613      	mov	r3, r2
  4081ba:	009b      	lsls	r3, r3, #2
  4081bc:	4413      	add	r3, r2
  4081be:	005b      	lsls	r3, r3, #1
  4081c0:	1aca      	subs	r2, r1, r3
  4081c2:	0213      	lsls	r3, r2, #8
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  4081c4:	4303      	orrs	r3, r0
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  4081c6:	697a      	ldr	r2, [r7, #20]
  4081c8:	4313      	orrs	r3, r2
  4081ca:	617b      	str	r3, [r7, #20]
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4081cc:	687a      	ldr	r2, [r7, #4]
  4081ce:	4b2d      	ldr	r3, [pc, #180]	; (408284 <rtc_set_date+0x138>)
  4081d0:	fba3 1302 	umull	r1, r3, r3, r2
  4081d4:	08db      	lsrs	r3, r3, #3
  4081d6:	0518      	lsls	r0, r3, #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4081d8:	6879      	ldr	r1, [r7, #4]
  4081da:	4b2a      	ldr	r3, [pc, #168]	; (408284 <rtc_set_date+0x138>)
  4081dc:	fba3 2301 	umull	r2, r3, r3, r1
  4081e0:	08da      	lsrs	r2, r3, #3
  4081e2:	4613      	mov	r3, r2
  4081e4:	009b      	lsls	r3, r3, #2
  4081e6:	4413      	add	r3, r2
  4081e8:	005b      	lsls	r3, r3, #1
  4081ea:	1aca      	subs	r2, r1, r3
  4081ec:	0413      	lsls	r3, r2, #16
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4081ee:	4303      	orrs	r3, r0
  4081f0:	697a      	ldr	r2, [r7, #20]
  4081f2:	4313      	orrs	r3, r2
  4081f4:	617b      	str	r3, [r7, #20]
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4081f6:	6a3b      	ldr	r3, [r7, #32]
  4081f8:	055b      	lsls	r3, r3, #21
  4081fa:	697a      	ldr	r2, [r7, #20]
  4081fc:	4313      	orrs	r3, r2
  4081fe:	617b      	str	r3, [r7, #20]

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  408200:	683a      	ldr	r2, [r7, #0]
  408202:	4b20      	ldr	r3, [pc, #128]	; (408284 <rtc_set_date+0x138>)
  408204:	fba3 1302 	umull	r1, r3, r3, r2
  408208:	08db      	lsrs	r3, r3, #3
  40820a:	0718      	lsls	r0, r3, #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  40820c:	6839      	ldr	r1, [r7, #0]
  40820e:	4b1d      	ldr	r3, [pc, #116]	; (408284 <rtc_set_date+0x138>)
  408210:	fba3 2301 	umull	r2, r3, r3, r1
  408214:	08da      	lsrs	r2, r3, #3
  408216:	4613      	mov	r3, r2
  408218:	009b      	lsls	r3, r3, #2
  40821a:	4413      	add	r3, r2
  40821c:	005b      	lsls	r3, r3, #1
  40821e:	1aca      	subs	r2, r1, r3
  408220:	0613      	lsls	r3, r2, #24

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  408222:	4303      	orrs	r3, r0
  408224:	697a      	ldr	r2, [r7, #20]
  408226:	4313      	orrs	r3, r2
  408228:	617b      	str	r3, [r7, #20]
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);

	/* Update calendar register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40822a:	68fb      	ldr	r3, [r7, #12]
  40822c:	681b      	ldr	r3, [r3, #0]
  40822e:	f043 0202 	orr.w	r2, r3, #2
  408232:	68fb      	ldr	r3, [r7, #12]
  408234:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  408236:	bf00      	nop
  408238:	68fb      	ldr	r3, [r7, #12]
  40823a:	699b      	ldr	r3, [r3, #24]
  40823c:	f003 0301 	and.w	r3, r3, #1
  408240:	2b00      	cmp	r3, #0
  408242:	d0f9      	beq.n	408238 <rtc_set_date+0xec>

	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  408244:	68fb      	ldr	r3, [r7, #12]
  408246:	2201      	movs	r2, #1
  408248:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_CALR = ul_date;
  40824a:	68fb      	ldr	r3, [r7, #12]
  40824c:	697a      	ldr	r2, [r7, #20]
  40824e:	60da      	str	r2, [r3, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  408250:	68fb      	ldr	r3, [r7, #12]
  408252:	681b      	ldr	r3, [r3, #0]
  408254:	f023 0202 	bic.w	r2, r3, #2
  408258:	68fb      	ldr	r3, [r7, #12]
  40825a:	601a      	str	r2, [r3, #0]
	/* Clear SECENV in SCCR */
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  40825c:	68fb      	ldr	r3, [r7, #12]
  40825e:	69db      	ldr	r3, [r3, #28]
  408260:	f043 0204 	orr.w	r2, r3, #4
  408264:	68fb      	ldr	r3, [r7, #12]
  408266:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  408268:	68fb      	ldr	r3, [r7, #12]
  40826a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40826c:	f003 0302 	and.w	r3, r3, #2
}
  408270:	4618      	mov	r0, r3
  408272:	371c      	adds	r7, #28
  408274:	46bd      	mov	sp, r7
  408276:	f85d 7b04 	ldr.w	r7, [sp], #4
  40827a:	4770      	bx	lr
  40827c:	10624dd3 	.word	0x10624dd3
  408280:	51eb851f 	.word	0x51eb851f
  408284:	cccccccd 	.word	0xcccccccd

00408288 <rtc_clear_time_alarm>:
 * \brief Clear the RTC time alarm setting.
 *
 * \param p_rtc Pointer to an RTC instance.
 */
void rtc_clear_time_alarm(Rtc *p_rtc)
{
  408288:	b480      	push	{r7}
  40828a:	b083      	sub	sp, #12
  40828c:	af00      	add	r7, sp, #0
  40828e:	6078      	str	r0, [r7, #4]
	p_rtc->RTC_TIMALR = 0;
  408290:	687b      	ldr	r3, [r7, #4]
  408292:	2200      	movs	r2, #0
  408294:	611a      	str	r2, [r3, #16]
}
  408296:	370c      	adds	r7, #12
  408298:	46bd      	mov	sp, r7
  40829a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40829e:	4770      	bx	lr

004082a0 <rtc_clear_date_alarm>:
 * \brief Clear the RTC date alarm setting.
 *
 * \param p_rtc Pointer to an RTC instance.
 */
void rtc_clear_date_alarm(Rtc *p_rtc)
{
  4082a0:	b480      	push	{r7}
  4082a2:	b083      	sub	sp, #12
  4082a4:	af00      	add	r7, sp, #0
  4082a6:	6078      	str	r0, [r7, #4]
	/* Need a valid value without enabling */
	p_rtc->RTC_CALALR = RTC_CALALR_MONTH(0x01) | RTC_CALALR_DATE(0x01);
  4082a8:	687b      	ldr	r3, [r7, #4]
  4082aa:	4a03      	ldr	r2, [pc, #12]	; (4082b8 <rtc_clear_date_alarm+0x18>)
  4082ac:	615a      	str	r2, [r3, #20]
}
  4082ae:	370c      	adds	r7, #12
  4082b0:	46bd      	mov	sp, r7
  4082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4082b6:	4770      	bx	lr
  4082b8:	01010000 	.word	0x01010000

004082bc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4082bc:	b480      	push	{r7}
  4082be:	b085      	sub	sp, #20
  4082c0:	af00      	add	r7, sp, #0
  4082c2:	6078      	str	r0, [r7, #4]
  4082c4:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4082c6:	2300      	movs	r3, #0
  4082c8:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4082ca:	687b      	ldr	r3, [r7, #4]
  4082cc:	22ac      	movs	r2, #172	; 0xac
  4082ce:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4082d0:	683b      	ldr	r3, [r7, #0]
  4082d2:	681a      	ldr	r2, [r3, #0]
  4082d4:	683b      	ldr	r3, [r7, #0]
  4082d6:	685b      	ldr	r3, [r3, #4]
  4082d8:	fbb2 f3f3 	udiv	r3, r2, r3
  4082dc:	091b      	lsrs	r3, r3, #4
  4082de:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4082e0:	68fb      	ldr	r3, [r7, #12]
  4082e2:	2b00      	cmp	r3, #0
  4082e4:	d003      	beq.n	4082ee <uart_init+0x32>
  4082e6:	68fb      	ldr	r3, [r7, #12]
  4082e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4082ec:	d301      	bcc.n	4082f2 <uart_init+0x36>
		return 1;
  4082ee:	2301      	movs	r3, #1
  4082f0:	e00f      	b.n	408312 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  4082f2:	687b      	ldr	r3, [r7, #4]
  4082f4:	68fa      	ldr	r2, [r7, #12]
  4082f6:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4082f8:	683b      	ldr	r3, [r7, #0]
  4082fa:	689a      	ldr	r2, [r3, #8]
  4082fc:	687b      	ldr	r3, [r7, #4]
  4082fe:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  408300:	687b      	ldr	r3, [r7, #4]
  408302:	f240 2202 	movw	r2, #514	; 0x202
  408306:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40830a:	687b      	ldr	r3, [r7, #4]
  40830c:	2250      	movs	r2, #80	; 0x50
  40830e:	601a      	str	r2, [r3, #0]

	return 0;
  408310:	2300      	movs	r3, #0
}
  408312:	4618      	mov	r0, r3
  408314:	3714      	adds	r7, #20
  408316:	46bd      	mov	sp, r7
  408318:	f85d 7b04 	ldr.w	r7, [sp], #4
  40831c:	4770      	bx	lr
  40831e:	bf00      	nop

00408320 <uart_disable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
  408320:	b480      	push	{r7}
  408322:	b083      	sub	sp, #12
  408324:	af00      	add	r7, sp, #0
  408326:	6078      	str	r0, [r7, #4]
  408328:	6039      	str	r1, [r7, #0]
	p_uart->UART_IDR = ul_sources;
  40832a:	687b      	ldr	r3, [r7, #4]
  40832c:	683a      	ldr	r2, [r7, #0]
  40832e:	60da      	str	r2, [r3, #12]
}
  408330:	370c      	adds	r7, #12
  408332:	46bd      	mov	sp, r7
  408334:	f85d 7b04 	ldr.w	r7, [sp], #4
  408338:	4770      	bx	lr
  40833a:	bf00      	nop

0040833c <uart_get_status>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
  40833c:	b480      	push	{r7}
  40833e:	b083      	sub	sp, #12
  408340:	af00      	add	r7, sp, #0
  408342:	6078      	str	r0, [r7, #4]
	return p_uart->UART_SR;
  408344:	687b      	ldr	r3, [r7, #4]
  408346:	695b      	ldr	r3, [r3, #20]
}
  408348:	4618      	mov	r0, r3
  40834a:	370c      	adds	r7, #12
  40834c:	46bd      	mov	sp, r7
  40834e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408352:	4770      	bx	lr

00408354 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  408354:	b480      	push	{r7}
  408356:	b083      	sub	sp, #12
  408358:	af00      	add	r7, sp, #0
  40835a:	6078      	str	r0, [r7, #4]
  40835c:	460b      	mov	r3, r1
  40835e:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  408360:	687b      	ldr	r3, [r7, #4]
  408362:	695b      	ldr	r3, [r3, #20]
  408364:	f003 0302 	and.w	r3, r3, #2
  408368:	2b00      	cmp	r3, #0
  40836a:	d101      	bne.n	408370 <uart_write+0x1c>
		return 1;
  40836c:	2301      	movs	r3, #1
  40836e:	e003      	b.n	408378 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  408370:	78fa      	ldrb	r2, [r7, #3]
  408372:	687b      	ldr	r3, [r7, #4]
  408374:	61da      	str	r2, [r3, #28]
	return 0;
  408376:	2300      	movs	r3, #0
}
  408378:	4618      	mov	r0, r3
  40837a:	370c      	adds	r7, #12
  40837c:	46bd      	mov	sp, r7
  40837e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408382:	4770      	bx	lr

00408384 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  408384:	b480      	push	{r7}
  408386:	b083      	sub	sp, #12
  408388:	af00      	add	r7, sp, #0
  40838a:	6078      	str	r0, [r7, #4]
  40838c:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40838e:	687b      	ldr	r3, [r7, #4]
  408390:	695b      	ldr	r3, [r3, #20]
  408392:	f003 0301 	and.w	r3, r3, #1
  408396:	2b00      	cmp	r3, #0
  408398:	d101      	bne.n	40839e <uart_read+0x1a>
		return 1;
  40839a:	2301      	movs	r3, #1
  40839c:	e005      	b.n	4083aa <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40839e:	687b      	ldr	r3, [r7, #4]
  4083a0:	699b      	ldr	r3, [r3, #24]
  4083a2:	b2da      	uxtb	r2, r3
  4083a4:	683b      	ldr	r3, [r7, #0]
  4083a6:	701a      	strb	r2, [r3, #0]
	return 0;
  4083a8:	2300      	movs	r3, #0
}
  4083aa:	4618      	mov	r0, r3
  4083ac:	370c      	adds	r7, #12
  4083ae:	46bd      	mov	sp, r7
  4083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4083b4:	4770      	bx	lr
  4083b6:	bf00      	nop

004083b8 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4083b8:	b580      	push	{r7, lr}
  4083ba:	b082      	sub	sp, #8
  4083bc:	af00      	add	r7, sp, #0
  4083be:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4083c0:	687b      	ldr	r3, [r7, #4]
  4083c2:	2b07      	cmp	r3, #7
  4083c4:	d830      	bhi.n	408428 <osc_enable+0x70>
  4083c6:	a201      	add	r2, pc, #4	; (adr r2, 4083cc <osc_enable+0x14>)
  4083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4083cc:	00408429 	.word	0x00408429
  4083d0:	004083ed 	.word	0x004083ed
  4083d4:	004083f5 	.word	0x004083f5
  4083d8:	004083fd 	.word	0x004083fd
  4083dc:	00408405 	.word	0x00408405
  4083e0:	0040840d 	.word	0x0040840d
  4083e4:	00408415 	.word	0x00408415
  4083e8:	0040841f 	.word	0x0040841f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4083ec:	2000      	movs	r0, #0
  4083ee:	4b10      	ldr	r3, [pc, #64]	; (408430 <osc_enable+0x78>)
  4083f0:	4798      	blx	r3
		break;
  4083f2:	e019      	b.n	408428 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4083f4:	2001      	movs	r0, #1
  4083f6:	4b0e      	ldr	r3, [pc, #56]	; (408430 <osc_enable+0x78>)
  4083f8:	4798      	blx	r3
		break;
  4083fa:	e015      	b.n	408428 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4083fc:	2000      	movs	r0, #0
  4083fe:	4b0d      	ldr	r3, [pc, #52]	; (408434 <osc_enable+0x7c>)
  408400:	4798      	blx	r3
		break;
  408402:	e011      	b.n	408428 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  408404:	2010      	movs	r0, #16
  408406:	4b0b      	ldr	r3, [pc, #44]	; (408434 <osc_enable+0x7c>)
  408408:	4798      	blx	r3
		break;
  40840a:	e00d      	b.n	408428 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40840c:	2020      	movs	r0, #32
  40840e:	4b09      	ldr	r3, [pc, #36]	; (408434 <osc_enable+0x7c>)
  408410:	4798      	blx	r3
		break;
  408412:	e009      	b.n	408428 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  408414:	2000      	movs	r0, #0
  408416:	213e      	movs	r1, #62	; 0x3e
  408418:	4b07      	ldr	r3, [pc, #28]	; (408438 <osc_enable+0x80>)
  40841a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40841c:	e004      	b.n	408428 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40841e:	2001      	movs	r0, #1
  408420:	213e      	movs	r1, #62	; 0x3e
  408422:	4b05      	ldr	r3, [pc, #20]	; (408438 <osc_enable+0x80>)
  408424:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  408426:	bf00      	nop
	}
}
  408428:	3708      	adds	r7, #8
  40842a:	46bd      	mov	sp, r7
  40842c:	bd80      	pop	{r7, pc}
  40842e:	bf00      	nop
  408430:	004091fd 	.word	0x004091fd
  408434:	00409269 	.word	0x00409269
  408438:	004092d9 	.word	0x004092d9

0040843c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  40843c:	b580      	push	{r7, lr}
  40843e:	b082      	sub	sp, #8
  408440:	af00      	add	r7, sp, #0
  408442:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  408444:	687b      	ldr	r3, [r7, #4]
  408446:	2b07      	cmp	r3, #7
  408448:	d826      	bhi.n	408498 <osc_is_ready+0x5c>
  40844a:	a201      	add	r2, pc, #4	; (adr r2, 408450 <osc_is_ready+0x14>)
  40844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408450:	00408471 	.word	0x00408471
  408454:	00408475 	.word	0x00408475
  408458:	00408475 	.word	0x00408475
  40845c:	00408487 	.word	0x00408487
  408460:	00408487 	.word	0x00408487
  408464:	00408487 	.word	0x00408487
  408468:	00408487 	.word	0x00408487
  40846c:	00408487 	.word	0x00408487
	case OSC_SLCK_32K_RC:
		return 1;
  408470:	2301      	movs	r3, #1
  408472:	e012      	b.n	40849a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  408474:	4b0b      	ldr	r3, [pc, #44]	; (4084a4 <osc_is_ready+0x68>)
  408476:	4798      	blx	r3
  408478:	4603      	mov	r3, r0
  40847a:	2b00      	cmp	r3, #0
  40847c:	bf0c      	ite	eq
  40847e:	2300      	moveq	r3, #0
  408480:	2301      	movne	r3, #1
  408482:	b2db      	uxtb	r3, r3
  408484:	e009      	b.n	40849a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  408486:	4b08      	ldr	r3, [pc, #32]	; (4084a8 <osc_is_ready+0x6c>)
  408488:	4798      	blx	r3
  40848a:	4603      	mov	r3, r0
  40848c:	2b00      	cmp	r3, #0
  40848e:	bf0c      	ite	eq
  408490:	2300      	moveq	r3, #0
  408492:	2301      	movne	r3, #1
  408494:	b2db      	uxtb	r3, r3
  408496:	e000      	b.n	40849a <osc_is_ready+0x5e>
	}

	return 0;
  408498:	2300      	movs	r3, #0
}
  40849a:	4618      	mov	r0, r3
  40849c:	3708      	adds	r7, #8
  40849e:	46bd      	mov	sp, r7
  4084a0:	bd80      	pop	{r7, pc}
  4084a2:	bf00      	nop
  4084a4:	00409235 	.word	0x00409235
  4084a8:	00409351 	.word	0x00409351

004084ac <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4084ac:	b480      	push	{r7}
  4084ae:	b083      	sub	sp, #12
  4084b0:	af00      	add	r7, sp, #0
  4084b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4084b4:	687b      	ldr	r3, [r7, #4]
  4084b6:	2b07      	cmp	r3, #7
  4084b8:	d825      	bhi.n	408506 <osc_get_rate+0x5a>
  4084ba:	a201      	add	r2, pc, #4	; (adr r2, 4084c0 <osc_get_rate+0x14>)
  4084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4084c0:	004084e1 	.word	0x004084e1
  4084c4:	004084e7 	.word	0x004084e7
  4084c8:	004084ed 	.word	0x004084ed
  4084cc:	004084f3 	.word	0x004084f3
  4084d0:	004084f7 	.word	0x004084f7
  4084d4:	004084fb 	.word	0x004084fb
  4084d8:	004084ff 	.word	0x004084ff
  4084dc:	00408503 	.word	0x00408503
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4084e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4084e4:	e010      	b.n	408508 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4084e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4084ea:	e00d      	b.n	408508 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4084ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4084f0:	e00a      	b.n	408508 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4084f2:	4b08      	ldr	r3, [pc, #32]	; (408514 <osc_get_rate+0x68>)
  4084f4:	e008      	b.n	408508 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4084f6:	4b08      	ldr	r3, [pc, #32]	; (408518 <osc_get_rate+0x6c>)
  4084f8:	e006      	b.n	408508 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4084fa:	4b08      	ldr	r3, [pc, #32]	; (40851c <osc_get_rate+0x70>)
  4084fc:	e004      	b.n	408508 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4084fe:	4b07      	ldr	r3, [pc, #28]	; (40851c <osc_get_rate+0x70>)
  408500:	e002      	b.n	408508 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  408502:	4b06      	ldr	r3, [pc, #24]	; (40851c <osc_get_rate+0x70>)
  408504:	e000      	b.n	408508 <osc_get_rate+0x5c>
	}

	return 0;
  408506:	2300      	movs	r3, #0
}
  408508:	4618      	mov	r0, r3
  40850a:	370c      	adds	r7, #12
  40850c:	46bd      	mov	sp, r7
  40850e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408512:	4770      	bx	lr
  408514:	003d0900 	.word	0x003d0900
  408518:	007a1200 	.word	0x007a1200
  40851c:	00b71b00 	.word	0x00b71b00

00408520 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  408520:	b580      	push	{r7, lr}
  408522:	b082      	sub	sp, #8
  408524:	af00      	add	r7, sp, #0
  408526:	4603      	mov	r3, r0
  408528:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40852a:	bf00      	nop
  40852c:	79fb      	ldrb	r3, [r7, #7]
  40852e:	4618      	mov	r0, r3
  408530:	4b05      	ldr	r3, [pc, #20]	; (408548 <osc_wait_ready+0x28>)
  408532:	4798      	blx	r3
  408534:	4603      	mov	r3, r0
  408536:	f083 0301 	eor.w	r3, r3, #1
  40853a:	b2db      	uxtb	r3, r3
  40853c:	2b00      	cmp	r3, #0
  40853e:	d1f5      	bne.n	40852c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  408540:	3708      	adds	r7, #8
  408542:	46bd      	mov	sp, r7
  408544:	bd80      	pop	{r7, pc}
  408546:	bf00      	nop
  408548:	0040843d 	.word	0x0040843d

0040854c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40854c:	b580      	push	{r7, lr}
  40854e:	b086      	sub	sp, #24
  408550:	af00      	add	r7, sp, #0
  408552:	60f8      	str	r0, [r7, #12]
  408554:	607a      	str	r2, [r7, #4]
  408556:	603b      	str	r3, [r7, #0]
  408558:	460b      	mov	r3, r1
  40855a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40855c:	7afb      	ldrb	r3, [r7, #11]
  40855e:	4618      	mov	r0, r3
  408560:	4b0d      	ldr	r3, [pc, #52]	; (408598 <pll_config_init+0x4c>)
  408562:	4798      	blx	r3
  408564:	4602      	mov	r2, r0
  408566:	687b      	ldr	r3, [r7, #4]
  408568:	fbb2 f3f3 	udiv	r3, r2, r3
  40856c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40856e:	697b      	ldr	r3, [r7, #20]
  408570:	683a      	ldr	r2, [r7, #0]
  408572:	fb02 f303 	mul.w	r3, r2, r3
  408576:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  408578:	683b      	ldr	r3, [r7, #0]
  40857a:	3b01      	subs	r3, #1
  40857c:	041a      	lsls	r2, r3, #16
  40857e:	4b07      	ldr	r3, [pc, #28]	; (40859c <pll_config_init+0x50>)
  408580:	4013      	ands	r3, r2
  408582:	687a      	ldr	r2, [r7, #4]
  408584:	b2d2      	uxtb	r2, r2
  408586:	4313      	orrs	r3, r2
  408588:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  40858c:	68fb      	ldr	r3, [r7, #12]
  40858e:	601a      	str	r2, [r3, #0]
}
  408590:	3718      	adds	r7, #24
  408592:	46bd      	mov	sp, r7
  408594:	bd80      	pop	{r7, pc}
  408596:	bf00      	nop
  408598:	004084ad 	.word	0x004084ad
  40859c:	07ff0000 	.word	0x07ff0000

004085a0 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4085a0:	b580      	push	{r7, lr}
  4085a2:	b082      	sub	sp, #8
  4085a4:	af00      	add	r7, sp, #0
  4085a6:	6078      	str	r0, [r7, #4]
  4085a8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4085aa:	683b      	ldr	r3, [r7, #0]
  4085ac:	2b00      	cmp	r3, #0
  4085ae:	d108      	bne.n	4085c2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4085b0:	4b08      	ldr	r3, [pc, #32]	; (4085d4 <pll_enable+0x34>)
  4085b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4085b4:	4b08      	ldr	r3, [pc, #32]	; (4085d8 <pll_enable+0x38>)
  4085b6:	687a      	ldr	r2, [r7, #4]
  4085b8:	6812      	ldr	r2, [r2, #0]
  4085ba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4085be:	629a      	str	r2, [r3, #40]	; 0x28
  4085c0:	e005      	b.n	4085ce <pll_enable+0x2e>
	} else {
		pmc_disable_pllbck();
  4085c2:	4b06      	ldr	r3, [pc, #24]	; (4085dc <pll_enable+0x3c>)
  4085c4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4085c6:	4b04      	ldr	r3, [pc, #16]	; (4085d8 <pll_enable+0x38>)
  4085c8:	687a      	ldr	r2, [r7, #4]
  4085ca:	6812      	ldr	r2, [r2, #0]
  4085cc:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
  4085ce:	3708      	adds	r7, #8
  4085d0:	46bd      	mov	sp, r7
  4085d2:	bd80      	pop	{r7, pc}
  4085d4:	0040936d 	.word	0x0040936d
  4085d8:	400e0400 	.word	0x400e0400
  4085dc:	004093a1 	.word	0x004093a1

004085e0 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4085e0:	b580      	push	{r7, lr}
  4085e2:	b082      	sub	sp, #8
  4085e4:	af00      	add	r7, sp, #0
  4085e6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4085e8:	687b      	ldr	r3, [r7, #4]
  4085ea:	2b00      	cmp	r3, #0
  4085ec:	d103      	bne.n	4085f6 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  4085ee:	4b05      	ldr	r3, [pc, #20]	; (408604 <pll_is_locked+0x24>)
  4085f0:	4798      	blx	r3
  4085f2:	4603      	mov	r3, r0
  4085f4:	e002      	b.n	4085fc <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  4085f6:	4b04      	ldr	r3, [pc, #16]	; (408608 <pll_is_locked+0x28>)
  4085f8:	4798      	blx	r3
  4085fa:	4603      	mov	r3, r0
	}
}
  4085fc:	4618      	mov	r0, r3
  4085fe:	3708      	adds	r7, #8
  408600:	46bd      	mov	sp, r7
  408602:	bd80      	pop	{r7, pc}
  408604:	00409385 	.word	0x00409385
  408608:	004093b9 	.word	0x004093b9

0040860c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40860c:	b580      	push	{r7, lr}
  40860e:	b082      	sub	sp, #8
  408610:	af00      	add	r7, sp, #0
  408612:	4603      	mov	r3, r0
  408614:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  408616:	79fb      	ldrb	r3, [r7, #7]
  408618:	3b03      	subs	r3, #3
  40861a:	2b04      	cmp	r3, #4
  40861c:	d808      	bhi.n	408630 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40861e:	79fb      	ldrb	r3, [r7, #7]
  408620:	4618      	mov	r0, r3
  408622:	4b05      	ldr	r3, [pc, #20]	; (408638 <pll_enable_source+0x2c>)
  408624:	4798      	blx	r3
		osc_wait_ready(e_src);
  408626:	79fb      	ldrb	r3, [r7, #7]
  408628:	4618      	mov	r0, r3
  40862a:	4b04      	ldr	r3, [pc, #16]	; (40863c <pll_enable_source+0x30>)
  40862c:	4798      	blx	r3
		break;
  40862e:	e000      	b.n	408632 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  408630:	bf00      	nop
	}
}
  408632:	3708      	adds	r7, #8
  408634:	46bd      	mov	sp, r7
  408636:	bd80      	pop	{r7, pc}
  408638:	004083b9 	.word	0x004083b9
  40863c:	00408521 	.word	0x00408521

00408640 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  408640:	b580      	push	{r7, lr}
  408642:	b082      	sub	sp, #8
  408644:	af00      	add	r7, sp, #0
  408646:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  408648:	bf00      	nop
  40864a:	6878      	ldr	r0, [r7, #4]
  40864c:	4b04      	ldr	r3, [pc, #16]	; (408660 <pll_wait_for_lock+0x20>)
  40864e:	4798      	blx	r3
  408650:	4603      	mov	r3, r0
  408652:	2b00      	cmp	r3, #0
  408654:	d0f9      	beq.n	40864a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  408656:	2300      	movs	r3, #0
}
  408658:	4618      	mov	r0, r3
  40865a:	3708      	adds	r7, #8
  40865c:	46bd      	mov	sp, r7
  40865e:	bd80      	pop	{r7, pc}
  408660:	004085e1 	.word	0x004085e1

00408664 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  408664:	b580      	push	{r7, lr}
  408666:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  408668:	2006      	movs	r0, #6
  40866a:	4b04      	ldr	r3, [pc, #16]	; (40867c <sysclk_get_main_hz+0x18>)
  40866c:	4798      	blx	r3
  40866e:	4602      	mov	r2, r0
  408670:	4613      	mov	r3, r2
  408672:	009b      	lsls	r3, r3, #2
  408674:	4413      	add	r3, r2
  408676:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  408678:	4618      	mov	r0, r3
  40867a:	bd80      	pop	{r7, pc}
  40867c:	004084ad 	.word	0x004084ad

00408680 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  408680:	b580      	push	{r7, lr}
  408682:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  408684:	4b02      	ldr	r3, [pc, #8]	; (408690 <sysclk_get_cpu_hz+0x10>)
  408686:	4798      	blx	r3
  408688:	4603      	mov	r3, r0
  40868a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40868c:	4618      	mov	r0, r3
  40868e:	bd80      	pop	{r7, pc}
  408690:	00408665 	.word	0x00408665

00408694 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  408694:	b590      	push	{r4, r7, lr}
  408696:	b083      	sub	sp, #12
  408698:	af00      	add	r7, sp, #0

#ifdef CONFIG_PLL1_SOURCE
	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_PLL1) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL1_SOURCE);
  40869a:	2006      	movs	r0, #6
  40869c:	4b0c      	ldr	r3, [pc, #48]	; (4086d0 <sysclk_enable_usb+0x3c>)
  40869e:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 1);
  4086a0:	463b      	mov	r3, r7
  4086a2:	4618      	mov	r0, r3
  4086a4:	2106      	movs	r1, #6
  4086a6:	2202      	movs	r2, #2
  4086a8:	2310      	movs	r3, #16
  4086aa:	4c0a      	ldr	r4, [pc, #40]	; (4086d4 <sysclk_enable_usb+0x40>)
  4086ac:	47a0      	blx	r4
		pll_enable(&pllcfg, 1);
  4086ae:	463b      	mov	r3, r7
  4086b0:	4618      	mov	r0, r3
  4086b2:	2101      	movs	r1, #1
  4086b4:	4b08      	ldr	r3, [pc, #32]	; (4086d8 <sysclk_enable_usb+0x44>)
  4086b6:	4798      	blx	r3
		pll_wait_for_lock(1);
  4086b8:	2001      	movs	r0, #1
  4086ba:	4b08      	ldr	r3, [pc, #32]	; (4086dc <sysclk_enable_usb+0x48>)
  4086bc:	4798      	blx	r3
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  4086be:	2001      	movs	r0, #1
  4086c0:	4b07      	ldr	r3, [pc, #28]	; (4086e0 <sysclk_enable_usb+0x4c>)
  4086c2:	4798      	blx	r3
		pmc_enable_udpck();
  4086c4:	4b07      	ldr	r3, [pc, #28]	; (4086e4 <sysclk_enable_usb+0x50>)
  4086c6:	4798      	blx	r3
		return;
  4086c8:	bf00      	nop
	}
#endif
}
  4086ca:	370c      	adds	r7, #12
  4086cc:	46bd      	mov	sp, r7
  4086ce:	bd90      	pop	{r4, r7, pc}
  4086d0:	0040860d 	.word	0x0040860d
  4086d4:	0040854d 	.word	0x0040854d
  4086d8:	004085a1 	.word	0x004085a1
  4086dc:	00408641 	.word	0x00408641
  4086e0:	004094dd 	.word	0x004094dd
  4086e4:	00409505 	.word	0x00409505

004086e8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4086e8:	b590      	push	{r4, r7, lr}
  4086ea:	b083      	sub	sp, #12
  4086ec:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4086ee:	4811      	ldr	r0, [pc, #68]	; (408734 <sysclk_init+0x4c>)
  4086f0:	4b11      	ldr	r3, [pc, #68]	; (408738 <sysclk_init+0x50>)
  4086f2:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  4086f4:	2006      	movs	r0, #6
  4086f6:	4b11      	ldr	r3, [pc, #68]	; (40873c <sysclk_init+0x54>)
  4086f8:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4086fa:	1d3b      	adds	r3, r7, #4
  4086fc:	4618      	mov	r0, r3
  4086fe:	2106      	movs	r1, #6
  408700:	2201      	movs	r2, #1
  408702:	2314      	movs	r3, #20
  408704:	4c0e      	ldr	r4, [pc, #56]	; (408740 <sysclk_init+0x58>)
  408706:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  408708:	1d3b      	adds	r3, r7, #4
  40870a:	4618      	mov	r0, r3
  40870c:	2100      	movs	r1, #0
  40870e:	4b0d      	ldr	r3, [pc, #52]	; (408744 <sysclk_init+0x5c>)
  408710:	4798      	blx	r3
		pll_wait_for_lock(0);
  408712:	2000      	movs	r0, #0
  408714:	4b0c      	ldr	r3, [pc, #48]	; (408748 <sysclk_init+0x60>)
  408716:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  408718:	2010      	movs	r0, #16
  40871a:	4b0c      	ldr	r3, [pc, #48]	; (40874c <sysclk_init+0x64>)
  40871c:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40871e:	4b0c      	ldr	r3, [pc, #48]	; (408750 <sysclk_init+0x68>)
  408720:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  408722:	4b0c      	ldr	r3, [pc, #48]	; (408754 <sysclk_init+0x6c>)
  408724:	4798      	blx	r3
  408726:	4603      	mov	r3, r0
  408728:	4618      	mov	r0, r3
  40872a:	4b03      	ldr	r3, [pc, #12]	; (408738 <sysclk_init+0x50>)
  40872c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40872e:	370c      	adds	r7, #12
  408730:	46bd      	mov	sp, r7
  408732:	bd90      	pop	{r4, r7, pc}
  408734:	07270e00 	.word	0x07270e00
  408738:	00409801 	.word	0x00409801
  40873c:	0040860d 	.word	0x0040860d
  408740:	0040854d 	.word	0x0040854d
  408744:	004085a1 	.word	0x004085a1
  408748:	00408641 	.word	0x00408641
  40874c:	00409179 	.word	0x00409179
  408750:	00409665 	.word	0x00409665
  408754:	00408681 	.word	0x00408681

00408758 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  408758:	b580      	push	{r7, lr}
  40875a:	b082      	sub	sp, #8
  40875c:	af00      	add	r7, sp, #0
  40875e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  408760:	6878      	ldr	r0, [r7, #4]
  408762:	4b02      	ldr	r3, [pc, #8]	; (40876c <sysclk_enable_peripheral_clock+0x14>)
  408764:	4798      	blx	r3
}
  408766:	3708      	adds	r7, #8
  408768:	46bd      	mov	sp, r7
  40876a:	bd80      	pop	{r7, pc}
  40876c:	004093d5 	.word	0x004093d5

00408770 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  408770:	b580      	push	{r7, lr}
  408772:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  408774:	200b      	movs	r0, #11
  408776:	4b03      	ldr	r3, [pc, #12]	; (408784 <ioport_init+0x14>)
  408778:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40877a:	200c      	movs	r0, #12
  40877c:	4b01      	ldr	r3, [pc, #4]	; (408784 <ioport_init+0x14>)
  40877e:	4798      	blx	r3
	arch_ioport_init();
}
  408780:	bd80      	pop	{r7, pc}
  408782:	bf00      	nop
  408784:	00408759 	.word	0x00408759

00408788 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  408788:	b480      	push	{r7}
  40878a:	b08d      	sub	sp, #52	; 0x34
  40878c:	af00      	add	r7, sp, #0
  40878e:	6078      	str	r0, [r7, #4]
  408790:	6039      	str	r1, [r7, #0]
  408792:	687b      	ldr	r3, [r7, #4]
  408794:	62fb      	str	r3, [r7, #44]	; 0x2c
  408796:	683b      	ldr	r3, [r7, #0]
  408798:	62bb      	str	r3, [r7, #40]	; 0x28
  40879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40879c:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4087a0:	095a      	lsrs	r2, r3, #5
  4087a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4087a4:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4087a6:	6a3b      	ldr	r3, [r7, #32]
  4087a8:	f003 031f 	and.w	r3, r3, #31
  4087ac:	2101      	movs	r1, #1
  4087ae:	fa01 f303 	lsl.w	r3, r1, r3
  4087b2:	61fa      	str	r2, [r7, #28]
  4087b4:	61bb      	str	r3, [r7, #24]
  4087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4087b8:	617b      	str	r3, [r7, #20]
  4087ba:	69fb      	ldr	r3, [r7, #28]
  4087bc:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4087be:	693b      	ldr	r3, [r7, #16]
  4087c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4087c4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4087c8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4087ca:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4087cc:	697b      	ldr	r3, [r7, #20]
  4087ce:	f003 0308 	and.w	r3, r3, #8
  4087d2:	2b00      	cmp	r3, #0
  4087d4:	d003      	beq.n	4087de <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  4087d6:	68fb      	ldr	r3, [r7, #12]
  4087d8:	69ba      	ldr	r2, [r7, #24]
  4087da:	665a      	str	r2, [r3, #100]	; 0x64
  4087dc:	e002      	b.n	4087e4 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  4087de:	68fb      	ldr	r3, [r7, #12]
  4087e0:	69ba      	ldr	r2, [r7, #24]
  4087e2:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4087e4:	697b      	ldr	r3, [r7, #20]
  4087e6:	f003 0310 	and.w	r3, r3, #16
  4087ea:	2b00      	cmp	r3, #0
  4087ec:	d004      	beq.n	4087f8 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  4087ee:	68fb      	ldr	r3, [r7, #12]
  4087f0:	69ba      	ldr	r2, [r7, #24]
  4087f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4087f6:	e003      	b.n	408800 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  4087f8:	68fb      	ldr	r3, [r7, #12]
  4087fa:	69ba      	ldr	r2, [r7, #24]
  4087fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  408800:	697b      	ldr	r3, [r7, #20]
  408802:	f003 0320 	and.w	r3, r3, #32
  408806:	2b00      	cmp	r3, #0
  408808:	d003      	beq.n	408812 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  40880a:	68fb      	ldr	r3, [r7, #12]
  40880c:	69ba      	ldr	r2, [r7, #24]
  40880e:	651a      	str	r2, [r3, #80]	; 0x50
  408810:	e002      	b.n	408818 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  408812:	68fb      	ldr	r3, [r7, #12]
  408814:	69ba      	ldr	r2, [r7, #24]
  408816:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  408818:	697b      	ldr	r3, [r7, #20]
  40881a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40881e:	2b00      	cmp	r3, #0
  408820:	d003      	beq.n	40882a <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  408822:	68fb      	ldr	r3, [r7, #12]
  408824:	69ba      	ldr	r2, [r7, #24]
  408826:	621a      	str	r2, [r3, #32]
  408828:	e002      	b.n	408830 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  40882a:	68fb      	ldr	r3, [r7, #12]
  40882c:	69ba      	ldr	r2, [r7, #24]
  40882e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  408830:	697b      	ldr	r3, [r7, #20]
  408832:	f003 0380 	and.w	r3, r3, #128	; 0x80
  408836:	2b00      	cmp	r3, #0
  408838:	d004      	beq.n	408844 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40883a:	68fb      	ldr	r3, [r7, #12]
  40883c:	69ba      	ldr	r2, [r7, #24]
  40883e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  408842:	e003      	b.n	40884c <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  408844:	68fb      	ldr	r3, [r7, #12]
  408846:	69ba      	ldr	r2, [r7, #24]
  408848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  40884c:	697b      	ldr	r3, [r7, #20]
  40884e:	f003 0301 	and.w	r3, r3, #1
  408852:	2b00      	cmp	r3, #0
  408854:	d006      	beq.n	408864 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  408856:	68fb      	ldr	r3, [r7, #12]
  408858:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40885a:	69bb      	ldr	r3, [r7, #24]
  40885c:	431a      	orrs	r2, r3
  40885e:	68fb      	ldr	r3, [r7, #12]
  408860:	671a      	str	r2, [r3, #112]	; 0x70
  408862:	e006      	b.n	408872 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  408864:	68fb      	ldr	r3, [r7, #12]
  408866:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408868:	69bb      	ldr	r3, [r7, #24]
  40886a:	43db      	mvns	r3, r3
  40886c:	401a      	ands	r2, r3
  40886e:	68fb      	ldr	r3, [r7, #12]
  408870:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  408872:	697b      	ldr	r3, [r7, #20]
  408874:	f003 0302 	and.w	r3, r3, #2
  408878:	2b00      	cmp	r3, #0
  40887a:	d006      	beq.n	40888a <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  40887c:	68fb      	ldr	r3, [r7, #12]
  40887e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408880:	69bb      	ldr	r3, [r7, #24]
  408882:	431a      	orrs	r2, r3
  408884:	68fb      	ldr	r3, [r7, #12]
  408886:	675a      	str	r2, [r3, #116]	; 0x74
  408888:	e006      	b.n	408898 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40888a:	68fb      	ldr	r3, [r7, #12]
  40888c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40888e:	69bb      	ldr	r3, [r7, #24]
  408890:	43db      	mvns	r3, r3
  408892:	401a      	ands	r2, r3
  408894:	68fb      	ldr	r3, [r7, #12]
  408896:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  408898:	3734      	adds	r7, #52	; 0x34
  40889a:	46bd      	mov	sp, r7
  40889c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4088a0:	4770      	bx	lr
  4088a2:	bf00      	nop

004088a4 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4088a4:	b480      	push	{r7}
  4088a6:	b08d      	sub	sp, #52	; 0x34
  4088a8:	af00      	add	r7, sp, #0
  4088aa:	6078      	str	r0, [r7, #4]
  4088ac:	460b      	mov	r3, r1
  4088ae:	70fb      	strb	r3, [r7, #3]
  4088b0:	687b      	ldr	r3, [r7, #4]
  4088b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  4088b4:	78fb      	ldrb	r3, [r7, #3]
  4088b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4088ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4088bc:	627b      	str	r3, [r7, #36]	; 0x24
  4088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4088c0:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4088c2:	6a3b      	ldr	r3, [r7, #32]
  4088c4:	095b      	lsrs	r3, r3, #5
  4088c6:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4088c8:	69fb      	ldr	r3, [r7, #28]
  4088ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4088ce:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4088d2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4088d4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4088d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4088da:	2b01      	cmp	r3, #1
  4088dc:	d109      	bne.n	4088f2 <ioport_set_pin_dir+0x4e>
  4088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4088e0:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4088e2:	697b      	ldr	r3, [r7, #20]
  4088e4:	f003 031f 	and.w	r3, r3, #31
  4088e8:	2201      	movs	r2, #1
  4088ea:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4088ec:	69bb      	ldr	r3, [r7, #24]
  4088ee:	611a      	str	r2, [r3, #16]
  4088f0:	e00c      	b.n	40890c <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4088f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4088f6:	2b00      	cmp	r3, #0
  4088f8:	d108      	bne.n	40890c <ioport_set_pin_dir+0x68>
  4088fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4088fc:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4088fe:	693b      	ldr	r3, [r7, #16]
  408900:	f003 031f 	and.w	r3, r3, #31
  408904:	2201      	movs	r2, #1
  408906:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  408908:	69bb      	ldr	r3, [r7, #24]
  40890a:	615a      	str	r2, [r3, #20]
  40890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40890e:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  408910:	68fb      	ldr	r3, [r7, #12]
  408912:	f003 031f 	and.w	r3, r3, #31
  408916:	2201      	movs	r2, #1
  408918:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40891a:	69bb      	ldr	r3, [r7, #24]
  40891c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  408920:	3734      	adds	r7, #52	; 0x34
  408922:	46bd      	mov	sp, r7
  408924:	f85d 7b04 	ldr.w	r7, [sp], #4
  408928:	4770      	bx	lr
  40892a:	bf00      	nop

0040892c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  40892c:	b480      	push	{r7}
  40892e:	b08b      	sub	sp, #44	; 0x2c
  408930:	af00      	add	r7, sp, #0
  408932:	6078      	str	r0, [r7, #4]
  408934:	460b      	mov	r3, r1
  408936:	70fb      	strb	r3, [r7, #3]
  408938:	687b      	ldr	r3, [r7, #4]
  40893a:	627b      	str	r3, [r7, #36]	; 0x24
  40893c:	78fb      	ldrb	r3, [r7, #3]
  40893e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  408942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408944:	61fb      	str	r3, [r7, #28]
  408946:	69fb      	ldr	r3, [r7, #28]
  408948:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40894a:	69bb      	ldr	r3, [r7, #24]
  40894c:	095b      	lsrs	r3, r3, #5
  40894e:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  408950:	697b      	ldr	r3, [r7, #20]
  408952:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  408956:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40895a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40895c:	613b      	str	r3, [r7, #16]

	if (level) {
  40895e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  408962:	2b00      	cmp	r3, #0
  408964:	d009      	beq.n	40897a <ioport_set_pin_level+0x4e>
  408966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408968:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40896a:	68fb      	ldr	r3, [r7, #12]
  40896c:	f003 031f 	and.w	r3, r3, #31
  408970:	2201      	movs	r2, #1
  408972:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408974:	693b      	ldr	r3, [r7, #16]
  408976:	631a      	str	r2, [r3, #48]	; 0x30
  408978:	e008      	b.n	40898c <ioport_set_pin_level+0x60>
  40897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40897c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40897e:	68bb      	ldr	r3, [r7, #8]
  408980:	f003 031f 	and.w	r3, r3, #31
  408984:	2201      	movs	r2, #1
  408986:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408988:	693b      	ldr	r3, [r7, #16]
  40898a:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  40898c:	372c      	adds	r7, #44	; 0x2c
  40898e:	46bd      	mov	sp, r7
  408990:	f85d 7b04 	ldr.w	r7, [sp], #4
  408994:	4770      	bx	lr
  408996:	bf00      	nop

00408998 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  408998:	b580      	push	{r7, lr}
  40899a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40899c:	4818      	ldr	r0, [pc, #96]	; (408a00 <board_init+0x68>)
  40899e:	4b19      	ldr	r3, [pc, #100]	; (408a04 <board_init+0x6c>)
  4089a0:	4798      	blx	r3

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  4089a2:	4b19      	ldr	r3, [pc, #100]	; (408a08 <board_init+0x70>)
  4089a4:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  4089a6:	2057      	movs	r0, #87	; 0x57
  4089a8:	2101      	movs	r1, #1
  4089aa:	4b18      	ldr	r3, [pc, #96]	; (408a0c <board_init+0x74>)
  4089ac:	4798      	blx	r3
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
  4089ae:	2057      	movs	r0, #87	; 0x57
  4089b0:	2101      	movs	r1, #1
  4089b2:	4b17      	ldr	r3, [pc, #92]	; (408a10 <board_init+0x78>)
  4089b4:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
  4089b6:	2002      	movs	r0, #2
  4089b8:	2100      	movs	r1, #0
  4089ba:	4b15      	ldr	r3, [pc, #84]	; (408a10 <board_init+0x78>)
  4089bc:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, (BUTTON_0_ACTIVE ?
  4089be:	2002      	movs	r0, #2
  4089c0:	2108      	movs	r1, #8
  4089c2:	4b14      	ldr	r3, [pc, #80]	; (408a14 <board_init+0x7c>)
  4089c4:	4798      	blx	r3
				IOPORT_MODE_PULLDOWN : IOPORT_MODE_PULLUP));

	/* Initialize EXT3 LED0, LED1 & LED2, turned off */
	ioport_set_pin_level(IO1_LED1_PIN, !IO1_LED1_ACTIVE);
  4089c6:	2054      	movs	r0, #84	; 0x54
  4089c8:	2101      	movs	r1, #1
  4089ca:	4b10      	ldr	r3, [pc, #64]	; (408a0c <board_init+0x74>)
  4089cc:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED1_PIN, IOPORT_DIR_OUTPUT);
  4089ce:	2054      	movs	r0, #84	; 0x54
  4089d0:	2101      	movs	r1, #1
  4089d2:	4b0f      	ldr	r3, [pc, #60]	; (408a10 <board_init+0x78>)
  4089d4:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED2_PIN, !IO1_LED2_ACTIVE);
  4089d6:	2010      	movs	r0, #16
  4089d8:	2101      	movs	r1, #1
  4089da:	4b0c      	ldr	r3, [pc, #48]	; (408a0c <board_init+0x74>)
  4089dc:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED2_PIN, IOPORT_DIR_OUTPUT);
  4089de:	2010      	movs	r0, #16
  4089e0:	2101      	movs	r1, #1
  4089e2:	4b0b      	ldr	r3, [pc, #44]	; (408a10 <board_init+0x78>)
  4089e4:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
  4089e6:	2056      	movs	r0, #86	; 0x56
  4089e8:	2101      	movs	r1, #1
  4089ea:	4b08      	ldr	r3, [pc, #32]	; (408a0c <board_init+0x74>)
  4089ec:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);
  4089ee:	2056      	movs	r0, #86	; 0x56
  4089f0:	2101      	movs	r1, #1
  4089f2:	4b07      	ldr	r3, [pc, #28]	; (408a10 <board_init+0x78>)
  4089f4:	4798      	blx	r3

  if ( BUTTON_0_ACTIVE ) {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLDOWN);
	}
  else {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
  4089f6:	2002      	movs	r0, #2
  4089f8:	2108      	movs	r1, #8
  4089fa:	4b06      	ldr	r3, [pc, #24]	; (408a14 <board_init+0x7c>)
  4089fc:	4798      	blx	r3

#endif  



}
  4089fe:	bd80      	pop	{r7, pc}
  408a00:	400e1450 	.word	0x400e1450
  408a04:	00409579 	.word	0x00409579
  408a08:	00408771 	.word	0x00408771
  408a0c:	0040892d 	.word	0x0040892d
  408a10:	004088a5 	.word	0x004088a5
  408a14:	00408789 	.word	0x00408789

00408a18 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  408a18:	b480      	push	{r7}
  408a1a:	b085      	sub	sp, #20
  408a1c:	af00      	add	r7, sp, #0
  408a1e:	60f8      	str	r0, [r7, #12]
  408a20:	60b9      	str	r1, [r7, #8]
  408a22:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  408a24:	687b      	ldr	r3, [r7, #4]
  408a26:	2b00      	cmp	r3, #0
  408a28:	d003      	beq.n	408a32 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  408a2a:	68fb      	ldr	r3, [r7, #12]
  408a2c:	68ba      	ldr	r2, [r7, #8]
  408a2e:	665a      	str	r2, [r3, #100]	; 0x64
  408a30:	e002      	b.n	408a38 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  408a32:	68fb      	ldr	r3, [r7, #12]
  408a34:	68ba      	ldr	r2, [r7, #8]
  408a36:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  408a38:	3714      	adds	r7, #20
  408a3a:	46bd      	mov	sp, r7
  408a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a40:	4770      	bx	lr
  408a42:	bf00      	nop

00408a44 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  408a44:	b480      	push	{r7}
  408a46:	b085      	sub	sp, #20
  408a48:	af00      	add	r7, sp, #0
  408a4a:	60f8      	str	r0, [r7, #12]
  408a4c:	60b9      	str	r1, [r7, #8]
  408a4e:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  408a50:	68fb      	ldr	r3, [r7, #12]
  408a52:	68ba      	ldr	r2, [r7, #8]
  408a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  408a58:	687b      	ldr	r3, [r7, #4]
  408a5a:	005b      	lsls	r3, r3, #1
  408a5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  408a60:	fbb2 f3f3 	udiv	r3, r2, r3
  408a64:	3b01      	subs	r3, #1
  408a66:	f3c3 020d 	ubfx	r2, r3, #0, #14
  408a6a:	68fb      	ldr	r3, [r7, #12]
  408a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  408a70:	3714      	adds	r7, #20
  408a72:	46bd      	mov	sp, r7
  408a74:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a78:	4770      	bx	lr
  408a7a:	bf00      	nop

00408a7c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  408a7c:	b480      	push	{r7}
  408a7e:	b087      	sub	sp, #28
  408a80:	af00      	add	r7, sp, #0
  408a82:	60f8      	str	r0, [r7, #12]
  408a84:	60b9      	str	r1, [r7, #8]
  408a86:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  408a88:	68fb      	ldr	r3, [r7, #12]
  408a8a:	687a      	ldr	r2, [r7, #4]
  408a8c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  408a8e:	68bb      	ldr	r3, [r7, #8]
  408a90:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  408a94:	d04a      	beq.n	408b2c <pio_set_peripheral+0xb0>
  408a96:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  408a9a:	d808      	bhi.n	408aae <pio_set_peripheral+0x32>
  408a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  408aa0:	d016      	beq.n	408ad0 <pio_set_peripheral+0x54>
  408aa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  408aa6:	d02c      	beq.n	408b02 <pio_set_peripheral+0x86>
  408aa8:	2b00      	cmp	r3, #0
  408aaa:	d069      	beq.n	408b80 <pio_set_peripheral+0x104>
  408aac:	e064      	b.n	408b78 <pio_set_peripheral+0xfc>
  408aae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  408ab2:	d065      	beq.n	408b80 <pio_set_peripheral+0x104>
  408ab4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  408ab8:	d803      	bhi.n	408ac2 <pio_set_peripheral+0x46>
  408aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  408abe:	d04a      	beq.n	408b56 <pio_set_peripheral+0xda>
  408ac0:	e05a      	b.n	408b78 <pio_set_peripheral+0xfc>
  408ac2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  408ac6:	d05b      	beq.n	408b80 <pio_set_peripheral+0x104>
  408ac8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  408acc:	d058      	beq.n	408b80 <pio_set_peripheral+0x104>
  408ace:	e053      	b.n	408b78 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  408ad0:	68fb      	ldr	r3, [r7, #12]
  408ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408ad4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  408ad6:	68fb      	ldr	r3, [r7, #12]
  408ad8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408ada:	687b      	ldr	r3, [r7, #4]
  408adc:	43d9      	mvns	r1, r3
  408ade:	697b      	ldr	r3, [r7, #20]
  408ae0:	400b      	ands	r3, r1
  408ae2:	401a      	ands	r2, r3
  408ae4:	68fb      	ldr	r3, [r7, #12]
  408ae6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  408ae8:	68fb      	ldr	r3, [r7, #12]
  408aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408aec:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  408aee:	68fb      	ldr	r3, [r7, #12]
  408af0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408af2:	687b      	ldr	r3, [r7, #4]
  408af4:	43d9      	mvns	r1, r3
  408af6:	697b      	ldr	r3, [r7, #20]
  408af8:	400b      	ands	r3, r1
  408afa:	401a      	ands	r2, r3
  408afc:	68fb      	ldr	r3, [r7, #12]
  408afe:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  408b00:	e03a      	b.n	408b78 <pio_set_peripheral+0xfc>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  408b02:	68fb      	ldr	r3, [r7, #12]
  408b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408b06:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  408b08:	687a      	ldr	r2, [r7, #4]
  408b0a:	697b      	ldr	r3, [r7, #20]
  408b0c:	431a      	orrs	r2, r3
  408b0e:	68fb      	ldr	r3, [r7, #12]
  408b10:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  408b12:	68fb      	ldr	r3, [r7, #12]
  408b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408b16:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  408b18:	68fb      	ldr	r3, [r7, #12]
  408b1a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408b1c:	687b      	ldr	r3, [r7, #4]
  408b1e:	43d9      	mvns	r1, r3
  408b20:	697b      	ldr	r3, [r7, #20]
  408b22:	400b      	ands	r3, r1
  408b24:	401a      	ands	r2, r3
  408b26:	68fb      	ldr	r3, [r7, #12]
  408b28:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  408b2a:	e025      	b.n	408b78 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  408b2c:	68fb      	ldr	r3, [r7, #12]
  408b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408b30:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  408b32:	68fb      	ldr	r3, [r7, #12]
  408b34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408b36:	687b      	ldr	r3, [r7, #4]
  408b38:	43d9      	mvns	r1, r3
  408b3a:	697b      	ldr	r3, [r7, #20]
  408b3c:	400b      	ands	r3, r1
  408b3e:	401a      	ands	r2, r3
  408b40:	68fb      	ldr	r3, [r7, #12]
  408b42:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  408b44:	68fb      	ldr	r3, [r7, #12]
  408b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408b48:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  408b4a:	687a      	ldr	r2, [r7, #4]
  408b4c:	697b      	ldr	r3, [r7, #20]
  408b4e:	431a      	orrs	r2, r3
  408b50:	68fb      	ldr	r3, [r7, #12]
  408b52:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  408b54:	e010      	b.n	408b78 <pio_set_peripheral+0xfc>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  408b56:	68fb      	ldr	r3, [r7, #12]
  408b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408b5a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  408b5c:	687a      	ldr	r2, [r7, #4]
  408b5e:	697b      	ldr	r3, [r7, #20]
  408b60:	431a      	orrs	r2, r3
  408b62:	68fb      	ldr	r3, [r7, #12]
  408b64:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  408b66:	68fb      	ldr	r3, [r7, #12]
  408b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408b6a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  408b6c:	687a      	ldr	r2, [r7, #4]
  408b6e:	697b      	ldr	r3, [r7, #20]
  408b70:	431a      	orrs	r2, r3
  408b72:	68fb      	ldr	r3, [r7, #12]
  408b74:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  408b76:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  408b78:	68fb      	ldr	r3, [r7, #12]
  408b7a:	687a      	ldr	r2, [r7, #4]
  408b7c:	605a      	str	r2, [r3, #4]
  408b7e:	e000      	b.n	408b82 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  408b80:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  408b82:	371c      	adds	r7, #28
  408b84:	46bd      	mov	sp, r7
  408b86:	f85d 7b04 	ldr.w	r7, [sp], #4
  408b8a:	4770      	bx	lr

00408b8c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  408b8c:	b580      	push	{r7, lr}
  408b8e:	b084      	sub	sp, #16
  408b90:	af00      	add	r7, sp, #0
  408b92:	60f8      	str	r0, [r7, #12]
  408b94:	60b9      	str	r1, [r7, #8]
  408b96:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  408b98:	68f8      	ldr	r0, [r7, #12]
  408b9a:	68b9      	ldr	r1, [r7, #8]
  408b9c:	4b18      	ldr	r3, [pc, #96]	; (408c00 <pio_set_input+0x74>)
  408b9e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  408ba0:	687b      	ldr	r3, [r7, #4]
  408ba2:	f003 0301 	and.w	r3, r3, #1
  408ba6:	68f8      	ldr	r0, [r7, #12]
  408ba8:	68b9      	ldr	r1, [r7, #8]
  408baa:	461a      	mov	r2, r3
  408bac:	4b15      	ldr	r3, [pc, #84]	; (408c04 <pio_set_input+0x78>)
  408bae:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  408bb0:	687b      	ldr	r3, [r7, #4]
  408bb2:	f003 030a 	and.w	r3, r3, #10
  408bb6:	2b00      	cmp	r3, #0
  408bb8:	d003      	beq.n	408bc2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  408bba:	68fb      	ldr	r3, [r7, #12]
  408bbc:	68ba      	ldr	r2, [r7, #8]
  408bbe:	621a      	str	r2, [r3, #32]
  408bc0:	e002      	b.n	408bc8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  408bc2:	68fb      	ldr	r3, [r7, #12]
  408bc4:	68ba      	ldr	r2, [r7, #8]
  408bc6:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  408bc8:	687b      	ldr	r3, [r7, #4]
  408bca:	f003 0302 	and.w	r3, r3, #2
  408bce:	2b00      	cmp	r3, #0
  408bd0:	d004      	beq.n	408bdc <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  408bd2:	68fb      	ldr	r3, [r7, #12]
  408bd4:	68ba      	ldr	r2, [r7, #8]
  408bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  408bda:	e008      	b.n	408bee <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  408bdc:	687b      	ldr	r3, [r7, #4]
  408bde:	f003 0308 	and.w	r3, r3, #8
  408be2:	2b00      	cmp	r3, #0
  408be4:	d003      	beq.n	408bee <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  408be6:	68fb      	ldr	r3, [r7, #12]
  408be8:	68ba      	ldr	r2, [r7, #8]
  408bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  408bee:	68fb      	ldr	r3, [r7, #12]
  408bf0:	68ba      	ldr	r2, [r7, #8]
  408bf2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  408bf4:	68fb      	ldr	r3, [r7, #12]
  408bf6:	68ba      	ldr	r2, [r7, #8]
  408bf8:	601a      	str	r2, [r3, #0]
}
  408bfa:	3710      	adds	r7, #16
  408bfc:	46bd      	mov	sp, r7
  408bfe:	bd80      	pop	{r7, pc}
  408c00:	00408cf9 	.word	0x00408cf9
  408c04:	00408a19 	.word	0x00408a19

00408c08 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  408c08:	b580      	push	{r7, lr}
  408c0a:	b084      	sub	sp, #16
  408c0c:	af00      	add	r7, sp, #0
  408c0e:	60f8      	str	r0, [r7, #12]
  408c10:	60b9      	str	r1, [r7, #8]
  408c12:	607a      	str	r2, [r7, #4]
  408c14:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  408c16:	68f8      	ldr	r0, [r7, #12]
  408c18:	68b9      	ldr	r1, [r7, #8]
  408c1a:	4b12      	ldr	r3, [pc, #72]	; (408c64 <pio_set_output+0x5c>)
  408c1c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  408c1e:	68f8      	ldr	r0, [r7, #12]
  408c20:	68b9      	ldr	r1, [r7, #8]
  408c22:	69ba      	ldr	r2, [r7, #24]
  408c24:	4b10      	ldr	r3, [pc, #64]	; (408c68 <pio_set_output+0x60>)
  408c26:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  408c28:	683b      	ldr	r3, [r7, #0]
  408c2a:	2b00      	cmp	r3, #0
  408c2c:	d003      	beq.n	408c36 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  408c2e:	68fb      	ldr	r3, [r7, #12]
  408c30:	68ba      	ldr	r2, [r7, #8]
  408c32:	651a      	str	r2, [r3, #80]	; 0x50
  408c34:	e002      	b.n	408c3c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  408c36:	68fb      	ldr	r3, [r7, #12]
  408c38:	68ba      	ldr	r2, [r7, #8]
  408c3a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  408c3c:	687b      	ldr	r3, [r7, #4]
  408c3e:	2b00      	cmp	r3, #0
  408c40:	d003      	beq.n	408c4a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  408c42:	68fb      	ldr	r3, [r7, #12]
  408c44:	68ba      	ldr	r2, [r7, #8]
  408c46:	631a      	str	r2, [r3, #48]	; 0x30
  408c48:	e002      	b.n	408c50 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  408c4a:	68fb      	ldr	r3, [r7, #12]
  408c4c:	68ba      	ldr	r2, [r7, #8]
  408c4e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  408c50:	68fb      	ldr	r3, [r7, #12]
  408c52:	68ba      	ldr	r2, [r7, #8]
  408c54:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  408c56:	68fb      	ldr	r3, [r7, #12]
  408c58:	68ba      	ldr	r2, [r7, #8]
  408c5a:	601a      	str	r2, [r3, #0]
}
  408c5c:	3710      	adds	r7, #16
  408c5e:	46bd      	mov	sp, r7
  408c60:	bd80      	pop	{r7, pc}
  408c62:	bf00      	nop
  408c64:	00408cf9 	.word	0x00408cf9
  408c68:	00408a19 	.word	0x00408a19

00408c6c <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  408c6c:	b480      	push	{r7}
  408c6e:	b085      	sub	sp, #20
  408c70:	af00      	add	r7, sp, #0
  408c72:	60f8      	str	r0, [r7, #12]
  408c74:	60b9      	str	r1, [r7, #8]
  408c76:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  408c78:	687b      	ldr	r3, [r7, #4]
  408c7a:	f003 0310 	and.w	r3, r3, #16
  408c7e:	2b00      	cmp	r3, #0
  408c80:	d020      	beq.n	408cc4 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  408c82:	68fb      	ldr	r3, [r7, #12]
  408c84:	68ba      	ldr	r2, [r7, #8]
  408c86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  408c8a:	687b      	ldr	r3, [r7, #4]
  408c8c:	f003 0320 	and.w	r3, r3, #32
  408c90:	2b00      	cmp	r3, #0
  408c92:	d004      	beq.n	408c9e <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  408c94:	68fb      	ldr	r3, [r7, #12]
  408c96:	68ba      	ldr	r2, [r7, #8]
  408c98:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  408c9c:	e003      	b.n	408ca6 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  408c9e:	68fb      	ldr	r3, [r7, #12]
  408ca0:	68ba      	ldr	r2, [r7, #8]
  408ca2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  408ca6:	687b      	ldr	r3, [r7, #4]
  408ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  408cac:	2b00      	cmp	r3, #0
  408cae:	d004      	beq.n	408cba <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  408cb0:	68fb      	ldr	r3, [r7, #12]
  408cb2:	68ba      	ldr	r2, [r7, #8]
  408cb4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  408cb8:	e008      	b.n	408ccc <pio_configure_interrupt+0x60>
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  408cba:	68fb      	ldr	r3, [r7, #12]
  408cbc:	68ba      	ldr	r2, [r7, #8]
  408cbe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  408cc2:	e003      	b.n	408ccc <pio_configure_interrupt+0x60>
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  408cc4:	68fb      	ldr	r3, [r7, #12]
  408cc6:	68ba      	ldr	r2, [r7, #8]
  408cc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  408ccc:	3714      	adds	r7, #20
  408cce:	46bd      	mov	sp, r7
  408cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
  408cd4:	4770      	bx	lr
  408cd6:	bf00      	nop

00408cd8 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  408cd8:	b480      	push	{r7}
  408cda:	b083      	sub	sp, #12
  408cdc:	af00      	add	r7, sp, #0
  408cde:	6078      	str	r0, [r7, #4]
  408ce0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_ISR;
  408ce2:	687b      	ldr	r3, [r7, #4]
  408ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  408ce6:	687b      	ldr	r3, [r7, #4]
  408ce8:	683a      	ldr	r2, [r7, #0]
  408cea:	641a      	str	r2, [r3, #64]	; 0x40
}
  408cec:	370c      	adds	r7, #12
  408cee:	46bd      	mov	sp, r7
  408cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
  408cf4:	4770      	bx	lr
  408cf6:	bf00      	nop

00408cf8 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  408cf8:	b480      	push	{r7}
  408cfa:	b083      	sub	sp, #12
  408cfc:	af00      	add	r7, sp, #0
  408cfe:	6078      	str	r0, [r7, #4]
  408d00:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  408d02:	687b      	ldr	r3, [r7, #4]
  408d04:	683a      	ldr	r2, [r7, #0]
  408d06:	645a      	str	r2, [r3, #68]	; 0x44
}
  408d08:	370c      	adds	r7, #12
  408d0a:	46bd      	mov	sp, r7
  408d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408d10:	4770      	bx	lr
  408d12:	bf00      	nop

00408d14 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  408d14:	b480      	push	{r7}
  408d16:	b083      	sub	sp, #12
  408d18:	af00      	add	r7, sp, #0
  408d1a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  408d1c:	687b      	ldr	r3, [r7, #4]
  408d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  408d20:	4618      	mov	r0, r3
  408d22:	370c      	adds	r7, #12
  408d24:	46bd      	mov	sp, r7
  408d26:	f85d 7b04 	ldr.w	r7, [sp], #4
  408d2a:	4770      	bx	lr

00408d2c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  408d2c:	b480      	push	{r7}
  408d2e:	b083      	sub	sp, #12
  408d30:	af00      	add	r7, sp, #0
  408d32:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  408d34:	687b      	ldr	r3, [r7, #4]
  408d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  408d38:	4618      	mov	r0, r3
  408d3a:	370c      	adds	r7, #12
  408d3c:	46bd      	mov	sp, r7
  408d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408d42:	4770      	bx	lr

00408d44 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  408d44:	b580      	push	{r7, lr}
  408d46:	b084      	sub	sp, #16
  408d48:	af00      	add	r7, sp, #0
  408d4a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  408d4c:	6878      	ldr	r0, [r7, #4]
  408d4e:	4b07      	ldr	r3, [pc, #28]	; (408d6c <pio_set_pin_high+0x28>)
  408d50:	4798      	blx	r3
  408d52:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  408d54:	687b      	ldr	r3, [r7, #4]
  408d56:	f003 031f 	and.w	r3, r3, #31
  408d5a:	2201      	movs	r2, #1
  408d5c:	fa02 f303 	lsl.w	r3, r2, r3
  408d60:	461a      	mov	r2, r3
  408d62:	68fb      	ldr	r3, [r7, #12]
  408d64:	631a      	str	r2, [r3, #48]	; 0x30
}
  408d66:	3710      	adds	r7, #16
  408d68:	46bd      	mov	sp, r7
  408d6a:	bd80      	pop	{r7, pc}
  408d6c:	00408fa9 	.word	0x00408fa9

00408d70 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  408d70:	b580      	push	{r7, lr}
  408d72:	b084      	sub	sp, #16
  408d74:	af00      	add	r7, sp, #0
  408d76:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  408d78:	6878      	ldr	r0, [r7, #4]
  408d7a:	4b07      	ldr	r3, [pc, #28]	; (408d98 <pio_set_pin_low+0x28>)
  408d7c:	4798      	blx	r3
  408d7e:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  408d80:	687b      	ldr	r3, [r7, #4]
  408d82:	f003 031f 	and.w	r3, r3, #31
  408d86:	2201      	movs	r2, #1
  408d88:	fa02 f303 	lsl.w	r3, r2, r3
  408d8c:	461a      	mov	r2, r3
  408d8e:	68fb      	ldr	r3, [r7, #12]
  408d90:	635a      	str	r2, [r3, #52]	; 0x34
}
  408d92:	3710      	adds	r7, #16
  408d94:	46bd      	mov	sp, r7
  408d96:	bd80      	pop	{r7, pc}
  408d98:	00408fa9 	.word	0x00408fa9

00408d9c <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
  408d9c:	b580      	push	{r7, lr}
  408d9e:	b084      	sub	sp, #16
  408da0:	af00      	add	r7, sp, #0
  408da2:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  408da4:	6878      	ldr	r0, [r7, #4]
  408da6:	4b12      	ldr	r3, [pc, #72]	; (408df0 <pio_toggle_pin+0x54>)
  408da8:	4798      	blx	r3
  408daa:	60f8      	str	r0, [r7, #12]

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  408dac:	68fb      	ldr	r3, [r7, #12]
  408dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408db0:	687b      	ldr	r3, [r7, #4]
  408db2:	f003 031f 	and.w	r3, r3, #31
  408db6:	2101      	movs	r1, #1
  408db8:	fa01 f303 	lsl.w	r3, r1, r3
  408dbc:	4013      	ands	r3, r2
  408dbe:	2b00      	cmp	r3, #0
  408dc0:	d009      	beq.n	408dd6 <pio_toggle_pin+0x3a>
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  408dc2:	687b      	ldr	r3, [r7, #4]
  408dc4:	f003 031f 	and.w	r3, r3, #31
  408dc8:	2201      	movs	r2, #1
  408dca:	fa02 f303 	lsl.w	r3, r2, r3
  408dce:	461a      	mov	r2, r3
  408dd0:	68fb      	ldr	r3, [r7, #12]
  408dd2:	635a      	str	r2, [r3, #52]	; 0x34
  408dd4:	e008      	b.n	408de8 <pio_toggle_pin+0x4c>
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  408dd6:	687b      	ldr	r3, [r7, #4]
  408dd8:	f003 031f 	and.w	r3, r3, #31
  408ddc:	2201      	movs	r2, #1
  408dde:	fa02 f303 	lsl.w	r3, r2, r3
  408de2:	461a      	mov	r2, r3
  408de4:	68fb      	ldr	r3, [r7, #12]
  408de6:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
  408de8:	3710      	adds	r7, #16
  408dea:	46bd      	mov	sp, r7
  408dec:	bd80      	pop	{r7, pc}
  408dee:	bf00      	nop
  408df0:	00408fa9 	.word	0x00408fa9

00408df4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  408df4:	b590      	push	{r4, r7, lr}
  408df6:	b087      	sub	sp, #28
  408df8:	af02      	add	r7, sp, #8
  408dfa:	6078      	str	r0, [r7, #4]
  408dfc:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  408dfe:	6878      	ldr	r0, [r7, #4]
  408e00:	4b64      	ldr	r3, [pc, #400]	; (408f94 <pio_configure_pin+0x1a0>)
  408e02:	4798      	blx	r3
  408e04:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  408e06:	683b      	ldr	r3, [r7, #0]
  408e08:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  408e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  408e10:	d06b      	beq.n	408eea <pio_configure_pin+0xf6>
  408e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  408e16:	d809      	bhi.n	408e2c <pio_configure_pin+0x38>
  408e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  408e1c:	d02d      	beq.n	408e7a <pio_configure_pin+0x86>
  408e1e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  408e22:	d046      	beq.n	408eb2 <pio_configure_pin+0xbe>
  408e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  408e28:	d00b      	beq.n	408e42 <pio_configure_pin+0x4e>
  408e2a:	e0ac      	b.n	408f86 <pio_configure_pin+0x192>
  408e2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  408e30:	f000 8083 	beq.w	408f3a <pio_configure_pin+0x146>
  408e34:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  408e38:	d07f      	beq.n	408f3a <pio_configure_pin+0x146>
  408e3a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  408e3e:	d070      	beq.n	408f22 <pio_configure_pin+0x12e>
  408e40:	e0a1      	b.n	408f86 <pio_configure_pin+0x192>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  408e42:	687b      	ldr	r3, [r7, #4]
  408e44:	f003 031f 	and.w	r3, r3, #31
  408e48:	2201      	movs	r2, #1
  408e4a:	fa02 f303 	lsl.w	r3, r2, r3
  408e4e:	68f8      	ldr	r0, [r7, #12]
  408e50:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408e54:	461a      	mov	r2, r3
  408e56:	4b50      	ldr	r3, [pc, #320]	; (408f98 <pio_configure_pin+0x1a4>)
  408e58:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  408e5a:	687b      	ldr	r3, [r7, #4]
  408e5c:	f003 031f 	and.w	r3, r3, #31
  408e60:	2201      	movs	r2, #1
  408e62:	fa02 f303 	lsl.w	r3, r2, r3
  408e66:	461a      	mov	r2, r3
  408e68:	683b      	ldr	r3, [r7, #0]
  408e6a:	f003 0301 	and.w	r3, r3, #1
  408e6e:	68f8      	ldr	r0, [r7, #12]
  408e70:	4611      	mov	r1, r2
  408e72:	461a      	mov	r2, r3
  408e74:	4b49      	ldr	r3, [pc, #292]	; (408f9c <pio_configure_pin+0x1a8>)
  408e76:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  408e78:	e087      	b.n	408f8a <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  408e7a:	687b      	ldr	r3, [r7, #4]
  408e7c:	f003 031f 	and.w	r3, r3, #31
  408e80:	2201      	movs	r2, #1
  408e82:	fa02 f303 	lsl.w	r3, r2, r3
  408e86:	68f8      	ldr	r0, [r7, #12]
  408e88:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  408e8c:	461a      	mov	r2, r3
  408e8e:	4b42      	ldr	r3, [pc, #264]	; (408f98 <pio_configure_pin+0x1a4>)
  408e90:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  408e92:	687b      	ldr	r3, [r7, #4]
  408e94:	f003 031f 	and.w	r3, r3, #31
  408e98:	2201      	movs	r2, #1
  408e9a:	fa02 f303 	lsl.w	r3, r2, r3
  408e9e:	461a      	mov	r2, r3
  408ea0:	683b      	ldr	r3, [r7, #0]
  408ea2:	f003 0301 	and.w	r3, r3, #1
  408ea6:	68f8      	ldr	r0, [r7, #12]
  408ea8:	4611      	mov	r1, r2
  408eaa:	461a      	mov	r2, r3
  408eac:	4b3b      	ldr	r3, [pc, #236]	; (408f9c <pio_configure_pin+0x1a8>)
  408eae:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  408eb0:	e06b      	b.n	408f8a <pio_configure_pin+0x196>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  408eb2:	687b      	ldr	r3, [r7, #4]
  408eb4:	f003 031f 	and.w	r3, r3, #31
  408eb8:	2201      	movs	r2, #1
  408eba:	fa02 f303 	lsl.w	r3, r2, r3
  408ebe:	68f8      	ldr	r0, [r7, #12]
  408ec0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  408ec4:	461a      	mov	r2, r3
  408ec6:	4b34      	ldr	r3, [pc, #208]	; (408f98 <pio_configure_pin+0x1a4>)
  408ec8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  408eca:	687b      	ldr	r3, [r7, #4]
  408ecc:	f003 031f 	and.w	r3, r3, #31
  408ed0:	2201      	movs	r2, #1
  408ed2:	fa02 f303 	lsl.w	r3, r2, r3
  408ed6:	461a      	mov	r2, r3
  408ed8:	683b      	ldr	r3, [r7, #0]
  408eda:	f003 0301 	and.w	r3, r3, #1
  408ede:	68f8      	ldr	r0, [r7, #12]
  408ee0:	4611      	mov	r1, r2
  408ee2:	461a      	mov	r2, r3
  408ee4:	4b2d      	ldr	r3, [pc, #180]	; (408f9c <pio_configure_pin+0x1a8>)
  408ee6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  408ee8:	e04f      	b.n	408f8a <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  408eea:	687b      	ldr	r3, [r7, #4]
  408eec:	f003 031f 	and.w	r3, r3, #31
  408ef0:	2201      	movs	r2, #1
  408ef2:	fa02 f303 	lsl.w	r3, r2, r3
  408ef6:	68f8      	ldr	r0, [r7, #12]
  408ef8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  408efc:	461a      	mov	r2, r3
  408efe:	4b26      	ldr	r3, [pc, #152]	; (408f98 <pio_configure_pin+0x1a4>)
  408f00:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  408f02:	687b      	ldr	r3, [r7, #4]
  408f04:	f003 031f 	and.w	r3, r3, #31
  408f08:	2201      	movs	r2, #1
  408f0a:	fa02 f303 	lsl.w	r3, r2, r3
  408f0e:	461a      	mov	r2, r3
  408f10:	683b      	ldr	r3, [r7, #0]
  408f12:	f003 0301 	and.w	r3, r3, #1
  408f16:	68f8      	ldr	r0, [r7, #12]
  408f18:	4611      	mov	r1, r2
  408f1a:	461a      	mov	r2, r3
  408f1c:	4b1f      	ldr	r3, [pc, #124]	; (408f9c <pio_configure_pin+0x1a8>)
  408f1e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  408f20:	e033      	b.n	408f8a <pio_configure_pin+0x196>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  408f22:	687b      	ldr	r3, [r7, #4]
  408f24:	f003 031f 	and.w	r3, r3, #31
  408f28:	2201      	movs	r2, #1
  408f2a:	fa02 f303 	lsl.w	r3, r2, r3
  408f2e:	68f8      	ldr	r0, [r7, #12]
  408f30:	4619      	mov	r1, r3
  408f32:	683a      	ldr	r2, [r7, #0]
  408f34:	4b1a      	ldr	r3, [pc, #104]	; (408fa0 <pio_configure_pin+0x1ac>)
  408f36:	4798      	blx	r3
		break;
  408f38:	e027      	b.n	408f8a <pio_configure_pin+0x196>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  408f3a:	687b      	ldr	r3, [r7, #4]
  408f3c:	f003 031f 	and.w	r3, r3, #31
  408f40:	2201      	movs	r2, #1
  408f42:	fa02 f303 	lsl.w	r3, r2, r3
  408f46:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  408f48:	683b      	ldr	r3, [r7, #0]
  408f4a:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  408f4e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  408f52:	bf14      	ite	ne
  408f54:	2300      	movne	r3, #0
  408f56:	2301      	moveq	r3, #1
  408f58:	b2db      	uxtb	r3, r3
  408f5a:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  408f5c:	683b      	ldr	r3, [r7, #0]
  408f5e:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  408f62:	2b00      	cmp	r3, #0
  408f64:	bf0c      	ite	eq
  408f66:	2300      	moveq	r3, #0
  408f68:	2301      	movne	r3, #1
  408f6a:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  408f6c:	6838      	ldr	r0, [r7, #0]
  408f6e:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  408f72:	2800      	cmp	r0, #0
  408f74:	bf0c      	ite	eq
  408f76:	2000      	moveq	r0, #0
  408f78:	2001      	movne	r0, #1
  408f7a:	b2c0      	uxtb	r0, r0
  408f7c:	9000      	str	r0, [sp, #0]
  408f7e:	68f8      	ldr	r0, [r7, #12]
  408f80:	4c08      	ldr	r4, [pc, #32]	; (408fa4 <pio_configure_pin+0x1b0>)
  408f82:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  408f84:	e001      	b.n	408f8a <pio_configure_pin+0x196>

	default:
		return 0;
  408f86:	2300      	movs	r3, #0
  408f88:	e000      	b.n	408f8c <pio_configure_pin+0x198>
	}

	return 1;
  408f8a:	2301      	movs	r3, #1
}
  408f8c:	4618      	mov	r0, r3
  408f8e:	3714      	adds	r7, #20
  408f90:	46bd      	mov	sp, r7
  408f92:	bd90      	pop	{r4, r7, pc}
  408f94:	00408fa9 	.word	0x00408fa9
  408f98:	00408a7d 	.word	0x00408a7d
  408f9c:	00408a19 	.word	0x00408a19
  408fa0:	00408b8d 	.word	0x00408b8d
  408fa4:	00408c09 	.word	0x00408c09

00408fa8 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  408fa8:	b480      	push	{r7}
  408faa:	b085      	sub	sp, #20
  408fac:	af00      	add	r7, sp, #0
  408fae:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  408fb0:	687b      	ldr	r3, [r7, #4]
  408fb2:	095b      	lsrs	r3, r3, #5
  408fb4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  408fb8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  408fbc:	025b      	lsls	r3, r3, #9
  408fbe:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  408fc0:	68fb      	ldr	r3, [r7, #12]
}
  408fc2:	4618      	mov	r0, r3
  408fc4:	3714      	adds	r7, #20
  408fc6:	46bd      	mov	sp, r7
  408fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
  408fcc:	4770      	bx	lr
  408fce:	bf00      	nop

00408fd0 <pio_get_pin_group_id>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port peripheral ID.
 */
uint32_t pio_get_pin_group_id(uint32_t ul_pin)
{
  408fd0:	b480      	push	{r7}
  408fd2:	b085      	sub	sp, #20
  408fd4:	af00      	add	r7, sp, #0
  408fd6:	6078      	str	r0, [r7, #4]
		ul_id = ID_PIOC;
	} else {
		ul_id = ID_PIOA + (ul_pin >> 5);
	}
#else
	ul_id = ID_PIOA + (ul_pin >> 5);
  408fd8:	687b      	ldr	r3, [r7, #4]
  408fda:	095b      	lsrs	r3, r3, #5
  408fdc:	330b      	adds	r3, #11
  408fde:	60fb      	str	r3, [r7, #12]
#endif
	return ul_id;
  408fe0:	68fb      	ldr	r3, [r7, #12]
}
  408fe2:	4618      	mov	r0, r3
  408fe4:	3714      	adds	r7, #20
  408fe6:	46bd      	mov	sp, r7
  408fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
  408fec:	4770      	bx	lr
  408fee:	bf00      	nop

00408ff0 <pio_get_pin_group_mask>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port pin mask.
 */
uint32_t pio_get_pin_group_mask(uint32_t ul_pin)
{
  408ff0:	b480      	push	{r7}
  408ff2:	b085      	sub	sp, #20
  408ff4:	af00      	add	r7, sp, #0
  408ff6:	6078      	str	r0, [r7, #4]
	uint32_t ul_mask = 1 << (ul_pin & 0x1F);
  408ff8:	687b      	ldr	r3, [r7, #4]
  408ffa:	f003 031f 	and.w	r3, r3, #31
  408ffe:	2201      	movs	r2, #1
  409000:	fa02 f303 	lsl.w	r3, r2, r3
  409004:	60fb      	str	r3, [r7, #12]
	return ul_mask;
  409006:	68fb      	ldr	r3, [r7, #12]
}
  409008:	4618      	mov	r0, r3
  40900a:	3714      	adds	r7, #20
  40900c:	46bd      	mov	sp, r7
  40900e:	f85d 7b04 	ldr.w	r7, [sp], #4
  409012:	4770      	bx	lr

00409014 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  409014:	b580      	push	{r7, lr}
  409016:	b084      	sub	sp, #16
  409018:	af00      	add	r7, sp, #0
  40901a:	6078      	str	r0, [r7, #4]
  40901c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40901e:	6878      	ldr	r0, [r7, #4]
  409020:	4b2a      	ldr	r3, [pc, #168]	; (4090cc <pio_handler_process+0xb8>)
  409022:	4798      	blx	r3
  409024:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  409026:	6878      	ldr	r0, [r7, #4]
  409028:	4b29      	ldr	r3, [pc, #164]	; (4090d0 <pio_handler_process+0xbc>)
  40902a:	4798      	blx	r3
  40902c:	4603      	mov	r3, r0
  40902e:	68fa      	ldr	r2, [r7, #12]
  409030:	4013      	ands	r3, r2
  409032:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  409034:	68fb      	ldr	r3, [r7, #12]
  409036:	2b00      	cmp	r3, #0
  409038:	d039      	beq.n	4090ae <pio_handler_process+0x9a>
		/* Find triggering source */
		i = 0;
  40903a:	2300      	movs	r3, #0
  40903c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40903e:	e033      	b.n	4090a8 <pio_handler_process+0x94>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  409040:	4a24      	ldr	r2, [pc, #144]	; (4090d4 <pio_handler_process+0xc0>)
  409042:	68bb      	ldr	r3, [r7, #8]
  409044:	011b      	lsls	r3, r3, #4
  409046:	4413      	add	r3, r2
  409048:	681a      	ldr	r2, [r3, #0]
  40904a:	683b      	ldr	r3, [r7, #0]
  40904c:	429a      	cmp	r2, r3
  40904e:	d124      	bne.n	40909a <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  409050:	4a20      	ldr	r2, [pc, #128]	; (4090d4 <pio_handler_process+0xc0>)
  409052:	68bb      	ldr	r3, [r7, #8]
  409054:	011b      	lsls	r3, r3, #4
  409056:	4413      	add	r3, r2
  409058:	685a      	ldr	r2, [r3, #4]
  40905a:	68fb      	ldr	r3, [r7, #12]
  40905c:	4013      	ands	r3, r2
  40905e:	2b00      	cmp	r3, #0
  409060:	d01b      	beq.n	40909a <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  409062:	4a1c      	ldr	r2, [pc, #112]	; (4090d4 <pio_handler_process+0xc0>)
  409064:	68bb      	ldr	r3, [r7, #8]
  409066:	011b      	lsls	r3, r3, #4
  409068:	4413      	add	r3, r2
  40906a:	3308      	adds	r3, #8
  40906c:	685b      	ldr	r3, [r3, #4]
  40906e:	4919      	ldr	r1, [pc, #100]	; (4090d4 <pio_handler_process+0xc0>)
  409070:	68ba      	ldr	r2, [r7, #8]
  409072:	0112      	lsls	r2, r2, #4
  409074:	440a      	add	r2, r1
  409076:	6811      	ldr	r1, [r2, #0]
  409078:	4816      	ldr	r0, [pc, #88]	; (4090d4 <pio_handler_process+0xc0>)
  40907a:	68ba      	ldr	r2, [r7, #8]
  40907c:	0112      	lsls	r2, r2, #4
  40907e:	4402      	add	r2, r0
  409080:	6852      	ldr	r2, [r2, #4]
  409082:	4608      	mov	r0, r1
  409084:	4611      	mov	r1, r2
  409086:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  409088:	4a12      	ldr	r2, [pc, #72]	; (4090d4 <pio_handler_process+0xc0>)
  40908a:	68bb      	ldr	r3, [r7, #8]
  40908c:	011b      	lsls	r3, r3, #4
  40908e:	4413      	add	r3, r2
  409090:	685b      	ldr	r3, [r3, #4]
  409092:	43db      	mvns	r3, r3
  409094:	68fa      	ldr	r2, [r7, #12]
  409096:	4013      	ands	r3, r2
  409098:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40909a:	68bb      	ldr	r3, [r7, #8]
  40909c:	3301      	adds	r3, #1
  40909e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4090a0:	68bb      	ldr	r3, [r7, #8]
  4090a2:	2b06      	cmp	r3, #6
  4090a4:	d900      	bls.n	4090a8 <pio_handler_process+0x94>
				break;
  4090a6:	e002      	b.n	4090ae <pio_handler_process+0x9a>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4090a8:	68fb      	ldr	r3, [r7, #12]
  4090aa:	2b00      	cmp	r3, #0
  4090ac:	d1c8      	bne.n	409040 <pio_handler_process+0x2c>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4090ae:	4b0a      	ldr	r3, [pc, #40]	; (4090d8 <pio_handler_process+0xc4>)
  4090b0:	681b      	ldr	r3, [r3, #0]
  4090b2:	2b00      	cmp	r3, #0
  4090b4:	d007      	beq.n	4090c6 <pio_handler_process+0xb2>
		if (pio_capture_handler) {
  4090b6:	4b09      	ldr	r3, [pc, #36]	; (4090dc <pio_handler_process+0xc8>)
  4090b8:	681b      	ldr	r3, [r3, #0]
  4090ba:	2b00      	cmp	r3, #0
  4090bc:	d003      	beq.n	4090c6 <pio_handler_process+0xb2>
			pio_capture_handler(p_pio);
  4090be:	4b07      	ldr	r3, [pc, #28]	; (4090dc <pio_handler_process+0xc8>)
  4090c0:	681b      	ldr	r3, [r3, #0]
  4090c2:	6878      	ldr	r0, [r7, #4]
  4090c4:	4798      	blx	r3
		}
	}
#endif
}
  4090c6:	3710      	adds	r7, #16
  4090c8:	46bd      	mov	sp, r7
  4090ca:	bd80      	pop	{r7, pc}
  4090cc:	00408d15 	.word	0x00408d15
  4090d0:	00408d2d 	.word	0x00408d2d
  4090d4:	2000ae94 	.word	0x2000ae94
  4090d8:	2000c008 	.word	0x2000c008
  4090dc:	2000af08 	.word	0x2000af08

004090e0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4090e0:	b580      	push	{r7, lr}
  4090e2:	b086      	sub	sp, #24
  4090e4:	af00      	add	r7, sp, #0
  4090e6:	60f8      	str	r0, [r7, #12]
  4090e8:	60b9      	str	r1, [r7, #8]
  4090ea:	607a      	str	r2, [r7, #4]
  4090ec:	603b      	str	r3, [r7, #0]
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4090ee:	4b13      	ldr	r3, [pc, #76]	; (40913c <pio_handler_set+0x5c>)
  4090f0:	681b      	ldr	r3, [r3, #0]
  4090f2:	2b06      	cmp	r3, #6
  4090f4:	d901      	bls.n	4090fa <pio_handler_set+0x1a>
		return 1;
  4090f6:	2301      	movs	r3, #1
  4090f8:	e01c      	b.n	409134 <pio_handler_set+0x54>

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  4090fa:	4b10      	ldr	r3, [pc, #64]	; (40913c <pio_handler_set+0x5c>)
  4090fc:	681b      	ldr	r3, [r3, #0]
  4090fe:	011a      	lsls	r2, r3, #4
  409100:	4b0f      	ldr	r3, [pc, #60]	; (409140 <pio_handler_set+0x60>)
  409102:	4413      	add	r3, r2
  409104:	617b      	str	r3, [r7, #20]
	pSource->id = ul_id;
  409106:	697b      	ldr	r3, [r7, #20]
  409108:	68ba      	ldr	r2, [r7, #8]
  40910a:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  40910c:	697b      	ldr	r3, [r7, #20]
  40910e:	687a      	ldr	r2, [r7, #4]
  409110:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  409112:	697b      	ldr	r3, [r7, #20]
  409114:	683a      	ldr	r2, [r7, #0]
  409116:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  409118:	697b      	ldr	r3, [r7, #20]
  40911a:	6a3a      	ldr	r2, [r7, #32]
  40911c:	60da      	str	r2, [r3, #12]
	gs_ul_nb_sources++;
  40911e:	4b07      	ldr	r3, [pc, #28]	; (40913c <pio_handler_set+0x5c>)
  409120:	681b      	ldr	r3, [r3, #0]
  409122:	1c5a      	adds	r2, r3, #1
  409124:	4b05      	ldr	r3, [pc, #20]	; (40913c <pio_handler_set+0x5c>)
  409126:	601a      	str	r2, [r3, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  409128:	68f8      	ldr	r0, [r7, #12]
  40912a:	6879      	ldr	r1, [r7, #4]
  40912c:	683a      	ldr	r2, [r7, #0]
  40912e:	4b05      	ldr	r3, [pc, #20]	; (409144 <pio_handler_set+0x64>)
  409130:	4798      	blx	r3

	return 0;
  409132:	2300      	movs	r3, #0
}
  409134:	4618      	mov	r0, r3
  409136:	3718      	adds	r7, #24
  409138:	46bd      	mov	sp, r7
  40913a:	bd80      	pop	{r7, pc}
  40913c:	2000af04 	.word	0x2000af04
  409140:	2000ae94 	.word	0x2000ae94
  409144:	00408c6d 	.word	0x00408c6d

00409148 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  409148:	b580      	push	{r7, lr}
  40914a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40914c:	4802      	ldr	r0, [pc, #8]	; (409158 <PIOA_Handler+0x10>)
  40914e:	210b      	movs	r1, #11
  409150:	4b02      	ldr	r3, [pc, #8]	; (40915c <PIOA_Handler+0x14>)
  409152:	4798      	blx	r3
}
  409154:	bd80      	pop	{r7, pc}
  409156:	bf00      	nop
  409158:	400e0e00 	.word	0x400e0e00
  40915c:	00409015 	.word	0x00409015

00409160 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  409160:	b580      	push	{r7, lr}
  409162:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  409164:	4802      	ldr	r0, [pc, #8]	; (409170 <PIOB_Handler+0x10>)
  409166:	210c      	movs	r1, #12
  409168:	4b02      	ldr	r3, [pc, #8]	; (409174 <PIOB_Handler+0x14>)
  40916a:	4798      	blx	r3
}
  40916c:	bd80      	pop	{r7, pc}
  40916e:	bf00      	nop
  409170:	400e1000 	.word	0x400e1000
  409174:	00409015 	.word	0x00409015

00409178 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  409178:	b480      	push	{r7}
  40917a:	b085      	sub	sp, #20
  40917c:	af00      	add	r7, sp, #0
  40917e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  409180:	4b1d      	ldr	r3, [pc, #116]	; (4091f8 <pmc_switch_mck_to_pllack+0x80>)
  409182:	4a1d      	ldr	r2, [pc, #116]	; (4091f8 <pmc_switch_mck_to_pllack+0x80>)
  409184:	6b12      	ldr	r2, [r2, #48]	; 0x30
  409186:	f022 0170 	bic.w	r1, r2, #112	; 0x70
  40918a:	687a      	ldr	r2, [r7, #4]
  40918c:	430a      	orrs	r2, r1
  40918e:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  409190:	f44f 6300 	mov.w	r3, #2048	; 0x800
  409194:	60fb      	str	r3, [r7, #12]
  409196:	e007      	b.n	4091a8 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  409198:	68fb      	ldr	r3, [r7, #12]
  40919a:	2b00      	cmp	r3, #0
  40919c:	d101      	bne.n	4091a2 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40919e:	2301      	movs	r3, #1
  4091a0:	e023      	b.n	4091ea <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4091a2:	68fb      	ldr	r3, [r7, #12]
  4091a4:	3b01      	subs	r3, #1
  4091a6:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4091a8:	4b13      	ldr	r3, [pc, #76]	; (4091f8 <pmc_switch_mck_to_pllack+0x80>)
  4091aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4091ac:	f003 0308 	and.w	r3, r3, #8
  4091b0:	2b00      	cmp	r3, #0
  4091b2:	d0f1      	beq.n	409198 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4091b4:	4b10      	ldr	r3, [pc, #64]	; (4091f8 <pmc_switch_mck_to_pllack+0x80>)
  4091b6:	4a10      	ldr	r2, [pc, #64]	; (4091f8 <pmc_switch_mck_to_pllack+0x80>)
  4091b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4091ba:	f022 0203 	bic.w	r2, r2, #3
  4091be:	f042 0202 	orr.w	r2, r2, #2
  4091c2:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4091c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4091c8:	60fb      	str	r3, [r7, #12]
  4091ca:	e007      	b.n	4091dc <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4091cc:	68fb      	ldr	r3, [r7, #12]
  4091ce:	2b00      	cmp	r3, #0
  4091d0:	d101      	bne.n	4091d6 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4091d2:	2301      	movs	r3, #1
  4091d4:	e009      	b.n	4091ea <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4091d6:	68fb      	ldr	r3, [r7, #12]
  4091d8:	3b01      	subs	r3, #1
  4091da:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4091dc:	4b06      	ldr	r3, [pc, #24]	; (4091f8 <pmc_switch_mck_to_pllack+0x80>)
  4091de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4091e0:	f003 0308 	and.w	r3, r3, #8
  4091e4:	2b00      	cmp	r3, #0
  4091e6:	d0f1      	beq.n	4091cc <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4091e8:	2300      	movs	r3, #0
}
  4091ea:	4618      	mov	r0, r3
  4091ec:	3714      	adds	r7, #20
  4091ee:	46bd      	mov	sp, r7
  4091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4091f4:	4770      	bx	lr
  4091f6:	bf00      	nop
  4091f8:	400e0400 	.word	0x400e0400

004091fc <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4091fc:	b480      	push	{r7}
  4091fe:	b083      	sub	sp, #12
  409200:	af00      	add	r7, sp, #0
  409202:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  409204:	687b      	ldr	r3, [r7, #4]
  409206:	2b01      	cmp	r3, #1
  409208:	d107      	bne.n	40921a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40920a:	4a08      	ldr	r2, [pc, #32]	; (40922c <pmc_switch_sclk_to_32kxtal+0x30>)
  40920c:	4b07      	ldr	r3, [pc, #28]	; (40922c <pmc_switch_sclk_to_32kxtal+0x30>)
  40920e:	689b      	ldr	r3, [r3, #8]
  409210:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  409214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  409218:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40921a:	4b04      	ldr	r3, [pc, #16]	; (40922c <pmc_switch_sclk_to_32kxtal+0x30>)
  40921c:	4a04      	ldr	r2, [pc, #16]	; (409230 <pmc_switch_sclk_to_32kxtal+0x34>)
  40921e:	601a      	str	r2, [r3, #0]
}
  409220:	370c      	adds	r7, #12
  409222:	46bd      	mov	sp, r7
  409224:	f85d 7b04 	ldr.w	r7, [sp], #4
  409228:	4770      	bx	lr
  40922a:	bf00      	nop
  40922c:	400e1410 	.word	0x400e1410
  409230:	a5000008 	.word	0xa5000008

00409234 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  409234:	b480      	push	{r7}
  409236:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  409238:	4b09      	ldr	r3, [pc, #36]	; (409260 <pmc_osc_is_ready_32kxtal+0x2c>)
  40923a:	695b      	ldr	r3, [r3, #20]
  40923c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  409240:	2b00      	cmp	r3, #0
  409242:	d007      	beq.n	409254 <pmc_osc_is_ready_32kxtal+0x20>
  409244:	4b07      	ldr	r3, [pc, #28]	; (409264 <pmc_osc_is_ready_32kxtal+0x30>)
  409246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  409248:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40924c:	2b00      	cmp	r3, #0
  40924e:	d001      	beq.n	409254 <pmc_osc_is_ready_32kxtal+0x20>
  409250:	2301      	movs	r3, #1
  409252:	e000      	b.n	409256 <pmc_osc_is_ready_32kxtal+0x22>
  409254:	2300      	movs	r3, #0
}
  409256:	4618      	mov	r0, r3
  409258:	46bd      	mov	sp, r7
  40925a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40925e:	4770      	bx	lr
  409260:	400e1410 	.word	0x400e1410
  409264:	400e0400 	.word	0x400e0400

00409268 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  409268:	b480      	push	{r7}
  40926a:	b083      	sub	sp, #12
  40926c:	af00      	add	r7, sp, #0
  40926e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  409270:	4a18      	ldr	r2, [pc, #96]	; (4092d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  409272:	4b18      	ldr	r3, [pc, #96]	; (4092d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  409274:	6a1b      	ldr	r3, [r3, #32]
  409276:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40927a:	f043 0308 	orr.w	r3, r3, #8
  40927e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  409280:	bf00      	nop
  409282:	4b14      	ldr	r3, [pc, #80]	; (4092d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  409284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  409286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40928a:	2b00      	cmp	r3, #0
  40928c:	d0f9      	beq.n	409282 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40928e:	4a11      	ldr	r2, [pc, #68]	; (4092d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  409290:	4b10      	ldr	r3, [pc, #64]	; (4092d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  409292:	6a1b      	ldr	r3, [r3, #32]
  409294:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  409298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40929c:	6879      	ldr	r1, [r7, #4]
  40929e:	430b      	orrs	r3, r1
  4092a0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4092a4:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4092a6:	bf00      	nop
  4092a8:	4b0a      	ldr	r3, [pc, #40]	; (4092d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4092aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4092ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4092b0:	2b00      	cmp	r3, #0
  4092b2:	d0f9      	beq.n	4092a8 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4092b4:	4a07      	ldr	r2, [pc, #28]	; (4092d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4092b6:	4b07      	ldr	r3, [pc, #28]	; (4092d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4092b8:	6a1b      	ldr	r3, [r3, #32]
  4092ba:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4092be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4092c2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4092c6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4092c8:	370c      	adds	r7, #12
  4092ca:	46bd      	mov	sp, r7
  4092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4092d0:	4770      	bx	lr
  4092d2:	bf00      	nop
  4092d4:	400e0400 	.word	0x400e0400

004092d8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4092d8:	b480      	push	{r7}
  4092da:	b083      	sub	sp, #12
  4092dc:	af00      	add	r7, sp, #0
  4092de:	6078      	str	r0, [r7, #4]
  4092e0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4092e2:	687b      	ldr	r3, [r7, #4]
  4092e4:	2b00      	cmp	r3, #0
  4092e6:	d008      	beq.n	4092fa <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4092e8:	4916      	ldr	r1, [pc, #88]	; (409344 <pmc_switch_mainck_to_xtal+0x6c>)
  4092ea:	4b16      	ldr	r3, [pc, #88]	; (409344 <pmc_switch_mainck_to_xtal+0x6c>)
  4092ec:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4092ee:	4a16      	ldr	r2, [pc, #88]	; (409348 <pmc_switch_mainck_to_xtal+0x70>)
  4092f0:	401a      	ands	r2, r3
  4092f2:	4b16      	ldr	r3, [pc, #88]	; (40934c <pmc_switch_mainck_to_xtal+0x74>)
  4092f4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4092f6:	620b      	str	r3, [r1, #32]
  4092f8:	e01e      	b.n	409338 <pmc_switch_mainck_to_xtal+0x60>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4092fa:	4a12      	ldr	r2, [pc, #72]	; (409344 <pmc_switch_mainck_to_xtal+0x6c>)
  4092fc:	4b11      	ldr	r3, [pc, #68]	; (409344 <pmc_switch_mainck_to_xtal+0x6c>)
  4092fe:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  409300:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  409304:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  409308:	6839      	ldr	r1, [r7, #0]
  40930a:	0209      	lsls	r1, r1, #8
  40930c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40930e:	430b      	orrs	r3, r1
  409310:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  409314:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  409318:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40931a:	bf00      	nop
  40931c:	4b09      	ldr	r3, [pc, #36]	; (409344 <pmc_switch_mainck_to_xtal+0x6c>)
  40931e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  409320:	f003 0301 	and.w	r3, r3, #1
  409324:	2b00      	cmp	r3, #0
  409326:	d0f9      	beq.n	40931c <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  409328:	4a06      	ldr	r2, [pc, #24]	; (409344 <pmc_switch_mainck_to_xtal+0x6c>)
  40932a:	4b06      	ldr	r3, [pc, #24]	; (409344 <pmc_switch_mainck_to_xtal+0x6c>)
  40932c:	6a1b      	ldr	r3, [r3, #32]
  40932e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  409332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  409336:	6213      	str	r3, [r2, #32]
	}
}
  409338:	370c      	adds	r7, #12
  40933a:	46bd      	mov	sp, r7
  40933c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409340:	4770      	bx	lr
  409342:	bf00      	nop
  409344:	400e0400 	.word	0x400e0400
  409348:	fec8fffc 	.word	0xfec8fffc
  40934c:	01370002 	.word	0x01370002

00409350 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  409350:	b480      	push	{r7}
  409352:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  409354:	4b04      	ldr	r3, [pc, #16]	; (409368 <pmc_osc_is_ready_mainck+0x18>)
  409356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  409358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40935c:	4618      	mov	r0, r3
  40935e:	46bd      	mov	sp, r7
  409360:	f85d 7b04 	ldr.w	r7, [sp], #4
  409364:	4770      	bx	lr
  409366:	bf00      	nop
  409368:	400e0400 	.word	0x400e0400

0040936c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40936c:	b480      	push	{r7}
  40936e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  409370:	4b03      	ldr	r3, [pc, #12]	; (409380 <pmc_disable_pllack+0x14>)
  409372:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  409376:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  409378:	46bd      	mov	sp, r7
  40937a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40937e:	4770      	bx	lr
  409380:	400e0400 	.word	0x400e0400

00409384 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  409384:	b480      	push	{r7}
  409386:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  409388:	4b04      	ldr	r3, [pc, #16]	; (40939c <pmc_is_locked_pllack+0x18>)
  40938a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40938c:	f003 0302 	and.w	r3, r3, #2
}
  409390:	4618      	mov	r0, r3
  409392:	46bd      	mov	sp, r7
  409394:	f85d 7b04 	ldr.w	r7, [sp], #4
  409398:	4770      	bx	lr
  40939a:	bf00      	nop
  40939c:	400e0400 	.word	0x400e0400

004093a0 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4093a0:	b480      	push	{r7}
  4093a2:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4093a4:	4b03      	ldr	r3, [pc, #12]	; (4093b4 <pmc_disable_pllbck+0x14>)
  4093a6:	2200      	movs	r2, #0
  4093a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4093aa:	46bd      	mov	sp, r7
  4093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4093b0:	4770      	bx	lr
  4093b2:	bf00      	nop
  4093b4:	400e0400 	.word	0x400e0400

004093b8 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4093b8:	b480      	push	{r7}
  4093ba:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4093bc:	4b04      	ldr	r3, [pc, #16]	; (4093d0 <pmc_is_locked_pllbck+0x18>)
  4093be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4093c0:	f003 0304 	and.w	r3, r3, #4
}
  4093c4:	4618      	mov	r0, r3
  4093c6:	46bd      	mov	sp, r7
  4093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4093cc:	4770      	bx	lr
  4093ce:	bf00      	nop
  4093d0:	400e0400 	.word	0x400e0400

004093d4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4093d4:	b480      	push	{r7}
  4093d6:	b083      	sub	sp, #12
  4093d8:	af00      	add	r7, sp, #0
  4093da:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4093dc:	687b      	ldr	r3, [r7, #4]
  4093de:	2b22      	cmp	r3, #34	; 0x22
  4093e0:	d901      	bls.n	4093e6 <pmc_enable_periph_clk+0x12>
		return 1;
  4093e2:	2301      	movs	r3, #1
  4093e4:	e02f      	b.n	409446 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4093e6:	687b      	ldr	r3, [r7, #4]
  4093e8:	2b1f      	cmp	r3, #31
  4093ea:	d813      	bhi.n	409414 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4093ec:	4b19      	ldr	r3, [pc, #100]	; (409454 <pmc_enable_periph_clk+0x80>)
  4093ee:	699a      	ldr	r2, [r3, #24]
  4093f0:	687b      	ldr	r3, [r7, #4]
  4093f2:	2101      	movs	r1, #1
  4093f4:	fa01 f303 	lsl.w	r3, r1, r3
  4093f8:	401a      	ands	r2, r3
  4093fa:	687b      	ldr	r3, [r7, #4]
  4093fc:	2101      	movs	r1, #1
  4093fe:	fa01 f303 	lsl.w	r3, r1, r3
  409402:	429a      	cmp	r2, r3
  409404:	d01e      	beq.n	409444 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  409406:	4b13      	ldr	r3, [pc, #76]	; (409454 <pmc_enable_periph_clk+0x80>)
  409408:	687a      	ldr	r2, [r7, #4]
  40940a:	2101      	movs	r1, #1
  40940c:	fa01 f202 	lsl.w	r2, r1, r2
  409410:	611a      	str	r2, [r3, #16]
  409412:	e017      	b.n	409444 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
  409414:	687b      	ldr	r3, [r7, #4]
  409416:	3b20      	subs	r3, #32
  409418:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40941a:	4b0e      	ldr	r3, [pc, #56]	; (409454 <pmc_enable_periph_clk+0x80>)
  40941c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  409420:	687b      	ldr	r3, [r7, #4]
  409422:	2101      	movs	r1, #1
  409424:	fa01 f303 	lsl.w	r3, r1, r3
  409428:	401a      	ands	r2, r3
  40942a:	687b      	ldr	r3, [r7, #4]
  40942c:	2101      	movs	r1, #1
  40942e:	fa01 f303 	lsl.w	r3, r1, r3
  409432:	429a      	cmp	r2, r3
  409434:	d006      	beq.n	409444 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  409436:	4b07      	ldr	r3, [pc, #28]	; (409454 <pmc_enable_periph_clk+0x80>)
  409438:	687a      	ldr	r2, [r7, #4]
  40943a:	2101      	movs	r1, #1
  40943c:	fa01 f202 	lsl.w	r2, r1, r2
  409440:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  409444:	2300      	movs	r3, #0
}
  409446:	4618      	mov	r0, r3
  409448:	370c      	adds	r7, #12
  40944a:	46bd      	mov	sp, r7
  40944c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409450:	4770      	bx	lr
  409452:	bf00      	nop
  409454:	400e0400 	.word	0x400e0400

00409458 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
  409458:	b480      	push	{r7}
  40945a:	b083      	sub	sp, #12
  40945c:	af00      	add	r7, sp, #0
  40945e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  409460:	687b      	ldr	r3, [r7, #4]
  409462:	2b22      	cmp	r3, #34	; 0x22
  409464:	d901      	bls.n	40946a <pmc_disable_periph_clk+0x12>
		return 1;
  409466:	2301      	movs	r3, #1
  409468:	e02f      	b.n	4094ca <pmc_disable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40946a:	687b      	ldr	r3, [r7, #4]
  40946c:	2b1f      	cmp	r3, #31
  40946e:	d813      	bhi.n	409498 <pmc_disable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  409470:	4b19      	ldr	r3, [pc, #100]	; (4094d8 <pmc_disable_periph_clk+0x80>)
  409472:	699a      	ldr	r2, [r3, #24]
  409474:	687b      	ldr	r3, [r7, #4]
  409476:	2101      	movs	r1, #1
  409478:	fa01 f303 	lsl.w	r3, r1, r3
  40947c:	401a      	ands	r2, r3
  40947e:	687b      	ldr	r3, [r7, #4]
  409480:	2101      	movs	r1, #1
  409482:	fa01 f303 	lsl.w	r3, r1, r3
  409486:	429a      	cmp	r2, r3
  409488:	d11e      	bne.n	4094c8 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR0 = 1 << ul_id;
  40948a:	4b13      	ldr	r3, [pc, #76]	; (4094d8 <pmc_disable_periph_clk+0x80>)
  40948c:	687a      	ldr	r2, [r7, #4]
  40948e:	2101      	movs	r1, #1
  409490:	fa01 f202 	lsl.w	r2, r1, r2
  409494:	615a      	str	r2, [r3, #20]
  409496:	e017      	b.n	4094c8 <pmc_disable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
  409498:	687b      	ldr	r3, [r7, #4]
  40949a:	3b20      	subs	r3, #32
  40949c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  40949e:	4b0e      	ldr	r3, [pc, #56]	; (4094d8 <pmc_disable_periph_clk+0x80>)
  4094a0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4094a4:	687b      	ldr	r3, [r7, #4]
  4094a6:	2101      	movs	r1, #1
  4094a8:	fa01 f303 	lsl.w	r3, r1, r3
  4094ac:	401a      	ands	r2, r3
  4094ae:	687b      	ldr	r3, [r7, #4]
  4094b0:	2101      	movs	r1, #1
  4094b2:	fa01 f303 	lsl.w	r3, r1, r3
  4094b6:	429a      	cmp	r2, r3
  4094b8:	d106      	bne.n	4094c8 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR1 = 1 << ul_id;
  4094ba:	4b07      	ldr	r3, [pc, #28]	; (4094d8 <pmc_disable_periph_clk+0x80>)
  4094bc:	687a      	ldr	r2, [r7, #4]
  4094be:	2101      	movs	r1, #1
  4094c0:	fa01 f202 	lsl.w	r2, r1, r2
  4094c4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		}
#endif
	}
	return 0;
  4094c8:	2300      	movs	r3, #0
}
  4094ca:	4618      	mov	r0, r3
  4094cc:	370c      	adds	r7, #12
  4094ce:	46bd      	mov	sp, r7
  4094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4094d4:	4770      	bx	lr
  4094d6:	bf00      	nop
  4094d8:	400e0400 	.word	0x400e0400

004094dc <pmc_switch_udpck_to_pllbck>:
 * \brief Switch UDP (USB) clock source selection to PLLB clock.
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
  4094dc:	b480      	push	{r7}
  4094de:	b083      	sub	sp, #12
  4094e0:	af00      	add	r7, sp, #0
  4094e2:	6078      	str	r0, [r7, #4]
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  4094e4:	4b06      	ldr	r3, [pc, #24]	; (409500 <pmc_switch_udpck_to_pllbck+0x24>)
  4094e6:	687a      	ldr	r2, [r7, #4]
  4094e8:	0212      	lsls	r2, r2, #8
  4094ea:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  4094ee:	f042 0201 	orr.w	r2, r2, #1
  4094f2:	639a      	str	r2, [r3, #56]	; 0x38
}
  4094f4:	370c      	adds	r7, #12
  4094f6:	46bd      	mov	sp, r7
  4094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4094fc:	4770      	bx	lr
  4094fe:	bf00      	nop
  409500:	400e0400 	.word	0x400e0400

00409504 <pmc_enable_udpck>:
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55)
/**
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
  409504:	b480      	push	{r7}
  409506:	af00      	add	r7, sp, #0
# if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  409508:	4b03      	ldr	r3, [pc, #12]	; (409518 <pmc_enable_udpck+0x14>)
  40950a:	2280      	movs	r2, #128	; 0x80
  40950c:	601a      	str	r2, [r3, #0]
# else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
# endif
}
  40950e:	46bd      	mov	sp, r7
  409510:	f85d 7b04 	ldr.w	r7, [sp], #4
  409514:	4770      	bx	lr
  409516:	bf00      	nop
  409518:	400e0400 	.word	0x400e0400

0040951c <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
  40951c:	b480      	push	{r7}
  40951e:	b083      	sub	sp, #12
  409520:	af00      	add	r7, sp, #0
  409522:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  409524:	687b      	ldr	r3, [r7, #4]
  409526:	f3c3 0312 	ubfx	r3, r3, #0, #19
  40952a:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
  40952c:	4b05      	ldr	r3, [pc, #20]	; (409544 <pmc_set_fast_startup_input+0x28>)
  40952e:	4a05      	ldr	r2, [pc, #20]	; (409544 <pmc_set_fast_startup_input+0x28>)
  409530:	6f11      	ldr	r1, [r2, #112]	; 0x70
  409532:	687a      	ldr	r2, [r7, #4]
  409534:	430a      	orrs	r2, r1
  409536:	671a      	str	r2, [r3, #112]	; 0x70
}
  409538:	370c      	adds	r7, #12
  40953a:	46bd      	mov	sp, r7
  40953c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409540:	4770      	bx	lr
  409542:	bf00      	nop
  409544:	400e0400 	.word	0x400e0400

00409548 <pmc_is_wakeup_clocks_restored>:
#endif
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
  409548:	b480      	push	{r7}
  40954a:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
  40954c:	4b09      	ldr	r3, [pc, #36]	; (409574 <pmc_is_wakeup_clocks_restored+0x2c>)
  40954e:	781b      	ldrb	r3, [r3, #0]
  409550:	b2db      	uxtb	r3, r3
  409552:	2b00      	cmp	r3, #0
  409554:	bf0c      	ite	eq
  409556:	2300      	moveq	r3, #0
  409558:	2301      	movne	r3, #1
  40955a:	b2db      	uxtb	r3, r3
  40955c:	f083 0301 	eor.w	r3, r3, #1
  409560:	b2db      	uxtb	r3, r3
  409562:	f003 0301 	and.w	r3, r3, #1
  409566:	b2db      	uxtb	r3, r3
}
  409568:	4618      	mov	r0, r3
  40956a:	46bd      	mov	sp, r7
  40956c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409570:	4770      	bx	lr
  409572:	bf00      	nop
  409574:	2000af0c 	.word	0x2000af0c

00409578 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  409578:	b480      	push	{r7}
  40957a:	b083      	sub	sp, #12
  40957c:	af00      	add	r7, sp, #0
  40957e:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  409580:	687b      	ldr	r3, [r7, #4]
  409582:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  409586:	605a      	str	r2, [r3, #4]

}
  409588:	370c      	adds	r7, #12
  40958a:	46bd      	mov	sp, r7
  40958c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409590:	4770      	bx	lr
  409592:	bf00      	nop

00409594 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  409594:	b580      	push	{r7, lr}
  409596:	b084      	sub	sp, #16
  409598:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  40959a:	4b27      	ldr	r3, [pc, #156]	; (409638 <Reset_Handler+0xa4>)
  40959c:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  40959e:	4b27      	ldr	r3, [pc, #156]	; (40963c <Reset_Handler+0xa8>)
  4095a0:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  4095a2:	68fa      	ldr	r2, [r7, #12]
  4095a4:	68bb      	ldr	r3, [r7, #8]
  4095a6:	429a      	cmp	r2, r3
  4095a8:	d90d      	bls.n	4095c6 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4095aa:	e007      	b.n	4095bc <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4095ac:	68bb      	ldr	r3, [r7, #8]
  4095ae:	1d1a      	adds	r2, r3, #4
  4095b0:	60ba      	str	r2, [r7, #8]
  4095b2:	68fa      	ldr	r2, [r7, #12]
  4095b4:	1d11      	adds	r1, r2, #4
  4095b6:	60f9      	str	r1, [r7, #12]
  4095b8:	6812      	ldr	r2, [r2, #0]
  4095ba:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4095bc:	68ba      	ldr	r2, [r7, #8]
  4095be:	4b20      	ldr	r3, [pc, #128]	; (409640 <Reset_Handler+0xac>)
  4095c0:	429a      	cmp	r2, r3
  4095c2:	d3f3      	bcc.n	4095ac <Reset_Handler+0x18>
  4095c4:	e020      	b.n	409608 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4095c6:	68fa      	ldr	r2, [r7, #12]
  4095c8:	68bb      	ldr	r3, [r7, #8]
  4095ca:	429a      	cmp	r2, r3
  4095cc:	d21c      	bcs.n	409608 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4095ce:	4a1c      	ldr	r2, [pc, #112]	; (409640 <Reset_Handler+0xac>)
  4095d0:	4b1a      	ldr	r3, [pc, #104]	; (40963c <Reset_Handler+0xa8>)
  4095d2:	1ad3      	subs	r3, r2, r3
  4095d4:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4095d6:	68fa      	ldr	r2, [r7, #12]
  4095d8:	687b      	ldr	r3, [r7, #4]
  4095da:	4413      	add	r3, r2
  4095dc:	3b04      	subs	r3, #4
  4095de:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4095e0:	68ba      	ldr	r2, [r7, #8]
  4095e2:	687b      	ldr	r3, [r7, #4]
  4095e4:	4413      	add	r3, r2
  4095e6:	3b04      	subs	r3, #4
  4095e8:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  4095ea:	e00a      	b.n	409602 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  4095ec:	68bb      	ldr	r3, [r7, #8]
  4095ee:	1f1a      	subs	r2, r3, #4
  4095f0:	60ba      	str	r2, [r7, #8]
  4095f2:	68fa      	ldr	r2, [r7, #12]
  4095f4:	1f11      	subs	r1, r2, #4
  4095f6:	60f9      	str	r1, [r7, #12]
  4095f8:	6812      	ldr	r2, [r2, #0]
  4095fa:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4095fc:	687b      	ldr	r3, [r7, #4]
  4095fe:	3b04      	subs	r3, #4
  409600:	607b      	str	r3, [r7, #4]
  409602:	687b      	ldr	r3, [r7, #4]
  409604:	2b00      	cmp	r3, #0
  409606:	d1f1      	bne.n	4095ec <Reset_Handler+0x58>
  409608:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40960a:	4b0e      	ldr	r3, [pc, #56]	; (409644 <Reset_Handler+0xb0>)
  40960c:	60bb      	str	r3, [r7, #8]
  40960e:	e004      	b.n	40961a <Reset_Handler+0x86>
		*pDest++ = 0;
  409610:	68bb      	ldr	r3, [r7, #8]
  409612:	1d1a      	adds	r2, r3, #4
  409614:	60ba      	str	r2, [r7, #8]
  409616:	2200      	movs	r2, #0
  409618:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40961a:	68ba      	ldr	r2, [r7, #8]
  40961c:	4b0a      	ldr	r3, [pc, #40]	; (409648 <Reset_Handler+0xb4>)
  40961e:	429a      	cmp	r2, r3
  409620:	d3f6      	bcc.n	409610 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  409622:	4b0a      	ldr	r3, [pc, #40]	; (40964c <Reset_Handler+0xb8>)
  409624:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  409626:	4b0a      	ldr	r3, [pc, #40]	; (409650 <Reset_Handler+0xbc>)
  409628:	68fa      	ldr	r2, [r7, #12]
  40962a:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40962c:	4b09      	ldr	r3, [pc, #36]	; (409654 <Reset_Handler+0xc0>)
  40962e:	4798      	blx	r3

	/* Branch to main function */
	main();
  409630:	4b09      	ldr	r3, [pc, #36]	; (409658 <Reset_Handler+0xc4>)
  409632:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  409634:	e7fe      	b.n	409634 <Reset_Handler+0xa0>
  409636:	bf00      	nop
  409638:	0041382c 	.word	0x0041382c
  40963c:	20000000 	.word	0x20000000
  409640:	20000abc 	.word	0x20000abc
  409644:	20000ac0 	.word	0x20000ac0
  409648:	2000c010 	.word	0x2000c010
  40964c:	00400000 	.word	0x00400000
  409650:	e000ed00 	.word	0xe000ed00
  409654:	0040a089 	.word	0x0040a089
  409658:	00409a3d 	.word	0x00409a3d

0040965c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40965c:	b480      	push	{r7}
  40965e:	af00      	add	r7, sp, #0
	while (1) {
	}
  409660:	e7fe      	b.n	409660 <Dummy_Handler+0x4>
  409662:	bf00      	nop

00409664 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  409664:	b480      	push	{r7}
  409666:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  409668:	4b5d      	ldr	r3, [pc, #372]	; (4097e0 <SystemCoreClockUpdate+0x17c>)
  40966a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40966c:	f003 0303 	and.w	r3, r3, #3
  409670:	2b03      	cmp	r3, #3
  409672:	f200 8096 	bhi.w	4097a2 <SystemCoreClockUpdate+0x13e>
  409676:	a101      	add	r1, pc, #4	; (adr r1, 40967c <SystemCoreClockUpdate+0x18>)
  409678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  40967c:	0040968d 	.word	0x0040968d
  409680:	004096ad 	.word	0x004096ad
  409684:	004096f7 	.word	0x004096f7
  409688:	004096f7 	.word	0x004096f7
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40968c:	4b55      	ldr	r3, [pc, #340]	; (4097e4 <SystemCoreClockUpdate+0x180>)
  40968e:	695b      	ldr	r3, [r3, #20]
  409690:	f003 0380 	and.w	r3, r3, #128	; 0x80
  409694:	2b00      	cmp	r3, #0
  409696:	d004      	beq.n	4096a2 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  409698:	4b53      	ldr	r3, [pc, #332]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  40969a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40969e:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4096a0:	e080      	b.n	4097a4 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4096a2:	4b51      	ldr	r3, [pc, #324]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  4096a4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4096a8:	601a      	str	r2, [r3, #0]
			}
		break;
  4096aa:	e07b      	b.n	4097a4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4096ac:	4b4c      	ldr	r3, [pc, #304]	; (4097e0 <SystemCoreClockUpdate+0x17c>)
  4096ae:	6a1b      	ldr	r3, [r3, #32]
  4096b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4096b4:	2b00      	cmp	r3, #0
  4096b6:	d003      	beq.n	4096c0 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4096b8:	4b4b      	ldr	r3, [pc, #300]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  4096ba:	4a4c      	ldr	r2, [pc, #304]	; (4097ec <SystemCoreClockUpdate+0x188>)
  4096bc:	601a      	str	r2, [r3, #0]
  4096be:	e019      	b.n	4096f4 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4096c0:	4b49      	ldr	r3, [pc, #292]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  4096c2:	4a4b      	ldr	r2, [pc, #300]	; (4097f0 <SystemCoreClockUpdate+0x18c>)
  4096c4:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4096c6:	4b46      	ldr	r3, [pc, #280]	; (4097e0 <SystemCoreClockUpdate+0x17c>)
  4096c8:	6a1b      	ldr	r3, [r3, #32]
  4096ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4096ce:	2b10      	cmp	r3, #16
  4096d0:	d008      	beq.n	4096e4 <SystemCoreClockUpdate+0x80>
  4096d2:	2b20      	cmp	r3, #32
  4096d4:	d00a      	beq.n	4096ec <SystemCoreClockUpdate+0x88>
  4096d6:	2b00      	cmp	r3, #0
  4096d8:	d000      	beq.n	4096dc <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  4096da:	e00b      	b.n	4096f4 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4096dc:	4b42      	ldr	r3, [pc, #264]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  4096de:	4a44      	ldr	r2, [pc, #272]	; (4097f0 <SystemCoreClockUpdate+0x18c>)
  4096e0:	601a      	str	r2, [r3, #0]
			break;
  4096e2:	e007      	b.n	4096f4 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4096e4:	4b40      	ldr	r3, [pc, #256]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  4096e6:	4a43      	ldr	r2, [pc, #268]	; (4097f4 <SystemCoreClockUpdate+0x190>)
  4096e8:	601a      	str	r2, [r3, #0]
			break;
  4096ea:	e003      	b.n	4096f4 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4096ec:	4b3e      	ldr	r3, [pc, #248]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  4096ee:	4a3f      	ldr	r2, [pc, #252]	; (4097ec <SystemCoreClockUpdate+0x188>)
  4096f0:	601a      	str	r2, [r3, #0]
			break;
  4096f2:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  4096f4:	e056      	b.n	4097a4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4096f6:	4b3a      	ldr	r3, [pc, #232]	; (4097e0 <SystemCoreClockUpdate+0x17c>)
  4096f8:	6a1b      	ldr	r3, [r3, #32]
  4096fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4096fe:	2b00      	cmp	r3, #0
  409700:	d003      	beq.n	40970a <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  409702:	4b39      	ldr	r3, [pc, #228]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  409704:	4a39      	ldr	r2, [pc, #228]	; (4097ec <SystemCoreClockUpdate+0x188>)
  409706:	601a      	str	r2, [r3, #0]
  409708:	e019      	b.n	40973e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40970a:	4b37      	ldr	r3, [pc, #220]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  40970c:	4a38      	ldr	r2, [pc, #224]	; (4097f0 <SystemCoreClockUpdate+0x18c>)
  40970e:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  409710:	4b33      	ldr	r3, [pc, #204]	; (4097e0 <SystemCoreClockUpdate+0x17c>)
  409712:	6a1b      	ldr	r3, [r3, #32]
  409714:	f003 0370 	and.w	r3, r3, #112	; 0x70
  409718:	2b10      	cmp	r3, #16
  40971a:	d008      	beq.n	40972e <SystemCoreClockUpdate+0xca>
  40971c:	2b20      	cmp	r3, #32
  40971e:	d00a      	beq.n	409736 <SystemCoreClockUpdate+0xd2>
  409720:	2b00      	cmp	r3, #0
  409722:	d000      	beq.n	409726 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  409724:	e00b      	b.n	40973e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  409726:	4b30      	ldr	r3, [pc, #192]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  409728:	4a31      	ldr	r2, [pc, #196]	; (4097f0 <SystemCoreClockUpdate+0x18c>)
  40972a:	601a      	str	r2, [r3, #0]
					break;
  40972c:	e007      	b.n	40973e <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40972e:	4b2e      	ldr	r3, [pc, #184]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  409730:	4a30      	ldr	r2, [pc, #192]	; (4097f4 <SystemCoreClockUpdate+0x190>)
  409732:	601a      	str	r2, [r3, #0]
					break;
  409734:	e003      	b.n	40973e <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  409736:	4b2c      	ldr	r3, [pc, #176]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  409738:	4a2c      	ldr	r2, [pc, #176]	; (4097ec <SystemCoreClockUpdate+0x188>)
  40973a:	601a      	str	r2, [r3, #0]
					break;
  40973c:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40973e:	4b28      	ldr	r3, [pc, #160]	; (4097e0 <SystemCoreClockUpdate+0x17c>)
  409740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  409742:	f003 0303 	and.w	r3, r3, #3
  409746:	2b02      	cmp	r3, #2
  409748:	d115      	bne.n	409776 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40974a:	4b25      	ldr	r3, [pc, #148]	; (4097e0 <SystemCoreClockUpdate+0x17c>)
  40974c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40974e:	4b2a      	ldr	r3, [pc, #168]	; (4097f8 <SystemCoreClockUpdate+0x194>)
  409750:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  409752:	0c1b      	lsrs	r3, r3, #16
  409754:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  409756:	4a24      	ldr	r2, [pc, #144]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  409758:	6812      	ldr	r2, [r2, #0]
  40975a:	fb02 f203 	mul.w	r2, r2, r3
  40975e:	4b22      	ldr	r3, [pc, #136]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  409760:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  409762:	4b21      	ldr	r3, [pc, #132]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  409764:	681a      	ldr	r2, [r3, #0]
  409766:	4b1e      	ldr	r3, [pc, #120]	; (4097e0 <SystemCoreClockUpdate+0x17c>)
  409768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40976a:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40976c:	fbb2 f2f3 	udiv	r2, r2, r3
  409770:	4b1d      	ldr	r3, [pc, #116]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  409772:	601a      	str	r2, [r3, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  409774:	e016      	b.n	4097a4 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  409776:	4b1a      	ldr	r3, [pc, #104]	; (4097e0 <SystemCoreClockUpdate+0x17c>)
  409778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40977a:	4b1f      	ldr	r3, [pc, #124]	; (4097f8 <SystemCoreClockUpdate+0x194>)
  40977c:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40977e:	0c1b      	lsrs	r3, r3, #16
  409780:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  409782:	4a19      	ldr	r2, [pc, #100]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  409784:	6812      	ldr	r2, [r2, #0]
  409786:	fb02 f203 	mul.w	r2, r2, r3
  40978a:	4b17      	ldr	r3, [pc, #92]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  40978c:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40978e:	4b16      	ldr	r3, [pc, #88]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  409790:	681a      	ldr	r2, [r3, #0]
  409792:	4b13      	ldr	r3, [pc, #76]	; (4097e0 <SystemCoreClockUpdate+0x17c>)
  409794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  409796:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  409798:	fbb2 f2f3 	udiv	r2, r2, r3
  40979c:	4b12      	ldr	r3, [pc, #72]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  40979e:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4097a0:	e000      	b.n	4097a4 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4097a2:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4097a4:	4b0e      	ldr	r3, [pc, #56]	; (4097e0 <SystemCoreClockUpdate+0x17c>)
  4097a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4097a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4097ac:	2b70      	cmp	r3, #112	; 0x70
  4097ae:	d108      	bne.n	4097c2 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4097b0:	4b0d      	ldr	r3, [pc, #52]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  4097b2:	681a      	ldr	r2, [r3, #0]
  4097b4:	4b11      	ldr	r3, [pc, #68]	; (4097fc <SystemCoreClockUpdate+0x198>)
  4097b6:	fba3 1302 	umull	r1, r3, r3, r2
  4097ba:	085a      	lsrs	r2, r3, #1
  4097bc:	4b0a      	ldr	r3, [pc, #40]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  4097be:	601a      	str	r2, [r3, #0]
  4097c0:	e009      	b.n	4097d6 <SystemCoreClockUpdate+0x172>
	} else {
		SystemCoreClock >>=
  4097c2:	4b09      	ldr	r3, [pc, #36]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  4097c4:	681a      	ldr	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4097c6:	4b06      	ldr	r3, [pc, #24]	; (4097e0 <SystemCoreClockUpdate+0x17c>)
  4097c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4097ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4097ce:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4097d0:	40da      	lsrs	r2, r3
  4097d2:	4b05      	ldr	r3, [pc, #20]	; (4097e8 <SystemCoreClockUpdate+0x184>)
  4097d4:	601a      	str	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4097d6:	46bd      	mov	sp, r7
  4097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4097dc:	4770      	bx	lr
  4097de:	bf00      	nop
  4097e0:	400e0400 	.word	0x400e0400
  4097e4:	400e1410 	.word	0x400e1410
  4097e8:	20000210 	.word	0x20000210
  4097ec:	00b71b00 	.word	0x00b71b00
  4097f0:	003d0900 	.word	0x003d0900
  4097f4:	007a1200 	.word	0x007a1200
  4097f8:	07ff0000 	.word	0x07ff0000
  4097fc:	aaaaaaab 	.word	0xaaaaaaab

00409800 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  409800:	b480      	push	{r7}
  409802:	b083      	sub	sp, #12
  409804:	af00      	add	r7, sp, #0
  409806:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  409808:	687a      	ldr	r2, [r7, #4]
  40980a:	4b18      	ldr	r3, [pc, #96]	; (40986c <system_init_flash+0x6c>)
  40980c:	429a      	cmp	r2, r3
  40980e:	d804      	bhi.n	40981a <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  409810:	4b17      	ldr	r3, [pc, #92]	; (409870 <system_init_flash+0x70>)
  409812:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  409816:	601a      	str	r2, [r3, #0]
  409818:	e023      	b.n	409862 <system_init_flash+0x62>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40981a:	687a      	ldr	r2, [r7, #4]
  40981c:	4b15      	ldr	r3, [pc, #84]	; (409874 <system_init_flash+0x74>)
  40981e:	429a      	cmp	r2, r3
  409820:	d803      	bhi.n	40982a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  409822:	4b13      	ldr	r3, [pc, #76]	; (409870 <system_init_flash+0x70>)
  409824:	4a14      	ldr	r2, [pc, #80]	; (409878 <system_init_flash+0x78>)
  409826:	601a      	str	r2, [r3, #0]
  409828:	e01b      	b.n	409862 <system_init_flash+0x62>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40982a:	687a      	ldr	r2, [r7, #4]
  40982c:	4b13      	ldr	r3, [pc, #76]	; (40987c <system_init_flash+0x7c>)
  40982e:	429a      	cmp	r2, r3
  409830:	d803      	bhi.n	40983a <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  409832:	4b0f      	ldr	r3, [pc, #60]	; (409870 <system_init_flash+0x70>)
  409834:	4a12      	ldr	r2, [pc, #72]	; (409880 <system_init_flash+0x80>)
  409836:	601a      	str	r2, [r3, #0]
  409838:	e013      	b.n	409862 <system_init_flash+0x62>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40983a:	687a      	ldr	r2, [r7, #4]
  40983c:	4b11      	ldr	r3, [pc, #68]	; (409884 <system_init_flash+0x84>)
  40983e:	429a      	cmp	r2, r3
  409840:	d803      	bhi.n	40984a <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  409842:	4b0b      	ldr	r3, [pc, #44]	; (409870 <system_init_flash+0x70>)
  409844:	4a10      	ldr	r2, [pc, #64]	; (409888 <system_init_flash+0x88>)
  409846:	601a      	str	r2, [r3, #0]
  409848:	e00b      	b.n	409862 <system_init_flash+0x62>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40984a:	687a      	ldr	r2, [r7, #4]
  40984c:	4b0f      	ldr	r3, [pc, #60]	; (40988c <system_init_flash+0x8c>)
  40984e:	429a      	cmp	r2, r3
  409850:	d804      	bhi.n	40985c <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  409852:	4b07      	ldr	r3, [pc, #28]	; (409870 <system_init_flash+0x70>)
  409854:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  409858:	601a      	str	r2, [r3, #0]
  40985a:	e002      	b.n	409862 <system_init_flash+0x62>
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40985c:	4b04      	ldr	r3, [pc, #16]	; (409870 <system_init_flash+0x70>)
  40985e:	4a0c      	ldr	r2, [pc, #48]	; (409890 <system_init_flash+0x90>)
  409860:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  409862:	370c      	adds	r7, #12
  409864:	46bd      	mov	sp, r7
  409866:	f85d 7b04 	ldr.w	r7, [sp], #4
  40986a:	4770      	bx	lr
  40986c:	01ba813f 	.word	0x01ba813f
  409870:	400e0a00 	.word	0x400e0a00
  409874:	0375027f 	.word	0x0375027f
  409878:	04000100 	.word	0x04000100
  40987c:	053ec5ff 	.word	0x053ec5ff
  409880:	04000200 	.word	0x04000200
  409884:	00a4cb7f 	.word	0x00a4cb7f
  409888:	04000300 	.word	0x04000300
  40988c:	07270dff 	.word	0x07270dff
  409890:	04000500 	.word	0x04000500

00409894 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  409894:	b480      	push	{r7}
  409896:	b085      	sub	sp, #20
  409898:	af00      	add	r7, sp, #0
  40989a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40989c:	4b10      	ldr	r3, [pc, #64]	; (4098e0 <_sbrk+0x4c>)
  40989e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4098a0:	4b10      	ldr	r3, [pc, #64]	; (4098e4 <_sbrk+0x50>)
  4098a2:	681b      	ldr	r3, [r3, #0]
  4098a4:	2b00      	cmp	r3, #0
  4098a6:	d102      	bne.n	4098ae <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4098a8:	4b0e      	ldr	r3, [pc, #56]	; (4098e4 <_sbrk+0x50>)
  4098aa:	4a0f      	ldr	r2, [pc, #60]	; (4098e8 <_sbrk+0x54>)
  4098ac:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4098ae:	4b0d      	ldr	r3, [pc, #52]	; (4098e4 <_sbrk+0x50>)
  4098b0:	681b      	ldr	r3, [r3, #0]
  4098b2:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4098b4:	68ba      	ldr	r2, [r7, #8]
  4098b6:	687b      	ldr	r3, [r7, #4]
  4098b8:	441a      	add	r2, r3
  4098ba:	68fb      	ldr	r3, [r7, #12]
  4098bc:	429a      	cmp	r2, r3
  4098be:	dd02      	ble.n	4098c6 <_sbrk+0x32>
		return (caddr_t) -1;	
  4098c0:	f04f 33ff 	mov.w	r3, #4294967295
  4098c4:	e006      	b.n	4098d4 <_sbrk+0x40>
	}

	heap += incr;
  4098c6:	4b07      	ldr	r3, [pc, #28]	; (4098e4 <_sbrk+0x50>)
  4098c8:	681a      	ldr	r2, [r3, #0]
  4098ca:	687b      	ldr	r3, [r7, #4]
  4098cc:	441a      	add	r2, r3
  4098ce:	4b05      	ldr	r3, [pc, #20]	; (4098e4 <_sbrk+0x50>)
  4098d0:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
  4098d2:	68bb      	ldr	r3, [r7, #8]
}
  4098d4:	4618      	mov	r0, r3
  4098d6:	3714      	adds	r7, #20
  4098d8:	46bd      	mov	sp, r7
  4098da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4098de:	4770      	bx	lr
  4098e0:	2000fffc 	.word	0x2000fffc
  4098e4:	2000af10 	.word	0x2000af10
  4098e8:	2000f010 	.word	0x2000f010

004098ec <_close>:
{
	return -1;
}

extern int _close(int file)
{
  4098ec:	b480      	push	{r7}
  4098ee:	b083      	sub	sp, #12
  4098f0:	af00      	add	r7, sp, #0
  4098f2:	6078      	str	r0, [r7, #4]
	return -1;
  4098f4:	f04f 33ff 	mov.w	r3, #4294967295
}
  4098f8:	4618      	mov	r0, r3
  4098fa:	370c      	adds	r7, #12
  4098fc:	46bd      	mov	sp, r7
  4098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  409902:	4770      	bx	lr

00409904 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  409904:	b480      	push	{r7}
  409906:	b083      	sub	sp, #12
  409908:	af00      	add	r7, sp, #0
  40990a:	6078      	str	r0, [r7, #4]
  40990c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  40990e:	683b      	ldr	r3, [r7, #0]
  409910:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  409914:	605a      	str	r2, [r3, #4]

	return 0;
  409916:	2300      	movs	r3, #0
}
  409918:	4618      	mov	r0, r3
  40991a:	370c      	adds	r7, #12
  40991c:	46bd      	mov	sp, r7
  40991e:	f85d 7b04 	ldr.w	r7, [sp], #4
  409922:	4770      	bx	lr

00409924 <_isatty>:

extern int _isatty(int file)
{
  409924:	b480      	push	{r7}
  409926:	b083      	sub	sp, #12
  409928:	af00      	add	r7, sp, #0
  40992a:	6078      	str	r0, [r7, #4]
	return 1;
  40992c:	2301      	movs	r3, #1
}
  40992e:	4618      	mov	r0, r3
  409930:	370c      	adds	r7, #12
  409932:	46bd      	mov	sp, r7
  409934:	f85d 7b04 	ldr.w	r7, [sp], #4
  409938:	4770      	bx	lr
  40993a:	bf00      	nop

0040993c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  40993c:	b480      	push	{r7}
  40993e:	b085      	sub	sp, #20
  409940:	af00      	add	r7, sp, #0
  409942:	60f8      	str	r0, [r7, #12]
  409944:	60b9      	str	r1, [r7, #8]
  409946:	607a      	str	r2, [r7, #4]
	return 0;
  409948:	2300      	movs	r3, #0
}
  40994a:	4618      	mov	r0, r3
  40994c:	3714      	adds	r7, #20
  40994e:	46bd      	mov	sp, r7
  409950:	f85d 7b04 	ldr.w	r7, [sp], #4
  409954:	4770      	bx	lr
  409956:	bf00      	nop

00409958 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  409958:	b480      	push	{r7}
  40995a:	b08b      	sub	sp, #44	; 0x2c
  40995c:	af00      	add	r7, sp, #0
  40995e:	6078      	str	r0, [r7, #4]
  409960:	460b      	mov	r3, r1
  409962:	70fb      	strb	r3, [r7, #3]
  409964:	687b      	ldr	r3, [r7, #4]
  409966:	627b      	str	r3, [r7, #36]	; 0x24
  409968:	78fb      	ldrb	r3, [r7, #3]
  40996a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409970:	61fb      	str	r3, [r7, #28]
  409972:	69fb      	ldr	r3, [r7, #28]
  409974:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  409976:	69bb      	ldr	r3, [r7, #24]
  409978:	095b      	lsrs	r3, r3, #5
  40997a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40997c:	697b      	ldr	r3, [r7, #20]
  40997e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  409982:	f203 7307 	addw	r3, r3, #1799	; 0x707
  409986:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  409988:	613b      	str	r3, [r7, #16]

	if (level) {
  40998a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40998e:	2b00      	cmp	r3, #0
  409990:	d009      	beq.n	4099a6 <ioport_set_pin_level+0x4e>
  409992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409994:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  409996:	68fb      	ldr	r3, [r7, #12]
  409998:	f003 031f 	and.w	r3, r3, #31
  40999c:	2201      	movs	r2, #1
  40999e:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4099a0:	693b      	ldr	r3, [r7, #16]
  4099a2:	631a      	str	r2, [r3, #48]	; 0x30
  4099a4:	e008      	b.n	4099b8 <ioport_set_pin_level+0x60>
  4099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4099a8:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4099aa:	68bb      	ldr	r3, [r7, #8]
  4099ac:	f003 031f 	and.w	r3, r3, #31
  4099b0:	2201      	movs	r2, #1
  4099b2:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4099b4:	693b      	ldr	r3, [r7, #16]
  4099b6:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  4099b8:	372c      	adds	r7, #44	; 0x2c
  4099ba:	46bd      	mov	sp, r7
  4099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4099c0:	4770      	bx	lr
  4099c2:	bf00      	nop

004099c4 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  4099c4:	b480      	push	{r7}
  4099c6:	b089      	sub	sp, #36	; 0x24
  4099c8:	af00      	add	r7, sp, #0
  4099ca:	6078      	str	r0, [r7, #4]
  4099cc:	687b      	ldr	r3, [r7, #4]
  4099ce:	61fb      	str	r3, [r7, #28]
  4099d0:	69fb      	ldr	r3, [r7, #28]
  4099d2:	61bb      	str	r3, [r7, #24]
  4099d4:	69bb      	ldr	r3, [r7, #24]
  4099d6:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4099d8:	697b      	ldr	r3, [r7, #20]
  4099da:	095b      	lsrs	r3, r3, #5
  4099dc:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4099de:	693b      	ldr	r3, [r7, #16]
  4099e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4099e4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4099e8:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4099ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4099ec:	69fb      	ldr	r3, [r7, #28]
  4099ee:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4099f0:	68fb      	ldr	r3, [r7, #12]
  4099f2:	f003 031f 	and.w	r3, r3, #31
  4099f6:	2101      	movs	r1, #1
  4099f8:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4099fc:	4013      	ands	r3, r2
  4099fe:	2b00      	cmp	r3, #0
  409a00:	bf0c      	ite	eq
  409a02:	2300      	moveq	r3, #0
  409a04:	2301      	movne	r3, #1
  409a06:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  409a08:	4618      	mov	r0, r3
  409a0a:	3724      	adds	r7, #36	; 0x24
  409a0c:	46bd      	mov	sp, r7
  409a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  409a12:	4770      	bx	lr

00409a14 <HardFault_Handler>:
#include "chrg_chargeMonitor.h"

extern void xPortSysTickHandler(void);
extern void vApplicationMallocFailedHook( void );
void HardFault_Handler()
{
  409a14:	b480      	push	{r7}
  409a16:	af00      	add	r7, sp, #0
	while(1); 
  409a18:	e7fe      	b.n	409a18 <HardFault_Handler+0x4>
  409a1a:	bf00      	nop

00409a1c <MemManage_Handler>:
}
void MemManage_Handler()
{
  409a1c:	b480      	push	{r7}
  409a1e:	af00      	add	r7, sp, #0
	while(1); 
  409a20:	e7fe      	b.n	409a20 <MemManage_Handler+0x4>
  409a22:	bf00      	nop

00409a24 <BusFault_Handler>:
}
void BusFault_Handler()
{
  409a24:	b480      	push	{r7}
  409a26:	af00      	add	r7, sp, #0
	while(1); 
  409a28:	e7fe      	b.n	409a28 <BusFault_Handler+0x4>
  409a2a:	bf00      	nop

00409a2c <UsageFault_Handler>:
}
void UsageFault_Handler()
{
  409a2c:	b480      	push	{r7}
  409a2e:	af00      	add	r7, sp, #0
	while(1); 
  409a30:	e7fe      	b.n	409a30 <UsageFault_Handler+0x4>
  409a32:	bf00      	nop

00409a34 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
  409a34:	b480      	push	{r7}
  409a36:	af00      	add	r7, sp, #0
	while(1);
  409a38:	e7fe      	b.n	409a38 <vApplicationMallocFailedHook+0x4>
  409a3a:	bf00      	nop

00409a3c <main>:
	////sgSysTickCount++;
	//xPortSysTickHandler();
//}

int main (void)
{
  409a3c:	b590      	push	{r4, r7, lr}
  409a3e:	b087      	sub	sp, #28
  409a40:	af04      	add	r7, sp, #16
	irq_initialize_vectors();
	cpu_irq_enable();
  409a42:	4b1b      	ldr	r3, [pc, #108]	; (409ab0 <main+0x74>)
  409a44:	2201      	movs	r2, #1
  409a46:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  409a48:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  409a4c:	b662      	cpsie	i
	////Initialize system clock and peripherals
	sysclk_init();	
  409a4e:	4b19      	ldr	r3, [pc, #100]	; (409ab4 <main+0x78>)
  409a50:	4798      	blx	r3
	board_init();
  409a52:	4b19      	ldr	r3, [pc, #100]	; (409ab8 <main+0x7c>)
  409a54:	4798      	blx	r3
	// Insert application code here, after the board has been initialized.
	//start all the tasks
	int retCode = xTaskCreate(mgr_managerTask, "MGR", TASK_MANAGER_STACK_SIZE, NULL, TASK_MANAGER_PRIORITY, NULL);
  409a56:	2304      	movs	r3, #4
  409a58:	9300      	str	r3, [sp, #0]
  409a5a:	2300      	movs	r3, #0
  409a5c:	9301      	str	r3, [sp, #4]
  409a5e:	2300      	movs	r3, #0
  409a60:	9302      	str	r3, [sp, #8]
  409a62:	2300      	movs	r3, #0
  409a64:	9303      	str	r3, [sp, #12]
  409a66:	4815      	ldr	r0, [pc, #84]	; (409abc <main+0x80>)
  409a68:	4915      	ldr	r1, [pc, #84]	; (409ac0 <main+0x84>)
  409a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
  409a6e:	2300      	movs	r3, #0
  409a70:	4c14      	ldr	r4, [pc, #80]	; (409ac4 <main+0x88>)
  409a72:	47a0      	blx	r4
  409a74:	6078      	str	r0, [r7, #4]
	if (retCode != pdPASS)
  409a76:	687b      	ldr	r3, [r7, #4]
  409a78:	2b01      	cmp	r3, #1
  409a7a:	d003      	beq.n	409a84 <main+0x48>
	{
		printf("Failed to create MGR task code %d\r\n", retCode);
  409a7c:	4812      	ldr	r0, [pc, #72]	; (409ac8 <main+0x8c>)
  409a7e:	6879      	ldr	r1, [r7, #4]
  409a80:	4b12      	ldr	r3, [pc, #72]	; (409acc <main+0x90>)
  409a82:	4798      	blx	r3
	}	
	/* Start the scheduler. */
	vTaskStartScheduler();	
  409a84:	4b12      	ldr	r3, [pc, #72]	; (409ad0 <main+0x94>)
  409a86:	4798      	blx	r3
	
	// This skeleton code simply sets the LED to the state of the button.
	while (1) 
	{
		// Is button pressed?
		if (ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) 
  409a88:	2002      	movs	r0, #2
  409a8a:	4b12      	ldr	r3, [pc, #72]	; (409ad4 <main+0x98>)
  409a8c:	4798      	blx	r3
  409a8e:	4603      	mov	r3, r0
  409a90:	f083 0301 	eor.w	r3, r3, #1
  409a94:	b2db      	uxtb	r3, r3
  409a96:	2b00      	cmp	r3, #0
  409a98:	d004      	beq.n	409aa4 <main+0x68>
		{
			// Yes, so turn LED on.
			ioport_set_pin_level(LED_0_PIN, LED_0_ACTIVE);
  409a9a:	2057      	movs	r0, #87	; 0x57
  409a9c:	2100      	movs	r1, #0
  409a9e:	4b0e      	ldr	r3, [pc, #56]	; (409ad8 <main+0x9c>)
  409aa0:	4798      	blx	r3
		{
			// No, so turn LED off.
			ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
		}

	}
  409aa2:	e7f1      	b.n	409a88 <main+0x4c>
			ioport_set_pin_level(LED_0_PIN, LED_0_ACTIVE);
		}
		else 
		{
			// No, so turn LED off.
			ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  409aa4:	2057      	movs	r0, #87	; 0x57
  409aa6:	2101      	movs	r1, #1
  409aa8:	4b0b      	ldr	r3, [pc, #44]	; (409ad8 <main+0x9c>)
  409aaa:	4798      	blx	r3
		}

	}
  409aac:	e7ec      	b.n	409a88 <main+0x4c>
  409aae:	bf00      	nop
  409ab0:	2000020c 	.word	0x2000020c
  409ab4:	004086e9 	.word	0x004086e9
  409ab8:	00408999 	.word	0x00408999
  409abc:	00404a49 	.word	0x00404a49
  409ac0:	004133a0 	.word	0x004133a0
  409ac4:	00406c35 	.word	0x00406c35
  409ac8:	004133a4 	.word	0x004133a4
  409acc:	0040a0d9 	.word	0x0040a0d9
  409ad0:	00406e59 	.word	0x00406e59
  409ad4:	004099c5 	.word	0x004099c5
  409ad8:	00409959 	.word	0x00409959

00409adc <__aeabi_uldivmod>:
  409adc:	b94b      	cbnz	r3, 409af2 <__aeabi_uldivmod+0x16>
  409ade:	b942      	cbnz	r2, 409af2 <__aeabi_uldivmod+0x16>
  409ae0:	2900      	cmp	r1, #0
  409ae2:	bf08      	it	eq
  409ae4:	2800      	cmpeq	r0, #0
  409ae6:	d002      	beq.n	409aee <__aeabi_uldivmod+0x12>
  409ae8:	f04f 31ff 	mov.w	r1, #4294967295
  409aec:	4608      	mov	r0, r1
  409aee:	f000 b83b 	b.w	409b68 <__aeabi_idiv0>
  409af2:	b082      	sub	sp, #8
  409af4:	46ec      	mov	ip, sp
  409af6:	e92d 5000 	stmdb	sp!, {ip, lr}
  409afa:	f000 f81d 	bl	409b38 <__gnu_uldivmod_helper>
  409afe:	f8dd e004 	ldr.w	lr, [sp, #4]
  409b02:	b002      	add	sp, #8
  409b04:	bc0c      	pop	{r2, r3}
  409b06:	4770      	bx	lr

00409b08 <__gnu_ldivmod_helper>:
  409b08:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  409b0c:	9e06      	ldr	r6, [sp, #24]
  409b0e:	4614      	mov	r4, r2
  409b10:	461d      	mov	r5, r3
  409b12:	4680      	mov	r8, r0
  409b14:	4689      	mov	r9, r1
  409b16:	f000 f829 	bl	409b6c <__divdi3>
  409b1a:	fb04 f301 	mul.w	r3, r4, r1
  409b1e:	fb00 3305 	mla	r3, r0, r5, r3
  409b22:	fba4 4500 	umull	r4, r5, r4, r0
  409b26:	441d      	add	r5, r3
  409b28:	ebb8 0404 	subs.w	r4, r8, r4
  409b2c:	eb69 0505 	sbc.w	r5, r9, r5
  409b30:	e9c6 4500 	strd	r4, r5, [r6]
  409b34:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00409b38 <__gnu_uldivmod_helper>:
  409b38:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  409b3c:	9e06      	ldr	r6, [sp, #24]
  409b3e:	4614      	mov	r4, r2
  409b40:	4680      	mov	r8, r0
  409b42:	4689      	mov	r9, r1
  409b44:	461d      	mov	r5, r3
  409b46:	f000 f95d 	bl	409e04 <__udivdi3>
  409b4a:	fb00 f505 	mul.w	r5, r0, r5
  409b4e:	fb04 5301 	mla	r3, r4, r1, r5
  409b52:	fba0 4504 	umull	r4, r5, r0, r4
  409b56:	441d      	add	r5, r3
  409b58:	ebb8 0404 	subs.w	r4, r8, r4
  409b5c:	eb69 0505 	sbc.w	r5, r9, r5
  409b60:	e9c6 4500 	strd	r4, r5, [r6]
  409b64:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00409b68 <__aeabi_idiv0>:
  409b68:	4770      	bx	lr
  409b6a:	bf00      	nop

00409b6c <__divdi3>:
  409b6c:	2900      	cmp	r1, #0
  409b6e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409b72:	f2c0 809f 	blt.w	409cb4 <__divdi3+0x148>
  409b76:	2400      	movs	r4, #0
  409b78:	2b00      	cmp	r3, #0
  409b7a:	f2c0 8096 	blt.w	409caa <__divdi3+0x13e>
  409b7e:	4615      	mov	r5, r2
  409b80:	4606      	mov	r6, r0
  409b82:	460f      	mov	r7, r1
  409b84:	2b00      	cmp	r3, #0
  409b86:	d13e      	bne.n	409c06 <__divdi3+0x9a>
  409b88:	428a      	cmp	r2, r1
  409b8a:	d957      	bls.n	409c3c <__divdi3+0xd0>
  409b8c:	fab2 f382 	clz	r3, r2
  409b90:	b14b      	cbz	r3, 409ba6 <__divdi3+0x3a>
  409b92:	f1c3 0220 	rsb	r2, r3, #32
  409b96:	fa01 f703 	lsl.w	r7, r1, r3
  409b9a:	fa20 f202 	lsr.w	r2, r0, r2
  409b9e:	409d      	lsls	r5, r3
  409ba0:	4317      	orrs	r7, r2
  409ba2:	fa00 f603 	lsl.w	r6, r0, r3
  409ba6:	0c29      	lsrs	r1, r5, #16
  409ba8:	fbb7 f2f1 	udiv	r2, r7, r1
  409bac:	0c33      	lsrs	r3, r6, #16
  409bae:	fb01 7c12 	mls	ip, r1, r2, r7
  409bb2:	b2a8      	uxth	r0, r5
  409bb4:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  409bb8:	fb00 f302 	mul.w	r3, r0, r2
  409bbc:	42bb      	cmp	r3, r7
  409bbe:	d909      	bls.n	409bd4 <__divdi3+0x68>
  409bc0:	197f      	adds	r7, r7, r5
  409bc2:	f102 3cff 	add.w	ip, r2, #4294967295
  409bc6:	f080 8101 	bcs.w	409dcc <__divdi3+0x260>
  409bca:	42bb      	cmp	r3, r7
  409bcc:	f240 80fe 	bls.w	409dcc <__divdi3+0x260>
  409bd0:	3a02      	subs	r2, #2
  409bd2:	442f      	add	r7, r5
  409bd4:	1aff      	subs	r7, r7, r3
  409bd6:	fbb7 f3f1 	udiv	r3, r7, r1
  409bda:	b2b6      	uxth	r6, r6
  409bdc:	fb01 7113 	mls	r1, r1, r3, r7
  409be0:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  409be4:	fb00 f003 	mul.w	r0, r0, r3
  409be8:	4288      	cmp	r0, r1
  409bea:	d908      	bls.n	409bfe <__divdi3+0x92>
  409bec:	1949      	adds	r1, r1, r5
  409bee:	f103 37ff 	add.w	r7, r3, #4294967295
  409bf2:	f080 80ed 	bcs.w	409dd0 <__divdi3+0x264>
  409bf6:	4288      	cmp	r0, r1
  409bf8:	f240 80ea 	bls.w	409dd0 <__divdi3+0x264>
  409bfc:	3b02      	subs	r3, #2
  409bfe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  409c02:	2300      	movs	r3, #0
  409c04:	e003      	b.n	409c0e <__divdi3+0xa2>
  409c06:	428b      	cmp	r3, r1
  409c08:	d90a      	bls.n	409c20 <__divdi3+0xb4>
  409c0a:	2300      	movs	r3, #0
  409c0c:	461a      	mov	r2, r3
  409c0e:	4610      	mov	r0, r2
  409c10:	4619      	mov	r1, r3
  409c12:	b114      	cbz	r4, 409c1a <__divdi3+0xae>
  409c14:	4240      	negs	r0, r0
  409c16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409c1a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409c1e:	4770      	bx	lr
  409c20:	fab3 f883 	clz	r8, r3
  409c24:	f1b8 0f00 	cmp.w	r8, #0
  409c28:	f040 8084 	bne.w	409d34 <__divdi3+0x1c8>
  409c2c:	428b      	cmp	r3, r1
  409c2e:	d302      	bcc.n	409c36 <__divdi3+0xca>
  409c30:	4282      	cmp	r2, r0
  409c32:	f200 80de 	bhi.w	409df2 <__divdi3+0x286>
  409c36:	2300      	movs	r3, #0
  409c38:	2201      	movs	r2, #1
  409c3a:	e7e8      	b.n	409c0e <__divdi3+0xa2>
  409c3c:	b912      	cbnz	r2, 409c44 <__divdi3+0xd8>
  409c3e:	2301      	movs	r3, #1
  409c40:	fbb3 f5f2 	udiv	r5, r3, r2
  409c44:	fab5 f285 	clz	r2, r5
  409c48:	2a00      	cmp	r2, #0
  409c4a:	d139      	bne.n	409cc0 <__divdi3+0x154>
  409c4c:	1b7f      	subs	r7, r7, r5
  409c4e:	0c28      	lsrs	r0, r5, #16
  409c50:	fa1f fc85 	uxth.w	ip, r5
  409c54:	2301      	movs	r3, #1
  409c56:	fbb7 f1f0 	udiv	r1, r7, r0
  409c5a:	0c32      	lsrs	r2, r6, #16
  409c5c:	fb00 7711 	mls	r7, r0, r1, r7
  409c60:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  409c64:	fb0c f201 	mul.w	r2, ip, r1
  409c68:	42ba      	cmp	r2, r7
  409c6a:	d907      	bls.n	409c7c <__divdi3+0x110>
  409c6c:	197f      	adds	r7, r7, r5
  409c6e:	f101 38ff 	add.w	r8, r1, #4294967295
  409c72:	d202      	bcs.n	409c7a <__divdi3+0x10e>
  409c74:	42ba      	cmp	r2, r7
  409c76:	f200 80c1 	bhi.w	409dfc <__divdi3+0x290>
  409c7a:	4641      	mov	r1, r8
  409c7c:	1abf      	subs	r7, r7, r2
  409c7e:	fbb7 f2f0 	udiv	r2, r7, r0
  409c82:	b2b6      	uxth	r6, r6
  409c84:	fb00 7012 	mls	r0, r0, r2, r7
  409c88:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  409c8c:	fb0c fc02 	mul.w	ip, ip, r2
  409c90:	4584      	cmp	ip, r0
  409c92:	d907      	bls.n	409ca4 <__divdi3+0x138>
  409c94:	1940      	adds	r0, r0, r5
  409c96:	f102 37ff 	add.w	r7, r2, #4294967295
  409c9a:	d202      	bcs.n	409ca2 <__divdi3+0x136>
  409c9c:	4584      	cmp	ip, r0
  409c9e:	f200 80ab 	bhi.w	409df8 <__divdi3+0x28c>
  409ca2:	463a      	mov	r2, r7
  409ca4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  409ca8:	e7b1      	b.n	409c0e <__divdi3+0xa2>
  409caa:	43e4      	mvns	r4, r4
  409cac:	4252      	negs	r2, r2
  409cae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  409cb2:	e764      	b.n	409b7e <__divdi3+0x12>
  409cb4:	4240      	negs	r0, r0
  409cb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409cba:	f04f 34ff 	mov.w	r4, #4294967295
  409cbe:	e75b      	b.n	409b78 <__divdi3+0xc>
  409cc0:	4095      	lsls	r5, r2
  409cc2:	f1c2 0320 	rsb	r3, r2, #32
  409cc6:	fa27 f103 	lsr.w	r1, r7, r3
  409cca:	0c28      	lsrs	r0, r5, #16
  409ccc:	fa26 f303 	lsr.w	r3, r6, r3
  409cd0:	4097      	lsls	r7, r2
  409cd2:	fbb1 f8f0 	udiv	r8, r1, r0
  409cd6:	431f      	orrs	r7, r3
  409cd8:	0c3b      	lsrs	r3, r7, #16
  409cda:	fb00 1118 	mls	r1, r0, r8, r1
  409cde:	fa1f fc85 	uxth.w	ip, r5
  409ce2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  409ce6:	fb0c f308 	mul.w	r3, ip, r8
  409cea:	428b      	cmp	r3, r1
  409cec:	fa06 f602 	lsl.w	r6, r6, r2
  409cf0:	d908      	bls.n	409d04 <__divdi3+0x198>
  409cf2:	1949      	adds	r1, r1, r5
  409cf4:	f108 32ff 	add.w	r2, r8, #4294967295
  409cf8:	d279      	bcs.n	409dee <__divdi3+0x282>
  409cfa:	428b      	cmp	r3, r1
  409cfc:	d977      	bls.n	409dee <__divdi3+0x282>
  409cfe:	f1a8 0802 	sub.w	r8, r8, #2
  409d02:	4429      	add	r1, r5
  409d04:	1ac9      	subs	r1, r1, r3
  409d06:	fbb1 f3f0 	udiv	r3, r1, r0
  409d0a:	b2bf      	uxth	r7, r7
  409d0c:	fb00 1113 	mls	r1, r0, r3, r1
  409d10:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  409d14:	fb0c f203 	mul.w	r2, ip, r3
  409d18:	42ba      	cmp	r2, r7
  409d1a:	d907      	bls.n	409d2c <__divdi3+0x1c0>
  409d1c:	197f      	adds	r7, r7, r5
  409d1e:	f103 31ff 	add.w	r1, r3, #4294967295
  409d22:	d260      	bcs.n	409de6 <__divdi3+0x27a>
  409d24:	42ba      	cmp	r2, r7
  409d26:	d95e      	bls.n	409de6 <__divdi3+0x27a>
  409d28:	3b02      	subs	r3, #2
  409d2a:	442f      	add	r7, r5
  409d2c:	1abf      	subs	r7, r7, r2
  409d2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  409d32:	e790      	b.n	409c56 <__divdi3+0xea>
  409d34:	f1c8 0220 	rsb	r2, r8, #32
  409d38:	fa03 fc08 	lsl.w	ip, r3, r8
  409d3c:	fa25 f302 	lsr.w	r3, r5, r2
  409d40:	ea43 0c0c 	orr.w	ip, r3, ip
  409d44:	ea4f 491c 	mov.w	r9, ip, lsr #16
  409d48:	fa21 f302 	lsr.w	r3, r1, r2
  409d4c:	fa01 f708 	lsl.w	r7, r1, r8
  409d50:	fa20 f202 	lsr.w	r2, r0, r2
  409d54:	fbb3 f1f9 	udiv	r1, r3, r9
  409d58:	4317      	orrs	r7, r2
  409d5a:	fb09 3311 	mls	r3, r9, r1, r3
  409d5e:	0c3a      	lsrs	r2, r7, #16
  409d60:	fa1f fb8c 	uxth.w	fp, ip
  409d64:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  409d68:	fb0b fa01 	mul.w	sl, fp, r1
  409d6c:	459a      	cmp	sl, r3
  409d6e:	fa05 f008 	lsl.w	r0, r5, r8
  409d72:	d908      	bls.n	409d86 <__divdi3+0x21a>
  409d74:	eb13 030c 	adds.w	r3, r3, ip
  409d78:	f101 32ff 	add.w	r2, r1, #4294967295
  409d7c:	d235      	bcs.n	409dea <__divdi3+0x27e>
  409d7e:	459a      	cmp	sl, r3
  409d80:	d933      	bls.n	409dea <__divdi3+0x27e>
  409d82:	3902      	subs	r1, #2
  409d84:	4463      	add	r3, ip
  409d86:	ebca 0303 	rsb	r3, sl, r3
  409d8a:	fbb3 f2f9 	udiv	r2, r3, r9
  409d8e:	fb09 3312 	mls	r3, r9, r2, r3
  409d92:	b2bf      	uxth	r7, r7
  409d94:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  409d98:	fb0b f902 	mul.w	r9, fp, r2
  409d9c:	45b9      	cmp	r9, r7
  409d9e:	d908      	bls.n	409db2 <__divdi3+0x246>
  409da0:	eb17 070c 	adds.w	r7, r7, ip
  409da4:	f102 33ff 	add.w	r3, r2, #4294967295
  409da8:	d21b      	bcs.n	409de2 <__divdi3+0x276>
  409daa:	45b9      	cmp	r9, r7
  409dac:	d919      	bls.n	409de2 <__divdi3+0x276>
  409dae:	3a02      	subs	r2, #2
  409db0:	4467      	add	r7, ip
  409db2:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  409db6:	fba5 0100 	umull	r0, r1, r5, r0
  409dba:	ebc9 0707 	rsb	r7, r9, r7
  409dbe:	428f      	cmp	r7, r1
  409dc0:	f04f 0300 	mov.w	r3, #0
  409dc4:	d30a      	bcc.n	409ddc <__divdi3+0x270>
  409dc6:	d005      	beq.n	409dd4 <__divdi3+0x268>
  409dc8:	462a      	mov	r2, r5
  409dca:	e720      	b.n	409c0e <__divdi3+0xa2>
  409dcc:	4662      	mov	r2, ip
  409dce:	e701      	b.n	409bd4 <__divdi3+0x68>
  409dd0:	463b      	mov	r3, r7
  409dd2:	e714      	b.n	409bfe <__divdi3+0x92>
  409dd4:	fa06 f608 	lsl.w	r6, r6, r8
  409dd8:	4286      	cmp	r6, r0
  409dda:	d2f5      	bcs.n	409dc8 <__divdi3+0x25c>
  409ddc:	1e6a      	subs	r2, r5, #1
  409dde:	2300      	movs	r3, #0
  409de0:	e715      	b.n	409c0e <__divdi3+0xa2>
  409de2:	461a      	mov	r2, r3
  409de4:	e7e5      	b.n	409db2 <__divdi3+0x246>
  409de6:	460b      	mov	r3, r1
  409de8:	e7a0      	b.n	409d2c <__divdi3+0x1c0>
  409dea:	4611      	mov	r1, r2
  409dec:	e7cb      	b.n	409d86 <__divdi3+0x21a>
  409dee:	4690      	mov	r8, r2
  409df0:	e788      	b.n	409d04 <__divdi3+0x198>
  409df2:	4643      	mov	r3, r8
  409df4:	4642      	mov	r2, r8
  409df6:	e70a      	b.n	409c0e <__divdi3+0xa2>
  409df8:	3a02      	subs	r2, #2
  409dfa:	e753      	b.n	409ca4 <__divdi3+0x138>
  409dfc:	3902      	subs	r1, #2
  409dfe:	442f      	add	r7, r5
  409e00:	e73c      	b.n	409c7c <__divdi3+0x110>
  409e02:	bf00      	nop

00409e04 <__udivdi3>:
  409e04:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409e08:	4614      	mov	r4, r2
  409e0a:	4605      	mov	r5, r0
  409e0c:	460e      	mov	r6, r1
  409e0e:	2b00      	cmp	r3, #0
  409e10:	d143      	bne.n	409e9a <__udivdi3+0x96>
  409e12:	428a      	cmp	r2, r1
  409e14:	d953      	bls.n	409ebe <__udivdi3+0xba>
  409e16:	fab2 f782 	clz	r7, r2
  409e1a:	b157      	cbz	r7, 409e32 <__udivdi3+0x2e>
  409e1c:	f1c7 0620 	rsb	r6, r7, #32
  409e20:	fa20 f606 	lsr.w	r6, r0, r6
  409e24:	fa01 f307 	lsl.w	r3, r1, r7
  409e28:	fa02 f407 	lsl.w	r4, r2, r7
  409e2c:	431e      	orrs	r6, r3
  409e2e:	fa00 f507 	lsl.w	r5, r0, r7
  409e32:	0c21      	lsrs	r1, r4, #16
  409e34:	fbb6 f2f1 	udiv	r2, r6, r1
  409e38:	0c2b      	lsrs	r3, r5, #16
  409e3a:	fb01 6712 	mls	r7, r1, r2, r6
  409e3e:	b2a0      	uxth	r0, r4
  409e40:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  409e44:	fb00 f302 	mul.w	r3, r0, r2
  409e48:	42b3      	cmp	r3, r6
  409e4a:	d909      	bls.n	409e60 <__udivdi3+0x5c>
  409e4c:	1936      	adds	r6, r6, r4
  409e4e:	f102 37ff 	add.w	r7, r2, #4294967295
  409e52:	f080 80f6 	bcs.w	40a042 <__udivdi3+0x23e>
  409e56:	42b3      	cmp	r3, r6
  409e58:	f240 80f3 	bls.w	40a042 <__udivdi3+0x23e>
  409e5c:	3a02      	subs	r2, #2
  409e5e:	4426      	add	r6, r4
  409e60:	1af6      	subs	r6, r6, r3
  409e62:	fbb6 f3f1 	udiv	r3, r6, r1
  409e66:	b2ad      	uxth	r5, r5
  409e68:	fb01 6113 	mls	r1, r1, r3, r6
  409e6c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  409e70:	fb00 f003 	mul.w	r0, r0, r3
  409e74:	4288      	cmp	r0, r1
  409e76:	d908      	bls.n	409e8a <__udivdi3+0x86>
  409e78:	1909      	adds	r1, r1, r4
  409e7a:	f103 36ff 	add.w	r6, r3, #4294967295
  409e7e:	f080 80e2 	bcs.w	40a046 <__udivdi3+0x242>
  409e82:	4288      	cmp	r0, r1
  409e84:	f240 80df 	bls.w	40a046 <__udivdi3+0x242>
  409e88:	3b02      	subs	r3, #2
  409e8a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  409e8e:	2300      	movs	r3, #0
  409e90:	4610      	mov	r0, r2
  409e92:	4619      	mov	r1, r3
  409e94:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409e98:	4770      	bx	lr
  409e9a:	428b      	cmp	r3, r1
  409e9c:	d84a      	bhi.n	409f34 <__udivdi3+0x130>
  409e9e:	fab3 f683 	clz	r6, r3
  409ea2:	2e00      	cmp	r6, #0
  409ea4:	d14d      	bne.n	409f42 <__udivdi3+0x13e>
  409ea6:	428b      	cmp	r3, r1
  409ea8:	d302      	bcc.n	409eb0 <__udivdi3+0xac>
  409eaa:	4282      	cmp	r2, r0
  409eac:	f200 80d6 	bhi.w	40a05c <__udivdi3+0x258>
  409eb0:	2300      	movs	r3, #0
  409eb2:	2201      	movs	r2, #1
  409eb4:	4610      	mov	r0, r2
  409eb6:	4619      	mov	r1, r3
  409eb8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409ebc:	4770      	bx	lr
  409ebe:	b912      	cbnz	r2, 409ec6 <__udivdi3+0xc2>
  409ec0:	2401      	movs	r4, #1
  409ec2:	fbb4 f4f2 	udiv	r4, r4, r2
  409ec6:	fab4 f284 	clz	r2, r4
  409eca:	2a00      	cmp	r2, #0
  409ecc:	d17c      	bne.n	409fc8 <__udivdi3+0x1c4>
  409ece:	1b09      	subs	r1, r1, r4
  409ed0:	0c26      	lsrs	r6, r4, #16
  409ed2:	b2a7      	uxth	r7, r4
  409ed4:	2301      	movs	r3, #1
  409ed6:	fbb1 f0f6 	udiv	r0, r1, r6
  409eda:	0c2a      	lsrs	r2, r5, #16
  409edc:	fb06 1110 	mls	r1, r6, r0, r1
  409ee0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  409ee4:	fb07 f200 	mul.w	r2, r7, r0
  409ee8:	428a      	cmp	r2, r1
  409eea:	d907      	bls.n	409efc <__udivdi3+0xf8>
  409eec:	1909      	adds	r1, r1, r4
  409eee:	f100 3cff 	add.w	ip, r0, #4294967295
  409ef2:	d202      	bcs.n	409efa <__udivdi3+0xf6>
  409ef4:	428a      	cmp	r2, r1
  409ef6:	f200 80c3 	bhi.w	40a080 <__udivdi3+0x27c>
  409efa:	4660      	mov	r0, ip
  409efc:	1a89      	subs	r1, r1, r2
  409efe:	fbb1 f2f6 	udiv	r2, r1, r6
  409f02:	b2ad      	uxth	r5, r5
  409f04:	fb06 1112 	mls	r1, r6, r2, r1
  409f08:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  409f0c:	fb07 f702 	mul.w	r7, r7, r2
  409f10:	42af      	cmp	r7, r5
  409f12:	d908      	bls.n	409f26 <__udivdi3+0x122>
  409f14:	192c      	adds	r4, r5, r4
  409f16:	f102 31ff 	add.w	r1, r2, #4294967295
  409f1a:	f080 8096 	bcs.w	40a04a <__udivdi3+0x246>
  409f1e:	42a7      	cmp	r7, r4
  409f20:	f240 8093 	bls.w	40a04a <__udivdi3+0x246>
  409f24:	3a02      	subs	r2, #2
  409f26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  409f2a:	4610      	mov	r0, r2
  409f2c:	4619      	mov	r1, r3
  409f2e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409f32:	4770      	bx	lr
  409f34:	2300      	movs	r3, #0
  409f36:	461a      	mov	r2, r3
  409f38:	4610      	mov	r0, r2
  409f3a:	4619      	mov	r1, r3
  409f3c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409f40:	4770      	bx	lr
  409f42:	f1c6 0520 	rsb	r5, r6, #32
  409f46:	fa22 f405 	lsr.w	r4, r2, r5
  409f4a:	40b3      	lsls	r3, r6
  409f4c:	431c      	orrs	r4, r3
  409f4e:	ea4f 4814 	mov.w	r8, r4, lsr #16
  409f52:	fa21 f305 	lsr.w	r3, r1, r5
  409f56:	fa01 f706 	lsl.w	r7, r1, r6
  409f5a:	fa20 f505 	lsr.w	r5, r0, r5
  409f5e:	fbb3 fcf8 	udiv	ip, r3, r8
  409f62:	432f      	orrs	r7, r5
  409f64:	fb08 331c 	mls	r3, r8, ip, r3
  409f68:	0c3d      	lsrs	r5, r7, #16
  409f6a:	fa1f fa84 	uxth.w	sl, r4
  409f6e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  409f72:	fb0a f90c 	mul.w	r9, sl, ip
  409f76:	4599      	cmp	r9, r3
  409f78:	fa02 fb06 	lsl.w	fp, r2, r6
  409f7c:	d904      	bls.n	409f88 <__udivdi3+0x184>
  409f7e:	191b      	adds	r3, r3, r4
  409f80:	f10c 32ff 	add.w	r2, ip, #4294967295
  409f84:	d36d      	bcc.n	40a062 <__udivdi3+0x25e>
  409f86:	4694      	mov	ip, r2
  409f88:	ebc9 0303 	rsb	r3, r9, r3
  409f8c:	fbb3 f5f8 	udiv	r5, r3, r8
  409f90:	fb08 3315 	mls	r3, r8, r5, r3
  409f94:	b2bf      	uxth	r7, r7
  409f96:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  409f9a:	fb0a f805 	mul.w	r8, sl, r5
  409f9e:	45b8      	cmp	r8, r7
  409fa0:	d904      	bls.n	409fac <__udivdi3+0x1a8>
  409fa2:	193f      	adds	r7, r7, r4
  409fa4:	f105 33ff 	add.w	r3, r5, #4294967295
  409fa8:	d361      	bcc.n	40a06e <__udivdi3+0x26a>
  409faa:	461d      	mov	r5, r3
  409fac:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  409fb0:	fbac 230b 	umull	r2, r3, ip, fp
  409fb4:	ebc8 0707 	rsb	r7, r8, r7
  409fb8:	429f      	cmp	r7, r3
  409fba:	f04f 0500 	mov.w	r5, #0
  409fbe:	d349      	bcc.n	40a054 <__udivdi3+0x250>
  409fc0:	d045      	beq.n	40a04e <__udivdi3+0x24a>
  409fc2:	4662      	mov	r2, ip
  409fc4:	462b      	mov	r3, r5
  409fc6:	e763      	b.n	409e90 <__udivdi3+0x8c>
  409fc8:	4094      	lsls	r4, r2
  409fca:	f1c2 0320 	rsb	r3, r2, #32
  409fce:	fa21 fc03 	lsr.w	ip, r1, r3
  409fd2:	0c26      	lsrs	r6, r4, #16
  409fd4:	fa20 f303 	lsr.w	r3, r0, r3
  409fd8:	fa01 f502 	lsl.w	r5, r1, r2
  409fdc:	fbbc f8f6 	udiv	r8, ip, r6
  409fe0:	ea43 0105 	orr.w	r1, r3, r5
  409fe4:	0c0b      	lsrs	r3, r1, #16
  409fe6:	fb06 cc18 	mls	ip, r6, r8, ip
  409fea:	b2a7      	uxth	r7, r4
  409fec:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  409ff0:	fb07 f308 	mul.w	r3, r7, r8
  409ff4:	4563      	cmp	r3, ip
  409ff6:	fa00 f502 	lsl.w	r5, r0, r2
  409ffa:	d909      	bls.n	40a010 <__udivdi3+0x20c>
  409ffc:	eb1c 0c04 	adds.w	ip, ip, r4
  40a000:	f108 32ff 	add.w	r2, r8, #4294967295
  40a004:	d23a      	bcs.n	40a07c <__udivdi3+0x278>
  40a006:	4563      	cmp	r3, ip
  40a008:	d938      	bls.n	40a07c <__udivdi3+0x278>
  40a00a:	f1a8 0802 	sub.w	r8, r8, #2
  40a00e:	44a4      	add	ip, r4
  40a010:	ebc3 0c0c 	rsb	ip, r3, ip
  40a014:	fbbc f3f6 	udiv	r3, ip, r6
  40a018:	b289      	uxth	r1, r1
  40a01a:	fb06 cc13 	mls	ip, r6, r3, ip
  40a01e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  40a022:	fb07 f203 	mul.w	r2, r7, r3
  40a026:	428a      	cmp	r2, r1
  40a028:	d907      	bls.n	40a03a <__udivdi3+0x236>
  40a02a:	1909      	adds	r1, r1, r4
  40a02c:	f103 30ff 	add.w	r0, r3, #4294967295
  40a030:	d222      	bcs.n	40a078 <__udivdi3+0x274>
  40a032:	428a      	cmp	r2, r1
  40a034:	d920      	bls.n	40a078 <__udivdi3+0x274>
  40a036:	3b02      	subs	r3, #2
  40a038:	4421      	add	r1, r4
  40a03a:	1a89      	subs	r1, r1, r2
  40a03c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40a040:	e749      	b.n	409ed6 <__udivdi3+0xd2>
  40a042:	463a      	mov	r2, r7
  40a044:	e70c      	b.n	409e60 <__udivdi3+0x5c>
  40a046:	4633      	mov	r3, r6
  40a048:	e71f      	b.n	409e8a <__udivdi3+0x86>
  40a04a:	460a      	mov	r2, r1
  40a04c:	e76b      	b.n	409f26 <__udivdi3+0x122>
  40a04e:	40b0      	lsls	r0, r6
  40a050:	4290      	cmp	r0, r2
  40a052:	d2b6      	bcs.n	409fc2 <__udivdi3+0x1be>
  40a054:	f10c 32ff 	add.w	r2, ip, #4294967295
  40a058:	2300      	movs	r3, #0
  40a05a:	e719      	b.n	409e90 <__udivdi3+0x8c>
  40a05c:	4633      	mov	r3, r6
  40a05e:	4632      	mov	r2, r6
  40a060:	e716      	b.n	409e90 <__udivdi3+0x8c>
  40a062:	4599      	cmp	r9, r3
  40a064:	d98f      	bls.n	409f86 <__udivdi3+0x182>
  40a066:	f1ac 0c02 	sub.w	ip, ip, #2
  40a06a:	4423      	add	r3, r4
  40a06c:	e78c      	b.n	409f88 <__udivdi3+0x184>
  40a06e:	45b8      	cmp	r8, r7
  40a070:	d99b      	bls.n	409faa <__udivdi3+0x1a6>
  40a072:	3d02      	subs	r5, #2
  40a074:	4427      	add	r7, r4
  40a076:	e799      	b.n	409fac <__udivdi3+0x1a8>
  40a078:	4603      	mov	r3, r0
  40a07a:	e7de      	b.n	40a03a <__udivdi3+0x236>
  40a07c:	4690      	mov	r8, r2
  40a07e:	e7c7      	b.n	40a010 <__udivdi3+0x20c>
  40a080:	3802      	subs	r0, #2
  40a082:	4421      	add	r1, r4
  40a084:	e73a      	b.n	409efc <__udivdi3+0xf8>
  40a086:	bf00      	nop

0040a088 <__libc_init_array>:
  40a088:	b570      	push	{r4, r5, r6, lr}
  40a08a:	4e0f      	ldr	r6, [pc, #60]	; (40a0c8 <__libc_init_array+0x40>)
  40a08c:	4d0f      	ldr	r5, [pc, #60]	; (40a0cc <__libc_init_array+0x44>)
  40a08e:	1b76      	subs	r6, r6, r5
  40a090:	10b6      	asrs	r6, r6, #2
  40a092:	d007      	beq.n	40a0a4 <__libc_init_array+0x1c>
  40a094:	3d04      	subs	r5, #4
  40a096:	2400      	movs	r4, #0
  40a098:	3401      	adds	r4, #1
  40a09a:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40a09e:	4798      	blx	r3
  40a0a0:	42a6      	cmp	r6, r4
  40a0a2:	d1f9      	bne.n	40a098 <__libc_init_array+0x10>
  40a0a4:	4e0a      	ldr	r6, [pc, #40]	; (40a0d0 <__libc_init_array+0x48>)
  40a0a6:	4d0b      	ldr	r5, [pc, #44]	; (40a0d4 <__libc_init_array+0x4c>)
  40a0a8:	1b76      	subs	r6, r6, r5
  40a0aa:	f009 fba9 	bl	413800 <_init>
  40a0ae:	10b6      	asrs	r6, r6, #2
  40a0b0:	d008      	beq.n	40a0c4 <__libc_init_array+0x3c>
  40a0b2:	3d04      	subs	r5, #4
  40a0b4:	2400      	movs	r4, #0
  40a0b6:	3401      	adds	r4, #1
  40a0b8:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40a0bc:	4798      	blx	r3
  40a0be:	42a6      	cmp	r6, r4
  40a0c0:	d1f9      	bne.n	40a0b6 <__libc_init_array+0x2e>
  40a0c2:	bd70      	pop	{r4, r5, r6, pc}
  40a0c4:	bd70      	pop	{r4, r5, r6, pc}
  40a0c6:	bf00      	nop
  40a0c8:	0041380c 	.word	0x0041380c
  40a0cc:	0041380c 	.word	0x0041380c
  40a0d0:	00413814 	.word	0x00413814
  40a0d4:	0041380c 	.word	0x0041380c

0040a0d8 <iprintf>:
  40a0d8:	b40f      	push	{r0, r1, r2, r3}
  40a0da:	b500      	push	{lr}
  40a0dc:	4a07      	ldr	r2, [pc, #28]	; (40a0fc <iprintf+0x24>)
  40a0de:	b083      	sub	sp, #12
  40a0e0:	ab04      	add	r3, sp, #16
  40a0e2:	6810      	ldr	r0, [r2, #0]
  40a0e4:	f853 2b04 	ldr.w	r2, [r3], #4
  40a0e8:	6881      	ldr	r1, [r0, #8]
  40a0ea:	9301      	str	r3, [sp, #4]
  40a0ec:	f002 fcbc 	bl	40ca68 <_vfiprintf_r>
  40a0f0:	b003      	add	sp, #12
  40a0f2:	f85d eb04 	ldr.w	lr, [sp], #4
  40a0f6:	b004      	add	sp, #16
  40a0f8:	4770      	bx	lr
  40a0fa:	bf00      	nop
  40a0fc:	20000640 	.word	0x20000640

0040a100 <memcpy>:
  40a100:	4684      	mov	ip, r0
  40a102:	ea41 0300 	orr.w	r3, r1, r0
  40a106:	f013 0303 	ands.w	r3, r3, #3
  40a10a:	d16d      	bne.n	40a1e8 <memcpy+0xe8>
  40a10c:	3a40      	subs	r2, #64	; 0x40
  40a10e:	d341      	bcc.n	40a194 <memcpy+0x94>
  40a110:	f851 3b04 	ldr.w	r3, [r1], #4
  40a114:	f840 3b04 	str.w	r3, [r0], #4
  40a118:	f851 3b04 	ldr.w	r3, [r1], #4
  40a11c:	f840 3b04 	str.w	r3, [r0], #4
  40a120:	f851 3b04 	ldr.w	r3, [r1], #4
  40a124:	f840 3b04 	str.w	r3, [r0], #4
  40a128:	f851 3b04 	ldr.w	r3, [r1], #4
  40a12c:	f840 3b04 	str.w	r3, [r0], #4
  40a130:	f851 3b04 	ldr.w	r3, [r1], #4
  40a134:	f840 3b04 	str.w	r3, [r0], #4
  40a138:	f851 3b04 	ldr.w	r3, [r1], #4
  40a13c:	f840 3b04 	str.w	r3, [r0], #4
  40a140:	f851 3b04 	ldr.w	r3, [r1], #4
  40a144:	f840 3b04 	str.w	r3, [r0], #4
  40a148:	f851 3b04 	ldr.w	r3, [r1], #4
  40a14c:	f840 3b04 	str.w	r3, [r0], #4
  40a150:	f851 3b04 	ldr.w	r3, [r1], #4
  40a154:	f840 3b04 	str.w	r3, [r0], #4
  40a158:	f851 3b04 	ldr.w	r3, [r1], #4
  40a15c:	f840 3b04 	str.w	r3, [r0], #4
  40a160:	f851 3b04 	ldr.w	r3, [r1], #4
  40a164:	f840 3b04 	str.w	r3, [r0], #4
  40a168:	f851 3b04 	ldr.w	r3, [r1], #4
  40a16c:	f840 3b04 	str.w	r3, [r0], #4
  40a170:	f851 3b04 	ldr.w	r3, [r1], #4
  40a174:	f840 3b04 	str.w	r3, [r0], #4
  40a178:	f851 3b04 	ldr.w	r3, [r1], #4
  40a17c:	f840 3b04 	str.w	r3, [r0], #4
  40a180:	f851 3b04 	ldr.w	r3, [r1], #4
  40a184:	f840 3b04 	str.w	r3, [r0], #4
  40a188:	f851 3b04 	ldr.w	r3, [r1], #4
  40a18c:	f840 3b04 	str.w	r3, [r0], #4
  40a190:	3a40      	subs	r2, #64	; 0x40
  40a192:	d2bd      	bcs.n	40a110 <memcpy+0x10>
  40a194:	3230      	adds	r2, #48	; 0x30
  40a196:	d311      	bcc.n	40a1bc <memcpy+0xbc>
  40a198:	f851 3b04 	ldr.w	r3, [r1], #4
  40a19c:	f840 3b04 	str.w	r3, [r0], #4
  40a1a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1a4:	f840 3b04 	str.w	r3, [r0], #4
  40a1a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1ac:	f840 3b04 	str.w	r3, [r0], #4
  40a1b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1b4:	f840 3b04 	str.w	r3, [r0], #4
  40a1b8:	3a10      	subs	r2, #16
  40a1ba:	d2ed      	bcs.n	40a198 <memcpy+0x98>
  40a1bc:	320c      	adds	r2, #12
  40a1be:	d305      	bcc.n	40a1cc <memcpy+0xcc>
  40a1c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1c4:	f840 3b04 	str.w	r3, [r0], #4
  40a1c8:	3a04      	subs	r2, #4
  40a1ca:	d2f9      	bcs.n	40a1c0 <memcpy+0xc0>
  40a1cc:	3204      	adds	r2, #4
  40a1ce:	d008      	beq.n	40a1e2 <memcpy+0xe2>
  40a1d0:	07d2      	lsls	r2, r2, #31
  40a1d2:	bf1c      	itt	ne
  40a1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40a1d8:	f800 3b01 	strbne.w	r3, [r0], #1
  40a1dc:	d301      	bcc.n	40a1e2 <memcpy+0xe2>
  40a1de:	880b      	ldrh	r3, [r1, #0]
  40a1e0:	8003      	strh	r3, [r0, #0]
  40a1e2:	4660      	mov	r0, ip
  40a1e4:	4770      	bx	lr
  40a1e6:	bf00      	nop
  40a1e8:	2a08      	cmp	r2, #8
  40a1ea:	d313      	bcc.n	40a214 <memcpy+0x114>
  40a1ec:	078b      	lsls	r3, r1, #30
  40a1ee:	d08d      	beq.n	40a10c <memcpy+0xc>
  40a1f0:	f010 0303 	ands.w	r3, r0, #3
  40a1f4:	d08a      	beq.n	40a10c <memcpy+0xc>
  40a1f6:	f1c3 0304 	rsb	r3, r3, #4
  40a1fa:	1ad2      	subs	r2, r2, r3
  40a1fc:	07db      	lsls	r3, r3, #31
  40a1fe:	bf1c      	itt	ne
  40a200:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40a204:	f800 3b01 	strbne.w	r3, [r0], #1
  40a208:	d380      	bcc.n	40a10c <memcpy+0xc>
  40a20a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40a20e:	f820 3b02 	strh.w	r3, [r0], #2
  40a212:	e77b      	b.n	40a10c <memcpy+0xc>
  40a214:	3a04      	subs	r2, #4
  40a216:	d3d9      	bcc.n	40a1cc <memcpy+0xcc>
  40a218:	3a01      	subs	r2, #1
  40a21a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40a21e:	f800 3b01 	strb.w	r3, [r0], #1
  40a222:	d2f9      	bcs.n	40a218 <memcpy+0x118>
  40a224:	780b      	ldrb	r3, [r1, #0]
  40a226:	7003      	strb	r3, [r0, #0]
  40a228:	784b      	ldrb	r3, [r1, #1]
  40a22a:	7043      	strb	r3, [r0, #1]
  40a22c:	788b      	ldrb	r3, [r1, #2]
  40a22e:	7083      	strb	r3, [r0, #2]
  40a230:	4660      	mov	r0, ip
  40a232:	4770      	bx	lr

0040a234 <memset>:
  40a234:	b4f0      	push	{r4, r5, r6, r7}
  40a236:	0784      	lsls	r4, r0, #30
  40a238:	d043      	beq.n	40a2c2 <memset+0x8e>
  40a23a:	1e54      	subs	r4, r2, #1
  40a23c:	2a00      	cmp	r2, #0
  40a23e:	d03e      	beq.n	40a2be <memset+0x8a>
  40a240:	b2cd      	uxtb	r5, r1
  40a242:	4603      	mov	r3, r0
  40a244:	e003      	b.n	40a24e <memset+0x1a>
  40a246:	1e62      	subs	r2, r4, #1
  40a248:	2c00      	cmp	r4, #0
  40a24a:	d038      	beq.n	40a2be <memset+0x8a>
  40a24c:	4614      	mov	r4, r2
  40a24e:	f803 5b01 	strb.w	r5, [r3], #1
  40a252:	079a      	lsls	r2, r3, #30
  40a254:	d1f7      	bne.n	40a246 <memset+0x12>
  40a256:	2c03      	cmp	r4, #3
  40a258:	d92a      	bls.n	40a2b0 <memset+0x7c>
  40a25a:	b2cd      	uxtb	r5, r1
  40a25c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40a260:	2c0f      	cmp	r4, #15
  40a262:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40a266:	d915      	bls.n	40a294 <memset+0x60>
  40a268:	f1a4 0710 	sub.w	r7, r4, #16
  40a26c:	093f      	lsrs	r7, r7, #4
  40a26e:	f103 0610 	add.w	r6, r3, #16
  40a272:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  40a276:	461a      	mov	r2, r3
  40a278:	6015      	str	r5, [r2, #0]
  40a27a:	6055      	str	r5, [r2, #4]
  40a27c:	6095      	str	r5, [r2, #8]
  40a27e:	60d5      	str	r5, [r2, #12]
  40a280:	3210      	adds	r2, #16
  40a282:	42b2      	cmp	r2, r6
  40a284:	d1f8      	bne.n	40a278 <memset+0x44>
  40a286:	f004 040f 	and.w	r4, r4, #15
  40a28a:	3701      	adds	r7, #1
  40a28c:	2c03      	cmp	r4, #3
  40a28e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  40a292:	d90d      	bls.n	40a2b0 <memset+0x7c>
  40a294:	461e      	mov	r6, r3
  40a296:	4622      	mov	r2, r4
  40a298:	3a04      	subs	r2, #4
  40a29a:	2a03      	cmp	r2, #3
  40a29c:	f846 5b04 	str.w	r5, [r6], #4
  40a2a0:	d8fa      	bhi.n	40a298 <memset+0x64>
  40a2a2:	1f22      	subs	r2, r4, #4
  40a2a4:	f022 0203 	bic.w	r2, r2, #3
  40a2a8:	3204      	adds	r2, #4
  40a2aa:	4413      	add	r3, r2
  40a2ac:	f004 0403 	and.w	r4, r4, #3
  40a2b0:	b12c      	cbz	r4, 40a2be <memset+0x8a>
  40a2b2:	b2c9      	uxtb	r1, r1
  40a2b4:	441c      	add	r4, r3
  40a2b6:	f803 1b01 	strb.w	r1, [r3], #1
  40a2ba:	42a3      	cmp	r3, r4
  40a2bc:	d1fb      	bne.n	40a2b6 <memset+0x82>
  40a2be:	bcf0      	pop	{r4, r5, r6, r7}
  40a2c0:	4770      	bx	lr
  40a2c2:	4614      	mov	r4, r2
  40a2c4:	4603      	mov	r3, r0
  40a2c6:	e7c6      	b.n	40a256 <memset+0x22>

0040a2c8 <setbuf>:
  40a2c8:	2900      	cmp	r1, #0
  40a2ca:	bf0c      	ite	eq
  40a2cc:	2202      	moveq	r2, #2
  40a2ce:	2200      	movne	r2, #0
  40a2d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a2d4:	f000 b800 	b.w	40a2d8 <setvbuf>

0040a2d8 <setvbuf>:
  40a2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a2dc:	4c3c      	ldr	r4, [pc, #240]	; (40a3d0 <setvbuf+0xf8>)
  40a2de:	6825      	ldr	r5, [r4, #0]
  40a2e0:	4688      	mov	r8, r1
  40a2e2:	4604      	mov	r4, r0
  40a2e4:	4616      	mov	r6, r2
  40a2e6:	461f      	mov	r7, r3
  40a2e8:	b115      	cbz	r5, 40a2f0 <setvbuf+0x18>
  40a2ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40a2ec:	2b00      	cmp	r3, #0
  40a2ee:	d04f      	beq.n	40a390 <setvbuf+0xb8>
  40a2f0:	2e02      	cmp	r6, #2
  40a2f2:	d830      	bhi.n	40a356 <setvbuf+0x7e>
  40a2f4:	2f00      	cmp	r7, #0
  40a2f6:	db2e      	blt.n	40a356 <setvbuf+0x7e>
  40a2f8:	4628      	mov	r0, r5
  40a2fa:	4621      	mov	r1, r4
  40a2fc:	f004 fb12 	bl	40e924 <_fflush_r>
  40a300:	89a3      	ldrh	r3, [r4, #12]
  40a302:	2200      	movs	r2, #0
  40a304:	6062      	str	r2, [r4, #4]
  40a306:	61a2      	str	r2, [r4, #24]
  40a308:	061a      	lsls	r2, r3, #24
  40a30a:	d428      	bmi.n	40a35e <setvbuf+0x86>
  40a30c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40a310:	b29b      	uxth	r3, r3
  40a312:	2e02      	cmp	r6, #2
  40a314:	81a3      	strh	r3, [r4, #12]
  40a316:	d02d      	beq.n	40a374 <setvbuf+0x9c>
  40a318:	f1b8 0f00 	cmp.w	r8, #0
  40a31c:	d03c      	beq.n	40a398 <setvbuf+0xc0>
  40a31e:	2e01      	cmp	r6, #1
  40a320:	d013      	beq.n	40a34a <setvbuf+0x72>
  40a322:	b29b      	uxth	r3, r3
  40a324:	f003 0008 	and.w	r0, r3, #8
  40a328:	4a2a      	ldr	r2, [pc, #168]	; (40a3d4 <setvbuf+0xfc>)
  40a32a:	63ea      	str	r2, [r5, #60]	; 0x3c
  40a32c:	b280      	uxth	r0, r0
  40a32e:	f8c4 8000 	str.w	r8, [r4]
  40a332:	f8c4 8010 	str.w	r8, [r4, #16]
  40a336:	6167      	str	r7, [r4, #20]
  40a338:	b178      	cbz	r0, 40a35a <setvbuf+0x82>
  40a33a:	f013 0f03 	tst.w	r3, #3
  40a33e:	bf18      	it	ne
  40a340:	2700      	movne	r7, #0
  40a342:	60a7      	str	r7, [r4, #8]
  40a344:	2000      	movs	r0, #0
  40a346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a34a:	f043 0301 	orr.w	r3, r3, #1
  40a34e:	427a      	negs	r2, r7
  40a350:	81a3      	strh	r3, [r4, #12]
  40a352:	61a2      	str	r2, [r4, #24]
  40a354:	e7e5      	b.n	40a322 <setvbuf+0x4a>
  40a356:	f04f 30ff 	mov.w	r0, #4294967295
  40a35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a35e:	4628      	mov	r0, r5
  40a360:	6921      	ldr	r1, [r4, #16]
  40a362:	f004 fc3d 	bl	40ebe0 <_free_r>
  40a366:	89a3      	ldrh	r3, [r4, #12]
  40a368:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40a36c:	b29b      	uxth	r3, r3
  40a36e:	2e02      	cmp	r6, #2
  40a370:	81a3      	strh	r3, [r4, #12]
  40a372:	d1d1      	bne.n	40a318 <setvbuf+0x40>
  40a374:	2000      	movs	r0, #0
  40a376:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40a37a:	f043 0302 	orr.w	r3, r3, #2
  40a37e:	2500      	movs	r5, #0
  40a380:	2101      	movs	r1, #1
  40a382:	81a3      	strh	r3, [r4, #12]
  40a384:	60a5      	str	r5, [r4, #8]
  40a386:	6022      	str	r2, [r4, #0]
  40a388:	6122      	str	r2, [r4, #16]
  40a38a:	6161      	str	r1, [r4, #20]
  40a38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a390:	4628      	mov	r0, r5
  40a392:	f004 fae3 	bl	40e95c <__sinit>
  40a396:	e7ab      	b.n	40a2f0 <setvbuf+0x18>
  40a398:	2f00      	cmp	r7, #0
  40a39a:	bf08      	it	eq
  40a39c:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40a3a0:	4638      	mov	r0, r7
  40a3a2:	f004 ff3d 	bl	40f220 <malloc>
  40a3a6:	4680      	mov	r8, r0
  40a3a8:	b128      	cbz	r0, 40a3b6 <setvbuf+0xde>
  40a3aa:	89a3      	ldrh	r3, [r4, #12]
  40a3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a3b0:	b29b      	uxth	r3, r3
  40a3b2:	81a3      	strh	r3, [r4, #12]
  40a3b4:	e7b3      	b.n	40a31e <setvbuf+0x46>
  40a3b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40a3ba:	f004 ff31 	bl	40f220 <malloc>
  40a3be:	4680      	mov	r8, r0
  40a3c0:	b918      	cbnz	r0, 40a3ca <setvbuf+0xf2>
  40a3c2:	89a3      	ldrh	r3, [r4, #12]
  40a3c4:	f04f 30ff 	mov.w	r0, #4294967295
  40a3c8:	e7d5      	b.n	40a376 <setvbuf+0x9e>
  40a3ca:	f44f 6780 	mov.w	r7, #1024	; 0x400
  40a3ce:	e7ec      	b.n	40a3aa <setvbuf+0xd2>
  40a3d0:	20000640 	.word	0x20000640
  40a3d4:	0040e951 	.word	0x0040e951

0040a3d8 <sprintf>:
  40a3d8:	b40e      	push	{r1, r2, r3}
  40a3da:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a3dc:	b09c      	sub	sp, #112	; 0x70
  40a3de:	ab21      	add	r3, sp, #132	; 0x84
  40a3e0:	490f      	ldr	r1, [pc, #60]	; (40a420 <sprintf+0x48>)
  40a3e2:	f853 2b04 	ldr.w	r2, [r3], #4
  40a3e6:	9301      	str	r3, [sp, #4]
  40a3e8:	4605      	mov	r5, r0
  40a3ea:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40a3ee:	6808      	ldr	r0, [r1, #0]
  40a3f0:	9502      	str	r5, [sp, #8]
  40a3f2:	f44f 7702 	mov.w	r7, #520	; 0x208
  40a3f6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40a3fa:	a902      	add	r1, sp, #8
  40a3fc:	9506      	str	r5, [sp, #24]
  40a3fe:	f8ad 7014 	strh.w	r7, [sp, #20]
  40a402:	9404      	str	r4, [sp, #16]
  40a404:	9407      	str	r4, [sp, #28]
  40a406:	f8ad 6016 	strh.w	r6, [sp, #22]
  40a40a:	f000 f937 	bl	40a67c <_svfprintf_r>
  40a40e:	9b02      	ldr	r3, [sp, #8]
  40a410:	2200      	movs	r2, #0
  40a412:	701a      	strb	r2, [r3, #0]
  40a414:	b01c      	add	sp, #112	; 0x70
  40a416:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40a41a:	b003      	add	sp, #12
  40a41c:	4770      	bx	lr
  40a41e:	bf00      	nop
  40a420:	20000640 	.word	0x20000640

0040a424 <sscanf>:
  40a424:	b40e      	push	{r1, r2, r3}
  40a426:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a428:	b09c      	sub	sp, #112	; 0x70
  40a42a:	ac21      	add	r4, sp, #132	; 0x84
  40a42c:	f44f 7201 	mov.w	r2, #516	; 0x204
  40a430:	f854 6b04 	ldr.w	r6, [r4], #4
  40a434:	f8ad 2014 	strh.w	r2, [sp, #20]
  40a438:	9002      	str	r0, [sp, #8]
  40a43a:	9006      	str	r0, [sp, #24]
  40a43c:	f000 f862 	bl	40a504 <strlen>
  40a440:	4b0c      	ldr	r3, [pc, #48]	; (40a474 <sscanf+0x50>)
  40a442:	9401      	str	r4, [sp, #4]
  40a444:	4605      	mov	r5, r0
  40a446:	4632      	mov	r2, r6
  40a448:	4f0b      	ldr	r7, [pc, #44]	; (40a478 <sscanf+0x54>)
  40a44a:	6818      	ldr	r0, [r3, #0]
  40a44c:	9503      	str	r5, [sp, #12]
  40a44e:	4623      	mov	r3, r4
  40a450:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40a454:	2400      	movs	r4, #0
  40a456:	a902      	add	r1, sp, #8
  40a458:	9507      	str	r5, [sp, #28]
  40a45a:	970a      	str	r7, [sp, #40]	; 0x28
  40a45c:	940e      	str	r4, [sp, #56]	; 0x38
  40a45e:	9413      	str	r4, [sp, #76]	; 0x4c
  40a460:	f8ad 6016 	strh.w	r6, [sp, #22]
  40a464:	f001 fb86 	bl	40bb74 <__ssvfscanf_r>
  40a468:	b01c      	add	sp, #112	; 0x70
  40a46a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40a46e:	b003      	add	sp, #12
  40a470:	4770      	bx	lr
  40a472:	bf00      	nop
  40a474:	20000640 	.word	0x20000640
  40a478:	0040a4a1 	.word	0x0040a4a1

0040a47c <__sread>:
  40a47c:	b510      	push	{r4, lr}
  40a47e:	460c      	mov	r4, r1
  40a480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a484:	f005 feac 	bl	4101e0 <_read_r>
  40a488:	2800      	cmp	r0, #0
  40a48a:	db03      	blt.n	40a494 <__sread+0x18>
  40a48c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40a48e:	4403      	add	r3, r0
  40a490:	6523      	str	r3, [r4, #80]	; 0x50
  40a492:	bd10      	pop	{r4, pc}
  40a494:	89a3      	ldrh	r3, [r4, #12]
  40a496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40a49a:	81a3      	strh	r3, [r4, #12]
  40a49c:	bd10      	pop	{r4, pc}
  40a49e:	bf00      	nop

0040a4a0 <__seofread>:
  40a4a0:	2000      	movs	r0, #0
  40a4a2:	4770      	bx	lr

0040a4a4 <__swrite>:
  40a4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a4a8:	460c      	mov	r4, r1
  40a4aa:	8989      	ldrh	r1, [r1, #12]
  40a4ac:	461d      	mov	r5, r3
  40a4ae:	05cb      	lsls	r3, r1, #23
  40a4b0:	4616      	mov	r6, r2
  40a4b2:	4607      	mov	r7, r0
  40a4b4:	d506      	bpl.n	40a4c4 <__swrite+0x20>
  40a4b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a4ba:	2200      	movs	r2, #0
  40a4bc:	2302      	movs	r3, #2
  40a4be:	f004 fe2b 	bl	40f118 <_lseek_r>
  40a4c2:	89a1      	ldrh	r1, [r4, #12]
  40a4c4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40a4c8:	81a1      	strh	r1, [r4, #12]
  40a4ca:	4638      	mov	r0, r7
  40a4cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a4d0:	4632      	mov	r2, r6
  40a4d2:	462b      	mov	r3, r5
  40a4d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a4d8:	f003 b92c 	b.w	40d734 <_write_r>

0040a4dc <__sseek>:
  40a4dc:	b510      	push	{r4, lr}
  40a4de:	460c      	mov	r4, r1
  40a4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a4e4:	f004 fe18 	bl	40f118 <_lseek_r>
  40a4e8:	89a3      	ldrh	r3, [r4, #12]
  40a4ea:	1c42      	adds	r2, r0, #1
  40a4ec:	bf0e      	itee	eq
  40a4ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40a4f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40a4f6:	6520      	strne	r0, [r4, #80]	; 0x50
  40a4f8:	81a3      	strh	r3, [r4, #12]
  40a4fa:	bd10      	pop	{r4, pc}

0040a4fc <__sclose>:
  40a4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a500:	f003 b99e 	b.w	40d840 <_close_r>

0040a504 <strlen>:
  40a504:	f020 0103 	bic.w	r1, r0, #3
  40a508:	f010 0003 	ands.w	r0, r0, #3
  40a50c:	f1c0 0000 	rsb	r0, r0, #0
  40a510:	f851 3b04 	ldr.w	r3, [r1], #4
  40a514:	f100 0c04 	add.w	ip, r0, #4
  40a518:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40a51c:	f06f 0200 	mvn.w	r2, #0
  40a520:	bf1c      	itt	ne
  40a522:	fa22 f20c 	lsrne.w	r2, r2, ip
  40a526:	4313      	orrne	r3, r2
  40a528:	f04f 0c01 	mov.w	ip, #1
  40a52c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  40a530:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40a534:	eba3 020c 	sub.w	r2, r3, ip
  40a538:	ea22 0203 	bic.w	r2, r2, r3
  40a53c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  40a540:	bf04      	itt	eq
  40a542:	f851 3b04 	ldreq.w	r3, [r1], #4
  40a546:	3004      	addeq	r0, #4
  40a548:	d0f4      	beq.n	40a534 <strlen+0x30>
  40a54a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40a54e:	bf1f      	itttt	ne
  40a550:	3001      	addne	r0, #1
  40a552:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  40a556:	3001      	addne	r0, #1
  40a558:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  40a55c:	bf18      	it	ne
  40a55e:	3001      	addne	r0, #1
  40a560:	4770      	bx	lr
  40a562:	bf00      	nop

0040a564 <strncmp>:
  40a564:	b430      	push	{r4, r5}
  40a566:	2a00      	cmp	r2, #0
  40a568:	d04a      	beq.n	40a600 <strncmp+0x9c>
  40a56a:	ea40 0301 	orr.w	r3, r0, r1
  40a56e:	f013 0303 	ands.w	r3, r3, #3
  40a572:	d12d      	bne.n	40a5d0 <strncmp+0x6c>
  40a574:	2a03      	cmp	r2, #3
  40a576:	d92b      	bls.n	40a5d0 <strncmp+0x6c>
  40a578:	6804      	ldr	r4, [r0, #0]
  40a57a:	680d      	ldr	r5, [r1, #0]
  40a57c:	42ac      	cmp	r4, r5
  40a57e:	d127      	bne.n	40a5d0 <strncmp+0x6c>
  40a580:	3a04      	subs	r2, #4
  40a582:	d03d      	beq.n	40a600 <strncmp+0x9c>
  40a584:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  40a588:	ea25 0404 	bic.w	r4, r5, r4
  40a58c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40a590:	d13c      	bne.n	40a60c <strncmp+0xa8>
  40a592:	460c      	mov	r4, r1
  40a594:	4603      	mov	r3, r0
  40a596:	e00e      	b.n	40a5b6 <strncmp+0x52>
  40a598:	685b      	ldr	r3, [r3, #4]
  40a59a:	6864      	ldr	r4, [r4, #4]
  40a59c:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40a5a0:	42a3      	cmp	r3, r4
  40a5a2:	ea25 0503 	bic.w	r5, r5, r3
  40a5a6:	d113      	bne.n	40a5d0 <strncmp+0x6c>
  40a5a8:	3a04      	subs	r2, #4
  40a5aa:	d029      	beq.n	40a600 <strncmp+0x9c>
  40a5ac:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  40a5b0:	d129      	bne.n	40a606 <strncmp+0xa2>
  40a5b2:	4603      	mov	r3, r0
  40a5b4:	460c      	mov	r4, r1
  40a5b6:	2a03      	cmp	r2, #3
  40a5b8:	f100 0004 	add.w	r0, r0, #4
  40a5bc:	f101 0104 	add.w	r1, r1, #4
  40a5c0:	d8ea      	bhi.n	40a598 <strncmp+0x34>
  40a5c2:	1e55      	subs	r5, r2, #1
  40a5c4:	b92a      	cbnz	r2, 40a5d2 <strncmp+0x6e>
  40a5c6:	7918      	ldrb	r0, [r3, #4]
  40a5c8:	7922      	ldrb	r2, [r4, #4]
  40a5ca:	1a80      	subs	r0, r0, r2
  40a5cc:	bc30      	pop	{r4, r5}
  40a5ce:	4770      	bx	lr
  40a5d0:	1e55      	subs	r5, r2, #1
  40a5d2:	7803      	ldrb	r3, [r0, #0]
  40a5d4:	780a      	ldrb	r2, [r1, #0]
  40a5d6:	4293      	cmp	r3, r2
  40a5d8:	d11a      	bne.n	40a610 <strncmp+0xac>
  40a5da:	b1dd      	cbz	r5, 40a614 <strncmp+0xb0>
  40a5dc:	b1b3      	cbz	r3, 40a60c <strncmp+0xa8>
  40a5de:	1c6c      	adds	r4, r5, #1
  40a5e0:	440c      	add	r4, r1
  40a5e2:	1c8b      	adds	r3, r1, #2
  40a5e4:	4601      	mov	r1, r0
  40a5e6:	e004      	b.n	40a5f2 <strncmp+0x8e>
  40a5e8:	42a3      	cmp	r3, r4
  40a5ea:	d00c      	beq.n	40a606 <strncmp+0xa2>
  40a5ec:	3301      	adds	r3, #1
  40a5ee:	2800      	cmp	r0, #0
  40a5f0:	d0ec      	beq.n	40a5cc <strncmp+0x68>
  40a5f2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40a5f6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  40a5fa:	4290      	cmp	r0, r2
  40a5fc:	d0f4      	beq.n	40a5e8 <strncmp+0x84>
  40a5fe:	e7e4      	b.n	40a5ca <strncmp+0x66>
  40a600:	4610      	mov	r0, r2
  40a602:	bc30      	pop	{r4, r5}
  40a604:	4770      	bx	lr
  40a606:	2000      	movs	r0, #0
  40a608:	bc30      	pop	{r4, r5}
  40a60a:	4770      	bx	lr
  40a60c:	4618      	mov	r0, r3
  40a60e:	e7dd      	b.n	40a5cc <strncmp+0x68>
  40a610:	4618      	mov	r0, r3
  40a612:	e7da      	b.n	40a5ca <strncmp+0x66>
  40a614:	4628      	mov	r0, r5
  40a616:	e7d9      	b.n	40a5cc <strncmp+0x68>

0040a618 <strncpy>:
  40a618:	ea40 0301 	orr.w	r3, r0, r1
  40a61c:	079b      	lsls	r3, r3, #30
  40a61e:	b470      	push	{r4, r5, r6}
  40a620:	d12a      	bne.n	40a678 <strncpy+0x60>
  40a622:	2a03      	cmp	r2, #3
  40a624:	d928      	bls.n	40a678 <strncpy+0x60>
  40a626:	460c      	mov	r4, r1
  40a628:	4603      	mov	r3, r0
  40a62a:	4621      	mov	r1, r4
  40a62c:	f854 5b04 	ldr.w	r5, [r4], #4
  40a630:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
  40a634:	ea26 0605 	bic.w	r6, r6, r5
  40a638:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
  40a63c:	d105      	bne.n	40a64a <strncpy+0x32>
  40a63e:	3a04      	subs	r2, #4
  40a640:	2a03      	cmp	r2, #3
  40a642:	f843 5b04 	str.w	r5, [r3], #4
  40a646:	4621      	mov	r1, r4
  40a648:	d8ef      	bhi.n	40a62a <strncpy+0x12>
  40a64a:	b19a      	cbz	r2, 40a674 <strncpy+0x5c>
  40a64c:	780c      	ldrb	r4, [r1, #0]
  40a64e:	701c      	strb	r4, [r3, #0]
  40a650:	3a01      	subs	r2, #1
  40a652:	3301      	adds	r3, #1
  40a654:	b13c      	cbz	r4, 40a666 <strncpy+0x4e>
  40a656:	b16a      	cbz	r2, 40a674 <strncpy+0x5c>
  40a658:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  40a65c:	f803 4b01 	strb.w	r4, [r3], #1
  40a660:	3a01      	subs	r2, #1
  40a662:	2c00      	cmp	r4, #0
  40a664:	d1f7      	bne.n	40a656 <strncpy+0x3e>
  40a666:	b12a      	cbz	r2, 40a674 <strncpy+0x5c>
  40a668:	441a      	add	r2, r3
  40a66a:	2100      	movs	r1, #0
  40a66c:	f803 1b01 	strb.w	r1, [r3], #1
  40a670:	4293      	cmp	r3, r2
  40a672:	d1fb      	bne.n	40a66c <strncpy+0x54>
  40a674:	bc70      	pop	{r4, r5, r6}
  40a676:	4770      	bx	lr
  40a678:	4603      	mov	r3, r0
  40a67a:	e7e6      	b.n	40a64a <strncpy+0x32>

0040a67c <_svfprintf_r>:
  40a67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a680:	b0c9      	sub	sp, #292	; 0x124
  40a682:	4691      	mov	r9, r2
  40a684:	9310      	str	r3, [sp, #64]	; 0x40
  40a686:	910c      	str	r1, [sp, #48]	; 0x30
  40a688:	900d      	str	r0, [sp, #52]	; 0x34
  40a68a:	f004 fd41 	bl	40f110 <_localeconv_r>
  40a68e:	6800      	ldr	r0, [r0, #0]
  40a690:	9015      	str	r0, [sp, #84]	; 0x54
  40a692:	f7ff ff37 	bl	40a504 <strlen>
  40a696:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a698:	9018      	str	r0, [sp, #96]	; 0x60
  40a69a:	89a3      	ldrh	r3, [r4, #12]
  40a69c:	061a      	lsls	r2, r3, #24
  40a69e:	d503      	bpl.n	40a6a8 <_svfprintf_r+0x2c>
  40a6a0:	6923      	ldr	r3, [r4, #16]
  40a6a2:	2b00      	cmp	r3, #0
  40a6a4:	f001 808d 	beq.w	40b7c2 <_svfprintf_r+0x1146>
  40a6a8:	ac38      	add	r4, sp, #224	; 0xe0
  40a6aa:	46a4      	mov	ip, r4
  40a6ac:	9408      	str	r4, [sp, #32]
  40a6ae:	942b      	str	r4, [sp, #172]	; 0xac
  40a6b0:	2500      	movs	r5, #0
  40a6b2:	2400      	movs	r4, #0
  40a6b4:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40a6b8:	2300      	movs	r3, #0
  40a6ba:	9311      	str	r3, [sp, #68]	; 0x44
  40a6bc:	932d      	str	r3, [sp, #180]	; 0xb4
  40a6be:	932c      	str	r3, [sp, #176]	; 0xb0
  40a6c0:	931a      	str	r3, [sp, #104]	; 0x68
  40a6c2:	9319      	str	r3, [sp, #100]	; 0x64
  40a6c4:	930e      	str	r3, [sp, #56]	; 0x38
  40a6c6:	4666      	mov	r6, ip
  40a6c8:	f899 3000 	ldrb.w	r3, [r9]
  40a6cc:	2b00      	cmp	r3, #0
  40a6ce:	f000 80f8 	beq.w	40a8c2 <_svfprintf_r+0x246>
  40a6d2:	2b25      	cmp	r3, #37	; 0x25
  40a6d4:	f000 80f5 	beq.w	40a8c2 <_svfprintf_r+0x246>
  40a6d8:	f109 0201 	add.w	r2, r9, #1
  40a6dc:	e001      	b.n	40a6e2 <_svfprintf_r+0x66>
  40a6de:	2b25      	cmp	r3, #37	; 0x25
  40a6e0:	d004      	beq.n	40a6ec <_svfprintf_r+0x70>
  40a6e2:	4614      	mov	r4, r2
  40a6e4:	3201      	adds	r2, #1
  40a6e6:	7823      	ldrb	r3, [r4, #0]
  40a6e8:	2b00      	cmp	r3, #0
  40a6ea:	d1f8      	bne.n	40a6de <_svfprintf_r+0x62>
  40a6ec:	ebc9 0504 	rsb	r5, r9, r4
  40a6f0:	b17d      	cbz	r5, 40a712 <_svfprintf_r+0x96>
  40a6f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40a6f4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40a6f6:	f8c6 9000 	str.w	r9, [r6]
  40a6fa:	3301      	adds	r3, #1
  40a6fc:	442a      	add	r2, r5
  40a6fe:	2b07      	cmp	r3, #7
  40a700:	6075      	str	r5, [r6, #4]
  40a702:	922d      	str	r2, [sp, #180]	; 0xb4
  40a704:	932c      	str	r3, [sp, #176]	; 0xb0
  40a706:	f300 80c2 	bgt.w	40a88e <_svfprintf_r+0x212>
  40a70a:	3608      	adds	r6, #8
  40a70c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a70e:	4428      	add	r0, r5
  40a710:	900e      	str	r0, [sp, #56]	; 0x38
  40a712:	7823      	ldrb	r3, [r4, #0]
  40a714:	2b00      	cmp	r3, #0
  40a716:	f000 80c2 	beq.w	40a89e <_svfprintf_r+0x222>
  40a71a:	2300      	movs	r3, #0
  40a71c:	f894 8001 	ldrb.w	r8, [r4, #1]
  40a720:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40a724:	461a      	mov	r2, r3
  40a726:	930f      	str	r3, [sp, #60]	; 0x3c
  40a728:	9309      	str	r3, [sp, #36]	; 0x24
  40a72a:	f104 0901 	add.w	r9, r4, #1
  40a72e:	f04f 34ff 	mov.w	r4, #4294967295
  40a732:	940a      	str	r4, [sp, #40]	; 0x28
  40a734:	f109 0901 	add.w	r9, r9, #1
  40a738:	f1a8 0320 	sub.w	r3, r8, #32
  40a73c:	2b58      	cmp	r3, #88	; 0x58
  40a73e:	f200 83c7 	bhi.w	40aed0 <_svfprintf_r+0x854>
  40a742:	e8df f013 	tbh	[pc, r3, lsl #1]
  40a746:	026a      	.short	0x026a
  40a748:	03c503c5 	.word	0x03c503c5
  40a74c:	03c50271 	.word	0x03c50271
  40a750:	03c503c5 	.word	0x03c503c5
  40a754:	03c503c5 	.word	0x03c503c5
  40a758:	031403c5 	.word	0x031403c5
  40a75c:	03c50364 	.word	0x03c50364
  40a760:	00c0009d 	.word	0x00c0009d
  40a764:	027803c5 	.word	0x027803c5
  40a768:	027f027f 	.word	0x027f027f
  40a76c:	027f027f 	.word	0x027f027f
  40a770:	027f027f 	.word	0x027f027f
  40a774:	027f027f 	.word	0x027f027f
  40a778:	03c5027f 	.word	0x03c5027f
  40a77c:	03c503c5 	.word	0x03c503c5
  40a780:	03c503c5 	.word	0x03c503c5
  40a784:	03c503c5 	.word	0x03c503c5
  40a788:	03c503c5 	.word	0x03c503c5
  40a78c:	029003c5 	.word	0x029003c5
  40a790:	03c5036f 	.word	0x03c5036f
  40a794:	03c5036f 	.word	0x03c5036f
  40a798:	03c503c5 	.word	0x03c503c5
  40a79c:	036803c5 	.word	0x036803c5
  40a7a0:	03c503c5 	.word	0x03c503c5
  40a7a4:	03c50078 	.word	0x03c50078
  40a7a8:	03c503c5 	.word	0x03c503c5
  40a7ac:	03c503c5 	.word	0x03c503c5
  40a7b0:	03c50059 	.word	0x03c50059
  40a7b4:	02af03c5 	.word	0x02af03c5
  40a7b8:	03c503c5 	.word	0x03c503c5
  40a7bc:	03c503c5 	.word	0x03c503c5
  40a7c0:	03c503c5 	.word	0x03c503c5
  40a7c4:	03c503c5 	.word	0x03c503c5
  40a7c8:	03c503c5 	.word	0x03c503c5
  40a7cc:	03480337 	.word	0x03480337
  40a7d0:	036f036f 	.word	0x036f036f
  40a7d4:	02ff036f 	.word	0x02ff036f
  40a7d8:	03c50348 	.word	0x03c50348
  40a7dc:	030803c5 	.word	0x030803c5
  40a7e0:	02c503c5 	.word	0x02c503c5
  40a7e4:	0321007c 	.word	0x0321007c
  40a7e8:	03c503a5 	.word	0x03c503a5
  40a7ec:	03c502d9 	.word	0x03c502d9
  40a7f0:	03c5005f 	.word	0x03c5005f
  40a7f4:	00de03c5 	.word	0x00de03c5
  40a7f8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a7fc:	f04c 0c10 	orr.w	ip, ip, #16
  40a800:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40a804:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40a806:	06a2      	lsls	r2, r4, #26
  40a808:	f100 8356 	bmi.w	40aeb8 <_svfprintf_r+0x83c>
  40a80c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40a80e:	06e3      	lsls	r3, r4, #27
  40a810:	f100 85e0 	bmi.w	40b3d4 <_svfprintf_r+0xd58>
  40a814:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a818:	f01c 0f40 	tst.w	ip, #64	; 0x40
  40a81c:	f000 85da 	beq.w	40b3d4 <_svfprintf_r+0xd58>
  40a820:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40a824:	f8bc 4000 	ldrh.w	r4, [ip]
  40a828:	f10c 0c04 	add.w	ip, ip, #4
  40a82c:	2500      	movs	r5, #0
  40a82e:	2301      	movs	r3, #1
  40a830:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40a834:	e08c      	b.n	40a950 <_svfprintf_r+0x2d4>
  40a836:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40a838:	f045 0510 	orr.w	r5, r5, #16
  40a83c:	9509      	str	r5, [sp, #36]	; 0x24
  40a83e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a842:	f01c 0320 	ands.w	r3, ip, #32
  40a846:	f040 832c 	bne.w	40aea2 <_svfprintf_r+0x826>
  40a84a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a84e:	f01c 0210 	ands.w	r2, ip, #16
  40a852:	f040 85b8 	bne.w	40b3c6 <_svfprintf_r+0xd4a>
  40a856:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a85a:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
  40a85e:	f000 85b2 	beq.w	40b3c6 <_svfprintf_r+0xd4a>
  40a862:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40a866:	f8bc 4000 	ldrh.w	r4, [ip]
  40a86a:	f10c 0c04 	add.w	ip, ip, #4
  40a86e:	4613      	mov	r3, r2
  40a870:	2500      	movs	r5, #0
  40a872:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40a876:	e06b      	b.n	40a950 <_svfprintf_r+0x2d4>
  40a878:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40a87a:	9310      	str	r3, [sp, #64]	; 0x40
  40a87c:	4264      	negs	r4, r4
  40a87e:	940f      	str	r4, [sp, #60]	; 0x3c
  40a880:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40a882:	f045 0504 	orr.w	r5, r5, #4
  40a886:	9509      	str	r5, [sp, #36]	; 0x24
  40a888:	f899 8000 	ldrb.w	r8, [r9]
  40a88c:	e752      	b.n	40a734 <_svfprintf_r+0xb8>
  40a88e:	980d      	ldr	r0, [sp, #52]	; 0x34
  40a890:	990c      	ldr	r1, [sp, #48]	; 0x30
  40a892:	aa2b      	add	r2, sp, #172	; 0xac
  40a894:	f007 f984 	bl	411ba0 <__ssprint_r>
  40a898:	b940      	cbnz	r0, 40a8ac <_svfprintf_r+0x230>
  40a89a:	ae38      	add	r6, sp, #224	; 0xe0
  40a89c:	e736      	b.n	40a70c <_svfprintf_r+0x90>
  40a89e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40a8a0:	b123      	cbz	r3, 40a8ac <_svfprintf_r+0x230>
  40a8a2:	980d      	ldr	r0, [sp, #52]	; 0x34
  40a8a4:	990c      	ldr	r1, [sp, #48]	; 0x30
  40a8a6:	aa2b      	add	r2, sp, #172	; 0xac
  40a8a8:	f007 f97a 	bl	411ba0 <__ssprint_r>
  40a8ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a8ae:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a8b0:	89a3      	ldrh	r3, [r4, #12]
  40a8b2:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a8b6:	bf18      	it	ne
  40a8b8:	f04f 30ff 	movne.w	r0, #4294967295
  40a8bc:	b049      	add	sp, #292	; 0x124
  40a8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a8c2:	464c      	mov	r4, r9
  40a8c4:	e725      	b.n	40a712 <_svfprintf_r+0x96>
  40a8c6:	f899 8000 	ldrb.w	r8, [r9]
  40a8ca:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  40a8ce:	f109 0001 	add.w	r0, r9, #1
  40a8d2:	f001 8118 	beq.w	40bb06 <_svfprintf_r+0x148a>
  40a8d6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40a8da:	2b09      	cmp	r3, #9
  40a8dc:	bf98      	it	ls
  40a8de:	2100      	movls	r1, #0
  40a8e0:	f201 8077 	bhi.w	40b9d2 <_svfprintf_r+0x1356>
  40a8e4:	f810 8b01 	ldrb.w	r8, [r0], #1
  40a8e8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40a8ec:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  40a8f0:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40a8f4:	2b09      	cmp	r3, #9
  40a8f6:	d9f5      	bls.n	40a8e4 <_svfprintf_r+0x268>
  40a8f8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  40a8fc:	910a      	str	r1, [sp, #40]	; 0x28
  40a8fe:	4681      	mov	r9, r0
  40a900:	e71a      	b.n	40a738 <_svfprintf_r+0xbc>
  40a902:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40a904:	4ca1      	ldr	r4, [pc, #644]	; (40ab8c <_svfprintf_r+0x510>)
  40a906:	941a      	str	r4, [sp, #104]	; 0x68
  40a908:	06af      	lsls	r7, r5, #26
  40a90a:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40a90e:	f140 81d1 	bpl.w	40acb4 <_svfprintf_r+0x638>
  40a912:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40a916:	f10c 0307 	add.w	r3, ip, #7
  40a91a:	f023 0307 	bic.w	r3, r3, #7
  40a91e:	f103 0408 	add.w	r4, r3, #8
  40a922:	9410      	str	r4, [sp, #64]	; 0x40
  40a924:	e9d3 4500 	ldrd	r4, r5, [r3]
  40a928:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a92c:	f01c 0f01 	tst.w	ip, #1
  40a930:	f000 8464 	beq.w	40b1fc <_svfprintf_r+0xb80>
  40a934:	ea54 0005 	orrs.w	r0, r4, r5
  40a938:	f000 8460 	beq.w	40b1fc <_svfprintf_r+0xb80>
  40a93c:	2330      	movs	r3, #48	; 0x30
  40a93e:	f04c 0c02 	orr.w	ip, ip, #2
  40a942:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  40a946:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  40a94a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40a94e:	2302      	movs	r3, #2
  40a950:	f04f 0a00 	mov.w	sl, #0
  40a954:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40a958:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a95a:	2900      	cmp	r1, #0
  40a95c:	db05      	blt.n	40a96a <_svfprintf_r+0x2ee>
  40a95e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a962:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  40a966:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40a96a:	ea54 0005 	orrs.w	r0, r4, r5
  40a96e:	f040 82c7 	bne.w	40af00 <_svfprintf_r+0x884>
  40a972:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a974:	2900      	cmp	r1, #0
  40a976:	f040 82c3 	bne.w	40af00 <_svfprintf_r+0x884>
  40a97a:	2b00      	cmp	r3, #0
  40a97c:	f040 843a 	bne.w	40b1f4 <_svfprintf_r+0xb78>
  40a980:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a984:	f01c 0f01 	tst.w	ip, #1
  40a988:	f000 8434 	beq.w	40b1f4 <_svfprintf_r+0xb78>
  40a98c:	af48      	add	r7, sp, #288	; 0x120
  40a98e:	2330      	movs	r3, #48	; 0x30
  40a990:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40a994:	9d08      	ldr	r5, [sp, #32]
  40a996:	1bec      	subs	r4, r5, r7
  40a998:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40a99c:	2500      	movs	r5, #0
  40a99e:	4564      	cmp	r4, ip
  40a9a0:	bfa8      	it	ge
  40a9a2:	46a4      	movge	ip, r4
  40a9a4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40a9a8:	9514      	str	r5, [sp, #80]	; 0x50
  40a9aa:	f1ba 0f00 	cmp.w	sl, #0
  40a9ae:	d002      	beq.n	40a9b6 <_svfprintf_r+0x33a>
  40a9b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40a9b2:	3501      	adds	r5, #1
  40a9b4:	950b      	str	r5, [sp, #44]	; 0x2c
  40a9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a9b8:	f013 0302 	ands.w	r3, r3, #2
  40a9bc:	9312      	str	r3, [sp, #72]	; 0x48
  40a9be:	d002      	beq.n	40a9c6 <_svfprintf_r+0x34a>
  40a9c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40a9c2:	3502      	adds	r5, #2
  40a9c4:	950b      	str	r5, [sp, #44]	; 0x2c
  40a9c6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a9ca:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
  40a9ce:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  40a9d2:	f040 8292 	bne.w	40aefa <_svfprintf_r+0x87e>
  40a9d6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40a9d8:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40a9dc:	ebcc 0b05 	rsb	fp, ip, r5
  40a9e0:	f1bb 0f00 	cmp.w	fp, #0
  40a9e4:	f340 8289 	ble.w	40aefa <_svfprintf_r+0x87e>
  40a9e8:	f1bb 0f10 	cmp.w	fp, #16
  40a9ec:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40a9ee:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40a9f0:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 40ab94 <_svfprintf_r+0x518>
  40a9f4:	dd2c      	ble.n	40aa50 <_svfprintf_r+0x3d4>
  40a9f6:	971b      	str	r7, [sp, #108]	; 0x6c
  40a9f8:	4630      	mov	r0, r6
  40a9fa:	4657      	mov	r7, sl
  40a9fc:	2510      	movs	r5, #16
  40a9fe:	46ca      	mov	sl, r9
  40aa00:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40aa02:	46a1      	mov	r9, r4
  40aa04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40aa06:	e006      	b.n	40aa16 <_svfprintf_r+0x39a>
  40aa08:	f1ab 0b10 	sub.w	fp, fp, #16
  40aa0c:	f1bb 0f10 	cmp.w	fp, #16
  40aa10:	f100 0008 	add.w	r0, r0, #8
  40aa14:	dd17      	ble.n	40aa46 <_svfprintf_r+0x3ca>
  40aa16:	3201      	adds	r2, #1
  40aa18:	3110      	adds	r1, #16
  40aa1a:	2a07      	cmp	r2, #7
  40aa1c:	912d      	str	r1, [sp, #180]	; 0xb4
  40aa1e:	922c      	str	r2, [sp, #176]	; 0xb0
  40aa20:	6007      	str	r7, [r0, #0]
  40aa22:	6045      	str	r5, [r0, #4]
  40aa24:	ddf0      	ble.n	40aa08 <_svfprintf_r+0x38c>
  40aa26:	4620      	mov	r0, r4
  40aa28:	4631      	mov	r1, r6
  40aa2a:	aa2b      	add	r2, sp, #172	; 0xac
  40aa2c:	f007 f8b8 	bl	411ba0 <__ssprint_r>
  40aa30:	2800      	cmp	r0, #0
  40aa32:	f47f af3b 	bne.w	40a8ac <_svfprintf_r+0x230>
  40aa36:	f1ab 0b10 	sub.w	fp, fp, #16
  40aa3a:	f1bb 0f10 	cmp.w	fp, #16
  40aa3e:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40aa40:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40aa42:	a838      	add	r0, sp, #224	; 0xe0
  40aa44:	dce7      	bgt.n	40aa16 <_svfprintf_r+0x39a>
  40aa46:	464c      	mov	r4, r9
  40aa48:	46d1      	mov	r9, sl
  40aa4a:	46ba      	mov	sl, r7
  40aa4c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  40aa4e:	4606      	mov	r6, r0
  40aa50:	3201      	adds	r2, #1
  40aa52:	eb0b 0c01 	add.w	ip, fp, r1
  40aa56:	2a07      	cmp	r2, #7
  40aa58:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40aa5c:	922c      	str	r2, [sp, #176]	; 0xb0
  40aa5e:	e886 0c00 	stmia.w	r6, {sl, fp}
  40aa62:	f300 841c 	bgt.w	40b29e <_svfprintf_r+0xc22>
  40aa66:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40aa6a:	3608      	adds	r6, #8
  40aa6c:	f1ba 0f00 	cmp.w	sl, #0
  40aa70:	d00f      	beq.n	40aa92 <_svfprintf_r+0x416>
  40aa72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40aa74:	3301      	adds	r3, #1
  40aa76:	f10c 0c01 	add.w	ip, ip, #1
  40aa7a:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
  40aa7e:	2201      	movs	r2, #1
  40aa80:	2b07      	cmp	r3, #7
  40aa82:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40aa86:	932c      	str	r3, [sp, #176]	; 0xb0
  40aa88:	e886 0006 	stmia.w	r6, {r1, r2}
  40aa8c:	f300 839a 	bgt.w	40b1c4 <_svfprintf_r+0xb48>
  40aa90:	3608      	adds	r6, #8
  40aa92:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40aa94:	b173      	cbz	r3, 40aab4 <_svfprintf_r+0x438>
  40aa96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40aa98:	3301      	adds	r3, #1
  40aa9a:	f10c 0c02 	add.w	ip, ip, #2
  40aa9e:	a924      	add	r1, sp, #144	; 0x90
  40aaa0:	2202      	movs	r2, #2
  40aaa2:	2b07      	cmp	r3, #7
  40aaa4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40aaa8:	932c      	str	r3, [sp, #176]	; 0xb0
  40aaaa:	e886 0006 	stmia.w	r6, {r1, r2}
  40aaae:	f300 8395 	bgt.w	40b1dc <_svfprintf_r+0xb60>
  40aab2:	3608      	adds	r6, #8
  40aab4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  40aab6:	2d80      	cmp	r5, #128	; 0x80
  40aab8:	f000 82cc 	beq.w	40b054 <_svfprintf_r+0x9d8>
  40aabc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40aabe:	ebc4 0a05 	rsb	sl, r4, r5
  40aac2:	f1ba 0f00 	cmp.w	sl, #0
  40aac6:	dd3b      	ble.n	40ab40 <_svfprintf_r+0x4c4>
  40aac8:	f1ba 0f10 	cmp.w	sl, #16
  40aacc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40aace:	4d30      	ldr	r5, [pc, #192]	; (40ab90 <_svfprintf_r+0x514>)
  40aad0:	dd2b      	ble.n	40ab2a <_svfprintf_r+0x4ae>
  40aad2:	940a      	str	r4, [sp, #40]	; 0x28
  40aad4:	4632      	mov	r2, r6
  40aad6:	f04f 0b10 	mov.w	fp, #16
  40aada:	462e      	mov	r6, r5
  40aadc:	4661      	mov	r1, ip
  40aade:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40aae0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40aae2:	e006      	b.n	40aaf2 <_svfprintf_r+0x476>
  40aae4:	f1aa 0a10 	sub.w	sl, sl, #16
  40aae8:	f1ba 0f10 	cmp.w	sl, #16
  40aaec:	f102 0208 	add.w	r2, r2, #8
  40aaf0:	dd17      	ble.n	40ab22 <_svfprintf_r+0x4a6>
  40aaf2:	3301      	adds	r3, #1
  40aaf4:	3110      	adds	r1, #16
  40aaf6:	2b07      	cmp	r3, #7
  40aaf8:	912d      	str	r1, [sp, #180]	; 0xb4
  40aafa:	932c      	str	r3, [sp, #176]	; 0xb0
  40aafc:	e882 0840 	stmia.w	r2, {r6, fp}
  40ab00:	ddf0      	ble.n	40aae4 <_svfprintf_r+0x468>
  40ab02:	4620      	mov	r0, r4
  40ab04:	4629      	mov	r1, r5
  40ab06:	aa2b      	add	r2, sp, #172	; 0xac
  40ab08:	f007 f84a 	bl	411ba0 <__ssprint_r>
  40ab0c:	2800      	cmp	r0, #0
  40ab0e:	f47f aecd 	bne.w	40a8ac <_svfprintf_r+0x230>
  40ab12:	f1aa 0a10 	sub.w	sl, sl, #16
  40ab16:	f1ba 0f10 	cmp.w	sl, #16
  40ab1a:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40ab1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40ab1e:	aa38      	add	r2, sp, #224	; 0xe0
  40ab20:	dce7      	bgt.n	40aaf2 <_svfprintf_r+0x476>
  40ab22:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40ab24:	4635      	mov	r5, r6
  40ab26:	468c      	mov	ip, r1
  40ab28:	4616      	mov	r6, r2
  40ab2a:	3301      	adds	r3, #1
  40ab2c:	44d4      	add	ip, sl
  40ab2e:	2b07      	cmp	r3, #7
  40ab30:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40ab34:	932c      	str	r3, [sp, #176]	; 0xb0
  40ab36:	e886 0420 	stmia.w	r6, {r5, sl}
  40ab3a:	f300 8337 	bgt.w	40b1ac <_svfprintf_r+0xb30>
  40ab3e:	3608      	adds	r6, #8
  40ab40:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ab42:	05ed      	lsls	r5, r5, #23
  40ab44:	f100 8226 	bmi.w	40af94 <_svfprintf_r+0x918>
  40ab48:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40ab4a:	6037      	str	r7, [r6, #0]
  40ab4c:	3301      	adds	r3, #1
  40ab4e:	44a4      	add	ip, r4
  40ab50:	2b07      	cmp	r3, #7
  40ab52:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40ab56:	6074      	str	r4, [r6, #4]
  40ab58:	932c      	str	r3, [sp, #176]	; 0xb0
  40ab5a:	f300 8311 	bgt.w	40b180 <_svfprintf_r+0xb04>
  40ab5e:	3608      	adds	r6, #8
  40ab60:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ab62:	0763      	lsls	r3, r4, #29
  40ab64:	d549      	bpl.n	40abfa <_svfprintf_r+0x57e>
  40ab66:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40ab68:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40ab6a:	1a2c      	subs	r4, r5, r0
  40ab6c:	2c00      	cmp	r4, #0
  40ab6e:	dd44      	ble.n	40abfa <_svfprintf_r+0x57e>
  40ab70:	2c10      	cmp	r4, #16
  40ab72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40ab74:	f8df a01c 	ldr.w	sl, [pc, #28]	; 40ab94 <_svfprintf_r+0x518>
  40ab78:	dd2b      	ble.n	40abd2 <_svfprintf_r+0x556>
  40ab7a:	4657      	mov	r7, sl
  40ab7c:	2510      	movs	r5, #16
  40ab7e:	4662      	mov	r2, ip
  40ab80:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  40ab84:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  40ab88:	e00b      	b.n	40aba2 <_svfprintf_r+0x526>
  40ab8a:	bf00      	nop
  40ab8c:	00413404 	.word	0x00413404
  40ab90:	004133d0 	.word	0x004133d0
  40ab94:	00413424 	.word	0x00413424
  40ab98:	3c10      	subs	r4, #16
  40ab9a:	2c10      	cmp	r4, #16
  40ab9c:	f106 0608 	add.w	r6, r6, #8
  40aba0:	dd15      	ble.n	40abce <_svfprintf_r+0x552>
  40aba2:	3301      	adds	r3, #1
  40aba4:	3210      	adds	r2, #16
  40aba6:	2b07      	cmp	r3, #7
  40aba8:	922d      	str	r2, [sp, #180]	; 0xb4
  40abaa:	932c      	str	r3, [sp, #176]	; 0xb0
  40abac:	6037      	str	r7, [r6, #0]
  40abae:	6075      	str	r5, [r6, #4]
  40abb0:	ddf2      	ble.n	40ab98 <_svfprintf_r+0x51c>
  40abb2:	4650      	mov	r0, sl
  40abb4:	4641      	mov	r1, r8
  40abb6:	aa2b      	add	r2, sp, #172	; 0xac
  40abb8:	f006 fff2 	bl	411ba0 <__ssprint_r>
  40abbc:	2800      	cmp	r0, #0
  40abbe:	f47f ae75 	bne.w	40a8ac <_svfprintf_r+0x230>
  40abc2:	3c10      	subs	r4, #16
  40abc4:	2c10      	cmp	r4, #16
  40abc6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40abc8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40abca:	ae38      	add	r6, sp, #224	; 0xe0
  40abcc:	dce9      	bgt.n	40aba2 <_svfprintf_r+0x526>
  40abce:	4694      	mov	ip, r2
  40abd0:	46ba      	mov	sl, r7
  40abd2:	3301      	adds	r3, #1
  40abd4:	44a4      	add	ip, r4
  40abd6:	2b07      	cmp	r3, #7
  40abd8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40abdc:	932c      	str	r3, [sp, #176]	; 0xb0
  40abde:	f8c6 a000 	str.w	sl, [r6]
  40abe2:	6074      	str	r4, [r6, #4]
  40abe4:	dd09      	ble.n	40abfa <_svfprintf_r+0x57e>
  40abe6:	980d      	ldr	r0, [sp, #52]	; 0x34
  40abe8:	990c      	ldr	r1, [sp, #48]	; 0x30
  40abea:	aa2b      	add	r2, sp, #172	; 0xac
  40abec:	f006 ffd8 	bl	411ba0 <__ssprint_r>
  40abf0:	2800      	cmp	r0, #0
  40abf2:	f47f ae5b 	bne.w	40a8ac <_svfprintf_r+0x230>
  40abf6:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40abfa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40abfc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40abfe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40ac00:	42a8      	cmp	r0, r5
  40ac02:	bfac      	ite	ge
  40ac04:	1824      	addge	r4, r4, r0
  40ac06:	1964      	addlt	r4, r4, r5
  40ac08:	940e      	str	r4, [sp, #56]	; 0x38
  40ac0a:	f1bc 0f00 	cmp.w	ip, #0
  40ac0e:	f040 82c3 	bne.w	40b198 <_svfprintf_r+0xb1c>
  40ac12:	2300      	movs	r3, #0
  40ac14:	932c      	str	r3, [sp, #176]	; 0xb0
  40ac16:	ae38      	add	r6, sp, #224	; 0xe0
  40ac18:	e556      	b.n	40a6c8 <_svfprintf_r+0x4c>
  40ac1a:	f899 8000 	ldrb.w	r8, [r9]
  40ac1e:	2a00      	cmp	r2, #0
  40ac20:	f47f ad88 	bne.w	40a734 <_svfprintf_r+0xb8>
  40ac24:	2220      	movs	r2, #32
  40ac26:	e585      	b.n	40a734 <_svfprintf_r+0xb8>
  40ac28:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ac2a:	f045 0501 	orr.w	r5, r5, #1
  40ac2e:	9509      	str	r5, [sp, #36]	; 0x24
  40ac30:	f899 8000 	ldrb.w	r8, [r9]
  40ac34:	e57e      	b.n	40a734 <_svfprintf_r+0xb8>
  40ac36:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ac38:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  40ac3c:	9509      	str	r5, [sp, #36]	; 0x24
  40ac3e:	f899 8000 	ldrb.w	r8, [r9]
  40ac42:	e577      	b.n	40a734 <_svfprintf_r+0xb8>
  40ac44:	2400      	movs	r4, #0
  40ac46:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40ac4a:	940f      	str	r4, [sp, #60]	; 0x3c
  40ac4c:	4621      	mov	r1, r4
  40ac4e:	f819 8b01 	ldrb.w	r8, [r9], #1
  40ac52:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40ac56:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  40ac5a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40ac5e:	2b09      	cmp	r3, #9
  40ac60:	d9f5      	bls.n	40ac4e <_svfprintf_r+0x5d2>
  40ac62:	910f      	str	r1, [sp, #60]	; 0x3c
  40ac64:	e568      	b.n	40a738 <_svfprintf_r+0xbc>
  40ac66:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ac6a:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40ac6e:	f04c 0c10 	orr.w	ip, ip, #16
  40ac72:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40ac76:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ac78:	06a3      	lsls	r3, r4, #26
  40ac7a:	f140 80b2 	bpl.w	40ade2 <_svfprintf_r+0x766>
  40ac7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40ac80:	1de9      	adds	r1, r5, #7
  40ac82:	f021 0107 	bic.w	r1, r1, #7
  40ac86:	e9d1 2300 	ldrd	r2, r3, [r1]
  40ac8a:	3108      	adds	r1, #8
  40ac8c:	9110      	str	r1, [sp, #64]	; 0x40
  40ac8e:	4614      	mov	r4, r2
  40ac90:	461d      	mov	r5, r3
  40ac92:	2a00      	cmp	r2, #0
  40ac94:	f173 0000 	sbcs.w	r0, r3, #0
  40ac98:	f2c0 838b 	blt.w	40b3b2 <_svfprintf_r+0xd36>
  40ac9c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40aca0:	2301      	movs	r3, #1
  40aca2:	e659      	b.n	40a958 <_svfprintf_r+0x2dc>
  40aca4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40aca6:	4cb7      	ldr	r4, [pc, #732]	; (40af84 <_svfprintf_r+0x908>)
  40aca8:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40acac:	06af      	lsls	r7, r5, #26
  40acae:	941a      	str	r4, [sp, #104]	; 0x68
  40acb0:	f53f ae2f 	bmi.w	40a912 <_svfprintf_r+0x296>
  40acb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40acb6:	06ed      	lsls	r5, r5, #27
  40acb8:	f140 845d 	bpl.w	40b576 <_svfprintf_r+0xefa>
  40acbc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40acc0:	f8dc 4000 	ldr.w	r4, [ip]
  40acc4:	f10c 0c04 	add.w	ip, ip, #4
  40acc8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40accc:	2500      	movs	r5, #0
  40acce:	e62b      	b.n	40a928 <_svfprintf_r+0x2ac>
  40acd0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40acd4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40acd8:	f01c 0f20 	tst.w	ip, #32
  40acdc:	f000 843d 	beq.w	40b55a <_svfprintf_r+0xede>
  40ace0:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40ace2:	6821      	ldr	r1, [r4, #0]
  40ace4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40ace6:	17e5      	asrs	r5, r4, #31
  40ace8:	462b      	mov	r3, r5
  40acea:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40acec:	4622      	mov	r2, r4
  40acee:	3504      	adds	r5, #4
  40acf0:	9510      	str	r5, [sp, #64]	; 0x40
  40acf2:	e9c1 2300 	strd	r2, r3, [r1]
  40acf6:	e4e7      	b.n	40a6c8 <_svfprintf_r+0x4c>
  40acf8:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40acfa:	6827      	ldr	r7, [r4, #0]
  40acfc:	f04f 0a00 	mov.w	sl, #0
  40ad00:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40ad04:	1d25      	adds	r5, r4, #4
  40ad06:	2f00      	cmp	r7, #0
  40ad08:	f000 85f5 	beq.w	40b8f6 <_svfprintf_r+0x127a>
  40ad0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40ad0e:	2c00      	cmp	r4, #0
  40ad10:	4638      	mov	r0, r7
  40ad12:	f2c0 85a7 	blt.w	40b864 <_svfprintf_r+0x11e8>
  40ad16:	4651      	mov	r1, sl
  40ad18:	4622      	mov	r2, r4
  40ad1a:	f004 fd69 	bl	40f7f0 <memchr>
  40ad1e:	2800      	cmp	r0, #0
  40ad20:	f000 861f 	beq.w	40b962 <_svfprintf_r+0x12e6>
  40ad24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40ad26:	9510      	str	r5, [sp, #64]	; 0x40
  40ad28:	1bc0      	subs	r0, r0, r7
  40ad2a:	42a0      	cmp	r0, r4
  40ad2c:	bfb8      	it	lt
  40ad2e:	4604      	movlt	r4, r0
  40ad30:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
  40ad34:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40ad38:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  40ad3c:	950b      	str	r5, [sp, #44]	; 0x2c
  40ad3e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40ad42:	e632      	b.n	40a9aa <_svfprintf_r+0x32e>
  40ad44:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ad48:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
  40ad4c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40ad50:	f899 8000 	ldrb.w	r8, [r9]
  40ad54:	e4ee      	b.n	40a734 <_svfprintf_r+0xb8>
  40ad56:	f899 8000 	ldrb.w	r8, [r9]
  40ad5a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  40ad5e:	464b      	mov	r3, r9
  40ad60:	f000 848b 	beq.w	40b67a <_svfprintf_r+0xffe>
  40ad64:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ad66:	f045 0510 	orr.w	r5, r5, #16
  40ad6a:	9509      	str	r5, [sp, #36]	; 0x24
  40ad6c:	e4e2      	b.n	40a734 <_svfprintf_r+0xb8>
  40ad6e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40ad70:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40ad72:	6824      	ldr	r4, [r4, #0]
  40ad74:	940f      	str	r4, [sp, #60]	; 0x3c
  40ad76:	2c00      	cmp	r4, #0
  40ad78:	f105 0304 	add.w	r3, r5, #4
  40ad7c:	f6ff ad7c 	blt.w	40a878 <_svfprintf_r+0x1fc>
  40ad80:	9310      	str	r3, [sp, #64]	; 0x40
  40ad82:	f899 8000 	ldrb.w	r8, [r9]
  40ad86:	e4d5      	b.n	40a734 <_svfprintf_r+0xb8>
  40ad88:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40ad8a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ad8e:	487e      	ldr	r0, [pc, #504]	; (40af88 <_svfprintf_r+0x90c>)
  40ad90:	6814      	ldr	r4, [r2, #0]
  40ad92:	901a      	str	r0, [sp, #104]	; 0x68
  40ad94:	2330      	movs	r3, #48	; 0x30
  40ad96:	1d15      	adds	r5, r2, #4
  40ad98:	f04f 0878 	mov.w	r8, #120	; 0x78
  40ad9c:	f04c 0c02 	orr.w	ip, ip, #2
  40ada0:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  40ada4:	9510      	str	r5, [sp, #64]	; 0x40
  40ada6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40adaa:	2500      	movs	r5, #0
  40adac:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  40adb0:	2302      	movs	r3, #2
  40adb2:	e5cd      	b.n	40a950 <_svfprintf_r+0x2d4>
  40adb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40adb6:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40adb8:	6812      	ldr	r2, [r2, #0]
  40adba:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
  40adbe:	2300      	movs	r3, #0
  40adc0:	2401      	movs	r4, #1
  40adc2:	3504      	adds	r5, #4
  40adc4:	469a      	mov	sl, r3
  40adc6:	940b      	str	r4, [sp, #44]	; 0x2c
  40adc8:	9510      	str	r5, [sp, #64]	; 0x40
  40adca:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40adce:	930a      	str	r3, [sp, #40]	; 0x28
  40add0:	9314      	str	r3, [sp, #80]	; 0x50
  40add2:	af2e      	add	r7, sp, #184	; 0xb8
  40add4:	e5ef      	b.n	40a9b6 <_svfprintf_r+0x33a>
  40add6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40add8:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40addc:	06a3      	lsls	r3, r4, #26
  40adde:	f53f af4e 	bmi.w	40ac7e <_svfprintf_r+0x602>
  40ade2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ade6:	f01c 0f10 	tst.w	ip, #16
  40adea:	f040 82d2 	bne.w	40b392 <_svfprintf_r+0xd16>
  40adee:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40adf0:	0667      	lsls	r7, r4, #25
  40adf2:	f140 82ce 	bpl.w	40b392 <_svfprintf_r+0xd16>
  40adf6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40adfa:	f9bc 4000 	ldrsh.w	r4, [ip]
  40adfe:	f10c 0c04 	add.w	ip, ip, #4
  40ae02:	17e5      	asrs	r5, r4, #31
  40ae04:	4622      	mov	r2, r4
  40ae06:	462b      	mov	r3, r5
  40ae08:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40ae0c:	e741      	b.n	40ac92 <_svfprintf_r+0x616>
  40ae0e:	f899 8000 	ldrb.w	r8, [r9]
  40ae12:	222b      	movs	r2, #43	; 0x2b
  40ae14:	e48e      	b.n	40a734 <_svfprintf_r+0xb8>
  40ae16:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ae18:	f045 0508 	orr.w	r5, r5, #8
  40ae1c:	9509      	str	r5, [sp, #36]	; 0x24
  40ae1e:	f899 8000 	ldrb.w	r8, [r9]
  40ae22:	e487      	b.n	40a734 <_svfprintf_r+0xb8>
  40ae24:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40ae26:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ae28:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40ae2c:	1deb      	adds	r3, r5, #7
  40ae2e:	0725      	lsls	r5, r4, #28
  40ae30:	f023 0307 	bic.w	r3, r3, #7
  40ae34:	f140 838a 	bpl.w	40b54c <_svfprintf_r+0xed0>
  40ae38:	e9d3 4500 	ldrd	r4, r5, [r3]
  40ae3c:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40ae40:	f103 0c08 	add.w	ip, r3, #8
  40ae44:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40ae48:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40ae4c:	f005 fbc2 	bl	4105d4 <__fpclassifyd>
  40ae50:	2801      	cmp	r0, #1
  40ae52:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40ae56:	f040 835f 	bne.w	40b518 <_svfprintf_r+0xe9c>
  40ae5a:	2200      	movs	r2, #0
  40ae5c:	2300      	movs	r3, #0
  40ae5e:	f008 f951 	bl	413104 <__aeabi_dcmplt>
  40ae62:	2800      	cmp	r0, #0
  40ae64:	f040 856d 	bne.w	40b942 <_svfprintf_r+0x12c6>
  40ae68:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40ae6c:	2503      	movs	r5, #3
  40ae6e:	950b      	str	r5, [sp, #44]	; 0x2c
  40ae70:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ae72:	4f46      	ldr	r7, [pc, #280]	; (40af8c <_svfprintf_r+0x910>)
  40ae74:	4b46      	ldr	r3, [pc, #280]	; (40af90 <_svfprintf_r+0x914>)
  40ae76:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  40ae7a:	2400      	movs	r4, #0
  40ae7c:	9509      	str	r5, [sp, #36]	; 0x24
  40ae7e:	2500      	movs	r5, #0
  40ae80:	940a      	str	r4, [sp, #40]	; 0x28
  40ae82:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40ae86:	bfd8      	it	le
  40ae88:	461f      	movle	r7, r3
  40ae8a:	2403      	movs	r4, #3
  40ae8c:	9514      	str	r5, [sp, #80]	; 0x50
  40ae8e:	e58c      	b.n	40a9aa <_svfprintf_r+0x32e>
  40ae90:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ae94:	f04c 0c20 	orr.w	ip, ip, #32
  40ae98:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40ae9c:	f899 8000 	ldrb.w	r8, [r9]
  40aea0:	e448      	b.n	40a734 <_svfprintf_r+0xb8>
  40aea2:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40aea4:	1de3      	adds	r3, r4, #7
  40aea6:	f023 0307 	bic.w	r3, r3, #7
  40aeaa:	f103 0508 	add.w	r5, r3, #8
  40aeae:	9510      	str	r5, [sp, #64]	; 0x40
  40aeb0:	e9d3 4500 	ldrd	r4, r5, [r3]
  40aeb4:	2300      	movs	r3, #0
  40aeb6:	e54b      	b.n	40a950 <_svfprintf_r+0x2d4>
  40aeb8:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40aeba:	1deb      	adds	r3, r5, #7
  40aebc:	f023 0307 	bic.w	r3, r3, #7
  40aec0:	f103 0c08 	add.w	ip, r3, #8
  40aec4:	e9d3 4500 	ldrd	r4, r5, [r3]
  40aec8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40aecc:	2301      	movs	r3, #1
  40aece:	e53f      	b.n	40a950 <_svfprintf_r+0x2d4>
  40aed0:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40aed4:	f1b8 0f00 	cmp.w	r8, #0
  40aed8:	f43f ace1 	beq.w	40a89e <_svfprintf_r+0x222>
  40aedc:	2300      	movs	r3, #0
  40aede:	f04f 0c01 	mov.w	ip, #1
  40aee2:	469a      	mov	sl, r3
  40aee4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40aee8:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
  40aeec:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40aef0:	930a      	str	r3, [sp, #40]	; 0x28
  40aef2:	9314      	str	r3, [sp, #80]	; 0x50
  40aef4:	4664      	mov	r4, ip
  40aef6:	af2e      	add	r7, sp, #184	; 0xb8
  40aef8:	e55d      	b.n	40a9b6 <_svfprintf_r+0x33a>
  40aefa:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40aefe:	e5b5      	b.n	40aa6c <_svfprintf_r+0x3f0>
  40af00:	2b01      	cmp	r3, #1
  40af02:	f000 80ec 	beq.w	40b0de <_svfprintf_r+0xa62>
  40af06:	2b02      	cmp	r3, #2
  40af08:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
  40af0c:	d118      	bne.n	40af40 <_svfprintf_r+0x8c4>
  40af0e:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  40af12:	4619      	mov	r1, r3
  40af14:	f004 000f 	and.w	r0, r4, #15
  40af18:	0922      	lsrs	r2, r4, #4
  40af1a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  40af1e:	460f      	mov	r7, r1
  40af20:	092b      	lsrs	r3, r5, #4
  40af22:	f81c 1000 	ldrb.w	r1, [ip, r0]
  40af26:	7039      	strb	r1, [r7, #0]
  40af28:	ea52 0003 	orrs.w	r0, r2, r3
  40af2c:	4614      	mov	r4, r2
  40af2e:	461d      	mov	r5, r3
  40af30:	f107 31ff 	add.w	r1, r7, #4294967295
  40af34:	d1ee      	bne.n	40af14 <_svfprintf_r+0x898>
  40af36:	9d08      	ldr	r5, [sp, #32]
  40af38:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  40af3c:	1bec      	subs	r4, r5, r7
  40af3e:	e52b      	b.n	40a998 <_svfprintf_r+0x31c>
  40af40:	08e0      	lsrs	r0, r4, #3
  40af42:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  40af46:	f004 0207 	and.w	r2, r4, #7
  40af4a:	08e9      	lsrs	r1, r5, #3
  40af4c:	3230      	adds	r2, #48	; 0x30
  40af4e:	ea50 0c01 	orrs.w	ip, r0, r1
  40af52:	461f      	mov	r7, r3
  40af54:	701a      	strb	r2, [r3, #0]
  40af56:	4604      	mov	r4, r0
  40af58:	460d      	mov	r5, r1
  40af5a:	f103 33ff 	add.w	r3, r3, #4294967295
  40af5e:	d1ef      	bne.n	40af40 <_svfprintf_r+0x8c4>
  40af60:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40af62:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  40af66:	07e0      	lsls	r0, r4, #31
  40af68:	4639      	mov	r1, r7
  40af6a:	f140 80c1 	bpl.w	40b0f0 <_svfprintf_r+0xa74>
  40af6e:	2a30      	cmp	r2, #48	; 0x30
  40af70:	f000 80be 	beq.w	40b0f0 <_svfprintf_r+0xa74>
  40af74:	9d08      	ldr	r5, [sp, #32]
  40af76:	461f      	mov	r7, r3
  40af78:	2330      	movs	r3, #48	; 0x30
  40af7a:	1bec      	subs	r4, r5, r7
  40af7c:	f801 3c01 	strb.w	r3, [r1, #-1]
  40af80:	e50a      	b.n	40a998 <_svfprintf_r+0x31c>
  40af82:	bf00      	nop
  40af84:	004133f0 	.word	0x004133f0
  40af88:	00413404 	.word	0x00413404
  40af8c:	004133e4 	.word	0x004133e4
  40af90:	004133e0 	.word	0x004133e0
  40af94:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40af98:	f340 80ad 	ble.w	40b0f6 <_svfprintf_r+0xa7a>
  40af9c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40afa0:	2200      	movs	r2, #0
  40afa2:	2300      	movs	r3, #0
  40afa4:	f8cd c01c 	str.w	ip, [sp, #28]
  40afa8:	f008 f8a2 	bl	4130f0 <__aeabi_dcmpeq>
  40afac:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40afb0:	2800      	cmp	r0, #0
  40afb2:	f000 8126 	beq.w	40b202 <_svfprintf_r+0xb86>
  40afb6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40afb8:	4aaa      	ldr	r2, [pc, #680]	; (40b264 <_svfprintf_r+0xbe8>)
  40afba:	6032      	str	r2, [r6, #0]
  40afbc:	3301      	adds	r3, #1
  40afbe:	f10c 0c01 	add.w	ip, ip, #1
  40afc2:	2201      	movs	r2, #1
  40afc4:	2b07      	cmp	r3, #7
  40afc6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40afca:	932c      	str	r3, [sp, #176]	; 0xb0
  40afcc:	6072      	str	r2, [r6, #4]
  40afce:	f300 82f7 	bgt.w	40b5c0 <_svfprintf_r+0xf44>
  40afd2:	3608      	adds	r6, #8
  40afd4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40afd6:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40afd8:	42a3      	cmp	r3, r4
  40afda:	db03      	blt.n	40afe4 <_svfprintf_r+0x968>
  40afdc:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40afde:	07ec      	lsls	r4, r5, #31
  40afe0:	f57f adbe 	bpl.w	40ab60 <_svfprintf_r+0x4e4>
  40afe4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40afe6:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40afe8:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40afea:	6034      	str	r4, [r6, #0]
  40afec:	3301      	adds	r3, #1
  40afee:	44ac      	add	ip, r5
  40aff0:	2b07      	cmp	r3, #7
  40aff2:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40aff6:	6075      	str	r5, [r6, #4]
  40aff8:	932c      	str	r3, [sp, #176]	; 0xb0
  40affa:	f300 8348 	bgt.w	40b68e <_svfprintf_r+0x1012>
  40affe:	3608      	adds	r6, #8
  40b000:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40b002:	1e6c      	subs	r4, r5, #1
  40b004:	2c00      	cmp	r4, #0
  40b006:	f77f adab 	ble.w	40ab60 <_svfprintf_r+0x4e4>
  40b00a:	2c10      	cmp	r4, #16
  40b00c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b00e:	4d96      	ldr	r5, [pc, #600]	; (40b268 <_svfprintf_r+0xbec>)
  40b010:	f340 8197 	ble.w	40b342 <_svfprintf_r+0xcc6>
  40b014:	2710      	movs	r7, #16
  40b016:	4662      	mov	r2, ip
  40b018:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40b01c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40b020:	e004      	b.n	40b02c <_svfprintf_r+0x9b0>
  40b022:	3608      	adds	r6, #8
  40b024:	3c10      	subs	r4, #16
  40b026:	2c10      	cmp	r4, #16
  40b028:	f340 818a 	ble.w	40b340 <_svfprintf_r+0xcc4>
  40b02c:	3301      	adds	r3, #1
  40b02e:	3210      	adds	r2, #16
  40b030:	2b07      	cmp	r3, #7
  40b032:	922d      	str	r2, [sp, #180]	; 0xb4
  40b034:	932c      	str	r3, [sp, #176]	; 0xb0
  40b036:	e886 00a0 	stmia.w	r6, {r5, r7}
  40b03a:	ddf2      	ble.n	40b022 <_svfprintf_r+0x9a6>
  40b03c:	4640      	mov	r0, r8
  40b03e:	4651      	mov	r1, sl
  40b040:	aa2b      	add	r2, sp, #172	; 0xac
  40b042:	f006 fdad 	bl	411ba0 <__ssprint_r>
  40b046:	2800      	cmp	r0, #0
  40b048:	f47f ac30 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b04c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40b04e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b050:	ae38      	add	r6, sp, #224	; 0xe0
  40b052:	e7e7      	b.n	40b024 <_svfprintf_r+0x9a8>
  40b054:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40b056:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40b058:	ebc0 0a05 	rsb	sl, r0, r5
  40b05c:	f1ba 0f00 	cmp.w	sl, #0
  40b060:	f77f ad2c 	ble.w	40aabc <_svfprintf_r+0x440>
  40b064:	f1ba 0f10 	cmp.w	sl, #16
  40b068:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b06a:	4d7f      	ldr	r5, [pc, #508]	; (40b268 <_svfprintf_r+0xbec>)
  40b06c:	dd2b      	ble.n	40b0c6 <_svfprintf_r+0xa4a>
  40b06e:	9412      	str	r4, [sp, #72]	; 0x48
  40b070:	4632      	mov	r2, r6
  40b072:	f04f 0b10 	mov.w	fp, #16
  40b076:	462e      	mov	r6, r5
  40b078:	4661      	mov	r1, ip
  40b07a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40b07c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40b07e:	e006      	b.n	40b08e <_svfprintf_r+0xa12>
  40b080:	f1aa 0a10 	sub.w	sl, sl, #16
  40b084:	f1ba 0f10 	cmp.w	sl, #16
  40b088:	f102 0208 	add.w	r2, r2, #8
  40b08c:	dd17      	ble.n	40b0be <_svfprintf_r+0xa42>
  40b08e:	3301      	adds	r3, #1
  40b090:	3110      	adds	r1, #16
  40b092:	2b07      	cmp	r3, #7
  40b094:	912d      	str	r1, [sp, #180]	; 0xb4
  40b096:	932c      	str	r3, [sp, #176]	; 0xb0
  40b098:	e882 0840 	stmia.w	r2, {r6, fp}
  40b09c:	ddf0      	ble.n	40b080 <_svfprintf_r+0xa04>
  40b09e:	4620      	mov	r0, r4
  40b0a0:	4629      	mov	r1, r5
  40b0a2:	aa2b      	add	r2, sp, #172	; 0xac
  40b0a4:	f006 fd7c 	bl	411ba0 <__ssprint_r>
  40b0a8:	2800      	cmp	r0, #0
  40b0aa:	f47f abff 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b0ae:	f1aa 0a10 	sub.w	sl, sl, #16
  40b0b2:	f1ba 0f10 	cmp.w	sl, #16
  40b0b6:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40b0b8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b0ba:	aa38      	add	r2, sp, #224	; 0xe0
  40b0bc:	dce7      	bgt.n	40b08e <_svfprintf_r+0xa12>
  40b0be:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40b0c0:	4635      	mov	r5, r6
  40b0c2:	468c      	mov	ip, r1
  40b0c4:	4616      	mov	r6, r2
  40b0c6:	3301      	adds	r3, #1
  40b0c8:	44d4      	add	ip, sl
  40b0ca:	2b07      	cmp	r3, #7
  40b0cc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b0d0:	932c      	str	r3, [sp, #176]	; 0xb0
  40b0d2:	e886 0420 	stmia.w	r6, {r5, sl}
  40b0d6:	f300 8212 	bgt.w	40b4fe <_svfprintf_r+0xe82>
  40b0da:	3608      	adds	r6, #8
  40b0dc:	e4ee      	b.n	40aabc <_svfprintf_r+0x440>
  40b0de:	2d00      	cmp	r5, #0
  40b0e0:	bf08      	it	eq
  40b0e2:	2c0a      	cmpeq	r4, #10
  40b0e4:	f080 8138 	bcs.w	40b358 <_svfprintf_r+0xcdc>
  40b0e8:	af48      	add	r7, sp, #288	; 0x120
  40b0ea:	3430      	adds	r4, #48	; 0x30
  40b0ec:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40b0f0:	9d08      	ldr	r5, [sp, #32]
  40b0f2:	1bec      	subs	r4, r5, r7
  40b0f4:	e450      	b.n	40a998 <_svfprintf_r+0x31c>
  40b0f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40b0f8:	2c01      	cmp	r4, #1
  40b0fa:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40b0fc:	f340 81d5 	ble.w	40b4aa <_svfprintf_r+0xe2e>
  40b100:	3401      	adds	r4, #1
  40b102:	f10c 0301 	add.w	r3, ip, #1
  40b106:	2201      	movs	r2, #1
  40b108:	2c07      	cmp	r4, #7
  40b10a:	6037      	str	r7, [r6, #0]
  40b10c:	932d      	str	r3, [sp, #180]	; 0xb4
  40b10e:	942c      	str	r4, [sp, #176]	; 0xb0
  40b110:	6072      	str	r2, [r6, #4]
  40b112:	f300 81db 	bgt.w	40b4cc <_svfprintf_r+0xe50>
  40b116:	3608      	adds	r6, #8
  40b118:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  40b11c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40b11e:	6035      	str	r5, [r6, #0]
  40b120:	3401      	adds	r4, #1
  40b122:	4498      	add	r8, r3
  40b124:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40b126:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40b12a:	2c07      	cmp	r4, #7
  40b12c:	942c      	str	r4, [sp, #176]	; 0xb0
  40b12e:	6075      	str	r5, [r6, #4]
  40b130:	f300 81d8 	bgt.w	40b4e4 <_svfprintf_r+0xe68>
  40b134:	3608      	adds	r6, #8
  40b136:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40b13a:	2200      	movs	r2, #0
  40b13c:	2300      	movs	r3, #0
  40b13e:	f007 ffd7 	bl	4130f0 <__aeabi_dcmpeq>
  40b142:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40b144:	2800      	cmp	r0, #0
  40b146:	f040 80b9 	bne.w	40b2bc <_svfprintf_r+0xc40>
  40b14a:	1e6b      	subs	r3, r5, #1
  40b14c:	3401      	adds	r4, #1
  40b14e:	3701      	adds	r7, #1
  40b150:	4498      	add	r8, r3
  40b152:	2c07      	cmp	r4, #7
  40b154:	942c      	str	r4, [sp, #176]	; 0xb0
  40b156:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40b15a:	6037      	str	r7, [r6, #0]
  40b15c:	6073      	str	r3, [r6, #4]
  40b15e:	f300 80e2 	bgt.w	40b326 <_svfprintf_r+0xcaa>
  40b162:	3608      	adds	r6, #8
  40b164:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  40b168:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40b16a:	3401      	adds	r4, #1
  40b16c:	44c4      	add	ip, r8
  40b16e:	ab27      	add	r3, sp, #156	; 0x9c
  40b170:	2c07      	cmp	r4, #7
  40b172:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b176:	942c      	str	r4, [sp, #176]	; 0xb0
  40b178:	e886 0028 	stmia.w	r6, {r3, r5}
  40b17c:	f77f acef 	ble.w	40ab5e <_svfprintf_r+0x4e2>
  40b180:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b182:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b184:	aa2b      	add	r2, sp, #172	; 0xac
  40b186:	f006 fd0b 	bl	411ba0 <__ssprint_r>
  40b18a:	2800      	cmp	r0, #0
  40b18c:	f47f ab8e 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b190:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b194:	ae38      	add	r6, sp, #224	; 0xe0
  40b196:	e4e3      	b.n	40ab60 <_svfprintf_r+0x4e4>
  40b198:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b19a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b19c:	aa2b      	add	r2, sp, #172	; 0xac
  40b19e:	f006 fcff 	bl	411ba0 <__ssprint_r>
  40b1a2:	2800      	cmp	r0, #0
  40b1a4:	f43f ad35 	beq.w	40ac12 <_svfprintf_r+0x596>
  40b1a8:	f7ff bb80 	b.w	40a8ac <_svfprintf_r+0x230>
  40b1ac:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b1ae:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b1b0:	aa2b      	add	r2, sp, #172	; 0xac
  40b1b2:	f006 fcf5 	bl	411ba0 <__ssprint_r>
  40b1b6:	2800      	cmp	r0, #0
  40b1b8:	f47f ab78 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b1bc:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b1c0:	ae38      	add	r6, sp, #224	; 0xe0
  40b1c2:	e4bd      	b.n	40ab40 <_svfprintf_r+0x4c4>
  40b1c4:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b1c6:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b1c8:	aa2b      	add	r2, sp, #172	; 0xac
  40b1ca:	f006 fce9 	bl	411ba0 <__ssprint_r>
  40b1ce:	2800      	cmp	r0, #0
  40b1d0:	f47f ab6c 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b1d4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b1d8:	ae38      	add	r6, sp, #224	; 0xe0
  40b1da:	e45a      	b.n	40aa92 <_svfprintf_r+0x416>
  40b1dc:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b1de:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b1e0:	aa2b      	add	r2, sp, #172	; 0xac
  40b1e2:	f006 fcdd 	bl	411ba0 <__ssprint_r>
  40b1e6:	2800      	cmp	r0, #0
  40b1e8:	f47f ab60 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b1ec:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b1f0:	ae38      	add	r6, sp, #224	; 0xe0
  40b1f2:	e45f      	b.n	40aab4 <_svfprintf_r+0x438>
  40b1f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40b1f6:	af38      	add	r7, sp, #224	; 0xe0
  40b1f8:	f7ff bbce 	b.w	40a998 <_svfprintf_r+0x31c>
  40b1fc:	2302      	movs	r3, #2
  40b1fe:	f7ff bba7 	b.w	40a950 <_svfprintf_r+0x2d4>
  40b202:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40b204:	2b00      	cmp	r3, #0
  40b206:	f340 81e7 	ble.w	40b5d8 <_svfprintf_r+0xf5c>
  40b20a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40b20c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40b20e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  40b212:	42ac      	cmp	r4, r5
  40b214:	bfa8      	it	ge
  40b216:	462c      	movge	r4, r5
  40b218:	2c00      	cmp	r4, #0
  40b21a:	44ba      	add	sl, r7
  40b21c:	dd0b      	ble.n	40b236 <_svfprintf_r+0xbba>
  40b21e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b220:	6037      	str	r7, [r6, #0]
  40b222:	3301      	adds	r3, #1
  40b224:	44a4      	add	ip, r4
  40b226:	2b07      	cmp	r3, #7
  40b228:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b22c:	6074      	str	r4, [r6, #4]
  40b22e:	932c      	str	r3, [sp, #176]	; 0xb0
  40b230:	f300 8328 	bgt.w	40b884 <_svfprintf_r+0x1208>
  40b234:	3608      	adds	r6, #8
  40b236:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40b238:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  40b23c:	1b2c      	subs	r4, r5, r4
  40b23e:	2c00      	cmp	r4, #0
  40b240:	f340 80db 	ble.w	40b3fa <_svfprintf_r+0xd7e>
  40b244:	2c10      	cmp	r4, #16
  40b246:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b248:	4d07      	ldr	r5, [pc, #28]	; (40b268 <_svfprintf_r+0xbec>)
  40b24a:	f340 81ad 	ble.w	40b5a8 <_svfprintf_r+0xf2c>
  40b24e:	970a      	str	r7, [sp, #40]	; 0x28
  40b250:	f04f 0810 	mov.w	r8, #16
  40b254:	462f      	mov	r7, r5
  40b256:	4662      	mov	r2, ip
  40b258:	4625      	mov	r5, r4
  40b25a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  40b25e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40b260:	e009      	b.n	40b276 <_svfprintf_r+0xbfa>
  40b262:	bf00      	nop
  40b264:	00413420 	.word	0x00413420
  40b268:	004133d0 	.word	0x004133d0
  40b26c:	3608      	adds	r6, #8
  40b26e:	3d10      	subs	r5, #16
  40b270:	2d10      	cmp	r5, #16
  40b272:	f340 8195 	ble.w	40b5a0 <_svfprintf_r+0xf24>
  40b276:	3301      	adds	r3, #1
  40b278:	3210      	adds	r2, #16
  40b27a:	2b07      	cmp	r3, #7
  40b27c:	922d      	str	r2, [sp, #180]	; 0xb4
  40b27e:	932c      	str	r3, [sp, #176]	; 0xb0
  40b280:	e886 0180 	stmia.w	r6, {r7, r8}
  40b284:	ddf2      	ble.n	40b26c <_svfprintf_r+0xbf0>
  40b286:	4658      	mov	r0, fp
  40b288:	4621      	mov	r1, r4
  40b28a:	aa2b      	add	r2, sp, #172	; 0xac
  40b28c:	f006 fc88 	bl	411ba0 <__ssprint_r>
  40b290:	2800      	cmp	r0, #0
  40b292:	f47f ab0b 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b296:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40b298:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b29a:	ae38      	add	r6, sp, #224	; 0xe0
  40b29c:	e7e7      	b.n	40b26e <_svfprintf_r+0xbf2>
  40b29e:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b2a0:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b2a2:	aa2b      	add	r2, sp, #172	; 0xac
  40b2a4:	f006 fc7c 	bl	411ba0 <__ssprint_r>
  40b2a8:	2800      	cmp	r0, #0
  40b2aa:	f47f aaff 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b2ae:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40b2b2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b2b6:	ae38      	add	r6, sp, #224	; 0xe0
  40b2b8:	f7ff bbd8 	b.w	40aa6c <_svfprintf_r+0x3f0>
  40b2bc:	1e6f      	subs	r7, r5, #1
  40b2be:	2f00      	cmp	r7, #0
  40b2c0:	f77f af50 	ble.w	40b164 <_svfprintf_r+0xae8>
  40b2c4:	2f10      	cmp	r7, #16
  40b2c6:	4db3      	ldr	r5, [pc, #716]	; (40b594 <_svfprintf_r+0xf18>)
  40b2c8:	dd23      	ble.n	40b312 <_svfprintf_r+0xc96>
  40b2ca:	4643      	mov	r3, r8
  40b2cc:	f04f 0a10 	mov.w	sl, #16
  40b2d0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40b2d4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40b2d8:	e004      	b.n	40b2e4 <_svfprintf_r+0xc68>
  40b2da:	3f10      	subs	r7, #16
  40b2dc:	2f10      	cmp	r7, #16
  40b2de:	f106 0608 	add.w	r6, r6, #8
  40b2e2:	dd15      	ble.n	40b310 <_svfprintf_r+0xc94>
  40b2e4:	3401      	adds	r4, #1
  40b2e6:	3310      	adds	r3, #16
  40b2e8:	2c07      	cmp	r4, #7
  40b2ea:	932d      	str	r3, [sp, #180]	; 0xb4
  40b2ec:	942c      	str	r4, [sp, #176]	; 0xb0
  40b2ee:	e886 0420 	stmia.w	r6, {r5, sl}
  40b2f2:	ddf2      	ble.n	40b2da <_svfprintf_r+0xc5e>
  40b2f4:	4640      	mov	r0, r8
  40b2f6:	4659      	mov	r1, fp
  40b2f8:	aa2b      	add	r2, sp, #172	; 0xac
  40b2fa:	f006 fc51 	bl	411ba0 <__ssprint_r>
  40b2fe:	2800      	cmp	r0, #0
  40b300:	f47f aad4 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b304:	3f10      	subs	r7, #16
  40b306:	2f10      	cmp	r7, #16
  40b308:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40b30a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40b30c:	ae38      	add	r6, sp, #224	; 0xe0
  40b30e:	dce9      	bgt.n	40b2e4 <_svfprintf_r+0xc68>
  40b310:	4698      	mov	r8, r3
  40b312:	3401      	adds	r4, #1
  40b314:	44b8      	add	r8, r7
  40b316:	2c07      	cmp	r4, #7
  40b318:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40b31c:	942c      	str	r4, [sp, #176]	; 0xb0
  40b31e:	e886 00a0 	stmia.w	r6, {r5, r7}
  40b322:	f77f af1e 	ble.w	40b162 <_svfprintf_r+0xae6>
  40b326:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b328:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b32a:	aa2b      	add	r2, sp, #172	; 0xac
  40b32c:	f006 fc38 	bl	411ba0 <__ssprint_r>
  40b330:	2800      	cmp	r0, #0
  40b332:	f47f aabb 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b336:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  40b33a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40b33c:	ae38      	add	r6, sp, #224	; 0xe0
  40b33e:	e711      	b.n	40b164 <_svfprintf_r+0xae8>
  40b340:	4694      	mov	ip, r2
  40b342:	3301      	adds	r3, #1
  40b344:	44a4      	add	ip, r4
  40b346:	2b07      	cmp	r3, #7
  40b348:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b34c:	932c      	str	r3, [sp, #176]	; 0xb0
  40b34e:	6035      	str	r5, [r6, #0]
  40b350:	6074      	str	r4, [r6, #4]
  40b352:	f77f ac04 	ble.w	40ab5e <_svfprintf_r+0x4e2>
  40b356:	e713      	b.n	40b180 <_svfprintf_r+0xb04>
  40b358:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
  40b35c:	4620      	mov	r0, r4
  40b35e:	4629      	mov	r1, r5
  40b360:	220a      	movs	r2, #10
  40b362:	2300      	movs	r3, #0
  40b364:	f7fe fbba 	bl	409adc <__aeabi_uldivmod>
  40b368:	3230      	adds	r2, #48	; 0x30
  40b36a:	f88b 2000 	strb.w	r2, [fp]
  40b36e:	4620      	mov	r0, r4
  40b370:	4629      	mov	r1, r5
  40b372:	220a      	movs	r2, #10
  40b374:	2300      	movs	r3, #0
  40b376:	f7fe fbb1 	bl	409adc <__aeabi_uldivmod>
  40b37a:	4604      	mov	r4, r0
  40b37c:	460d      	mov	r5, r1
  40b37e:	ea54 0c05 	orrs.w	ip, r4, r5
  40b382:	465f      	mov	r7, fp
  40b384:	f10b 3bff 	add.w	fp, fp, #4294967295
  40b388:	d1e8      	bne.n	40b35c <_svfprintf_r+0xce0>
  40b38a:	9d08      	ldr	r5, [sp, #32]
  40b38c:	1bec      	subs	r4, r5, r7
  40b38e:	f7ff bb03 	b.w	40a998 <_svfprintf_r+0x31c>
  40b392:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40b394:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40b398:	682c      	ldr	r4, [r5, #0]
  40b39a:	17e5      	asrs	r5, r4, #31
  40b39c:	4622      	mov	r2, r4
  40b39e:	462b      	mov	r3, r5
  40b3a0:	f10c 0c04 	add.w	ip, ip, #4
  40b3a4:	2a00      	cmp	r2, #0
  40b3a6:	f173 0000 	sbcs.w	r0, r3, #0
  40b3aa:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40b3ae:	f6bf ac75 	bge.w	40ac9c <_svfprintf_r+0x620>
  40b3b2:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40b3b6:	4264      	negs	r4, r4
  40b3b8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40b3bc:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40b3c0:	2301      	movs	r3, #1
  40b3c2:	f7ff bac9 	b.w	40a958 <_svfprintf_r+0x2dc>
  40b3c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40b3c8:	682c      	ldr	r4, [r5, #0]
  40b3ca:	3504      	adds	r5, #4
  40b3cc:	9510      	str	r5, [sp, #64]	; 0x40
  40b3ce:	2500      	movs	r5, #0
  40b3d0:	f7ff babe 	b.w	40a950 <_svfprintf_r+0x2d4>
  40b3d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40b3d6:	682c      	ldr	r4, [r5, #0]
  40b3d8:	3504      	adds	r5, #4
  40b3da:	9510      	str	r5, [sp, #64]	; 0x40
  40b3dc:	2301      	movs	r3, #1
  40b3de:	2500      	movs	r5, #0
  40b3e0:	f7ff bab6 	b.w	40a950 <_svfprintf_r+0x2d4>
  40b3e4:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b3e6:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b3e8:	aa2b      	add	r2, sp, #172	; 0xac
  40b3ea:	f006 fbd9 	bl	411ba0 <__ssprint_r>
  40b3ee:	2800      	cmp	r0, #0
  40b3f0:	f47f aa5c 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b3f4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b3f8:	ae38      	add	r6, sp, #224	; 0xe0
  40b3fa:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40b3fc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40b3fe:	442f      	add	r7, r5
  40b400:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40b402:	42ac      	cmp	r4, r5
  40b404:	db42      	blt.n	40b48c <_svfprintf_r+0xe10>
  40b406:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40b408:	07e9      	lsls	r1, r5, #31
  40b40a:	d43f      	bmi.n	40b48c <_svfprintf_r+0xe10>
  40b40c:	9811      	ldr	r0, [sp, #68]	; 0x44
  40b40e:	ebc7 050a 	rsb	r5, r7, sl
  40b412:	1b04      	subs	r4, r0, r4
  40b414:	42ac      	cmp	r4, r5
  40b416:	bfb8      	it	lt
  40b418:	4625      	movlt	r5, r4
  40b41a:	2d00      	cmp	r5, #0
  40b41c:	dd0b      	ble.n	40b436 <_svfprintf_r+0xdba>
  40b41e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b420:	6037      	str	r7, [r6, #0]
  40b422:	3301      	adds	r3, #1
  40b424:	44ac      	add	ip, r5
  40b426:	2b07      	cmp	r3, #7
  40b428:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b42c:	6075      	str	r5, [r6, #4]
  40b42e:	932c      	str	r3, [sp, #176]	; 0xb0
  40b430:	f300 8252 	bgt.w	40b8d8 <_svfprintf_r+0x125c>
  40b434:	3608      	adds	r6, #8
  40b436:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  40b43a:	1b64      	subs	r4, r4, r5
  40b43c:	2c00      	cmp	r4, #0
  40b43e:	f77f ab8f 	ble.w	40ab60 <_svfprintf_r+0x4e4>
  40b442:	2c10      	cmp	r4, #16
  40b444:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b446:	4d53      	ldr	r5, [pc, #332]	; (40b594 <_svfprintf_r+0xf18>)
  40b448:	f77f af7b 	ble.w	40b342 <_svfprintf_r+0xcc6>
  40b44c:	2710      	movs	r7, #16
  40b44e:	4662      	mov	r2, ip
  40b450:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40b454:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40b458:	e004      	b.n	40b464 <_svfprintf_r+0xde8>
  40b45a:	3608      	adds	r6, #8
  40b45c:	3c10      	subs	r4, #16
  40b45e:	2c10      	cmp	r4, #16
  40b460:	f77f af6e 	ble.w	40b340 <_svfprintf_r+0xcc4>
  40b464:	3301      	adds	r3, #1
  40b466:	3210      	adds	r2, #16
  40b468:	2b07      	cmp	r3, #7
  40b46a:	922d      	str	r2, [sp, #180]	; 0xb4
  40b46c:	932c      	str	r3, [sp, #176]	; 0xb0
  40b46e:	e886 00a0 	stmia.w	r6, {r5, r7}
  40b472:	ddf2      	ble.n	40b45a <_svfprintf_r+0xdde>
  40b474:	4640      	mov	r0, r8
  40b476:	4651      	mov	r1, sl
  40b478:	aa2b      	add	r2, sp, #172	; 0xac
  40b47a:	f006 fb91 	bl	411ba0 <__ssprint_r>
  40b47e:	2800      	cmp	r0, #0
  40b480:	f47f aa14 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b484:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40b486:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b488:	ae38      	add	r6, sp, #224	; 0xe0
  40b48a:	e7e7      	b.n	40b45c <_svfprintf_r+0xde0>
  40b48c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b48e:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40b490:	6035      	str	r5, [r6, #0]
  40b492:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40b494:	6075      	str	r5, [r6, #4]
  40b496:	3301      	adds	r3, #1
  40b498:	44ac      	add	ip, r5
  40b49a:	2b07      	cmp	r3, #7
  40b49c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b4a0:	932c      	str	r3, [sp, #176]	; 0xb0
  40b4a2:	f300 81fb 	bgt.w	40b89c <_svfprintf_r+0x1220>
  40b4a6:	3608      	adds	r6, #8
  40b4a8:	e7b0      	b.n	40b40c <_svfprintf_r+0xd90>
  40b4aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40b4ac:	07ea      	lsls	r2, r5, #31
  40b4ae:	f53f ae27 	bmi.w	40b100 <_svfprintf_r+0xa84>
  40b4b2:	3401      	adds	r4, #1
  40b4b4:	f10c 0801 	add.w	r8, ip, #1
  40b4b8:	2301      	movs	r3, #1
  40b4ba:	2c07      	cmp	r4, #7
  40b4bc:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40b4c0:	942c      	str	r4, [sp, #176]	; 0xb0
  40b4c2:	6037      	str	r7, [r6, #0]
  40b4c4:	6073      	str	r3, [r6, #4]
  40b4c6:	f77f ae4c 	ble.w	40b162 <_svfprintf_r+0xae6>
  40b4ca:	e72c      	b.n	40b326 <_svfprintf_r+0xcaa>
  40b4cc:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b4ce:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b4d0:	aa2b      	add	r2, sp, #172	; 0xac
  40b4d2:	f006 fb65 	bl	411ba0 <__ssprint_r>
  40b4d6:	2800      	cmp	r0, #0
  40b4d8:	f47f a9e8 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b4dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40b4de:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40b4e0:	ae38      	add	r6, sp, #224	; 0xe0
  40b4e2:	e619      	b.n	40b118 <_svfprintf_r+0xa9c>
  40b4e4:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b4e6:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b4e8:	aa2b      	add	r2, sp, #172	; 0xac
  40b4ea:	f006 fb59 	bl	411ba0 <__ssprint_r>
  40b4ee:	2800      	cmp	r0, #0
  40b4f0:	f47f a9dc 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b4f4:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  40b4f8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40b4fa:	ae38      	add	r6, sp, #224	; 0xe0
  40b4fc:	e61b      	b.n	40b136 <_svfprintf_r+0xaba>
  40b4fe:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b500:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b502:	aa2b      	add	r2, sp, #172	; 0xac
  40b504:	f006 fb4c 	bl	411ba0 <__ssprint_r>
  40b508:	2800      	cmp	r0, #0
  40b50a:	f47f a9cf 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b50e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b512:	ae38      	add	r6, sp, #224	; 0xe0
  40b514:	f7ff bad2 	b.w	40aabc <_svfprintf_r+0x440>
  40b518:	f005 f85c 	bl	4105d4 <__fpclassifyd>
  40b51c:	2800      	cmp	r0, #0
  40b51e:	f040 80c2 	bne.w	40b6a6 <_svfprintf_r+0x102a>
  40b522:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40b524:	4f1c      	ldr	r7, [pc, #112]	; (40b598 <_svfprintf_r+0xf1c>)
  40b526:	4b1d      	ldr	r3, [pc, #116]	; (40b59c <_svfprintf_r+0xf20>)
  40b528:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40b52c:	900a      	str	r0, [sp, #40]	; 0x28
  40b52e:	f04f 0c03 	mov.w	ip, #3
  40b532:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40b536:	9409      	str	r4, [sp, #36]	; 0x24
  40b538:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40b53c:	9014      	str	r0, [sp, #80]	; 0x50
  40b53e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40b542:	bfd8      	it	le
  40b544:	461f      	movle	r7, r3
  40b546:	4664      	mov	r4, ip
  40b548:	f7ff ba2f 	b.w	40a9aa <_svfprintf_r+0x32e>
  40b54c:	e9d3 4500 	ldrd	r4, r5, [r3]
  40b550:	3308      	adds	r3, #8
  40b552:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40b556:	9310      	str	r3, [sp, #64]	; 0x40
  40b558:	e476      	b.n	40ae48 <_svfprintf_r+0x7cc>
  40b55a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40b55e:	f01c 0f10 	tst.w	ip, #16
  40b562:	f000 8155 	beq.w	40b810 <_svfprintf_r+0x1194>
  40b566:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40b568:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40b56a:	6823      	ldr	r3, [r4, #0]
  40b56c:	3404      	adds	r4, #4
  40b56e:	9410      	str	r4, [sp, #64]	; 0x40
  40b570:	601d      	str	r5, [r3, #0]
  40b572:	f7ff b8a9 	b.w	40a6c8 <_svfprintf_r+0x4c>
  40b576:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40b578:	0664      	lsls	r4, r4, #25
  40b57a:	f140 8142 	bpl.w	40b802 <_svfprintf_r+0x1186>
  40b57e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40b582:	f8bc 4000 	ldrh.w	r4, [ip]
  40b586:	f10c 0c04 	add.w	ip, ip, #4
  40b58a:	2500      	movs	r5, #0
  40b58c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40b590:	f7ff b9ca 	b.w	40a928 <_svfprintf_r+0x2ac>
  40b594:	004133d0 	.word	0x004133d0
  40b598:	004133ec 	.word	0x004133ec
  40b59c:	004133e8 	.word	0x004133e8
  40b5a0:	462c      	mov	r4, r5
  40b5a2:	463d      	mov	r5, r7
  40b5a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b5a6:	4694      	mov	ip, r2
  40b5a8:	3301      	adds	r3, #1
  40b5aa:	44a4      	add	ip, r4
  40b5ac:	2b07      	cmp	r3, #7
  40b5ae:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b5b2:	932c      	str	r3, [sp, #176]	; 0xb0
  40b5b4:	6035      	str	r5, [r6, #0]
  40b5b6:	6074      	str	r4, [r6, #4]
  40b5b8:	f73f af14 	bgt.w	40b3e4 <_svfprintf_r+0xd68>
  40b5bc:	3608      	adds	r6, #8
  40b5be:	e71c      	b.n	40b3fa <_svfprintf_r+0xd7e>
  40b5c0:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b5c2:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b5c4:	aa2b      	add	r2, sp, #172	; 0xac
  40b5c6:	f006 faeb 	bl	411ba0 <__ssprint_r>
  40b5ca:	2800      	cmp	r0, #0
  40b5cc:	f47f a96e 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b5d0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b5d4:	ae38      	add	r6, sp, #224	; 0xe0
  40b5d6:	e4fd      	b.n	40afd4 <_svfprintf_r+0x958>
  40b5d8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40b5da:	49b7      	ldr	r1, [pc, #732]	; (40b8b8 <_svfprintf_r+0x123c>)
  40b5dc:	6031      	str	r1, [r6, #0]
  40b5de:	3201      	adds	r2, #1
  40b5e0:	f10c 0c01 	add.w	ip, ip, #1
  40b5e4:	2101      	movs	r1, #1
  40b5e6:	2a07      	cmp	r2, #7
  40b5e8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b5ec:	922c      	str	r2, [sp, #176]	; 0xb0
  40b5ee:	6071      	str	r1, [r6, #4]
  40b5f0:	f300 80f7 	bgt.w	40b7e2 <_svfprintf_r+0x1166>
  40b5f4:	3608      	adds	r6, #8
  40b5f6:	461c      	mov	r4, r3
  40b5f8:	b92c      	cbnz	r4, 40b606 <_svfprintf_r+0xf8a>
  40b5fa:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40b5fc:	b91d      	cbnz	r5, 40b606 <_svfprintf_r+0xf8a>
  40b5fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40b600:	07e8      	lsls	r0, r5, #31
  40b602:	f57f aaad 	bpl.w	40ab60 <_svfprintf_r+0x4e4>
  40b606:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b608:	9918      	ldr	r1, [sp, #96]	; 0x60
  40b60a:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40b60c:	6035      	str	r5, [r6, #0]
  40b60e:	3301      	adds	r3, #1
  40b610:	4461      	add	r1, ip
  40b612:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40b614:	912d      	str	r1, [sp, #180]	; 0xb4
  40b616:	2b07      	cmp	r3, #7
  40b618:	6075      	str	r5, [r6, #4]
  40b61a:	932c      	str	r3, [sp, #176]	; 0xb0
  40b61c:	f300 81de 	bgt.w	40b9dc <_svfprintf_r+0x1360>
  40b620:	f106 0208 	add.w	r2, r6, #8
  40b624:	4264      	negs	r4, r4
  40b626:	2c00      	cmp	r4, #0
  40b628:	f340 810b 	ble.w	40b842 <_svfprintf_r+0x11c6>
  40b62c:	2c10      	cmp	r4, #16
  40b62e:	4da3      	ldr	r5, [pc, #652]	; (40b8bc <_svfprintf_r+0x1240>)
  40b630:	f340 8148 	ble.w	40b8c4 <_svfprintf_r+0x1248>
  40b634:	46a3      	mov	fp, r4
  40b636:	2610      	movs	r6, #16
  40b638:	460c      	mov	r4, r1
  40b63a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40b63e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40b642:	e006      	b.n	40b652 <_svfprintf_r+0xfd6>
  40b644:	3208      	adds	r2, #8
  40b646:	f1ab 0b10 	sub.w	fp, fp, #16
  40b64a:	f1bb 0f10 	cmp.w	fp, #16
  40b64e:	f340 8137 	ble.w	40b8c0 <_svfprintf_r+0x1244>
  40b652:	3301      	adds	r3, #1
  40b654:	3410      	adds	r4, #16
  40b656:	2b07      	cmp	r3, #7
  40b658:	942d      	str	r4, [sp, #180]	; 0xb4
  40b65a:	932c      	str	r3, [sp, #176]	; 0xb0
  40b65c:	e882 0060 	stmia.w	r2, {r5, r6}
  40b660:	ddf0      	ble.n	40b644 <_svfprintf_r+0xfc8>
  40b662:	4640      	mov	r0, r8
  40b664:	4651      	mov	r1, sl
  40b666:	aa2b      	add	r2, sp, #172	; 0xac
  40b668:	f006 fa9a 	bl	411ba0 <__ssprint_r>
  40b66c:	2800      	cmp	r0, #0
  40b66e:	f47f a91d 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b672:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
  40b674:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b676:	aa38      	add	r2, sp, #224	; 0xe0
  40b678:	e7e5      	b.n	40b646 <_svfprintf_r+0xfca>
  40b67a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40b67c:	f893 8001 	ldrb.w	r8, [r3, #1]
  40b680:	f044 0420 	orr.w	r4, r4, #32
  40b684:	f109 0901 	add.w	r9, r9, #1
  40b688:	9409      	str	r4, [sp, #36]	; 0x24
  40b68a:	f7ff b853 	b.w	40a734 <_svfprintf_r+0xb8>
  40b68e:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b690:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b692:	aa2b      	add	r2, sp, #172	; 0xac
  40b694:	f006 fa84 	bl	411ba0 <__ssprint_r>
  40b698:	2800      	cmp	r0, #0
  40b69a:	f47f a907 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b69e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b6a2:	ae38      	add	r6, sp, #224	; 0xe0
  40b6a4:	e4ac      	b.n	40b000 <_svfprintf_r+0x984>
  40b6a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40b6a8:	3501      	adds	r5, #1
  40b6aa:	f028 0a20 	bic.w	sl, r8, #32
  40b6ae:	f000 80a5 	beq.w	40b7fc <_svfprintf_r+0x1180>
  40b6b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40b6b6:	d104      	bne.n	40b6c2 <_svfprintf_r+0x1046>
  40b6b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40b6ba:	2d00      	cmp	r5, #0
  40b6bc:	bf08      	it	eq
  40b6be:	2501      	moveq	r5, #1
  40b6c0:	950a      	str	r5, [sp, #40]	; 0x28
  40b6c2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40b6c6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40b6ca:	2b00      	cmp	r3, #0
  40b6cc:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
  40b6d0:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  40b6d4:	f2c0 819c 	blt.w	40ba10 <_svfprintf_r+0x1394>
  40b6d8:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  40b6dc:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  40b6e0:	f04f 0b00 	mov.w	fp, #0
  40b6e4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40b6e8:	f000 819b 	beq.w	40ba22 <_svfprintf_r+0x13a6>
  40b6ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
  40b6f0:	f000 81a9 	beq.w	40ba46 <_svfprintf_r+0x13ca>
  40b6f4:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  40b6f8:	bf0a      	itet	eq
  40b6fa:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
  40b6fc:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40b6fe:	1c65      	addeq	r5, r4, #1
  40b700:	2002      	movs	r0, #2
  40b702:	a925      	add	r1, sp, #148	; 0x94
  40b704:	aa26      	add	r2, sp, #152	; 0x98
  40b706:	ab29      	add	r3, sp, #164	; 0xa4
  40b708:	e88d 0021 	stmia.w	sp, {r0, r5}
  40b70c:	9203      	str	r2, [sp, #12]
  40b70e:	9304      	str	r3, [sp, #16]
  40b710:	9102      	str	r1, [sp, #8]
  40b712:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b714:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  40b718:	f002 f93e 	bl	40d998 <_dtoa_r>
  40b71c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  40b720:	4607      	mov	r7, r0
  40b722:	d002      	beq.n	40b72a <_svfprintf_r+0x10ae>
  40b724:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40b728:	d105      	bne.n	40b736 <_svfprintf_r+0x10ba>
  40b72a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40b72e:	f01c 0f01 	tst.w	ip, #1
  40b732:	f000 819c 	beq.w	40ba6e <_svfprintf_r+0x13f2>
  40b736:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  40b73a:	eb07 0405 	add.w	r4, r7, r5
  40b73e:	f000 811c 	beq.w	40b97a <_svfprintf_r+0x12fe>
  40b742:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  40b746:	2200      	movs	r2, #0
  40b748:	2300      	movs	r3, #0
  40b74a:	f007 fcd1 	bl	4130f0 <__aeabi_dcmpeq>
  40b74e:	2800      	cmp	r0, #0
  40b750:	f040 8105 	bne.w	40b95e <_svfprintf_r+0x12e2>
  40b754:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40b756:	429c      	cmp	r4, r3
  40b758:	d906      	bls.n	40b768 <_svfprintf_r+0x10ec>
  40b75a:	2130      	movs	r1, #48	; 0x30
  40b75c:	1c5a      	adds	r2, r3, #1
  40b75e:	9229      	str	r2, [sp, #164]	; 0xa4
  40b760:	7019      	strb	r1, [r3, #0]
  40b762:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40b764:	429c      	cmp	r4, r3
  40b766:	d8f9      	bhi.n	40b75c <_svfprintf_r+0x10e0>
  40b768:	1bdb      	subs	r3, r3, r7
  40b76a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40b76e:	9311      	str	r3, [sp, #68]	; 0x44
  40b770:	f000 80ed 	beq.w	40b94e <_svfprintf_r+0x12d2>
  40b774:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40b778:	f340 81f2 	ble.w	40bb60 <_svfprintf_r+0x14e4>
  40b77c:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40b780:	f000 8168 	beq.w	40ba54 <_svfprintf_r+0x13d8>
  40b784:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40b786:	9414      	str	r4, [sp, #80]	; 0x50
  40b788:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40b78a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40b78c:	42ac      	cmp	r4, r5
  40b78e:	f300 8132 	bgt.w	40b9f6 <_svfprintf_r+0x137a>
  40b792:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40b796:	f01c 0f01 	tst.w	ip, #1
  40b79a:	f040 81ad 	bne.w	40baf8 <_svfprintf_r+0x147c>
  40b79e:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  40b7a2:	462c      	mov	r4, r5
  40b7a4:	f04f 0867 	mov.w	r8, #103	; 0x67
  40b7a8:	f1bb 0f00 	cmp.w	fp, #0
  40b7ac:	f040 80b2 	bne.w	40b914 <_svfprintf_r+0x1298>
  40b7b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40b7b2:	930b      	str	r3, [sp, #44]	; 0x2c
  40b7b4:	9509      	str	r5, [sp, #36]	; 0x24
  40b7b6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  40b7ba:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40b7be:	f7ff b8f4 	b.w	40a9aa <_svfprintf_r+0x32e>
  40b7c2:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b7c4:	2140      	movs	r1, #64	; 0x40
  40b7c6:	f003 fd33 	bl	40f230 <_malloc_r>
  40b7ca:	6020      	str	r0, [r4, #0]
  40b7cc:	6120      	str	r0, [r4, #16]
  40b7ce:	2800      	cmp	r0, #0
  40b7d0:	f000 81bf 	beq.w	40bb52 <_svfprintf_r+0x14d6>
  40b7d4:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  40b7d8:	2340      	movs	r3, #64	; 0x40
  40b7da:	f8cc 3014 	str.w	r3, [ip, #20]
  40b7de:	f7fe bf63 	b.w	40a6a8 <_svfprintf_r+0x2c>
  40b7e2:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b7e4:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b7e6:	aa2b      	add	r2, sp, #172	; 0xac
  40b7e8:	f006 f9da 	bl	411ba0 <__ssprint_r>
  40b7ec:	2800      	cmp	r0, #0
  40b7ee:	f47f a85d 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b7f2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40b7f4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b7f8:	ae38      	add	r6, sp, #224	; 0xe0
  40b7fa:	e6fd      	b.n	40b5f8 <_svfprintf_r+0xf7c>
  40b7fc:	2406      	movs	r4, #6
  40b7fe:	940a      	str	r4, [sp, #40]	; 0x28
  40b800:	e75f      	b.n	40b6c2 <_svfprintf_r+0x1046>
  40b802:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40b804:	682c      	ldr	r4, [r5, #0]
  40b806:	3504      	adds	r5, #4
  40b808:	9510      	str	r5, [sp, #64]	; 0x40
  40b80a:	2500      	movs	r5, #0
  40b80c:	f7ff b88c 	b.w	40a928 <_svfprintf_r+0x2ac>
  40b810:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40b814:	f01c 0f40 	tst.w	ip, #64	; 0x40
  40b818:	f000 8087 	beq.w	40b92a <_svfprintf_r+0x12ae>
  40b81c:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40b81e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40b820:	6823      	ldr	r3, [r4, #0]
  40b822:	3404      	adds	r4, #4
  40b824:	9410      	str	r4, [sp, #64]	; 0x40
  40b826:	801d      	strh	r5, [r3, #0]
  40b828:	f7fe bf4e 	b.w	40a6c8 <_svfprintf_r+0x4c>
  40b82c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b82e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b830:	aa2b      	add	r2, sp, #172	; 0xac
  40b832:	f006 f9b5 	bl	411ba0 <__ssprint_r>
  40b836:	2800      	cmp	r0, #0
  40b838:	f47f a838 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b83c:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40b83e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b840:	aa38      	add	r2, sp, #224	; 0xe0
  40b842:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  40b846:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40b848:	6017      	str	r7, [r2, #0]
  40b84a:	3301      	adds	r3, #1
  40b84c:	448c      	add	ip, r1
  40b84e:	2b07      	cmp	r3, #7
  40b850:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b854:	932c      	str	r3, [sp, #176]	; 0xb0
  40b856:	6054      	str	r4, [r2, #4]
  40b858:	f73f ac92 	bgt.w	40b180 <_svfprintf_r+0xb04>
  40b85c:	f102 0608 	add.w	r6, r2, #8
  40b860:	f7ff b97e 	b.w	40ab60 <_svfprintf_r+0x4e4>
  40b864:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40b868:	f7fe fe4c 	bl	40a504 <strlen>
  40b86c:	9510      	str	r5, [sp, #64]	; 0x40
  40b86e:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
  40b872:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40b874:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40b878:	4604      	mov	r4, r0
  40b87a:	9514      	str	r5, [sp, #80]	; 0x50
  40b87c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40b880:	f7ff b893 	b.w	40a9aa <_svfprintf_r+0x32e>
  40b884:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b886:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b888:	aa2b      	add	r2, sp, #172	; 0xac
  40b88a:	f006 f989 	bl	411ba0 <__ssprint_r>
  40b88e:	2800      	cmp	r0, #0
  40b890:	f47f a80c 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b894:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b898:	ae38      	add	r6, sp, #224	; 0xe0
  40b89a:	e4cc      	b.n	40b236 <_svfprintf_r+0xbba>
  40b89c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b89e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b8a0:	aa2b      	add	r2, sp, #172	; 0xac
  40b8a2:	f006 f97d 	bl	411ba0 <__ssprint_r>
  40b8a6:	2800      	cmp	r0, #0
  40b8a8:	f47f a800 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b8ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40b8ae:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b8b2:	ae38      	add	r6, sp, #224	; 0xe0
  40b8b4:	e5aa      	b.n	40b40c <_svfprintf_r+0xd90>
  40b8b6:	bf00      	nop
  40b8b8:	00413420 	.word	0x00413420
  40b8bc:	004133d0 	.word	0x004133d0
  40b8c0:	4621      	mov	r1, r4
  40b8c2:	465c      	mov	r4, fp
  40b8c4:	3301      	adds	r3, #1
  40b8c6:	4421      	add	r1, r4
  40b8c8:	2b07      	cmp	r3, #7
  40b8ca:	912d      	str	r1, [sp, #180]	; 0xb4
  40b8cc:	932c      	str	r3, [sp, #176]	; 0xb0
  40b8ce:	6015      	str	r5, [r2, #0]
  40b8d0:	6054      	str	r4, [r2, #4]
  40b8d2:	dcab      	bgt.n	40b82c <_svfprintf_r+0x11b0>
  40b8d4:	3208      	adds	r2, #8
  40b8d6:	e7b4      	b.n	40b842 <_svfprintf_r+0x11c6>
  40b8d8:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b8da:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b8dc:	aa2b      	add	r2, sp, #172	; 0xac
  40b8de:	f006 f95f 	bl	411ba0 <__ssprint_r>
  40b8e2:	2800      	cmp	r0, #0
  40b8e4:	f47e afe2 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b8e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40b8ea:	9911      	ldr	r1, [sp, #68]	; 0x44
  40b8ec:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b8f0:	1b0c      	subs	r4, r1, r4
  40b8f2:	ae38      	add	r6, sp, #224	; 0xe0
  40b8f4:	e59f      	b.n	40b436 <_svfprintf_r+0xdba>
  40b8f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40b8f8:	9714      	str	r7, [sp, #80]	; 0x50
  40b8fa:	2c06      	cmp	r4, #6
  40b8fc:	bf28      	it	cs
  40b8fe:	2406      	movcs	r4, #6
  40b900:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40b904:	46ba      	mov	sl, r7
  40b906:	970a      	str	r7, [sp, #40]	; 0x28
  40b908:	9510      	str	r5, [sp, #64]	; 0x40
  40b90a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40b90e:	4f97      	ldr	r7, [pc, #604]	; (40bb6c <_svfprintf_r+0x14f0>)
  40b910:	f7ff b84b 	b.w	40a9aa <_svfprintf_r+0x32e>
  40b914:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40b916:	9509      	str	r5, [sp, #36]	; 0x24
  40b918:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40b91c:	2500      	movs	r5, #0
  40b91e:	930b      	str	r3, [sp, #44]	; 0x2c
  40b920:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40b924:	950a      	str	r5, [sp, #40]	; 0x28
  40b926:	f7ff b843 	b.w	40a9b0 <_svfprintf_r+0x334>
  40b92a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40b92e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40b930:	f8dc 3000 	ldr.w	r3, [ip]
  40b934:	f10c 0c04 	add.w	ip, ip, #4
  40b938:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40b93c:	601c      	str	r4, [r3, #0]
  40b93e:	f7fe bec3 	b.w	40a6c8 <_svfprintf_r+0x4c>
  40b942:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40b946:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40b94a:	f7ff ba8f 	b.w	40ae6c <_svfprintf_r+0x7f0>
  40b94e:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40b950:	1cdc      	adds	r4, r3, #3
  40b952:	db19      	blt.n	40b988 <_svfprintf_r+0x130c>
  40b954:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40b956:	429c      	cmp	r4, r3
  40b958:	db16      	blt.n	40b988 <_svfprintf_r+0x130c>
  40b95a:	9314      	str	r3, [sp, #80]	; 0x50
  40b95c:	e714      	b.n	40b788 <_svfprintf_r+0x110c>
  40b95e:	4623      	mov	r3, r4
  40b960:	e702      	b.n	40b768 <_svfprintf_r+0x10ec>
  40b962:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40b966:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40b96a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40b96c:	9510      	str	r5, [sp, #64]	; 0x40
  40b96e:	900a      	str	r0, [sp, #40]	; 0x28
  40b970:	9014      	str	r0, [sp, #80]	; 0x50
  40b972:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40b976:	f7ff b818 	b.w	40a9aa <_svfprintf_r+0x32e>
  40b97a:	783b      	ldrb	r3, [r7, #0]
  40b97c:	2b30      	cmp	r3, #48	; 0x30
  40b97e:	f000 80ad 	beq.w	40badc <_svfprintf_r+0x1460>
  40b982:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40b984:	442c      	add	r4, r5
  40b986:	e6dc      	b.n	40b742 <_svfprintf_r+0x10c6>
  40b988:	f1a8 0802 	sub.w	r8, r8, #2
  40b98c:	3b01      	subs	r3, #1
  40b98e:	2b00      	cmp	r3, #0
  40b990:	9325      	str	r3, [sp, #148]	; 0x94
  40b992:	bfba      	itte	lt
  40b994:	425b      	neglt	r3, r3
  40b996:	222d      	movlt	r2, #45	; 0x2d
  40b998:	222b      	movge	r2, #43	; 0x2b
  40b99a:	2b09      	cmp	r3, #9
  40b99c:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
  40b9a0:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  40b9a4:	dc65      	bgt.n	40ba72 <_svfprintf_r+0x13f6>
  40b9a6:	3330      	adds	r3, #48	; 0x30
  40b9a8:	2230      	movs	r2, #48	; 0x30
  40b9aa:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  40b9ae:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  40b9b2:	ab28      	add	r3, sp, #160	; 0xa0
  40b9b4:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40b9b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40b9b8:	aa27      	add	r2, sp, #156	; 0x9c
  40b9ba:	1a9a      	subs	r2, r3, r2
  40b9bc:	2d01      	cmp	r5, #1
  40b9be:	9219      	str	r2, [sp, #100]	; 0x64
  40b9c0:	4414      	add	r4, r2
  40b9c2:	f340 80b7 	ble.w	40bb34 <_svfprintf_r+0x14b8>
  40b9c6:	3401      	adds	r4, #1
  40b9c8:	2500      	movs	r5, #0
  40b9ca:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40b9ce:	9514      	str	r5, [sp, #80]	; 0x50
  40b9d0:	e6ea      	b.n	40b7a8 <_svfprintf_r+0x112c>
  40b9d2:	2400      	movs	r4, #0
  40b9d4:	4681      	mov	r9, r0
  40b9d6:	940a      	str	r4, [sp, #40]	; 0x28
  40b9d8:	f7fe beae 	b.w	40a738 <_svfprintf_r+0xbc>
  40b9dc:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b9de:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b9e0:	aa2b      	add	r2, sp, #172	; 0xac
  40b9e2:	f006 f8dd 	bl	411ba0 <__ssprint_r>
  40b9e6:	2800      	cmp	r0, #0
  40b9e8:	f47e af60 	bne.w	40a8ac <_svfprintf_r+0x230>
  40b9ec:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40b9ee:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40b9f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b9f2:	aa38      	add	r2, sp, #224	; 0xe0
  40b9f4:	e616      	b.n	40b624 <_svfprintf_r+0xfa8>
  40b9f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40b9f8:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40b9fa:	2c00      	cmp	r4, #0
  40b9fc:	bfd4      	ite	le
  40b9fe:	f1c4 0402 	rsble	r4, r4, #2
  40ba02:	2401      	movgt	r4, #1
  40ba04:	442c      	add	r4, r5
  40ba06:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40ba0a:	f04f 0867 	mov.w	r8, #103	; 0x67
  40ba0e:	e6cb      	b.n	40b7a8 <_svfprintf_r+0x112c>
  40ba10:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40ba12:	9816      	ldr	r0, [sp, #88]	; 0x58
  40ba14:	9020      	str	r0, [sp, #128]	; 0x80
  40ba16:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40ba1a:	9121      	str	r1, [sp, #132]	; 0x84
  40ba1c:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  40ba20:	e660      	b.n	40b6e4 <_svfprintf_r+0x1068>
  40ba22:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40ba24:	9501      	str	r5, [sp, #4]
  40ba26:	2003      	movs	r0, #3
  40ba28:	a925      	add	r1, sp, #148	; 0x94
  40ba2a:	aa26      	add	r2, sp, #152	; 0x98
  40ba2c:	ab29      	add	r3, sp, #164	; 0xa4
  40ba2e:	9000      	str	r0, [sp, #0]
  40ba30:	9203      	str	r2, [sp, #12]
  40ba32:	9304      	str	r3, [sp, #16]
  40ba34:	9102      	str	r1, [sp, #8]
  40ba36:	980d      	ldr	r0, [sp, #52]	; 0x34
  40ba38:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  40ba3c:	f001 ffac 	bl	40d998 <_dtoa_r>
  40ba40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40ba42:	4607      	mov	r7, r0
  40ba44:	e677      	b.n	40b736 <_svfprintf_r+0x10ba>
  40ba46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40ba48:	9401      	str	r4, [sp, #4]
  40ba4a:	2003      	movs	r0, #3
  40ba4c:	a925      	add	r1, sp, #148	; 0x94
  40ba4e:	aa26      	add	r2, sp, #152	; 0x98
  40ba50:	ab29      	add	r3, sp, #164	; 0xa4
  40ba52:	e7ec      	b.n	40ba2e <_svfprintf_r+0x13b2>
  40ba54:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40ba56:	9514      	str	r5, [sp, #80]	; 0x50
  40ba58:	2d00      	cmp	r5, #0
  40ba5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40ba5c:	dd63      	ble.n	40bb26 <_svfprintf_r+0x14aa>
  40ba5e:	bbb4      	cbnz	r4, 40bace <_svfprintf_r+0x1452>
  40ba60:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ba62:	07e8      	lsls	r0, r5, #31
  40ba64:	d433      	bmi.n	40bace <_svfprintf_r+0x1452>
  40ba66:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40ba68:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40ba6c:	e69c      	b.n	40b7a8 <_svfprintf_r+0x112c>
  40ba6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40ba70:	e67a      	b.n	40b768 <_svfprintf_r+0x10ec>
  40ba72:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
  40ba76:	4d3e      	ldr	r5, [pc, #248]	; (40bb70 <_svfprintf_r+0x14f4>)
  40ba78:	17da      	asrs	r2, r3, #31
  40ba7a:	fb85 5103 	smull	r5, r1, r5, r3
  40ba7e:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
  40ba82:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  40ba86:	4602      	mov	r2, r0
  40ba88:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  40ba8c:	f103 0030 	add.w	r0, r3, #48	; 0x30
  40ba90:	2909      	cmp	r1, #9
  40ba92:	7010      	strb	r0, [r2, #0]
  40ba94:	460b      	mov	r3, r1
  40ba96:	f102 30ff 	add.w	r0, r2, #4294967295
  40ba9a:	dcec      	bgt.n	40ba76 <_svfprintf_r+0x13fa>
  40ba9c:	f101 0330 	add.w	r3, r1, #48	; 0x30
  40baa0:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
  40baa4:	b2d9      	uxtb	r1, r3
  40baa6:	4284      	cmp	r4, r0
  40baa8:	f802 1c01 	strb.w	r1, [r2, #-1]
  40baac:	d95a      	bls.n	40bb64 <_svfprintf_r+0x14e8>
  40baae:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
  40bab2:	4613      	mov	r3, r2
  40bab4:	e001      	b.n	40baba <_svfprintf_r+0x143e>
  40bab6:	f813 1b01 	ldrb.w	r1, [r3], #1
  40baba:	42a3      	cmp	r3, r4
  40babc:	f800 1f01 	strb.w	r1, [r0, #1]!
  40bac0:	d1f9      	bne.n	40bab6 <_svfprintf_r+0x143a>
  40bac2:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
  40bac6:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
  40baca:	3bf6      	subs	r3, #246	; 0xf6
  40bacc:	e772      	b.n	40b9b4 <_svfprintf_r+0x1338>
  40bace:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40bad0:	1c6c      	adds	r4, r5, #1
  40bad2:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40bad4:	442c      	add	r4, r5
  40bad6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40bada:	e665      	b.n	40b7a8 <_svfprintf_r+0x112c>
  40badc:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  40bae0:	2200      	movs	r2, #0
  40bae2:	2300      	movs	r3, #0
  40bae4:	f007 fb04 	bl	4130f0 <__aeabi_dcmpeq>
  40bae8:	2800      	cmp	r0, #0
  40baea:	f47f af4a 	bne.w	40b982 <_svfprintf_r+0x1306>
  40baee:	f1c5 0501 	rsb	r5, r5, #1
  40baf2:	9525      	str	r5, [sp, #148]	; 0x94
  40baf4:	442c      	add	r4, r5
  40baf6:	e624      	b.n	40b742 <_svfprintf_r+0x10c6>
  40baf8:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40bafa:	1c6c      	adds	r4, r5, #1
  40bafc:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40bb00:	f04f 0867 	mov.w	r8, #103	; 0x67
  40bb04:	e650      	b.n	40b7a8 <_svfprintf_r+0x112c>
  40bb06:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40bb08:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40bb0c:	682d      	ldr	r5, [r5, #0]
  40bb0e:	f899 8001 	ldrb.w	r8, [r9, #1]
  40bb12:	950a      	str	r5, [sp, #40]	; 0x28
  40bb14:	f10c 0304 	add.w	r3, ip, #4
  40bb18:	2d00      	cmp	r5, #0
  40bb1a:	9310      	str	r3, [sp, #64]	; 0x40
  40bb1c:	4681      	mov	r9, r0
  40bb1e:	f6be ae09 	bge.w	40a734 <_svfprintf_r+0xb8>
  40bb22:	f7fe be04 	b.w	40a72e <_svfprintf_r+0xb2>
  40bb26:	b97c      	cbnz	r4, 40bb48 <_svfprintf_r+0x14cc>
  40bb28:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40bb2a:	07e9      	lsls	r1, r5, #31
  40bb2c:	d40c      	bmi.n	40bb48 <_svfprintf_r+0x14cc>
  40bb2e:	2301      	movs	r3, #1
  40bb30:	461c      	mov	r4, r3
  40bb32:	e639      	b.n	40b7a8 <_svfprintf_r+0x112c>
  40bb34:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40bb38:	f01c 0301 	ands.w	r3, ip, #1
  40bb3c:	f47f af43 	bne.w	40b9c6 <_svfprintf_r+0x134a>
  40bb40:	9314      	str	r3, [sp, #80]	; 0x50
  40bb42:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40bb46:	e62f      	b.n	40b7a8 <_svfprintf_r+0x112c>
  40bb48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40bb4a:	1cac      	adds	r4, r5, #2
  40bb4c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40bb50:	e62a      	b.n	40b7a8 <_svfprintf_r+0x112c>
  40bb52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  40bb54:	230c      	movs	r3, #12
  40bb56:	602b      	str	r3, [r5, #0]
  40bb58:	f04f 30ff 	mov.w	r0, #4294967295
  40bb5c:	f7fe beae 	b.w	40a8bc <_svfprintf_r+0x240>
  40bb60:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40bb62:	e713      	b.n	40b98c <_svfprintf_r+0x1310>
  40bb64:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
  40bb68:	e724      	b.n	40b9b4 <_svfprintf_r+0x1338>
  40bb6a:	bf00      	nop
  40bb6c:	00413418 	.word	0x00413418
  40bb70:	66666667 	.word	0x66666667

0040bb74 <__ssvfscanf_r>:
  40bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bb78:	460d      	mov	r5, r1
  40bb7a:	8989      	ldrh	r1, [r1, #12]
  40bb7c:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
  40bb80:	048c      	lsls	r4, r1, #18
  40bb82:	900e      	str	r0, [sp, #56]	; 0x38
  40bb84:	9306      	str	r3, [sp, #24]
  40bb86:	d406      	bmi.n	40bb96 <__ssvfscanf_r+0x22>
  40bb88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40bb8a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  40bb8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40bb92:	81a9      	strh	r1, [r5, #12]
  40bb94:	666b      	str	r3, [r5, #100]	; 0x64
  40bb96:	4692      	mov	sl, r2
  40bb98:	2400      	movs	r4, #0
  40bb9a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40bb9e:	9409      	str	r4, [sp, #36]	; 0x24
  40bba0:	940c      	str	r4, [sp, #48]	; 0x30
  40bba2:	46a1      	mov	r9, r4
  40bba4:	940b      	str	r4, [sp, #44]	; 0x2c
  40bba6:	f8df 83e4 	ldr.w	r8, [pc, #996]	; 40bf8c <__ssvfscanf_r+0x418>
  40bbaa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40bbac:	9313      	str	r3, [sp, #76]	; 0x4c
  40bbae:	b343      	cbz	r3, 40bc02 <__ssvfscanf_r+0x8e>
  40bbb0:	f8d8 1000 	ldr.w	r1, [r8]
  40bbb4:	18c8      	adds	r0, r1, r3
  40bbb6:	7840      	ldrb	r0, [r0, #1]
  40bbb8:	f000 0008 	and.w	r0, r0, #8
  40bbbc:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  40bbc0:	b320      	cbz	r0, 40bc0c <__ssvfscanf_r+0x98>
  40bbc2:	686b      	ldr	r3, [r5, #4]
  40bbc4:	e00e      	b.n	40bbe4 <__ssvfscanf_r+0x70>
  40bbc6:	682b      	ldr	r3, [r5, #0]
  40bbc8:	f8d8 2000 	ldr.w	r2, [r8]
  40bbcc:	7819      	ldrb	r1, [r3, #0]
  40bbce:	440a      	add	r2, r1
  40bbd0:	3301      	adds	r3, #1
  40bbd2:	7852      	ldrb	r2, [r2, #1]
  40bbd4:	0710      	lsls	r0, r2, #28
  40bbd6:	d50d      	bpl.n	40bbf4 <__ssvfscanf_r+0x80>
  40bbd8:	686a      	ldr	r2, [r5, #4]
  40bbda:	602b      	str	r3, [r5, #0]
  40bbdc:	1e53      	subs	r3, r2, #1
  40bbde:	f109 0901 	add.w	r9, r9, #1
  40bbe2:	606b      	str	r3, [r5, #4]
  40bbe4:	2b00      	cmp	r3, #0
  40bbe6:	dcee      	bgt.n	40bbc6 <__ssvfscanf_r+0x52>
  40bbe8:	4630      	mov	r0, r6
  40bbea:	4629      	mov	r1, r5
  40bbec:	f006 f898 	bl	411d20 <__ssrefill_r>
  40bbf0:	2800      	cmp	r0, #0
  40bbf2:	d0e8      	beq.n	40bbc6 <__ssvfscanf_r+0x52>
  40bbf4:	4652      	mov	r2, sl
  40bbf6:	4692      	mov	sl, r2
  40bbf8:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40bbfc:	9313      	str	r3, [sp, #76]	; 0x4c
  40bbfe:	2b00      	cmp	r3, #0
  40bc00:	d1d6      	bne.n	40bbb0 <__ssvfscanf_r+0x3c>
  40bc02:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40bc04:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40bc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bc0c:	2b25      	cmp	r3, #37	; 0x25
  40bc0e:	f040 8084 	bne.w	40bd1a <__ssvfscanf_r+0x1a6>
  40bc12:	7853      	ldrb	r3, [r2, #1]
  40bc14:	463c      	mov	r4, r7
  40bc16:	f10a 0201 	add.w	r2, sl, #1
  40bc1a:	2b78      	cmp	r3, #120	; 0x78
  40bc1c:	f200 82e5 	bhi.w	40c1ea <__ssvfscanf_r+0x676>
  40bc20:	e8df f013 	tbh	[pc, r3, lsl #1]
  40bc24:	02e3008f 	.word	0x02e3008f
  40bc28:	02e302e3 	.word	0x02e302e3
  40bc2c:	02e302e3 	.word	0x02e302e3
  40bc30:	02e302e3 	.word	0x02e302e3
  40bc34:	02e302e3 	.word	0x02e302e3
  40bc38:	02e302e3 	.word	0x02e302e3
  40bc3c:	02e302e3 	.word	0x02e302e3
  40bc40:	02e302e3 	.word	0x02e302e3
  40bc44:	02e302e3 	.word	0x02e302e3
  40bc48:	02e302e3 	.word	0x02e302e3
  40bc4c:	02e302e3 	.word	0x02e302e3
  40bc50:	02e302e3 	.word	0x02e302e3
  40bc54:	02e302e3 	.word	0x02e302e3
  40bc58:	02e302e3 	.word	0x02e302e3
  40bc5c:	02e302e3 	.word	0x02e302e3
  40bc60:	02e302e3 	.word	0x02e302e3
  40bc64:	02e302e3 	.word	0x02e302e3
  40bc68:	02e302e3 	.word	0x02e302e3
  40bc6c:	007902e3 	.word	0x007902e3
  40bc70:	02e302e3 	.word	0x02e302e3
  40bc74:	02e302e3 	.word	0x02e302e3
  40bc78:	02e30226 	.word	0x02e30226
  40bc7c:	02e302e3 	.word	0x02e302e3
  40bc80:	02e302e3 	.word	0x02e302e3
  40bc84:	024f024f 	.word	0x024f024f
  40bc88:	024f024f 	.word	0x024f024f
  40bc8c:	024f024f 	.word	0x024f024f
  40bc90:	024f024f 	.word	0x024f024f
  40bc94:	024f024f 	.word	0x024f024f
  40bc98:	02e302e3 	.word	0x02e302e3
  40bc9c:	02e302e3 	.word	0x02e302e3
  40bca0:	02e302e3 	.word	0x02e302e3
  40bca4:	02e302e3 	.word	0x02e302e3
  40bca8:	02e302e3 	.word	0x02e302e3
  40bcac:	0273022c 	.word	0x0273022c
  40bcb0:	027302e3 	.word	0x027302e3
  40bcb4:	02e302e3 	.word	0x02e302e3
  40bcb8:	02e302e3 	.word	0x02e302e3
  40bcbc:	02e3026d 	.word	0x02e3026d
  40bcc0:	026302e3 	.word	0x026302e3
  40bcc4:	02e302e3 	.word	0x02e302e3
  40bcc8:	02e302e3 	.word	0x02e302e3
  40bccc:	02e302e3 	.word	0x02e302e3
  40bcd0:	02e302e3 	.word	0x02e302e3
  40bcd4:	02e30259 	.word	0x02e30259
  40bcd8:	029302e3 	.word	0x029302e3
  40bcdc:	02e302e3 	.word	0x02e302e3
  40bce0:	02e302e3 	.word	0x02e302e3
  40bce4:	02e302e3 	.word	0x02e302e3
  40bce8:	028d02e3 	.word	0x028d02e3
  40bcec:	0273029e 	.word	0x0273029e
  40bcf0:	02730273 	.word	0x02730273
  40bcf4:	00950287 	.word	0x00950287
  40bcf8:	02e302e3 	.word	0x02e302e3
  40bcfc:	02e302b6 	.word	0x02e302b6
  40bd00:	02770279 	.word	0x02770279
  40bd04:	02e302ac 	.word	0x02e302ac
  40bd08:	02a802e3 	.word	0x02a802e3
  40bd0c:	02a002e3 	.word	0x02a002e3
  40bd10:	02e302e3 	.word	0x02e302e3
  40bd14:	0259      	.short	0x0259
  40bd16:	9207      	str	r2, [sp, #28]
  40bd18:	4692      	mov	sl, r2
  40bd1a:	686b      	ldr	r3, [r5, #4]
  40bd1c:	2b00      	cmp	r3, #0
  40bd1e:	f340 8557 	ble.w	40c7d0 <__ssvfscanf_r+0xc5c>
  40bd22:	682b      	ldr	r3, [r5, #0]
  40bd24:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
  40bd28:	7819      	ldrb	r1, [r3, #0]
  40bd2a:	4291      	cmp	r1, r2
  40bd2c:	f47f af69 	bne.w	40bc02 <__ssvfscanf_r+0x8e>
  40bd30:	686a      	ldr	r2, [r5, #4]
  40bd32:	3301      	adds	r3, #1
  40bd34:	3a01      	subs	r2, #1
  40bd36:	606a      	str	r2, [r5, #4]
  40bd38:	602b      	str	r3, [r5, #0]
  40bd3a:	f109 0901 	add.w	r9, r9, #1
  40bd3e:	4652      	mov	r2, sl
  40bd40:	e759      	b.n	40bbf6 <__ssvfscanf_r+0x82>
  40bd42:	f04f 30ff 	mov.w	r0, #4294967295
  40bd46:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40bd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bd4e:	9207      	str	r2, [sp, #28]
  40bd50:	2300      	movs	r3, #0
  40bd52:	4a8d      	ldr	r2, [pc, #564]	; (40bf88 <__ssvfscanf_r+0x414>)
  40bd54:	9209      	str	r2, [sp, #36]	; 0x24
  40bd56:	930c      	str	r3, [sp, #48]	; 0x30
  40bd58:	f04f 0a03 	mov.w	sl, #3
  40bd5c:	686b      	ldr	r3, [r5, #4]
  40bd5e:	2b00      	cmp	r3, #0
  40bd60:	f340 8199 	ble.w	40c096 <__ssvfscanf_r+0x522>
  40bd64:	0679      	lsls	r1, r7, #25
  40bd66:	d512      	bpl.n	40bd8e <__ssvfscanf_r+0x21a>
  40bd68:	f10a 3aff 	add.w	sl, sl, #4294967295
  40bd6c:	f1ba 0f03 	cmp.w	sl, #3
  40bd70:	f200 80b7 	bhi.w	40bee2 <__ssvfscanf_r+0x36e>
  40bd74:	e8df f01a 	tbh	[pc, sl, lsl #1]
  40bd78:	008e00da 	.word	0x008e00da
  40bd7c:	0244001e 	.word	0x0244001e
  40bd80:	4630      	mov	r0, r6
  40bd82:	4629      	mov	r1, r5
  40bd84:	f005 ffcc 	bl	411d20 <__ssrefill_r>
  40bd88:	2800      	cmp	r0, #0
  40bd8a:	f040 818b 	bne.w	40c0a4 <__ssvfscanf_r+0x530>
  40bd8e:	f8d8 1000 	ldr.w	r1, [r8]
  40bd92:	682b      	ldr	r3, [r5, #0]
  40bd94:	e000      	b.n	40bd98 <__ssvfscanf_r+0x224>
  40bd96:	602b      	str	r3, [r5, #0]
  40bd98:	781a      	ldrb	r2, [r3, #0]
  40bd9a:	440a      	add	r2, r1
  40bd9c:	3301      	adds	r3, #1
  40bd9e:	7852      	ldrb	r2, [r2, #1]
  40bda0:	0712      	lsls	r2, r2, #28
  40bda2:	d5e1      	bpl.n	40bd68 <__ssvfscanf_r+0x1f4>
  40bda4:	686a      	ldr	r2, [r5, #4]
  40bda6:	3a01      	subs	r2, #1
  40bda8:	2a00      	cmp	r2, #0
  40bdaa:	f109 0901 	add.w	r9, r9, #1
  40bdae:	606a      	str	r2, [r5, #4]
  40bdb0:	dcf1      	bgt.n	40bd96 <__ssvfscanf_r+0x222>
  40bdb2:	e7e5      	b.n	40bd80 <__ssvfscanf_r+0x20c>
  40bdb4:	1e63      	subs	r3, r4, #1
  40bdb6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  40bdba:	bf86      	itte	hi
  40bdbc:	f46f 71ae 	mvnhi.w	r1, #348	; 0x15c
  40bdc0:	1863      	addhi	r3, r4, r1
  40bdc2:	2300      	movls	r3, #0
  40bdc4:	f04f 0b00 	mov.w	fp, #0
  40bdc8:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40bdcc:	9308      	str	r3, [sp, #32]
  40bdce:	465b      	mov	r3, fp
  40bdd0:	46b3      	mov	fp, r6
  40bdd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40bdd4:	f8cd c014 	str.w	ip, [sp, #20]
  40bdd8:	46e2      	mov	sl, ip
  40bdda:	bf88      	it	hi
  40bddc:	f240 145d 	movwhi	r4, #349	; 0x15d
  40bde0:	f447 6758 	orr.w	r7, r7, #3456	; 0xd80
  40bde4:	46cc      	mov	ip, r9
  40bde6:	6828      	ldr	r0, [r5, #0]
  40bde8:	7801      	ldrb	r1, [r0, #0]
  40bdea:	f1a1 022b 	sub.w	r2, r1, #43	; 0x2b
  40bdee:	2a4d      	cmp	r2, #77	; 0x4d
  40bdf0:	f200 80e2 	bhi.w	40bfb8 <__ssvfscanf_r+0x444>
  40bdf4:	e8df f012 	tbh	[pc, r2, lsl #1]
  40bdf8:	00e00126 	.word	0x00e00126
  40bdfc:	00e00126 	.word	0x00e00126
  40be00:	00fd00e0 	.word	0x00fd00e0
  40be04:	00cc00cc 	.word	0x00cc00cc
  40be08:	00cc00cc 	.word	0x00cc00cc
  40be0c:	00cc00cc 	.word	0x00cc00cc
  40be10:	013600cc 	.word	0x013600cc
  40be14:	00e00136 	.word	0x00e00136
  40be18:	00e000e0 	.word	0x00e000e0
  40be1c:	00e000e0 	.word	0x00e000e0
  40be20:	00e000e0 	.word	0x00e000e0
  40be24:	01210121 	.word	0x01210121
  40be28:	01210121 	.word	0x01210121
  40be2c:	01210121 	.word	0x01210121
  40be30:	00e000e0 	.word	0x00e000e0
  40be34:	00e000e0 	.word	0x00e000e0
  40be38:	00e000e0 	.word	0x00e000e0
  40be3c:	00e000e0 	.word	0x00e000e0
  40be40:	00e000e0 	.word	0x00e000e0
  40be44:	00e000e0 	.word	0x00e000e0
  40be48:	00e000e0 	.word	0x00e000e0
  40be4c:	00e000e0 	.word	0x00e000e0
  40be50:	012b00e0 	.word	0x012b00e0
  40be54:	00e000e0 	.word	0x00e000e0
  40be58:	00e000e0 	.word	0x00e000e0
  40be5c:	00e000e0 	.word	0x00e000e0
  40be60:	00e000e0 	.word	0x00e000e0
  40be64:	01210121 	.word	0x01210121
  40be68:	01210121 	.word	0x01210121
  40be6c:	01210121 	.word	0x01210121
  40be70:	00e000e0 	.word	0x00e000e0
  40be74:	00e000e0 	.word	0x00e000e0
  40be78:	00e000e0 	.word	0x00e000e0
  40be7c:	00e000e0 	.word	0x00e000e0
  40be80:	00e000e0 	.word	0x00e000e0
  40be84:	00e000e0 	.word	0x00e000e0
  40be88:	00e000e0 	.word	0x00e000e0
  40be8c:	00e000e0 	.word	0x00e000e0
  40be90:	012b00e0 	.word	0x012b00e0
  40be94:	2c00      	cmp	r4, #0
  40be96:	bf08      	it	eq
  40be98:	f04f 34ff 	moveq.w	r4, #4294967295
  40be9c:	f017 0301 	ands.w	r3, r7, #1
  40bea0:	f040 817f 	bne.w	40c1a2 <__ssvfscanf_r+0x62e>
  40bea4:	06f9      	lsls	r1, r7, #27
  40bea6:	f140 8390 	bpl.w	40c5ca <__ssvfscanf_r+0xa56>
  40beaa:	461f      	mov	r7, r3
  40beac:	f8d8 1000 	ldr.w	r1, [r8]
  40beb0:	682b      	ldr	r3, [r5, #0]
  40beb2:	781a      	ldrb	r2, [r3, #0]
  40beb4:	440a      	add	r2, r1
  40beb6:	3301      	adds	r3, #1
  40beb8:	7852      	ldrb	r2, [r2, #1]
  40beba:	0712      	lsls	r2, r2, #28
  40bebc:	d431      	bmi.n	40bf22 <__ssvfscanf_r+0x3ae>
  40bebe:	686a      	ldr	r2, [r5, #4]
  40bec0:	602b      	str	r3, [r5, #0]
  40bec2:	3701      	adds	r7, #1
  40bec4:	3a01      	subs	r2, #1
  40bec6:	42bc      	cmp	r4, r7
  40bec8:	606a      	str	r2, [r5, #4]
  40beca:	d02a      	beq.n	40bf22 <__ssvfscanf_r+0x3ae>
  40becc:	2a00      	cmp	r2, #0
  40bece:	dcf0      	bgt.n	40beb2 <__ssvfscanf_r+0x33e>
  40bed0:	4630      	mov	r0, r6
  40bed2:	4629      	mov	r1, r5
  40bed4:	f005 ff24 	bl	411d20 <__ssrefill_r>
  40bed8:	bb18      	cbnz	r0, 40bf22 <__ssvfscanf_r+0x3ae>
  40beda:	f8d8 1000 	ldr.w	r1, [r8]
  40bede:	682b      	ldr	r3, [r5, #0]
  40bee0:	e7e7      	b.n	40beb2 <__ssvfscanf_r+0x33e>
  40bee2:	2c00      	cmp	r4, #0
  40bee4:	bf08      	it	eq
  40bee6:	2401      	moveq	r4, #1
  40bee8:	f017 0301 	ands.w	r3, r7, #1
  40beec:	f040 839f 	bne.w	40c62e <__ssvfscanf_r+0xaba>
  40bef0:	06f9      	lsls	r1, r7, #27
  40bef2:	f140 8454 	bpl.w	40c79e <__ssvfscanf_r+0xc2a>
  40bef6:	461f      	mov	r7, r3
  40bef8:	e008      	b.n	40bf0c <__ssvfscanf_r+0x398>
  40befa:	441a      	add	r2, r3
  40befc:	602a      	str	r2, [r5, #0]
  40befe:	441f      	add	r7, r3
  40bf00:	1ae4      	subs	r4, r4, r3
  40bf02:	f005 ff0d 	bl	411d20 <__ssrefill_r>
  40bf06:	2800      	cmp	r0, #0
  40bf08:	f040 8441 	bne.w	40c78e <__ssvfscanf_r+0xc1a>
  40bf0c:	686b      	ldr	r3, [r5, #4]
  40bf0e:	682a      	ldr	r2, [r5, #0]
  40bf10:	42a3      	cmp	r3, r4
  40bf12:	4630      	mov	r0, r6
  40bf14:	4629      	mov	r1, r5
  40bf16:	dbf0      	blt.n	40befa <__ssvfscanf_r+0x386>
  40bf18:	1b1b      	subs	r3, r3, r4
  40bf1a:	4422      	add	r2, r4
  40bf1c:	606b      	str	r3, [r5, #4]
  40bf1e:	4427      	add	r7, r4
  40bf20:	602a      	str	r2, [r5, #0]
  40bf22:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40bf26:	44b9      	add	r9, r7
  40bf28:	4652      	mov	r2, sl
  40bf2a:	e664      	b.n	40bbf6 <__ssvfscanf_r+0x82>
  40bf2c:	2c00      	cmp	r4, #0
  40bf2e:	bf08      	it	eq
  40bf30:	f04f 34ff 	moveq.w	r4, #4294967295
  40bf34:	06fa      	lsls	r2, r7, #27
  40bf36:	f140 8315 	bpl.w	40c564 <__ssvfscanf_r+0x9f0>
  40bf3a:	682b      	ldr	r3, [r5, #0]
  40bf3c:	2700      	movs	r7, #0
  40bf3e:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  40bf42:	781a      	ldrb	r2, [r3, #0]
  40bf44:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40bf48:	3301      	adds	r3, #1
  40bf4a:	b1aa      	cbz	r2, 40bf78 <__ssvfscanf_r+0x404>
  40bf4c:	686a      	ldr	r2, [r5, #4]
  40bf4e:	602b      	str	r3, [r5, #0]
  40bf50:	3701      	adds	r7, #1
  40bf52:	3a01      	subs	r2, #1
  40bf54:	42bc      	cmp	r4, r7
  40bf56:	606a      	str	r2, [r5, #4]
  40bf58:	d0e3      	beq.n	40bf22 <__ssvfscanf_r+0x3ae>
  40bf5a:	2a00      	cmp	r2, #0
  40bf5c:	dcf1      	bgt.n	40bf42 <__ssvfscanf_r+0x3ce>
  40bf5e:	4630      	mov	r0, r6
  40bf60:	4629      	mov	r1, r5
  40bf62:	f005 fedd 	bl	411d20 <__ssrefill_r>
  40bf66:	2800      	cmp	r0, #0
  40bf68:	d1db      	bne.n	40bf22 <__ssvfscanf_r+0x3ae>
  40bf6a:	682b      	ldr	r3, [r5, #0]
  40bf6c:	781a      	ldrb	r2, [r3, #0]
  40bf6e:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40bf72:	3301      	adds	r3, #1
  40bf74:	2a00      	cmp	r2, #0
  40bf76:	d1e9      	bne.n	40bf4c <__ssvfscanf_r+0x3d8>
  40bf78:	2f00      	cmp	r7, #0
  40bf7a:	f43f ae42 	beq.w	40bc02 <__ssvfscanf_r+0x8e>
  40bf7e:	44b9      	add	r9, r7
  40bf80:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40bf84:	e7d0      	b.n	40bf28 <__ssvfscanf_r+0x3b4>
  40bf86:	bf00      	nop
  40bf88:	00411641 	.word	0x00411641
  40bf8c:	20000644 	.word	0x20000644
  40bf90:	f8df 9364 	ldr.w	r9, [pc, #868]	; 40c2f8 <__ssvfscanf_r+0x784>
  40bf94:	f939 6016 	ldrsh.w	r6, [r9, r6, lsl #1]
  40bf98:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  40bf9c:	686a      	ldr	r2, [r5, #4]
  40bf9e:	f88a 1000 	strb.w	r1, [sl]
  40bfa2:	3a01      	subs	r2, #1
  40bfa4:	2a00      	cmp	r2, #0
  40bfa6:	f10a 0a01 	add.w	sl, sl, #1
  40bfaa:	606a      	str	r2, [r5, #4]
  40bfac:	dd38      	ble.n	40c020 <__ssvfscanf_r+0x4ac>
  40bfae:	3001      	adds	r0, #1
  40bfb0:	6028      	str	r0, [r5, #0]
  40bfb2:	3c01      	subs	r4, #1
  40bfb4:	f47f af17 	bne.w	40bde6 <__ssvfscanf_r+0x272>
  40bfb8:	05f9      	lsls	r1, r7, #23
  40bfba:	960c      	str	r6, [sp, #48]	; 0x30
  40bfbc:	46e1      	mov	r9, ip
  40bfbe:	465e      	mov	r6, fp
  40bfc0:	469b      	mov	fp, r3
  40bfc2:	d508      	bpl.n	40bfd6 <__ssvfscanf_r+0x462>
  40bfc4:	9c05      	ldr	r4, [sp, #20]
  40bfc6:	45a2      	cmp	sl, r4
  40bfc8:	f200 840a 	bhi.w	40c7e0 <__ssvfscanf_r+0xc6c>
  40bfcc:	f8dd c014 	ldr.w	ip, [sp, #20]
  40bfd0:	45e2      	cmp	sl, ip
  40bfd2:	f43f ae16 	beq.w	40bc02 <__ssvfscanf_r+0x8e>
  40bfd6:	f017 0410 	ands.w	r4, r7, #16
  40bfda:	f000 8372 	beq.w	40c6c2 <__ssvfscanf_r+0xb4e>
  40bfde:	f8dd c014 	ldr.w	ip, [sp, #20]
  40bfe2:	ebcc 0a0a 	rsb	sl, ip, sl
  40bfe6:	44d3      	add	fp, sl
  40bfe8:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40bfec:	44d9      	add	r9, fp
  40bfee:	4652      	mov	r2, sl
  40bff0:	e601      	b.n	40bbf6 <__ssvfscanf_r+0x82>
  40bff2:	053a      	lsls	r2, r7, #20
  40bff4:	d5d2      	bpl.n	40bf9c <__ssvfscanf_r+0x428>
  40bff6:	b916      	cbnz	r6, 40bffe <__ssvfscanf_r+0x48a>
  40bff8:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  40bffc:	2608      	movs	r6, #8
  40bffe:	057a      	lsls	r2, r7, #21
  40c000:	f100 837d 	bmi.w	40c6fe <__ssvfscanf_r+0xb8a>
  40c004:	9a08      	ldr	r2, [sp, #32]
  40c006:	f427 7760 	bic.w	r7, r7, #896	; 0x380
  40c00a:	b112      	cbz	r2, 40c012 <__ssvfscanf_r+0x49e>
  40c00c:	3a01      	subs	r2, #1
  40c00e:	9208      	str	r2, [sp, #32]
  40c010:	3401      	adds	r4, #1
  40c012:	686a      	ldr	r2, [r5, #4]
  40c014:	3a01      	subs	r2, #1
  40c016:	2a00      	cmp	r2, #0
  40c018:	f103 0301 	add.w	r3, r3, #1
  40c01c:	606a      	str	r2, [r5, #4]
  40c01e:	dcc6      	bgt.n	40bfae <__ssvfscanf_r+0x43a>
  40c020:	4658      	mov	r0, fp
  40c022:	4629      	mov	r1, r5
  40c024:	9303      	str	r3, [sp, #12]
  40c026:	f8cd c010 	str.w	ip, [sp, #16]
  40c02a:	f005 fe79 	bl	411d20 <__ssrefill_r>
  40c02e:	9b03      	ldr	r3, [sp, #12]
  40c030:	f8dd c010 	ldr.w	ip, [sp, #16]
  40c034:	2800      	cmp	r0, #0
  40c036:	d0bc      	beq.n	40bfb2 <__ssvfscanf_r+0x43e>
  40c038:	e7be      	b.n	40bfb8 <__ssvfscanf_r+0x444>
  40c03a:	2e0a      	cmp	r6, #10
  40c03c:	ddbc      	ble.n	40bfb8 <__ssvfscanf_r+0x444>
  40c03e:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  40c042:	e7ab      	b.n	40bf9c <__ssvfscanf_r+0x428>
  40c044:	063a      	lsls	r2, r7, #24
  40c046:	d5b7      	bpl.n	40bfb8 <__ssvfscanf_r+0x444>
  40c048:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40c04c:	e7a6      	b.n	40bf9c <__ssvfscanf_r+0x428>
  40c04e:	f407 62c0 	and.w	r2, r7, #1536	; 0x600
  40c052:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40c056:	d1af      	bne.n	40bfb8 <__ssvfscanf_r+0x444>
  40c058:	f427 7700 	bic.w	r7, r7, #512	; 0x200
  40c05c:	f447 67a0 	orr.w	r7, r7, #1280	; 0x500
  40c060:	2610      	movs	r6, #16
  40c062:	e79b      	b.n	40bf9c <__ssvfscanf_r+0x428>
  40c064:	4aa4      	ldr	r2, [pc, #656]	; (40c2f8 <__ssvfscanf_r+0x784>)
  40c066:	f932 6016 	ldrsh.w	r6, [r2, r6, lsl #1]
  40c06a:	2e08      	cmp	r6, #8
  40c06c:	dce7      	bgt.n	40c03e <__ssvfscanf_r+0x4ca>
  40c06e:	e7a3      	b.n	40bfb8 <__ssvfscanf_r+0x444>
  40c070:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40c074:	f047 0710 	orr.w	r7, r7, #16
  40c078:	4692      	mov	sl, r2
  40c07a:	e5cc      	b.n	40bc16 <__ssvfscanf_r+0xa2>
  40c07c:	9207      	str	r2, [sp, #28]
  40c07e:	f047 0701 	orr.w	r7, r7, #1
  40c082:	686b      	ldr	r3, [r5, #4]
  40c084:	489d      	ldr	r0, [pc, #628]	; (40c2fc <__ssvfscanf_r+0x788>)
  40c086:	9009      	str	r0, [sp, #36]	; 0x24
  40c088:	210a      	movs	r1, #10
  40c08a:	2b00      	cmp	r3, #0
  40c08c:	910c      	str	r1, [sp, #48]	; 0x30
  40c08e:	f04f 0a03 	mov.w	sl, #3
  40c092:	f73f ae67 	bgt.w	40bd64 <__ssvfscanf_r+0x1f0>
  40c096:	4630      	mov	r0, r6
  40c098:	4629      	mov	r1, r5
  40c09a:	f005 fe41 	bl	411d20 <__ssrefill_r>
  40c09e:	2800      	cmp	r0, #0
  40c0a0:	f43f ae60 	beq.w	40bd64 <__ssvfscanf_r+0x1f0>
  40c0a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c0a6:	2c00      	cmp	r4, #0
  40c0a8:	f43f ae4b 	beq.w	40bd42 <__ssvfscanf_r+0x1ce>
  40c0ac:	89ab      	ldrh	r3, [r5, #12]
  40c0ae:	4620      	mov	r0, r4
  40c0b0:	f013 0f40 	tst.w	r3, #64	; 0x40
  40c0b4:	bf18      	it	ne
  40c0b6:	f04f 30ff 	movne.w	r0, #4294967295
  40c0ba:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40c0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c0c2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40c0c6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  40c0ca:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  40c0ce:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40c0d2:	4692      	mov	sl, r2
  40c0d4:	e59f      	b.n	40bc16 <__ssvfscanf_r+0xa2>
  40c0d6:	9207      	str	r2, [sp, #28]
  40c0d8:	2310      	movs	r3, #16
  40c0da:	4a89      	ldr	r2, [pc, #548]	; (40c300 <__ssvfscanf_r+0x78c>)
  40c0dc:	9209      	str	r2, [sp, #36]	; 0x24
  40c0de:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  40c0e2:	930c      	str	r3, [sp, #48]	; 0x30
  40c0e4:	f04f 0a03 	mov.w	sl, #3
  40c0e8:	e638      	b.n	40bd5c <__ssvfscanf_r+0x1e8>
  40c0ea:	9207      	str	r2, [sp, #28]
  40c0ec:	f047 0701 	orr.w	r7, r7, #1
  40c0f0:	4a83      	ldr	r2, [pc, #524]	; (40c300 <__ssvfscanf_r+0x78c>)
  40c0f2:	9209      	str	r2, [sp, #36]	; 0x24
  40c0f4:	2308      	movs	r3, #8
  40c0f6:	930c      	str	r3, [sp, #48]	; 0x30
  40c0f8:	f04f 0a03 	mov.w	sl, #3
  40c0fc:	e62e      	b.n	40bd5c <__ssvfscanf_r+0x1e8>
  40c0fe:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40c102:	f047 0702 	orr.w	r7, r7, #2
  40c106:	4692      	mov	sl, r2
  40c108:	e585      	b.n	40bc16 <__ssvfscanf_r+0xa2>
  40c10a:	9207      	str	r2, [sp, #28]
  40c10c:	f04f 0a04 	mov.w	sl, #4
  40c110:	e624      	b.n	40bd5c <__ssvfscanf_r+0x1e8>
  40c112:	9207      	str	r2, [sp, #28]
  40c114:	e7ec      	b.n	40c0f0 <__ssvfscanf_r+0x57c>
  40c116:	06f9      	lsls	r1, r7, #27
  40c118:	9207      	str	r2, [sp, #28]
  40c11a:	d462      	bmi.n	40c1e2 <__ssvfscanf_r+0x66e>
  40c11c:	077b      	lsls	r3, r7, #29
  40c11e:	f140 8381 	bpl.w	40c824 <__ssvfscanf_r+0xcb0>
  40c122:	9c06      	ldr	r4, [sp, #24]
  40c124:	6823      	ldr	r3, [r4, #0]
  40c126:	3404      	adds	r4, #4
  40c128:	4692      	mov	sl, r2
  40c12a:	f8a3 9000 	strh.w	r9, [r3]
  40c12e:	9406      	str	r4, [sp, #24]
  40c130:	e560      	b.n	40bbf4 <__ssvfscanf_r+0x80>
  40c132:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40c136:	f047 0704 	orr.w	r7, r7, #4
  40c13a:	4692      	mov	sl, r2
  40c13c:	e56b      	b.n	40bc16 <__ssvfscanf_r+0xa2>
  40c13e:	9207      	str	r2, [sp, #28]
  40c140:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40c144:	f04f 0a00 	mov.w	sl, #0
  40c148:	e608      	b.n	40bd5c <__ssvfscanf_r+0x1e8>
  40c14a:	4611      	mov	r1, r2
  40c14c:	a816      	add	r0, sp, #88	; 0x58
  40c14e:	9207      	str	r2, [sp, #28]
  40c150:	f004 fa7a 	bl	410648 <__sccl>
  40c154:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40c158:	9007      	str	r0, [sp, #28]
  40c15a:	f04f 0a01 	mov.w	sl, #1
  40c15e:	e5fd      	b.n	40bd5c <__ssvfscanf_r+0x1e8>
  40c160:	9207      	str	r2, [sp, #28]
  40c162:	e78e      	b.n	40c082 <__ssvfscanf_r+0x50e>
  40c164:	4866      	ldr	r0, [pc, #408]	; (40c300 <__ssvfscanf_r+0x78c>)
  40c166:	9207      	str	r2, [sp, #28]
  40c168:	210a      	movs	r1, #10
  40c16a:	9009      	str	r0, [sp, #36]	; 0x24
  40c16c:	910c      	str	r1, [sp, #48]	; 0x30
  40c16e:	f04f 0a03 	mov.w	sl, #3
  40c172:	e5f3      	b.n	40bd5c <__ssvfscanf_r+0x1e8>
  40c174:	9207      	str	r2, [sp, #28]
  40c176:	f04f 0a02 	mov.w	sl, #2
  40c17a:	e5ef      	b.n	40bd5c <__ssvfscanf_r+0x1e8>
  40c17c:	4860      	ldr	r0, [pc, #384]	; (40c300 <__ssvfscanf_r+0x78c>)
  40c17e:	9207      	str	r2, [sp, #28]
  40c180:	2110      	movs	r1, #16
  40c182:	f447 7708 	orr.w	r7, r7, #544	; 0x220
  40c186:	9009      	str	r0, [sp, #36]	; 0x24
  40c188:	910c      	str	r1, [sp, #48]	; 0x30
  40c18a:	f04f 0a03 	mov.w	sl, #3
  40c18e:	e5e5      	b.n	40bd5c <__ssvfscanf_r+0x1e8>
  40c190:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40c194:	2b6c      	cmp	r3, #108	; 0x6c
  40c196:	f000 8336 	beq.w	40c806 <__ssvfscanf_r+0xc92>
  40c19a:	f047 0701 	orr.w	r7, r7, #1
  40c19e:	4692      	mov	sl, r2
  40c1a0:	e539      	b.n	40bc16 <__ssvfscanf_r+0xa2>
  40c1a2:	a814      	add	r0, sp, #80	; 0x50
  40c1a4:	2100      	movs	r1, #0
  40c1a6:	2208      	movs	r2, #8
  40c1a8:	900a      	str	r0, [sp, #40]	; 0x28
  40c1aa:	f7fe f843 	bl	40a234 <memset>
  40c1ae:	f017 0b10 	ands.w	fp, r7, #16
  40c1b2:	f000 82bd 	beq.w	40c730 <__ssvfscanf_r+0xbbc>
  40c1b6:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
  40c1ba:	2200      	movs	r2, #0
  40c1bc:	6829      	ldr	r1, [r5, #0]
  40c1be:	f8d8 3000 	ldr.w	r3, [r8]
  40c1c2:	7809      	ldrb	r1, [r1, #0]
  40c1c4:	440b      	add	r3, r1
  40c1c6:	785b      	ldrb	r3, [r3, #1]
  40c1c8:	0718      	lsls	r0, r3, #28
  40c1ca:	d402      	bmi.n	40c1d2 <__ssvfscanf_r+0x65e>
  40c1cc:	2c00      	cmp	r4, #0
  40c1ce:	f040 8372 	bne.w	40c8b6 <__ssvfscanf_r+0xd42>
  40c1d2:	f1bb 0f00 	cmp.w	fp, #0
  40c1d6:	d104      	bne.n	40c1e2 <__ssvfscanf_r+0x66e>
  40c1d8:	f8ca b000 	str.w	fp, [sl]
  40c1dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c1de:	3401      	adds	r4, #1
  40c1e0:	940b      	str	r4, [sp, #44]	; 0x2c
  40c1e2:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c1e6:	4652      	mov	r2, sl
  40c1e8:	e505      	b.n	40bbf6 <__ssvfscanf_r+0x82>
  40c1ea:	440b      	add	r3, r1
  40c1ec:	9207      	str	r2, [sp, #28]
  40c1ee:	785b      	ldrb	r3, [r3, #1]
  40c1f0:	f003 0303 	and.w	r3, r3, #3
  40c1f4:	2b01      	cmp	r3, #1
  40c1f6:	f47f af44 	bne.w	40c082 <__ssvfscanf_r+0x50e>
  40c1fa:	f047 0701 	orr.w	r7, r7, #1
  40c1fe:	e740      	b.n	40c082 <__ssvfscanf_r+0x50e>
  40c200:	4630      	mov	r0, r6
  40c202:	f002 ff85 	bl	40f110 <_localeconv_r>
  40c206:	1e63      	subs	r3, r4, #1
  40c208:	6800      	ldr	r0, [r0, #0]
  40c20a:	900f      	str	r0, [sp, #60]	; 0x3c
  40c20c:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  40c210:	f240 81a5 	bls.w	40c55e <__ssvfscanf_r+0x9ea>
  40c214:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
  40c218:	4404      	add	r4, r0
  40c21a:	940d      	str	r4, [sp, #52]	; 0x34
  40c21c:	f240 145d 	movw	r4, #349	; 0x15d
  40c220:	f04f 0a00 	mov.w	sl, #0
  40c224:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40c228:	960e      	str	r6, [sp, #56]	; 0x38
  40c22a:	f8cd c014 	str.w	ip, [sp, #20]
  40c22e:	f447 67f0 	orr.w	r7, r7, #1920	; 0x780
  40c232:	4653      	mov	r3, sl
  40c234:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  40c238:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  40c23c:	f8cd a020 	str.w	sl, [sp, #32]
  40c240:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40c244:	46e3      	mov	fp, ip
  40c246:	4656      	mov	r6, sl
  40c248:	6828      	ldr	r0, [r5, #0]
  40c24a:	7802      	ldrb	r2, [r0, #0]
  40c24c:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
  40c250:	294e      	cmp	r1, #78	; 0x4e
  40c252:	f200 8156 	bhi.w	40c502 <__ssvfscanf_r+0x98e>
  40c256:	e8df f011 	tbh	[pc, r1, lsl #1]
  40c25a:	007e      	.short	0x007e
  40c25c:	007e0154 	.word	0x007e0154
  40c260:	01540154 	.word	0x01540154
  40c264:	00550072 	.word	0x00550072
  40c268:	00550055 	.word	0x00550055
  40c26c:	00550055 	.word	0x00550055
  40c270:	00550055 	.word	0x00550055
  40c274:	00550055 	.word	0x00550055
  40c278:	01540154 	.word	0x01540154
  40c27c:	01540154 	.word	0x01540154
  40c280:	01540154 	.word	0x01540154
  40c284:	014f0154 	.word	0x014f0154
  40c288:	01540154 	.word	0x01540154
  40c28c:	01350154 	.word	0x01350154
  40c290:	0154012e 	.word	0x0154012e
  40c294:	00a40154 	.word	0x00a40154
  40c298:	01540154 	.word	0x01540154
  40c29c:	01540154 	.word	0x01540154
  40c2a0:	0154008f 	.word	0x0154008f
  40c2a4:	01540154 	.word	0x01540154
  40c2a8:	01540154 	.word	0x01540154
  40c2ac:	01540089 	.word	0x01540089
  40c2b0:	01540154 	.word	0x01540154
  40c2b4:	00830154 	.word	0x00830154
  40c2b8:	01540154 	.word	0x01540154
  40c2bc:	01540154 	.word	0x01540154
  40c2c0:	01540154 	.word	0x01540154
  40c2c4:	014f0154 	.word	0x014f0154
  40c2c8:	01540154 	.word	0x01540154
  40c2cc:	01350154 	.word	0x01350154
  40c2d0:	0154012e 	.word	0x0154012e
  40c2d4:	00a40154 	.word	0x00a40154
  40c2d8:	01540154 	.word	0x01540154
  40c2dc:	01540154 	.word	0x01540154
  40c2e0:	0154008f 	.word	0x0154008f
  40c2e4:	01540154 	.word	0x01540154
  40c2e8:	01540154 	.word	0x01540154
  40c2ec:	01540089 	.word	0x01540089
  40c2f0:	01540154 	.word	0x01540154
  40c2f4:	00830154 	.word	0x00830154
  40c2f8:	00413434 	.word	0x00413434
  40c2fc:	00411641 	.word	0x00411641
  40c300:	004118f1 	.word	0x004118f1
  40c304:	eb03 010a 	add.w	r1, r3, sl
  40c308:	b999      	cbnz	r1, 40c332 <__ssvfscanf_r+0x7be>
  40c30a:	f427 77c0 	bic.w	r7, r7, #384	; 0x180
  40c30e:	f88b 2000 	strb.w	r2, [fp]
  40c312:	f10b 0b01 	add.w	fp, fp, #1
  40c316:	686a      	ldr	r2, [r5, #4]
  40c318:	3a01      	subs	r2, #1
  40c31a:	2a00      	cmp	r2, #0
  40c31c:	f104 34ff 	add.w	r4, r4, #4294967295
  40c320:	f109 0901 	add.w	r9, r9, #1
  40c324:	606a      	str	r2, [r5, #4]
  40c326:	f340 80fa 	ble.w	40c51e <__ssvfscanf_r+0x9aa>
  40c32a:	3001      	adds	r0, #1
  40c32c:	6028      	str	r0, [r5, #0]
  40c32e:	2c00      	cmp	r4, #0
  40c330:	d18a      	bne.n	40c248 <__ssvfscanf_r+0x6d4>
  40c332:	9608      	str	r6, [sp, #32]
  40c334:	9c08      	ldr	r4, [sp, #32]
  40c336:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40c338:	2c00      	cmp	r4, #0
  40c33a:	d041      	beq.n	40c3c0 <__ssvfscanf_r+0x84c>
  40c33c:	e10c      	b.n	40c558 <__ssvfscanf_r+0x9e4>
  40c33e:	05f9      	lsls	r1, r7, #23
  40c340:	d5e0      	bpl.n	40c304 <__ssvfscanf_r+0x790>
  40c342:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40c344:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40c348:	3601      	adds	r6, #1
  40c34a:	2a00      	cmp	r2, #0
  40c34c:	d0e3      	beq.n	40c316 <__ssvfscanf_r+0x7a2>
  40c34e:	3a01      	subs	r2, #1
  40c350:	920d      	str	r2, [sp, #52]	; 0x34
  40c352:	3401      	adds	r4, #1
  40c354:	e7df      	b.n	40c316 <__ssvfscanf_r+0x7a2>
  40c356:	0639      	lsls	r1, r7, #24
  40c358:	d5eb      	bpl.n	40c332 <__ssvfscanf_r+0x7be>
  40c35a:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40c35e:	e7d6      	b.n	40c30e <__ssvfscanf_r+0x79a>
  40c360:	f1ba 0f07 	cmp.w	sl, #7
  40c364:	d1e5      	bne.n	40c332 <__ssvfscanf_r+0x7be>
  40c366:	f04f 0a08 	mov.w	sl, #8
  40c36a:	e7d0      	b.n	40c30e <__ssvfscanf_r+0x79a>
  40c36c:	f1ba 0f06 	cmp.w	sl, #6
  40c370:	d1df      	bne.n	40c332 <__ssvfscanf_r+0x7be>
  40c372:	f04f 0a07 	mov.w	sl, #7
  40c376:	e7ca      	b.n	40c30e <__ssvfscanf_r+0x79a>
  40c378:	2b00      	cmp	r3, #0
  40c37a:	f040 80e6 	bne.w	40c54a <__ssvfscanf_r+0x9d6>
  40c37e:	b92e      	cbnz	r6, 40c38c <__ssvfscanf_r+0x818>
  40c380:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  40c384:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  40c388:	f000 8239 	beq.w	40c7fe <__ssvfscanf_r+0xc8a>
  40c38c:	f1ba 0f01 	cmp.w	sl, #1
  40c390:	d002      	beq.n	40c398 <__ssvfscanf_r+0x824>
  40c392:	f1ba 0f04 	cmp.w	sl, #4
  40c396:	d1cc      	bne.n	40c332 <__ssvfscanf_r+0x7be>
  40c398:	f10a 0a01 	add.w	sl, sl, #1
  40c39c:	fa5f fa8a 	uxtb.w	sl, sl
  40c3a0:	e7b5      	b.n	40c30e <__ssvfscanf_r+0x79a>
  40c3a2:	f1ba 0f00 	cmp.w	sl, #0
  40c3a6:	f040 80c7 	bne.w	40c538 <__ssvfscanf_r+0x9c4>
  40c3aa:	2e00      	cmp	r6, #0
  40c3ac:	f040 80d2 	bne.w	40c554 <__ssvfscanf_r+0x9e0>
  40c3b0:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  40c3b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  40c3b8:	f000 821c 	beq.w	40c7f4 <__ssvfscanf_r+0xc80>
  40c3bc:	9608      	str	r6, [sp, #32]
  40c3be:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40c3c0:	f103 3cff 	add.w	ip, r3, #4294967295
  40c3c4:	f1bc 0f01 	cmp.w	ip, #1
  40c3c8:	f240 82dc 	bls.w	40c984 <__ssvfscanf_r+0xe10>
  40c3cc:	f10a 32ff 	add.w	r2, sl, #4294967295
  40c3d0:	2a06      	cmp	r2, #6
  40c3d2:	d822      	bhi.n	40c41a <__ssvfscanf_r+0x8a6>
  40c3d4:	f1ba 0f02 	cmp.w	sl, #2
  40c3d8:	f240 82ad 	bls.w	40c936 <__ssvfscanf_r+0xdc2>
  40c3dc:	f1ba 0f03 	cmp.w	sl, #3
  40c3e0:	d01b      	beq.n	40c41a <__ssvfscanf_r+0x8a6>
  40c3e2:	f1aa 0a04 	sub.w	sl, sl, #4
  40c3e6:	fa5f fa8a 	uxtb.w	sl, sl
  40c3ea:	f10b 34ff 	add.w	r4, fp, #4294967295
  40c3ee:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40c3f2:	ebca 0404 	rsb	r4, sl, r4
  40c3f6:	46da      	mov	sl, fp
  40c3f8:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
  40c3fc:	4630      	mov	r0, r6
  40c3fe:	462a      	mov	r2, r5
  40c400:	f005 fc4e 	bl	411ca0 <_sungetc_r>
  40c404:	45a2      	cmp	sl, r4
  40c406:	d1f7      	bne.n	40c3f8 <__ssvfscanf_r+0x884>
  40c408:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40c40c:	f109 39ff 	add.w	r9, r9, #4294967295
  40c410:	ea6f 020c 	mvn.w	r2, ip
  40c414:	ebcc 0909 	rsb	r9, ip, r9
  40c418:	4493      	add	fp, r2
  40c41a:	05f8      	lsls	r0, r7, #23
  40c41c:	d51c      	bpl.n	40c458 <__ssvfscanf_r+0x8e4>
  40c41e:	0579      	lsls	r1, r7, #21
  40c420:	f100 829b 	bmi.w	40c95a <__ssvfscanf_r+0xde6>
  40c424:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
  40c428:	2965      	cmp	r1, #101	; 0x65
  40c42a:	f10b 34ff 	add.w	r4, fp, #4294967295
  40c42e:	f109 3aff 	add.w	sl, r9, #4294967295
  40c432:	d00b      	beq.n	40c44c <__ssvfscanf_r+0x8d8>
  40c434:	2945      	cmp	r1, #69	; 0x45
  40c436:	d009      	beq.n	40c44c <__ssvfscanf_r+0x8d8>
  40c438:	4630      	mov	r0, r6
  40c43a:	462a      	mov	r2, r5
  40c43c:	f005 fc30 	bl	411ca0 <_sungetc_r>
  40c440:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
  40c444:	f1a9 0a02 	sub.w	sl, r9, #2
  40c448:	f1ab 0402 	sub.w	r4, fp, #2
  40c44c:	4630      	mov	r0, r6
  40c44e:	462a      	mov	r2, r5
  40c450:	f005 fc26 	bl	411ca0 <_sungetc_r>
  40c454:	46d1      	mov	r9, sl
  40c456:	46a3      	mov	fp, r4
  40c458:	f017 0210 	ands.w	r2, r7, #16
  40c45c:	f47f aec1 	bne.w	40c1e2 <__ssvfscanf_r+0x66e>
  40c460:	f407 61c0 	and.w	r1, r7, #1536	; 0x600
  40c464:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  40c468:	f88b 2000 	strb.w	r2, [fp]
  40c46c:	f000 81d3 	beq.w	40c816 <__ssvfscanf_r+0xca2>
  40c470:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40c472:	2c00      	cmp	r4, #0
  40c474:	f040 816e 	bne.w	40c754 <__ssvfscanf_r+0xbe0>
  40c478:	2200      	movs	r2, #0
  40c47a:	9905      	ldr	r1, [sp, #20]
  40c47c:	4630      	mov	r0, r6
  40c47e:	f004 f93f 	bl	410700 <_strtod_r>
  40c482:	07fa      	lsls	r2, r7, #31
  40c484:	4682      	mov	sl, r0
  40c486:	468b      	mov	fp, r1
  40c488:	f100 8132 	bmi.w	40c6f0 <__ssvfscanf_r+0xb7c>
  40c48c:	07bb      	lsls	r3, r7, #30
  40c48e:	f140 81e8 	bpl.w	40c862 <__ssvfscanf_r+0xcee>
  40c492:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c496:	f8dc 3000 	ldr.w	r3, [ip]
  40c49a:	f10c 0c04 	add.w	ip, ip, #4
  40c49e:	f8cd c018 	str.w	ip, [sp, #24]
  40c4a2:	e9c3 ab00 	strd	sl, fp, [r3]
  40c4a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c4a8:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c4ac:	3401      	adds	r4, #1
  40c4ae:	940b      	str	r4, [sp, #44]	; 0x2c
  40c4b0:	4652      	mov	r2, sl
  40c4b2:	f7ff bba0 	b.w	40bbf6 <__ssvfscanf_r+0x82>
  40c4b6:	f1ba 0f02 	cmp.w	sl, #2
  40c4ba:	f47f af3a 	bne.w	40c332 <__ssvfscanf_r+0x7be>
  40c4be:	f04f 0a03 	mov.w	sl, #3
  40c4c2:	e724      	b.n	40c30e <__ssvfscanf_r+0x79a>
  40c4c4:	f407 61a0 	and.w	r1, r7, #1280	; 0x500
  40c4c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  40c4cc:	d005      	beq.n	40c4da <__ssvfscanf_r+0x966>
  40c4ce:	0579      	lsls	r1, r7, #21
  40c4d0:	f57f af2f 	bpl.w	40c332 <__ssvfscanf_r+0x7be>
  40c4d4:	2e00      	cmp	r6, #0
  40c4d6:	f43f af71 	beq.w	40c3bc <__ssvfscanf_r+0x848>
  40c4da:	05b9      	lsls	r1, r7, #22
  40c4dc:	d406      	bmi.n	40c4ec <__ssvfscanf_r+0x978>
  40c4de:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40c4e2:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  40c4e6:	ebcc 0606 	rsb	r6, ip, r6
  40c4ea:	9610      	str	r6, [sp, #64]	; 0x40
  40c4ec:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40c4f0:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
  40c4f4:	2600      	movs	r6, #0
  40c4f6:	e70a      	b.n	40c30e <__ssvfscanf_r+0x79a>
  40c4f8:	2b01      	cmp	r3, #1
  40c4fa:	f47f af1a 	bne.w	40c332 <__ssvfscanf_r+0x7be>
  40c4fe:	2302      	movs	r3, #2
  40c500:	e705      	b.n	40c30e <__ssvfscanf_r+0x79a>
  40c502:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  40c506:	f89c 1000 	ldrb.w	r1, [ip]
  40c50a:	4291      	cmp	r1, r2
  40c50c:	f47f af11 	bne.w	40c332 <__ssvfscanf_r+0x7be>
  40c510:	05b9      	lsls	r1, r7, #22
  40c512:	f57f af0e 	bpl.w	40c332 <__ssvfscanf_r+0x7be>
  40c516:	f427 7720 	bic.w	r7, r7, #640	; 0x280
  40c51a:	960a      	str	r6, [sp, #40]	; 0x28
  40c51c:	e6f7      	b.n	40c30e <__ssvfscanf_r+0x79a>
  40c51e:	980e      	ldr	r0, [sp, #56]	; 0x38
  40c520:	9303      	str	r3, [sp, #12]
  40c522:	4629      	mov	r1, r5
  40c524:	f005 fbfc 	bl	411d20 <__ssrefill_r>
  40c528:	9b03      	ldr	r3, [sp, #12]
  40c52a:	2800      	cmp	r0, #0
  40c52c:	f47f af01 	bne.w	40c332 <__ssvfscanf_r+0x7be>
  40c530:	2c00      	cmp	r4, #0
  40c532:	f47f ae89 	bne.w	40c248 <__ssvfscanf_r+0x6d4>
  40c536:	e6fc      	b.n	40c332 <__ssvfscanf_r+0x7be>
  40c538:	f1ba 0f03 	cmp.w	sl, #3
  40c53c:	f43f af2c 	beq.w	40c398 <__ssvfscanf_r+0x824>
  40c540:	f1ba 0f05 	cmp.w	sl, #5
  40c544:	f43f af28 	beq.w	40c398 <__ssvfscanf_r+0x824>
  40c548:	e6f3      	b.n	40c332 <__ssvfscanf_r+0x7be>
  40c54a:	2b02      	cmp	r3, #2
  40c54c:	f47f af1e 	bne.w	40c38c <__ssvfscanf_r+0x818>
  40c550:	2303      	movs	r3, #3
  40c552:	e6dc      	b.n	40c30e <__ssvfscanf_r+0x79a>
  40c554:	9608      	str	r6, [sp, #32]
  40c556:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40c558:	f427 7780 	bic.w	r7, r7, #256	; 0x100
  40c55c:	e730      	b.n	40c3c0 <__ssvfscanf_r+0x84c>
  40c55e:	2200      	movs	r2, #0
  40c560:	920d      	str	r2, [sp, #52]	; 0x34
  40c562:	e65d      	b.n	40c220 <__ssvfscanf_r+0x6ac>
  40c564:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c568:	f8dc 7000 	ldr.w	r7, [ip]
  40c56c:	f10c 0204 	add.w	r2, ip, #4
  40c570:	9206      	str	r2, [sp, #24]
  40c572:	46ba      	mov	sl, r7
  40c574:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  40c578:	682b      	ldr	r3, [r5, #0]
  40c57a:	781a      	ldrb	r2, [r3, #0]
  40c57c:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40c580:	1c59      	adds	r1, r3, #1
  40c582:	b1a2      	cbz	r2, 40c5ae <__ssvfscanf_r+0xa3a>
  40c584:	686a      	ldr	r2, [r5, #4]
  40c586:	6029      	str	r1, [r5, #0]
  40c588:	3a01      	subs	r2, #1
  40c58a:	606a      	str	r2, [r5, #4]
  40c58c:	781b      	ldrb	r3, [r3, #0]
  40c58e:	f80a 3b01 	strb.w	r3, [sl], #1
  40c592:	3c01      	subs	r4, #1
  40c594:	d00b      	beq.n	40c5ae <__ssvfscanf_r+0xa3a>
  40c596:	686b      	ldr	r3, [r5, #4]
  40c598:	2b00      	cmp	r3, #0
  40c59a:	dced      	bgt.n	40c578 <__ssvfscanf_r+0xa04>
  40c59c:	4630      	mov	r0, r6
  40c59e:	4629      	mov	r1, r5
  40c5a0:	f005 fbbe 	bl	411d20 <__ssrefill_r>
  40c5a4:	2800      	cmp	r0, #0
  40c5a6:	d0e7      	beq.n	40c578 <__ssvfscanf_r+0xa04>
  40c5a8:	4557      	cmp	r7, sl
  40c5aa:	f43f ad7b 	beq.w	40c0a4 <__ssvfscanf_r+0x530>
  40c5ae:	ebba 0707 	subs.w	r7, sl, r7
  40c5b2:	f43f ab26 	beq.w	40bc02 <__ssvfscanf_r+0x8e>
  40c5b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c5b8:	2300      	movs	r3, #0
  40c5ba:	3401      	adds	r4, #1
  40c5bc:	f88a 3000 	strb.w	r3, [sl]
  40c5c0:	940b      	str	r4, [sp, #44]	; 0x2c
  40c5c2:	44b9      	add	r9, r7
  40c5c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c5c8:	e4ae      	b.n	40bf28 <__ssvfscanf_r+0x3b4>
  40c5ca:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c5ce:	f8dc 7000 	ldr.w	r7, [ip]
  40c5d2:	f10c 0a04 	add.w	sl, ip, #4
  40c5d6:	46bb      	mov	fp, r7
  40c5d8:	682b      	ldr	r3, [r5, #0]
  40c5da:	f8d8 2000 	ldr.w	r2, [r8]
  40c5de:	7819      	ldrb	r1, [r3, #0]
  40c5e0:	440a      	add	r2, r1
  40c5e2:	1c59      	adds	r1, r3, #1
  40c5e4:	7852      	ldrb	r2, [r2, #1]
  40c5e6:	0710      	lsls	r0, r2, #28
  40c5e8:	d411      	bmi.n	40c60e <__ssvfscanf_r+0xa9a>
  40c5ea:	686a      	ldr	r2, [r5, #4]
  40c5ec:	6029      	str	r1, [r5, #0]
  40c5ee:	3a01      	subs	r2, #1
  40c5f0:	606a      	str	r2, [r5, #4]
  40c5f2:	781b      	ldrb	r3, [r3, #0]
  40c5f4:	f80b 3b01 	strb.w	r3, [fp], #1
  40c5f8:	3c01      	subs	r4, #1
  40c5fa:	d008      	beq.n	40c60e <__ssvfscanf_r+0xa9a>
  40c5fc:	686b      	ldr	r3, [r5, #4]
  40c5fe:	2b00      	cmp	r3, #0
  40c600:	dcea      	bgt.n	40c5d8 <__ssvfscanf_r+0xa64>
  40c602:	4630      	mov	r0, r6
  40c604:	4629      	mov	r1, r5
  40c606:	f005 fb8b 	bl	411d20 <__ssrefill_r>
  40c60a:	2800      	cmp	r0, #0
  40c60c:	d0e4      	beq.n	40c5d8 <__ssvfscanf_r+0xa64>
  40c60e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c610:	f8cd a018 	str.w	sl, [sp, #24]
  40c614:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c618:	ebc7 070b 	rsb	r7, r7, fp
  40c61c:	2300      	movs	r3, #0
  40c61e:	3401      	adds	r4, #1
  40c620:	44b9      	add	r9, r7
  40c622:	940b      	str	r4, [sp, #44]	; 0x2c
  40c624:	f88b 3000 	strb.w	r3, [fp]
  40c628:	4652      	mov	r2, sl
  40c62a:	f7ff bae4 	b.w	40bbf6 <__ssvfscanf_r+0x82>
  40c62e:	ab14      	add	r3, sp, #80	; 0x50
  40c630:	4618      	mov	r0, r3
  40c632:	2100      	movs	r1, #0
  40c634:	2208      	movs	r2, #8
  40c636:	930a      	str	r3, [sp, #40]	; 0x28
  40c638:	f7fd fdfc 	bl	40a234 <memset>
  40c63c:	f017 0710 	ands.w	r7, r7, #16
  40c640:	970d      	str	r7, [sp, #52]	; 0x34
  40c642:	d06c      	beq.n	40c71e <__ssvfscanf_r+0xbaa>
  40c644:	f04f 0a00 	mov.w	sl, #0
  40c648:	9608      	str	r6, [sp, #32]
  40c64a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40c64c:	f8cd 9014 	str.w	r9, [sp, #20]
  40c650:	f04f 0b00 	mov.w	fp, #0
  40c654:	af56      	add	r7, sp, #344	; 0x158
  40c656:	f002 fd55 	bl	40f104 <__locale_mb_cur_max>
  40c65a:	4558      	cmp	r0, fp
  40c65c:	f43f ad22 	beq.w	40c0a4 <__ssvfscanf_r+0x530>
  40c660:	682b      	ldr	r3, [r5, #0]
  40c662:	6869      	ldr	r1, [r5, #4]
  40c664:	f813 eb01 	ldrb.w	lr, [r3], #1
  40c668:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c66a:	602b      	str	r3, [r5, #0]
  40c66c:	3901      	subs	r1, #1
  40c66e:	f10b 0901 	add.w	r9, fp, #1
  40c672:	9000      	str	r0, [sp, #0]
  40c674:	464b      	mov	r3, r9
  40c676:	6069      	str	r1, [r5, #4]
  40c678:	9808      	ldr	r0, [sp, #32]
  40c67a:	f807 e00b 	strb.w	lr, [r7, fp]
  40c67e:	4651      	mov	r1, sl
  40c680:	463a      	mov	r2, r7
  40c682:	f003 f871 	bl	40f768 <_mbrtowc_r>
  40c686:	1c43      	adds	r3, r0, #1
  40c688:	f43f ad0c 	beq.w	40c0a4 <__ssvfscanf_r+0x530>
  40c68c:	2800      	cmp	r0, #0
  40c68e:	d177      	bne.n	40c780 <__ssvfscanf_r+0xc0c>
  40c690:	b90e      	cbnz	r6, 40c696 <__ssvfscanf_r+0xb22>
  40c692:	f8ca 6000 	str.w	r6, [sl]
  40c696:	9905      	ldr	r1, [sp, #20]
  40c698:	4449      	add	r1, r9
  40c69a:	9105      	str	r1, [sp, #20]
  40c69c:	3c01      	subs	r4, #1
  40c69e:	2e00      	cmp	r6, #0
  40c6a0:	d172      	bne.n	40c788 <__ssvfscanf_r+0xc14>
  40c6a2:	f10a 0a04 	add.w	sl, sl, #4
  40c6a6:	46b3      	mov	fp, r6
  40c6a8:	686b      	ldr	r3, [r5, #4]
  40c6aa:	2b00      	cmp	r3, #0
  40c6ac:	dd2a      	ble.n	40c704 <__ssvfscanf_r+0xb90>
  40c6ae:	2c00      	cmp	r4, #0
  40c6b0:	d1d1      	bne.n	40c656 <__ssvfscanf_r+0xae2>
  40c6b2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40c6b6:	9e08      	ldr	r6, [sp, #32]
  40c6b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40c6ba:	2c00      	cmp	r4, #0
  40c6bc:	f43f ad8e 	beq.w	40c1dc <__ssvfscanf_r+0x668>
  40c6c0:	e58f      	b.n	40c1e2 <__ssvfscanf_r+0x66e>
  40c6c2:	4622      	mov	r2, r4
  40c6c4:	f88a 4000 	strb.w	r4, [sl]
  40c6c8:	4630      	mov	r0, r6
  40c6ca:	9905      	ldr	r1, [sp, #20]
  40c6cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c6ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c6d0:	47a0      	blx	r4
  40c6d2:	06ba      	lsls	r2, r7, #26
  40c6d4:	d535      	bpl.n	40c742 <__ssvfscanf_r+0xbce>
  40c6d6:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c6da:	f8dc 3000 	ldr.w	r3, [ip]
  40c6de:	f10c 0c04 	add.w	ip, ip, #4
  40c6e2:	f8cd c018 	str.w	ip, [sp, #24]
  40c6e6:	6018      	str	r0, [r3, #0]
  40c6e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c6ea:	3401      	adds	r4, #1
  40c6ec:	940b      	str	r4, [sp, #44]	; 0x2c
  40c6ee:	e476      	b.n	40bfde <__ssvfscanf_r+0x46a>
  40c6f0:	9c06      	ldr	r4, [sp, #24]
  40c6f2:	6823      	ldr	r3, [r4, #0]
  40c6f4:	3404      	adds	r4, #4
  40c6f6:	9406      	str	r4, [sp, #24]
  40c6f8:	e9c3 ab00 	strd	sl, fp, [r3]
  40c6fc:	e6d3      	b.n	40c4a6 <__ssvfscanf_r+0x932>
  40c6fe:	f427 67b0 	bic.w	r7, r7, #1408	; 0x580
  40c702:	e44b      	b.n	40bf9c <__ssvfscanf_r+0x428>
  40c704:	9808      	ldr	r0, [sp, #32]
  40c706:	4629      	mov	r1, r5
  40c708:	f005 fb0a 	bl	411d20 <__ssrefill_r>
  40c70c:	2800      	cmp	r0, #0
  40c70e:	d0ce      	beq.n	40c6ae <__ssvfscanf_r+0xb3a>
  40c710:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40c714:	9e08      	ldr	r6, [sp, #32]
  40c716:	f1bb 0f00 	cmp.w	fp, #0
  40c71a:	d0cd      	beq.n	40c6b8 <__ssvfscanf_r+0xb44>
  40c71c:	e4c2      	b.n	40c0a4 <__ssvfscanf_r+0x530>
  40c71e:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c722:	f8dc a000 	ldr.w	sl, [ip]
  40c726:	f10c 0c04 	add.w	ip, ip, #4
  40c72a:	f8cd c018 	str.w	ip, [sp, #24]
  40c72e:	e78b      	b.n	40c648 <__ssvfscanf_r+0xad4>
  40c730:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c734:	f8dc a000 	ldr.w	sl, [ip]
  40c738:	f10c 0c04 	add.w	ip, ip, #4
  40c73c:	f8cd c018 	str.w	ip, [sp, #24]
  40c740:	e53b      	b.n	40c1ba <__ssvfscanf_r+0x646>
  40c742:	077b      	lsls	r3, r7, #29
  40c744:	f140 809b 	bpl.w	40c87e <__ssvfscanf_r+0xd0a>
  40c748:	9c06      	ldr	r4, [sp, #24]
  40c74a:	6823      	ldr	r3, [r4, #0]
  40c74c:	3404      	adds	r4, #4
  40c74e:	9406      	str	r4, [sp, #24]
  40c750:	8018      	strh	r0, [r3, #0]
  40c752:	e7c9      	b.n	40c6e8 <__ssvfscanf_r+0xb74>
  40c754:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  40c758:	4630      	mov	r0, r6
  40c75a:	f10c 0101 	add.w	r1, ip, #1
  40c75e:	230a      	movs	r3, #10
  40c760:	f004 ff6e 	bl	411640 <_strtol_r>
  40c764:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
  40c768:	1b02      	subs	r2, r0, r4
  40c76a:	f20d 21ab 	addw	r1, sp, #683	; 0x2ab
  40c76e:	458b      	cmp	fp, r1
  40c770:	bf28      	it	cs
  40c772:	f20d 2baa 	addwcs	fp, sp, #682	; 0x2aa
  40c776:	4658      	mov	r0, fp
  40c778:	499b      	ldr	r1, [pc, #620]	; (40c9e8 <__ssvfscanf_r+0xe74>)
  40c77a:	f7fd fe2d 	bl	40a3d8 <sprintf>
  40c77e:	e67b      	b.n	40c478 <__ssvfscanf_r+0x904>
  40c780:	3002      	adds	r0, #2
  40c782:	d188      	bne.n	40c696 <__ssvfscanf_r+0xb22>
  40c784:	46cb      	mov	fp, r9
  40c786:	e78f      	b.n	40c6a8 <__ssvfscanf_r+0xb34>
  40c788:	f04f 0b00 	mov.w	fp, #0
  40c78c:	e78c      	b.n	40c6a8 <__ssvfscanf_r+0xb34>
  40c78e:	2f00      	cmp	r7, #0
  40c790:	f43f ac88 	beq.w	40c0a4 <__ssvfscanf_r+0x530>
  40c794:	44b9      	add	r9, r7
  40c796:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c79a:	f7ff bbc5 	b.w	40bf28 <__ssvfscanf_r+0x3b4>
  40c79e:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c7a2:	4623      	mov	r3, r4
  40c7a4:	f8dc 1000 	ldr.w	r1, [ip]
  40c7a8:	9500      	str	r5, [sp, #0]
  40c7aa:	4630      	mov	r0, r6
  40c7ac:	2201      	movs	r2, #1
  40c7ae:	f005 fad5 	bl	411d5c <_sfread_r>
  40c7b2:	9c06      	ldr	r4, [sp, #24]
  40c7b4:	1d23      	adds	r3, r4, #4
  40c7b6:	2800      	cmp	r0, #0
  40c7b8:	f43f ac74 	beq.w	40c0a4 <__ssvfscanf_r+0x530>
  40c7bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c7be:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c7c2:	9306      	str	r3, [sp, #24]
  40c7c4:	3401      	adds	r4, #1
  40c7c6:	4481      	add	r9, r0
  40c7c8:	940b      	str	r4, [sp, #44]	; 0x2c
  40c7ca:	4652      	mov	r2, sl
  40c7cc:	f7ff ba13 	b.w	40bbf6 <__ssvfscanf_r+0x82>
  40c7d0:	4630      	mov	r0, r6
  40c7d2:	4629      	mov	r1, r5
  40c7d4:	f005 faa4 	bl	411d20 <__ssrefill_r>
  40c7d8:	2800      	cmp	r0, #0
  40c7da:	f43f aaa2 	beq.w	40bd22 <__ssvfscanf_r+0x1ae>
  40c7de:	e461      	b.n	40c0a4 <__ssvfscanf_r+0x530>
  40c7e0:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
  40c7e4:	4630      	mov	r0, r6
  40c7e6:	462a      	mov	r2, r5
  40c7e8:	f005 fa5a 	bl	411ca0 <_sungetc_r>
  40c7ec:	f10a 3aff 	add.w	sl, sl, #4294967295
  40c7f0:	f7ff bbec 	b.w	40bfcc <__ssvfscanf_r+0x458>
  40c7f4:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40c7f8:	f04f 0a01 	mov.w	sl, #1
  40c7fc:	e587      	b.n	40c30e <__ssvfscanf_r+0x79a>
  40c7fe:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40c802:	2301      	movs	r3, #1
  40c804:	e583      	b.n	40c30e <__ssvfscanf_r+0x79a>
  40c806:	f89a 3002 	ldrb.w	r3, [sl, #2]
  40c80a:	f047 0702 	orr.w	r7, r7, #2
  40c80e:	f10a 0a02 	add.w	sl, sl, #2
  40c812:	f7ff ba00 	b.w	40bc16 <__ssvfscanf_r+0xa2>
  40c816:	9b08      	ldr	r3, [sp, #32]
  40c818:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40c81a:	1b19      	subs	r1, r3, r4
  40c81c:	424a      	negs	r2, r1
  40c81e:	2900      	cmp	r1, #0
  40c820:	d1a3      	bne.n	40c76a <__ssvfscanf_r+0xbf6>
  40c822:	e629      	b.n	40c478 <__ssvfscanf_r+0x904>
  40c824:	07fc      	lsls	r4, r7, #31
  40c826:	d40e      	bmi.n	40c846 <__ssvfscanf_r+0xcd2>
  40c828:	07b8      	lsls	r0, r7, #30
  40c82a:	d50c      	bpl.n	40c846 <__ssvfscanf_r+0xcd2>
  40c82c:	9c06      	ldr	r4, [sp, #24]
  40c82e:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c832:	6821      	ldr	r1, [r4, #0]
  40c834:	464a      	mov	r2, r9
  40c836:	ea4f 73e9 	mov.w	r3, r9, asr #31
  40c83a:	3404      	adds	r4, #4
  40c83c:	9406      	str	r4, [sp, #24]
  40c83e:	e9c1 2300 	strd	r2, r3, [r1]
  40c842:	f7ff b9d7 	b.w	40bbf4 <__ssvfscanf_r+0x80>
  40c846:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c84a:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c84e:	f8dc 3000 	ldr.w	r3, [ip]
  40c852:	f10c 0c04 	add.w	ip, ip, #4
  40c856:	f8c3 9000 	str.w	r9, [r3]
  40c85a:	f8cd c018 	str.w	ip, [sp, #24]
  40c85e:	f7ff b9c9 	b.w	40bbf4 <__ssvfscanf_r+0x80>
  40c862:	9c06      	ldr	r4, [sp, #24]
  40c864:	1d27      	adds	r7, r4, #4
  40c866:	6824      	ldr	r4, [r4, #0]
  40c868:	f003 feb4 	bl	4105d4 <__fpclassifyd>
  40c86c:	2800      	cmp	r0, #0
  40c86e:	d056      	beq.n	40c91e <__ssvfscanf_r+0xdaa>
  40c870:	4650      	mov	r0, sl
  40c872:	4659      	mov	r1, fp
  40c874:	f006 fcb6 	bl	4131e4 <__aeabi_d2f>
  40c878:	9706      	str	r7, [sp, #24]
  40c87a:	6020      	str	r0, [r4, #0]
  40c87c:	e613      	b.n	40c4a6 <__ssvfscanf_r+0x932>
  40c87e:	f017 0201 	ands.w	r2, r7, #1
  40c882:	f47f af28 	bne.w	40c6d6 <__ssvfscanf_r+0xb62>
  40c886:	07bc      	lsls	r4, r7, #30
  40c888:	f140 8097 	bpl.w	40c9ba <__ssvfscanf_r+0xe46>
  40c88c:	4b57      	ldr	r3, [pc, #348]	; (40c9ec <__ssvfscanf_r+0xe78>)
  40c88e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c890:	9905      	ldr	r1, [sp, #20]
  40c892:	429c      	cmp	r4, r3
  40c894:	4630      	mov	r0, r6
  40c896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c898:	f000 80a2 	beq.w	40c9e0 <__ssvfscanf_r+0xe6c>
  40c89c:	f004 ff5a 	bl	411754 <_strtoll_r>
  40c8a0:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c8a4:	f8dc 3000 	ldr.w	r3, [ip]
  40c8a8:	f10c 0c04 	add.w	ip, ip, #4
  40c8ac:	f8cd c018 	str.w	ip, [sp, #24]
  40c8b0:	e9c3 0100 	strd	r0, r1, [r3]
  40c8b4:	e718      	b.n	40c6e8 <__ssvfscanf_r+0xb74>
  40c8b6:	9204      	str	r2, [sp, #16]
  40c8b8:	f002 fc24 	bl	40f104 <__locale_mb_cur_max>
  40c8bc:	9a04      	ldr	r2, [sp, #16]
  40c8be:	4290      	cmp	r0, r2
  40c8c0:	f43f abf0 	beq.w	40c0a4 <__ssvfscanf_r+0x530>
  40c8c4:	682b      	ldr	r3, [r5, #0]
  40c8c6:	6869      	ldr	r1, [r5, #4]
  40c8c8:	f813 eb01 	ldrb.w	lr, [r3], #1
  40c8cc:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c8ce:	602b      	str	r3, [r5, #0]
  40c8d0:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40c8d4:	1c57      	adds	r7, r2, #1
  40c8d6:	3901      	subs	r1, #1
  40c8d8:	9000      	str	r0, [sp, #0]
  40c8da:	463b      	mov	r3, r7
  40c8dc:	6069      	str	r1, [r5, #4]
  40c8de:	f80c e002 	strb.w	lr, [ip, r2]
  40c8e2:	4630      	mov	r0, r6
  40c8e4:	4651      	mov	r1, sl
  40c8e6:	4662      	mov	r2, ip
  40c8e8:	f002 ff3e 	bl	40f768 <_mbrtowc_r>
  40c8ec:	1c43      	adds	r3, r0, #1
  40c8ee:	f43f abd9 	beq.w	40c0a4 <__ssvfscanf_r+0x530>
  40c8f2:	b9c8      	cbnz	r0, 40c928 <__ssvfscanf_r+0xdb4>
  40c8f4:	f8ca 0000 	str.w	r0, [sl]
  40c8f8:	f002 fbf2 	bl	40f0e0 <iswspace>
  40c8fc:	2800      	cmp	r0, #0
  40c8fe:	d053      	beq.n	40c9a8 <__ssvfscanf_r+0xe34>
  40c900:	2f00      	cmp	r7, #0
  40c902:	f43f ac66 	beq.w	40c1d2 <__ssvfscanf_r+0x65e>
  40c906:	ac56      	add	r4, sp, #344	; 0x158
  40c908:	443c      	add	r4, r7
  40c90a:	3f01      	subs	r7, #1
  40c90c:	4630      	mov	r0, r6
  40c90e:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40c912:	462a      	mov	r2, r5
  40c914:	f005 f9c4 	bl	411ca0 <_sungetc_r>
  40c918:	2f00      	cmp	r7, #0
  40c91a:	d1f6      	bne.n	40c90a <__ssvfscanf_r+0xd96>
  40c91c:	e459      	b.n	40c1d2 <__ssvfscanf_r+0x65e>
  40c91e:	f003 fecb 	bl	4106b8 <nanf>
  40c922:	9706      	str	r7, [sp, #24]
  40c924:	6020      	str	r0, [r4, #0]
  40c926:	e5be      	b.n	40c4a6 <__ssvfscanf_r+0x932>
  40c928:	3002      	adds	r0, #2
  40c92a:	d128      	bne.n	40c97e <__ssvfscanf_r+0xe0a>
  40c92c:	686b      	ldr	r3, [r5, #4]
  40c92e:	2b00      	cmp	r3, #0
  40c930:	dd4b      	ble.n	40c9ca <__ssvfscanf_r+0xe56>
  40c932:	463a      	mov	r2, r7
  40c934:	e442      	b.n	40c1bc <__ssvfscanf_r+0x648>
  40c936:	9c05      	ldr	r4, [sp, #20]
  40c938:	45a3      	cmp	fp, r4
  40c93a:	bf88      	it	hi
  40c93c:	465c      	movhi	r4, fp
  40c93e:	f67f a960 	bls.w	40bc02 <__ssvfscanf_r+0x8e>
  40c942:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40c946:	980e      	ldr	r0, [sp, #56]	; 0x38
  40c948:	462a      	mov	r2, r5
  40c94a:	f005 f9a9 	bl	411ca0 <_sungetc_r>
  40c94e:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40c952:	454c      	cmp	r4, r9
  40c954:	d1f5      	bne.n	40c942 <__ssvfscanf_r+0xdce>
  40c956:	f7ff b954 	b.w	40bc02 <__ssvfscanf_r+0x8e>
  40c95a:	f8dd c014 	ldr.w	ip, [sp, #20]
  40c95e:	45e3      	cmp	fp, ip
  40c960:	f67f a94f 	bls.w	40bc02 <__ssvfscanf_r+0x8e>
  40c964:	465c      	mov	r4, fp
  40c966:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40c96a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40c96c:	462a      	mov	r2, r5
  40c96e:	f005 f997 	bl	411ca0 <_sungetc_r>
  40c972:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40c976:	454c      	cmp	r4, r9
  40c978:	d1f5      	bne.n	40c966 <__ssvfscanf_r+0xdf2>
  40c97a:	f7ff b942 	b.w	40bc02 <__ssvfscanf_r+0x8e>
  40c97e:	f8da 0000 	ldr.w	r0, [sl]
  40c982:	e7b9      	b.n	40c8f8 <__ssvfscanf_r+0xd84>
  40c984:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40c988:	45cb      	cmp	fp, r9
  40c98a:	f67f a93a 	bls.w	40bc02 <__ssvfscanf_r+0x8e>
  40c98e:	465c      	mov	r4, fp
  40c990:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40c994:	980e      	ldr	r0, [sp, #56]	; 0x38
  40c996:	462a      	mov	r2, r5
  40c998:	f005 f982 	bl	411ca0 <_sungetc_r>
  40c99c:	f8dd c014 	ldr.w	ip, [sp, #20]
  40c9a0:	4564      	cmp	r4, ip
  40c9a2:	d1f5      	bne.n	40c990 <__ssvfscanf_r+0xe1c>
  40c9a4:	f7ff b92d 	b.w	40bc02 <__ssvfscanf_r+0x8e>
  40c9a8:	44b9      	add	r9, r7
  40c9aa:	3c01      	subs	r4, #1
  40c9ac:	f1bb 0f00 	cmp.w	fp, #0
  40c9b0:	d109      	bne.n	40c9c6 <__ssvfscanf_r+0xe52>
  40c9b2:	f10a 0a04 	add.w	sl, sl, #4
  40c9b6:	465f      	mov	r7, fp
  40c9b8:	e7b8      	b.n	40c92c <__ssvfscanf_r+0xdb8>
  40c9ba:	9c06      	ldr	r4, [sp, #24]
  40c9bc:	6823      	ldr	r3, [r4, #0]
  40c9be:	3404      	adds	r4, #4
  40c9c0:	9406      	str	r4, [sp, #24]
  40c9c2:	6018      	str	r0, [r3, #0]
  40c9c4:	e690      	b.n	40c6e8 <__ssvfscanf_r+0xb74>
  40c9c6:	4607      	mov	r7, r0
  40c9c8:	e7b0      	b.n	40c92c <__ssvfscanf_r+0xdb8>
  40c9ca:	4630      	mov	r0, r6
  40c9cc:	4629      	mov	r1, r5
  40c9ce:	f005 f9a7 	bl	411d20 <__ssrefill_r>
  40c9d2:	2800      	cmp	r0, #0
  40c9d4:	d0ad      	beq.n	40c932 <__ssvfscanf_r+0xdbe>
  40c9d6:	2f00      	cmp	r7, #0
  40c9d8:	f47f ab64 	bne.w	40c0a4 <__ssvfscanf_r+0x530>
  40c9dc:	f7ff bbf9 	b.w	40c1d2 <__ssvfscanf_r+0x65e>
  40c9e0:	f005 f816 	bl	411a10 <_strtoull_r>
  40c9e4:	e75c      	b.n	40c8a0 <__ssvfscanf_r+0xd2c>
  40c9e6:	bf00      	nop
  40c9e8:	00413458 	.word	0x00413458
  40c9ec:	004118f1 	.word	0x004118f1

0040c9f0 <__sprint_r.part.0>:
  40c9f0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40c9f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c9f6:	049c      	lsls	r4, r3, #18
  40c9f8:	460e      	mov	r6, r1
  40c9fa:	4680      	mov	r8, r0
  40c9fc:	4691      	mov	r9, r2
  40c9fe:	d52a      	bpl.n	40ca56 <__sprint_r.part.0+0x66>
  40ca00:	6893      	ldr	r3, [r2, #8]
  40ca02:	6812      	ldr	r2, [r2, #0]
  40ca04:	f102 0a08 	add.w	sl, r2, #8
  40ca08:	b31b      	cbz	r3, 40ca52 <__sprint_r.part.0+0x62>
  40ca0a:	e91a 00a0 	ldmdb	sl, {r5, r7}
  40ca0e:	08bf      	lsrs	r7, r7, #2
  40ca10:	d017      	beq.n	40ca42 <__sprint_r.part.0+0x52>
  40ca12:	3d04      	subs	r5, #4
  40ca14:	2400      	movs	r4, #0
  40ca16:	e001      	b.n	40ca1c <__sprint_r.part.0+0x2c>
  40ca18:	42a7      	cmp	r7, r4
  40ca1a:	d010      	beq.n	40ca3e <__sprint_r.part.0+0x4e>
  40ca1c:	4640      	mov	r0, r8
  40ca1e:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40ca22:	4632      	mov	r2, r6
  40ca24:	f002 f830 	bl	40ea88 <_fputwc_r>
  40ca28:	1c43      	adds	r3, r0, #1
  40ca2a:	f104 0401 	add.w	r4, r4, #1
  40ca2e:	d1f3      	bne.n	40ca18 <__sprint_r.part.0+0x28>
  40ca30:	2300      	movs	r3, #0
  40ca32:	f8c9 3008 	str.w	r3, [r9, #8]
  40ca36:	f8c9 3004 	str.w	r3, [r9, #4]
  40ca3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ca3e:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40ca42:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
  40ca46:	f8c9 3008 	str.w	r3, [r9, #8]
  40ca4a:	f10a 0a08 	add.w	sl, sl, #8
  40ca4e:	2b00      	cmp	r3, #0
  40ca50:	d1db      	bne.n	40ca0a <__sprint_r.part.0+0x1a>
  40ca52:	2000      	movs	r0, #0
  40ca54:	e7ec      	b.n	40ca30 <__sprint_r.part.0+0x40>
  40ca56:	f002 f991 	bl	40ed7c <__sfvwrite_r>
  40ca5a:	2300      	movs	r3, #0
  40ca5c:	f8c9 3008 	str.w	r3, [r9, #8]
  40ca60:	f8c9 3004 	str.w	r3, [r9, #4]
  40ca64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040ca68 <_vfiprintf_r>:
  40ca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ca6c:	b0b1      	sub	sp, #196	; 0xc4
  40ca6e:	461c      	mov	r4, r3
  40ca70:	9102      	str	r1, [sp, #8]
  40ca72:	4690      	mov	r8, r2
  40ca74:	9308      	str	r3, [sp, #32]
  40ca76:	9006      	str	r0, [sp, #24]
  40ca78:	b118      	cbz	r0, 40ca82 <_vfiprintf_r+0x1a>
  40ca7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ca7c:	2b00      	cmp	r3, #0
  40ca7e:	f000 80e8 	beq.w	40cc52 <_vfiprintf_r+0x1ea>
  40ca82:	9d02      	ldr	r5, [sp, #8]
  40ca84:	89ab      	ldrh	r3, [r5, #12]
  40ca86:	b29a      	uxth	r2, r3
  40ca88:	0490      	lsls	r0, r2, #18
  40ca8a:	d407      	bmi.n	40ca9c <_vfiprintf_r+0x34>
  40ca8c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  40ca8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40ca92:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
  40ca96:	81ab      	strh	r3, [r5, #12]
  40ca98:	b29a      	uxth	r2, r3
  40ca9a:	6669      	str	r1, [r5, #100]	; 0x64
  40ca9c:	0711      	lsls	r1, r2, #28
  40ca9e:	f140 80b7 	bpl.w	40cc10 <_vfiprintf_r+0x1a8>
  40caa2:	f8dd b008 	ldr.w	fp, [sp, #8]
  40caa6:	f8db 3010 	ldr.w	r3, [fp, #16]
  40caaa:	2b00      	cmp	r3, #0
  40caac:	f000 80b0 	beq.w	40cc10 <_vfiprintf_r+0x1a8>
  40cab0:	f002 021a 	and.w	r2, r2, #26
  40cab4:	2a0a      	cmp	r2, #10
  40cab6:	f000 80b7 	beq.w	40cc28 <_vfiprintf_r+0x1c0>
  40caba:	2300      	movs	r3, #0
  40cabc:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  40cac0:	930a      	str	r3, [sp, #40]	; 0x28
  40cac2:	9315      	str	r3, [sp, #84]	; 0x54
  40cac4:	9314      	str	r3, [sp, #80]	; 0x50
  40cac6:	9309      	str	r3, [sp, #36]	; 0x24
  40cac8:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  40cacc:	464e      	mov	r6, r9
  40cace:	f898 3000 	ldrb.w	r3, [r8]
  40cad2:	2b00      	cmp	r3, #0
  40cad4:	f000 84c4 	beq.w	40d460 <_vfiprintf_r+0x9f8>
  40cad8:	2b25      	cmp	r3, #37	; 0x25
  40cada:	f000 84c1 	beq.w	40d460 <_vfiprintf_r+0x9f8>
  40cade:	f108 0201 	add.w	r2, r8, #1
  40cae2:	e001      	b.n	40cae8 <_vfiprintf_r+0x80>
  40cae4:	2b25      	cmp	r3, #37	; 0x25
  40cae6:	d004      	beq.n	40caf2 <_vfiprintf_r+0x8a>
  40cae8:	4614      	mov	r4, r2
  40caea:	3201      	adds	r2, #1
  40caec:	7823      	ldrb	r3, [r4, #0]
  40caee:	2b00      	cmp	r3, #0
  40caf0:	d1f8      	bne.n	40cae4 <_vfiprintf_r+0x7c>
  40caf2:	ebc8 0504 	rsb	r5, r8, r4
  40caf6:	b195      	cbz	r5, 40cb1e <_vfiprintf_r+0xb6>
  40caf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40cafa:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40cafc:	f8c6 8000 	str.w	r8, [r6]
  40cb00:	3301      	adds	r3, #1
  40cb02:	442a      	add	r2, r5
  40cb04:	2b07      	cmp	r3, #7
  40cb06:	6075      	str	r5, [r6, #4]
  40cb08:	9215      	str	r2, [sp, #84]	; 0x54
  40cb0a:	9314      	str	r3, [sp, #80]	; 0x50
  40cb0c:	dd7b      	ble.n	40cc06 <_vfiprintf_r+0x19e>
  40cb0e:	2a00      	cmp	r2, #0
  40cb10:	f040 84d4 	bne.w	40d4bc <_vfiprintf_r+0xa54>
  40cb14:	9809      	ldr	r0, [sp, #36]	; 0x24
  40cb16:	9214      	str	r2, [sp, #80]	; 0x50
  40cb18:	4428      	add	r0, r5
  40cb1a:	464e      	mov	r6, r9
  40cb1c:	9009      	str	r0, [sp, #36]	; 0x24
  40cb1e:	7823      	ldrb	r3, [r4, #0]
  40cb20:	2b00      	cmp	r3, #0
  40cb22:	f000 83e9 	beq.w	40d2f8 <_vfiprintf_r+0x890>
  40cb26:	2100      	movs	r1, #0
  40cb28:	f04f 0200 	mov.w	r2, #0
  40cb2c:	f04f 3cff 	mov.w	ip, #4294967295
  40cb30:	7863      	ldrb	r3, [r4, #1]
  40cb32:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
  40cb36:	9104      	str	r1, [sp, #16]
  40cb38:	468a      	mov	sl, r1
  40cb3a:	f104 0801 	add.w	r8, r4, #1
  40cb3e:	4608      	mov	r0, r1
  40cb40:	4665      	mov	r5, ip
  40cb42:	f108 0801 	add.w	r8, r8, #1
  40cb46:	f1a3 0220 	sub.w	r2, r3, #32
  40cb4a:	2a58      	cmp	r2, #88	; 0x58
  40cb4c:	f200 82d5 	bhi.w	40d0fa <_vfiprintf_r+0x692>
  40cb50:	e8df f012 	tbh	[pc, r2, lsl #1]
  40cb54:	02d302c7 	.word	0x02d302c7
  40cb58:	02ce02d3 	.word	0x02ce02d3
  40cb5c:	02d302d3 	.word	0x02d302d3
  40cb60:	02d302d3 	.word	0x02d302d3
  40cb64:	02d302d3 	.word	0x02d302d3
  40cb68:	028b027e 	.word	0x028b027e
  40cb6c:	008402d3 	.word	0x008402d3
  40cb70:	02d3028f 	.word	0x02d3028f
  40cb74:	0194012b 	.word	0x0194012b
  40cb78:	01940194 	.word	0x01940194
  40cb7c:	01940194 	.word	0x01940194
  40cb80:	01940194 	.word	0x01940194
  40cb84:	01940194 	.word	0x01940194
  40cb88:	02d302d3 	.word	0x02d302d3
  40cb8c:	02d302d3 	.word	0x02d302d3
  40cb90:	02d302d3 	.word	0x02d302d3
  40cb94:	02d302d3 	.word	0x02d302d3
  40cb98:	02d302d3 	.word	0x02d302d3
  40cb9c:	02d30130 	.word	0x02d30130
  40cba0:	02d302d3 	.word	0x02d302d3
  40cba4:	02d302d3 	.word	0x02d302d3
  40cba8:	02d302d3 	.word	0x02d302d3
  40cbac:	02d302d3 	.word	0x02d302d3
  40cbb0:	017902d3 	.word	0x017902d3
  40cbb4:	02d302d3 	.word	0x02d302d3
  40cbb8:	02d302d3 	.word	0x02d302d3
  40cbbc:	01a202d3 	.word	0x01a202d3
  40cbc0:	02d302d3 	.word	0x02d302d3
  40cbc4:	02d301bd 	.word	0x02d301bd
  40cbc8:	02d302d3 	.word	0x02d302d3
  40cbcc:	02d302d3 	.word	0x02d302d3
  40cbd0:	02d302d3 	.word	0x02d302d3
  40cbd4:	02d302d3 	.word	0x02d302d3
  40cbd8:	01e202d3 	.word	0x01e202d3
  40cbdc:	02d301f8 	.word	0x02d301f8
  40cbe0:	02d302d3 	.word	0x02d302d3
  40cbe4:	01f80214 	.word	0x01f80214
  40cbe8:	02d302d3 	.word	0x02d302d3
  40cbec:	02d30219 	.word	0x02d30219
  40cbf0:	00890226 	.word	0x00890226
  40cbf4:	02790264 	.word	0x02790264
  40cbf8:	023802d3 	.word	0x023802d3
  40cbfc:	011902d3 	.word	0x011902d3
  40cc00:	02d302d3 	.word	0x02d302d3
  40cc04:	02ab      	.short	0x02ab
  40cc06:	3608      	adds	r6, #8
  40cc08:	9809      	ldr	r0, [sp, #36]	; 0x24
  40cc0a:	4428      	add	r0, r5
  40cc0c:	9009      	str	r0, [sp, #36]	; 0x24
  40cc0e:	e786      	b.n	40cb1e <_vfiprintf_r+0xb6>
  40cc10:	9806      	ldr	r0, [sp, #24]
  40cc12:	9902      	ldr	r1, [sp, #8]
  40cc14:	f000 fda2 	bl	40d75c <__swsetup_r>
  40cc18:	b9b0      	cbnz	r0, 40cc48 <_vfiprintf_r+0x1e0>
  40cc1a:	9d02      	ldr	r5, [sp, #8]
  40cc1c:	89aa      	ldrh	r2, [r5, #12]
  40cc1e:	f002 021a 	and.w	r2, r2, #26
  40cc22:	2a0a      	cmp	r2, #10
  40cc24:	f47f af49 	bne.w	40caba <_vfiprintf_r+0x52>
  40cc28:	f8dd b008 	ldr.w	fp, [sp, #8]
  40cc2c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40cc30:	2b00      	cmp	r3, #0
  40cc32:	f6ff af42 	blt.w	40caba <_vfiprintf_r+0x52>
  40cc36:	9806      	ldr	r0, [sp, #24]
  40cc38:	4659      	mov	r1, fp
  40cc3a:	4642      	mov	r2, r8
  40cc3c:	4623      	mov	r3, r4
  40cc3e:	f000 fd3d 	bl	40d6bc <__sbprintf>
  40cc42:	b031      	add	sp, #196	; 0xc4
  40cc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cc48:	f04f 30ff 	mov.w	r0, #4294967295
  40cc4c:	b031      	add	sp, #196	; 0xc4
  40cc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cc52:	f001 fe83 	bl	40e95c <__sinit>
  40cc56:	e714      	b.n	40ca82 <_vfiprintf_r+0x1a>
  40cc58:	4240      	negs	r0, r0
  40cc5a:	9308      	str	r3, [sp, #32]
  40cc5c:	f04a 0a04 	orr.w	sl, sl, #4
  40cc60:	f898 3000 	ldrb.w	r3, [r8]
  40cc64:	e76d      	b.n	40cb42 <_vfiprintf_r+0xda>
  40cc66:	f01a 0320 	ands.w	r3, sl, #32
  40cc6a:	9004      	str	r0, [sp, #16]
  40cc6c:	46ac      	mov	ip, r5
  40cc6e:	f000 80f2 	beq.w	40ce56 <_vfiprintf_r+0x3ee>
  40cc72:	f8dd b020 	ldr.w	fp, [sp, #32]
  40cc76:	f10b 0307 	add.w	r3, fp, #7
  40cc7a:	f023 0307 	bic.w	r3, r3, #7
  40cc7e:	f103 0408 	add.w	r4, r3, #8
  40cc82:	9408      	str	r4, [sp, #32]
  40cc84:	e9d3 4500 	ldrd	r4, r5, [r3]
  40cc88:	2300      	movs	r3, #0
  40cc8a:	f04f 0000 	mov.w	r0, #0
  40cc8e:	2100      	movs	r1, #0
  40cc90:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
  40cc94:	f8cd c014 	str.w	ip, [sp, #20]
  40cc98:	9107      	str	r1, [sp, #28]
  40cc9a:	f1bc 0f00 	cmp.w	ip, #0
  40cc9e:	bfa8      	it	ge
  40cca0:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  40cca4:	ea54 0205 	orrs.w	r2, r4, r5
  40cca8:	f040 80ad 	bne.w	40ce06 <_vfiprintf_r+0x39e>
  40ccac:	f1bc 0f00 	cmp.w	ip, #0
  40ccb0:	f040 80a9 	bne.w	40ce06 <_vfiprintf_r+0x39e>
  40ccb4:	2b00      	cmp	r3, #0
  40ccb6:	f040 83bc 	bne.w	40d432 <_vfiprintf_r+0x9ca>
  40ccba:	f01a 0f01 	tst.w	sl, #1
  40ccbe:	f000 83b8 	beq.w	40d432 <_vfiprintf_r+0x9ca>
  40ccc2:	af30      	add	r7, sp, #192	; 0xc0
  40ccc4:	2330      	movs	r3, #48	; 0x30
  40ccc6:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40ccca:	ebc7 0409 	rsb	r4, r7, r9
  40ccce:	9405      	str	r4, [sp, #20]
  40ccd0:	f8dd b014 	ldr.w	fp, [sp, #20]
  40ccd4:	9c07      	ldr	r4, [sp, #28]
  40ccd6:	45e3      	cmp	fp, ip
  40ccd8:	bfb8      	it	lt
  40ccda:	46e3      	movlt	fp, ip
  40ccdc:	f8cd b00c 	str.w	fp, [sp, #12]
  40cce0:	b11c      	cbz	r4, 40ccea <_vfiprintf_r+0x282>
  40cce2:	f10b 0b01 	add.w	fp, fp, #1
  40cce6:	f8cd b00c 	str.w	fp, [sp, #12]
  40ccea:	f01a 0502 	ands.w	r5, sl, #2
  40ccee:	9507      	str	r5, [sp, #28]
  40ccf0:	d005      	beq.n	40ccfe <_vfiprintf_r+0x296>
  40ccf2:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40ccf6:	f10b 0b02 	add.w	fp, fp, #2
  40ccfa:	f8cd b00c 	str.w	fp, [sp, #12]
  40ccfe:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
  40cd02:	930b      	str	r3, [sp, #44]	; 0x2c
  40cd04:	f040 8217 	bne.w	40d136 <_vfiprintf_r+0x6ce>
  40cd08:	9d04      	ldr	r5, [sp, #16]
  40cd0a:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40cd0e:	ebcb 0405 	rsb	r4, fp, r5
  40cd12:	2c00      	cmp	r4, #0
  40cd14:	f340 820f 	ble.w	40d136 <_vfiprintf_r+0x6ce>
  40cd18:	2c10      	cmp	r4, #16
  40cd1a:	f340 8488 	ble.w	40d62e <_vfiprintf_r+0xbc6>
  40cd1e:	4dbd      	ldr	r5, [pc, #756]	; (40d014 <_vfiprintf_r+0x5ac>)
  40cd20:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40cd22:	9814      	ldr	r0, [sp, #80]	; 0x50
  40cd24:	462b      	mov	r3, r5
  40cd26:	f04f 0b10 	mov.w	fp, #16
  40cd2a:	4625      	mov	r5, r4
  40cd2c:	4664      	mov	r4, ip
  40cd2e:	46b4      	mov	ip, r6
  40cd30:	461e      	mov	r6, r3
  40cd32:	e006      	b.n	40cd42 <_vfiprintf_r+0x2da>
  40cd34:	1c83      	adds	r3, r0, #2
  40cd36:	f10c 0c08 	add.w	ip, ip, #8
  40cd3a:	4608      	mov	r0, r1
  40cd3c:	3d10      	subs	r5, #16
  40cd3e:	2d10      	cmp	r5, #16
  40cd40:	dd11      	ble.n	40cd66 <_vfiprintf_r+0x2fe>
  40cd42:	1c41      	adds	r1, r0, #1
  40cd44:	3210      	adds	r2, #16
  40cd46:	2907      	cmp	r1, #7
  40cd48:	9215      	str	r2, [sp, #84]	; 0x54
  40cd4a:	e88c 0840 	stmia.w	ip, {r6, fp}
  40cd4e:	9114      	str	r1, [sp, #80]	; 0x50
  40cd50:	ddf0      	ble.n	40cd34 <_vfiprintf_r+0x2cc>
  40cd52:	2a00      	cmp	r2, #0
  40cd54:	f040 81e2 	bne.w	40d11c <_vfiprintf_r+0x6b4>
  40cd58:	3d10      	subs	r5, #16
  40cd5a:	2d10      	cmp	r5, #16
  40cd5c:	f04f 0301 	mov.w	r3, #1
  40cd60:	4610      	mov	r0, r2
  40cd62:	46cc      	mov	ip, r9
  40cd64:	dced      	bgt.n	40cd42 <_vfiprintf_r+0x2da>
  40cd66:	4631      	mov	r1, r6
  40cd68:	4666      	mov	r6, ip
  40cd6a:	46a4      	mov	ip, r4
  40cd6c:	462c      	mov	r4, r5
  40cd6e:	460d      	mov	r5, r1
  40cd70:	4422      	add	r2, r4
  40cd72:	2b07      	cmp	r3, #7
  40cd74:	9215      	str	r2, [sp, #84]	; 0x54
  40cd76:	6035      	str	r5, [r6, #0]
  40cd78:	6074      	str	r4, [r6, #4]
  40cd7a:	9314      	str	r3, [sp, #80]	; 0x50
  40cd7c:	f300 8369 	bgt.w	40d452 <_vfiprintf_r+0x9ea>
  40cd80:	3608      	adds	r6, #8
  40cd82:	1c59      	adds	r1, r3, #1
  40cd84:	e1da      	b.n	40d13c <_vfiprintf_r+0x6d4>
  40cd86:	f01a 0f20 	tst.w	sl, #32
  40cd8a:	9004      	str	r0, [sp, #16]
  40cd8c:	46ac      	mov	ip, r5
  40cd8e:	f000 808b 	beq.w	40cea8 <_vfiprintf_r+0x440>
  40cd92:	9d08      	ldr	r5, [sp, #32]
  40cd94:	1deb      	adds	r3, r5, #7
  40cd96:	f023 0307 	bic.w	r3, r3, #7
  40cd9a:	f103 0b08 	add.w	fp, r3, #8
  40cd9e:	e9d3 4500 	ldrd	r4, r5, [r3]
  40cda2:	f8cd b020 	str.w	fp, [sp, #32]
  40cda6:	2301      	movs	r3, #1
  40cda8:	e76f      	b.n	40cc8a <_vfiprintf_r+0x222>
  40cdaa:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
  40cdae:	f898 3000 	ldrb.w	r3, [r8]
  40cdb2:	e6c6      	b.n	40cb42 <_vfiprintf_r+0xda>
  40cdb4:	f04a 0a10 	orr.w	sl, sl, #16
  40cdb8:	f01a 0f20 	tst.w	sl, #32
  40cdbc:	9004      	str	r0, [sp, #16]
  40cdbe:	46ac      	mov	ip, r5
  40cdc0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40cdc4:	f000 80c6 	beq.w	40cf54 <_vfiprintf_r+0x4ec>
  40cdc8:	9c08      	ldr	r4, [sp, #32]
  40cdca:	1de1      	adds	r1, r4, #7
  40cdcc:	f021 0107 	bic.w	r1, r1, #7
  40cdd0:	e9d1 2300 	ldrd	r2, r3, [r1]
  40cdd4:	3108      	adds	r1, #8
  40cdd6:	9108      	str	r1, [sp, #32]
  40cdd8:	4614      	mov	r4, r2
  40cdda:	461d      	mov	r5, r3
  40cddc:	2a00      	cmp	r2, #0
  40cdde:	f173 0000 	sbcs.w	r0, r3, #0
  40cde2:	f2c0 83cd 	blt.w	40d580 <_vfiprintf_r+0xb18>
  40cde6:	f1bc 0f00 	cmp.w	ip, #0
  40cdea:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
  40cdee:	9107      	str	r1, [sp, #28]
  40cdf0:	bfa8      	it	ge
  40cdf2:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  40cdf6:	ea54 0205 	orrs.w	r2, r4, r5
  40cdfa:	f8cd c014 	str.w	ip, [sp, #20]
  40cdfe:	f04f 0301 	mov.w	r3, #1
  40ce02:	f43f af53 	beq.w	40ccac <_vfiprintf_r+0x244>
  40ce06:	2b01      	cmp	r3, #1
  40ce08:	f000 8315 	beq.w	40d436 <_vfiprintf_r+0x9ce>
  40ce0c:	2b02      	cmp	r3, #2
  40ce0e:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
  40ce12:	f040 8248 	bne.w	40d2a6 <_vfiprintf_r+0x83e>
  40ce16:	980a      	ldr	r0, [sp, #40]	; 0x28
  40ce18:	4619      	mov	r1, r3
  40ce1a:	0922      	lsrs	r2, r4, #4
  40ce1c:	f004 040f 	and.w	r4, r4, #15
  40ce20:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  40ce24:	460f      	mov	r7, r1
  40ce26:	092b      	lsrs	r3, r5, #4
  40ce28:	5d01      	ldrb	r1, [r0, r4]
  40ce2a:	7039      	strb	r1, [r7, #0]
  40ce2c:	ea52 0b03 	orrs.w	fp, r2, r3
  40ce30:	4614      	mov	r4, r2
  40ce32:	461d      	mov	r5, r3
  40ce34:	f107 31ff 	add.w	r1, r7, #4294967295
  40ce38:	d1ef      	bne.n	40ce1a <_vfiprintf_r+0x3b2>
  40ce3a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40ce3e:	ebc7 0309 	rsb	r3, r7, r9
  40ce42:	9305      	str	r3, [sp, #20]
  40ce44:	e744      	b.n	40ccd0 <_vfiprintf_r+0x268>
  40ce46:	f04a 0a10 	orr.w	sl, sl, #16
  40ce4a:	f01a 0320 	ands.w	r3, sl, #32
  40ce4e:	9004      	str	r0, [sp, #16]
  40ce50:	46ac      	mov	ip, r5
  40ce52:	f47f af0e 	bne.w	40cc72 <_vfiprintf_r+0x20a>
  40ce56:	f01a 0210 	ands.w	r2, sl, #16
  40ce5a:	f040 830f 	bne.w	40d47c <_vfiprintf_r+0xa14>
  40ce5e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
  40ce62:	f000 830b 	beq.w	40d47c <_vfiprintf_r+0xa14>
  40ce66:	f8dd b020 	ldr.w	fp, [sp, #32]
  40ce6a:	f8bb 4000 	ldrh.w	r4, [fp]
  40ce6e:	f10b 0b04 	add.w	fp, fp, #4
  40ce72:	4613      	mov	r3, r2
  40ce74:	2500      	movs	r5, #0
  40ce76:	f8cd b020 	str.w	fp, [sp, #32]
  40ce7a:	e706      	b.n	40cc8a <_vfiprintf_r+0x222>
  40ce7c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40ce80:	2000      	movs	r0, #0
  40ce82:	f818 3b01 	ldrb.w	r3, [r8], #1
  40ce86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40ce8a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  40ce8e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40ce92:	2a09      	cmp	r2, #9
  40ce94:	d9f5      	bls.n	40ce82 <_vfiprintf_r+0x41a>
  40ce96:	e656      	b.n	40cb46 <_vfiprintf_r+0xde>
  40ce98:	f04a 0a10 	orr.w	sl, sl, #16
  40ce9c:	f01a 0f20 	tst.w	sl, #32
  40cea0:	9004      	str	r0, [sp, #16]
  40cea2:	46ac      	mov	ip, r5
  40cea4:	f47f af75 	bne.w	40cd92 <_vfiprintf_r+0x32a>
  40cea8:	f01a 0f10 	tst.w	sl, #16
  40ceac:	f040 82ec 	bne.w	40d488 <_vfiprintf_r+0xa20>
  40ceb0:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40ceb4:	f000 82e8 	beq.w	40d488 <_vfiprintf_r+0xa20>
  40ceb8:	f8dd b020 	ldr.w	fp, [sp, #32]
  40cebc:	f8bb 4000 	ldrh.w	r4, [fp]
  40cec0:	f10b 0b04 	add.w	fp, fp, #4
  40cec4:	2500      	movs	r5, #0
  40cec6:	2301      	movs	r3, #1
  40cec8:	f8cd b020 	str.w	fp, [sp, #32]
  40cecc:	e6dd      	b.n	40cc8a <_vfiprintf_r+0x222>
  40cece:	46ac      	mov	ip, r5
  40ced0:	f01a 0f20 	tst.w	sl, #32
  40ced4:	4d50      	ldr	r5, [pc, #320]	; (40d018 <_vfiprintf_r+0x5b0>)
  40ced6:	9004      	str	r0, [sp, #16]
  40ced8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40cedc:	950a      	str	r5, [sp, #40]	; 0x28
  40cede:	f000 80ee 	beq.w	40d0be <_vfiprintf_r+0x656>
  40cee2:	9d08      	ldr	r5, [sp, #32]
  40cee4:	1dea      	adds	r2, r5, #7
  40cee6:	f022 0207 	bic.w	r2, r2, #7
  40ceea:	e9d2 4500 	ldrd	r4, r5, [r2]
  40ceee:	f102 0b08 	add.w	fp, r2, #8
  40cef2:	f8cd b020 	str.w	fp, [sp, #32]
  40cef6:	f01a 0f01 	tst.w	sl, #1
  40cefa:	f000 82a8 	beq.w	40d44e <_vfiprintf_r+0x9e6>
  40cefe:	ea54 0b05 	orrs.w	fp, r4, r5
  40cf02:	f000 82a4 	beq.w	40d44e <_vfiprintf_r+0x9e6>
  40cf06:	2230      	movs	r2, #48	; 0x30
  40cf08:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  40cf0c:	f04a 0a02 	orr.w	sl, sl, #2
  40cf10:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40cf14:	2302      	movs	r3, #2
  40cf16:	e6b8      	b.n	40cc8a <_vfiprintf_r+0x222>
  40cf18:	9b08      	ldr	r3, [sp, #32]
  40cf1a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40cf1e:	681b      	ldr	r3, [r3, #0]
  40cf20:	9004      	str	r0, [sp, #16]
  40cf22:	2401      	movs	r4, #1
  40cf24:	f04f 0500 	mov.w	r5, #0
  40cf28:	f10b 0b04 	add.w	fp, fp, #4
  40cf2c:	9403      	str	r4, [sp, #12]
  40cf2e:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  40cf32:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  40cf36:	f8cd b020 	str.w	fp, [sp, #32]
  40cf3a:	9405      	str	r4, [sp, #20]
  40cf3c:	af16      	add	r7, sp, #88	; 0x58
  40cf3e:	f04f 0c00 	mov.w	ip, #0
  40cf42:	e6d2      	b.n	40ccea <_vfiprintf_r+0x282>
  40cf44:	f01a 0f20 	tst.w	sl, #32
  40cf48:	9004      	str	r0, [sp, #16]
  40cf4a:	46ac      	mov	ip, r5
  40cf4c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40cf50:	f47f af3a 	bne.w	40cdc8 <_vfiprintf_r+0x360>
  40cf54:	f01a 0f10 	tst.w	sl, #16
  40cf58:	f040 82a4 	bne.w	40d4a4 <_vfiprintf_r+0xa3c>
  40cf5c:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40cf60:	f000 82a0 	beq.w	40d4a4 <_vfiprintf_r+0xa3c>
  40cf64:	f8dd b020 	ldr.w	fp, [sp, #32]
  40cf68:	f9bb 4000 	ldrsh.w	r4, [fp]
  40cf6c:	f10b 0b04 	add.w	fp, fp, #4
  40cf70:	17e5      	asrs	r5, r4, #31
  40cf72:	4622      	mov	r2, r4
  40cf74:	462b      	mov	r3, r5
  40cf76:	f8cd b020 	str.w	fp, [sp, #32]
  40cf7a:	e72f      	b.n	40cddc <_vfiprintf_r+0x374>
  40cf7c:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
  40cf80:	f898 3000 	ldrb.w	r3, [r8]
  40cf84:	e5dd      	b.n	40cb42 <_vfiprintf_r+0xda>
  40cf86:	f898 3000 	ldrb.w	r3, [r8]
  40cf8a:	4642      	mov	r2, r8
  40cf8c:	2b6c      	cmp	r3, #108	; 0x6c
  40cf8e:	bf03      	ittte	eq
  40cf90:	f108 0801 	addeq.w	r8, r8, #1
  40cf94:	f04a 0a20 	orreq.w	sl, sl, #32
  40cf98:	7853      	ldrbeq	r3, [r2, #1]
  40cf9a:	f04a 0a10 	orrne.w	sl, sl, #16
  40cf9e:	e5d0      	b.n	40cb42 <_vfiprintf_r+0xda>
  40cfa0:	f01a 0f20 	tst.w	sl, #32
  40cfa4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40cfa8:	f000 82f8 	beq.w	40d59c <_vfiprintf_r+0xb34>
  40cfac:	9c08      	ldr	r4, [sp, #32]
  40cfae:	6821      	ldr	r1, [r4, #0]
  40cfb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40cfb2:	17e5      	asrs	r5, r4, #31
  40cfb4:	462b      	mov	r3, r5
  40cfb6:	9d08      	ldr	r5, [sp, #32]
  40cfb8:	4622      	mov	r2, r4
  40cfba:	3504      	adds	r5, #4
  40cfbc:	9508      	str	r5, [sp, #32]
  40cfbe:	e9c1 2300 	strd	r2, r3, [r1]
  40cfc2:	e584      	b.n	40cace <_vfiprintf_r+0x66>
  40cfc4:	9c08      	ldr	r4, [sp, #32]
  40cfc6:	9004      	str	r0, [sp, #16]
  40cfc8:	6827      	ldr	r7, [r4, #0]
  40cfca:	46ac      	mov	ip, r5
  40cfcc:	f04f 0500 	mov.w	r5, #0
  40cfd0:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  40cfd4:	3404      	adds	r4, #4
  40cfd6:	2f00      	cmp	r7, #0
  40cfd8:	f000 8334 	beq.w	40d644 <_vfiprintf_r+0xbdc>
  40cfdc:	f1bc 0f00 	cmp.w	ip, #0
  40cfe0:	4638      	mov	r0, r7
  40cfe2:	f2c0 8308 	blt.w	40d5f6 <_vfiprintf_r+0xb8e>
  40cfe6:	4662      	mov	r2, ip
  40cfe8:	2100      	movs	r1, #0
  40cfea:	f8cd c004 	str.w	ip, [sp, #4]
  40cfee:	f002 fbff 	bl	40f7f0 <memchr>
  40cff2:	f8dd c004 	ldr.w	ip, [sp, #4]
  40cff6:	2800      	cmp	r0, #0
  40cff8:	f000 833c 	beq.w	40d674 <_vfiprintf_r+0xc0c>
  40cffc:	1bc0      	subs	r0, r0, r7
  40cffe:	4560      	cmp	r0, ip
  40d000:	bfa8      	it	ge
  40d002:	4660      	movge	r0, ip
  40d004:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  40d008:	9005      	str	r0, [sp, #20]
  40d00a:	9408      	str	r4, [sp, #32]
  40d00c:	9507      	str	r5, [sp, #28]
  40d00e:	f04f 0c00 	mov.w	ip, #0
  40d012:	e65d      	b.n	40ccd0 <_vfiprintf_r+0x268>
  40d014:	00413470 	.word	0x00413470
  40d018:	004133f0 	.word	0x004133f0
  40d01c:	9a08      	ldr	r2, [sp, #32]
  40d01e:	9004      	str	r0, [sp, #16]
  40d020:	2330      	movs	r3, #48	; 0x30
  40d022:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40d026:	f102 0b04 	add.w	fp, r2, #4
  40d02a:	2378      	movs	r3, #120	; 0x78
  40d02c:	48af      	ldr	r0, [pc, #700]	; (40d2ec <_vfiprintf_r+0x884>)
  40d02e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  40d032:	46ac      	mov	ip, r5
  40d034:	6814      	ldr	r4, [r2, #0]
  40d036:	f8cd b020 	str.w	fp, [sp, #32]
  40d03a:	f04a 0a02 	orr.w	sl, sl, #2
  40d03e:	2500      	movs	r5, #0
  40d040:	900a      	str	r0, [sp, #40]	; 0x28
  40d042:	2302      	movs	r3, #2
  40d044:	e621      	b.n	40cc8a <_vfiprintf_r+0x222>
  40d046:	f04a 0a20 	orr.w	sl, sl, #32
  40d04a:	f898 3000 	ldrb.w	r3, [r8]
  40d04e:	e578      	b.n	40cb42 <_vfiprintf_r+0xda>
  40d050:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d054:	f8db 0000 	ldr.w	r0, [fp]
  40d058:	2800      	cmp	r0, #0
  40d05a:	f10b 0304 	add.w	r3, fp, #4
  40d05e:	f6ff adfb 	blt.w	40cc58 <_vfiprintf_r+0x1f0>
  40d062:	9308      	str	r3, [sp, #32]
  40d064:	f898 3000 	ldrb.w	r3, [r8]
  40d068:	e56b      	b.n	40cb42 <_vfiprintf_r+0xda>
  40d06a:	f898 3000 	ldrb.w	r3, [r8]
  40d06e:	212b      	movs	r1, #43	; 0x2b
  40d070:	e567      	b.n	40cb42 <_vfiprintf_r+0xda>
  40d072:	f898 3000 	ldrb.w	r3, [r8]
  40d076:	2b2a      	cmp	r3, #42	; 0x2a
  40d078:	f108 0401 	add.w	r4, r8, #1
  40d07c:	f000 8309 	beq.w	40d692 <_vfiprintf_r+0xc2a>
  40d080:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40d084:	2a09      	cmp	r2, #9
  40d086:	bf98      	it	ls
  40d088:	2500      	movls	r5, #0
  40d08a:	f200 82fe 	bhi.w	40d68a <_vfiprintf_r+0xc22>
  40d08e:	f814 3b01 	ldrb.w	r3, [r4], #1
  40d092:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40d096:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40d09a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40d09e:	2a09      	cmp	r2, #9
  40d0a0:	d9f5      	bls.n	40d08e <_vfiprintf_r+0x626>
  40d0a2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  40d0a6:	46a0      	mov	r8, r4
  40d0a8:	e54d      	b.n	40cb46 <_vfiprintf_r+0xde>
  40d0aa:	4c90      	ldr	r4, [pc, #576]	; (40d2ec <_vfiprintf_r+0x884>)
  40d0ac:	9004      	str	r0, [sp, #16]
  40d0ae:	f01a 0f20 	tst.w	sl, #32
  40d0b2:	46ac      	mov	ip, r5
  40d0b4:	940a      	str	r4, [sp, #40]	; 0x28
  40d0b6:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40d0ba:	f47f af12 	bne.w	40cee2 <_vfiprintf_r+0x47a>
  40d0be:	f01a 0f10 	tst.w	sl, #16
  40d0c2:	f040 81e9 	bne.w	40d498 <_vfiprintf_r+0xa30>
  40d0c6:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40d0ca:	f000 81e5 	beq.w	40d498 <_vfiprintf_r+0xa30>
  40d0ce:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d0d2:	f8bb 4000 	ldrh.w	r4, [fp]
  40d0d6:	f10b 0b04 	add.w	fp, fp, #4
  40d0da:	2500      	movs	r5, #0
  40d0dc:	f8cd b020 	str.w	fp, [sp, #32]
  40d0e0:	e709      	b.n	40cef6 <_vfiprintf_r+0x48e>
  40d0e2:	f898 3000 	ldrb.w	r3, [r8]
  40d0e6:	2900      	cmp	r1, #0
  40d0e8:	f47f ad2b 	bne.w	40cb42 <_vfiprintf_r+0xda>
  40d0ec:	2120      	movs	r1, #32
  40d0ee:	e528      	b.n	40cb42 <_vfiprintf_r+0xda>
  40d0f0:	f04a 0a01 	orr.w	sl, sl, #1
  40d0f4:	f898 3000 	ldrb.w	r3, [r8]
  40d0f8:	e523      	b.n	40cb42 <_vfiprintf_r+0xda>
  40d0fa:	9004      	str	r0, [sp, #16]
  40d0fc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40d100:	2b00      	cmp	r3, #0
  40d102:	f000 80f9 	beq.w	40d2f8 <_vfiprintf_r+0x890>
  40d106:	2501      	movs	r5, #1
  40d108:	f04f 0b00 	mov.w	fp, #0
  40d10c:	9503      	str	r5, [sp, #12]
  40d10e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  40d112:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  40d116:	9505      	str	r5, [sp, #20]
  40d118:	af16      	add	r7, sp, #88	; 0x58
  40d11a:	e710      	b.n	40cf3e <_vfiprintf_r+0x4d6>
  40d11c:	9806      	ldr	r0, [sp, #24]
  40d11e:	9902      	ldr	r1, [sp, #8]
  40d120:	aa13      	add	r2, sp, #76	; 0x4c
  40d122:	f7ff fc65 	bl	40c9f0 <__sprint_r.part.0>
  40d126:	2800      	cmp	r0, #0
  40d128:	f040 80ed 	bne.w	40d306 <_vfiprintf_r+0x89e>
  40d12c:	9814      	ldr	r0, [sp, #80]	; 0x50
  40d12e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d130:	1c43      	adds	r3, r0, #1
  40d132:	46cc      	mov	ip, r9
  40d134:	e602      	b.n	40cd3c <_vfiprintf_r+0x2d4>
  40d136:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d138:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d13a:	1c59      	adds	r1, r3, #1
  40d13c:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
  40d140:	b168      	cbz	r0, 40d15e <_vfiprintf_r+0x6f6>
  40d142:	3201      	adds	r2, #1
  40d144:	f10d 0047 	add.w	r0, sp, #71	; 0x47
  40d148:	2301      	movs	r3, #1
  40d14a:	2907      	cmp	r1, #7
  40d14c:	9215      	str	r2, [sp, #84]	; 0x54
  40d14e:	9114      	str	r1, [sp, #80]	; 0x50
  40d150:	e886 0009 	stmia.w	r6, {r0, r3}
  40d154:	f300 8160 	bgt.w	40d418 <_vfiprintf_r+0x9b0>
  40d158:	460b      	mov	r3, r1
  40d15a:	3608      	adds	r6, #8
  40d15c:	3101      	adds	r1, #1
  40d15e:	9c07      	ldr	r4, [sp, #28]
  40d160:	b164      	cbz	r4, 40d17c <_vfiprintf_r+0x714>
  40d162:	3202      	adds	r2, #2
  40d164:	a812      	add	r0, sp, #72	; 0x48
  40d166:	2302      	movs	r3, #2
  40d168:	2907      	cmp	r1, #7
  40d16a:	9215      	str	r2, [sp, #84]	; 0x54
  40d16c:	9114      	str	r1, [sp, #80]	; 0x50
  40d16e:	e886 0009 	stmia.w	r6, {r0, r3}
  40d172:	f300 8157 	bgt.w	40d424 <_vfiprintf_r+0x9bc>
  40d176:	460b      	mov	r3, r1
  40d178:	3608      	adds	r6, #8
  40d17a:	3101      	adds	r1, #1
  40d17c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40d17e:	2d80      	cmp	r5, #128	; 0x80
  40d180:	f000 8101 	beq.w	40d386 <_vfiprintf_r+0x91e>
  40d184:	9d05      	ldr	r5, [sp, #20]
  40d186:	ebc5 040c 	rsb	r4, r5, ip
  40d18a:	2c00      	cmp	r4, #0
  40d18c:	dd2f      	ble.n	40d1ee <_vfiprintf_r+0x786>
  40d18e:	2c10      	cmp	r4, #16
  40d190:	4d57      	ldr	r5, [pc, #348]	; (40d2f0 <_vfiprintf_r+0x888>)
  40d192:	dd22      	ble.n	40d1da <_vfiprintf_r+0x772>
  40d194:	4630      	mov	r0, r6
  40d196:	f04f 0b10 	mov.w	fp, #16
  40d19a:	462e      	mov	r6, r5
  40d19c:	4625      	mov	r5, r4
  40d19e:	9c06      	ldr	r4, [sp, #24]
  40d1a0:	e006      	b.n	40d1b0 <_vfiprintf_r+0x748>
  40d1a2:	f103 0c02 	add.w	ip, r3, #2
  40d1a6:	3008      	adds	r0, #8
  40d1a8:	460b      	mov	r3, r1
  40d1aa:	3d10      	subs	r5, #16
  40d1ac:	2d10      	cmp	r5, #16
  40d1ae:	dd10      	ble.n	40d1d2 <_vfiprintf_r+0x76a>
  40d1b0:	1c59      	adds	r1, r3, #1
  40d1b2:	3210      	adds	r2, #16
  40d1b4:	2907      	cmp	r1, #7
  40d1b6:	9215      	str	r2, [sp, #84]	; 0x54
  40d1b8:	e880 0840 	stmia.w	r0, {r6, fp}
  40d1bc:	9114      	str	r1, [sp, #80]	; 0x50
  40d1be:	ddf0      	ble.n	40d1a2 <_vfiprintf_r+0x73a>
  40d1c0:	2a00      	cmp	r2, #0
  40d1c2:	d163      	bne.n	40d28c <_vfiprintf_r+0x824>
  40d1c4:	3d10      	subs	r5, #16
  40d1c6:	2d10      	cmp	r5, #16
  40d1c8:	f04f 0c01 	mov.w	ip, #1
  40d1cc:	4613      	mov	r3, r2
  40d1ce:	4648      	mov	r0, r9
  40d1d0:	dcee      	bgt.n	40d1b0 <_vfiprintf_r+0x748>
  40d1d2:	462c      	mov	r4, r5
  40d1d4:	4661      	mov	r1, ip
  40d1d6:	4635      	mov	r5, r6
  40d1d8:	4606      	mov	r6, r0
  40d1da:	4422      	add	r2, r4
  40d1dc:	2907      	cmp	r1, #7
  40d1de:	9215      	str	r2, [sp, #84]	; 0x54
  40d1e0:	6035      	str	r5, [r6, #0]
  40d1e2:	6074      	str	r4, [r6, #4]
  40d1e4:	9114      	str	r1, [sp, #80]	; 0x50
  40d1e6:	f300 80c1 	bgt.w	40d36c <_vfiprintf_r+0x904>
  40d1ea:	3608      	adds	r6, #8
  40d1ec:	3101      	adds	r1, #1
  40d1ee:	9d05      	ldr	r5, [sp, #20]
  40d1f0:	6037      	str	r7, [r6, #0]
  40d1f2:	442a      	add	r2, r5
  40d1f4:	2907      	cmp	r1, #7
  40d1f6:	9215      	str	r2, [sp, #84]	; 0x54
  40d1f8:	6075      	str	r5, [r6, #4]
  40d1fa:	9114      	str	r1, [sp, #80]	; 0x50
  40d1fc:	f340 80c1 	ble.w	40d382 <_vfiprintf_r+0x91a>
  40d200:	2a00      	cmp	r2, #0
  40d202:	f040 8130 	bne.w	40d466 <_vfiprintf_r+0x9fe>
  40d206:	9214      	str	r2, [sp, #80]	; 0x50
  40d208:	464e      	mov	r6, r9
  40d20a:	f01a 0f04 	tst.w	sl, #4
  40d20e:	f000 808b 	beq.w	40d328 <_vfiprintf_r+0x8c0>
  40d212:	9d04      	ldr	r5, [sp, #16]
  40d214:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40d218:	ebcb 0405 	rsb	r4, fp, r5
  40d21c:	2c00      	cmp	r4, #0
  40d21e:	f340 8083 	ble.w	40d328 <_vfiprintf_r+0x8c0>
  40d222:	2c10      	cmp	r4, #16
  40d224:	f340 8222 	ble.w	40d66c <_vfiprintf_r+0xc04>
  40d228:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d22a:	4d32      	ldr	r5, [pc, #200]	; (40d2f4 <_vfiprintf_r+0x88c>)
  40d22c:	f8dd a018 	ldr.w	sl, [sp, #24]
  40d230:	f8dd b008 	ldr.w	fp, [sp, #8]
  40d234:	2710      	movs	r7, #16
  40d236:	e005      	b.n	40d244 <_vfiprintf_r+0x7dc>
  40d238:	1c88      	adds	r0, r1, #2
  40d23a:	3608      	adds	r6, #8
  40d23c:	4619      	mov	r1, r3
  40d23e:	3c10      	subs	r4, #16
  40d240:	2c10      	cmp	r4, #16
  40d242:	dd10      	ble.n	40d266 <_vfiprintf_r+0x7fe>
  40d244:	1c4b      	adds	r3, r1, #1
  40d246:	3210      	adds	r2, #16
  40d248:	2b07      	cmp	r3, #7
  40d24a:	9215      	str	r2, [sp, #84]	; 0x54
  40d24c:	e886 00a0 	stmia.w	r6, {r5, r7}
  40d250:	9314      	str	r3, [sp, #80]	; 0x50
  40d252:	ddf1      	ble.n	40d238 <_vfiprintf_r+0x7d0>
  40d254:	2a00      	cmp	r2, #0
  40d256:	d17d      	bne.n	40d354 <_vfiprintf_r+0x8ec>
  40d258:	3c10      	subs	r4, #16
  40d25a:	2c10      	cmp	r4, #16
  40d25c:	f04f 0001 	mov.w	r0, #1
  40d260:	4611      	mov	r1, r2
  40d262:	464e      	mov	r6, r9
  40d264:	dcee      	bgt.n	40d244 <_vfiprintf_r+0x7dc>
  40d266:	4422      	add	r2, r4
  40d268:	2807      	cmp	r0, #7
  40d26a:	9215      	str	r2, [sp, #84]	; 0x54
  40d26c:	6035      	str	r5, [r6, #0]
  40d26e:	6074      	str	r4, [r6, #4]
  40d270:	9014      	str	r0, [sp, #80]	; 0x50
  40d272:	dd59      	ble.n	40d328 <_vfiprintf_r+0x8c0>
  40d274:	2a00      	cmp	r2, #0
  40d276:	d14f      	bne.n	40d318 <_vfiprintf_r+0x8b0>
  40d278:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d27a:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40d27e:	9d04      	ldr	r5, [sp, #16]
  40d280:	45ab      	cmp	fp, r5
  40d282:	bfac      	ite	ge
  40d284:	445c      	addge	r4, fp
  40d286:	1964      	addlt	r4, r4, r5
  40d288:	9409      	str	r4, [sp, #36]	; 0x24
  40d28a:	e05e      	b.n	40d34a <_vfiprintf_r+0x8e2>
  40d28c:	4620      	mov	r0, r4
  40d28e:	9902      	ldr	r1, [sp, #8]
  40d290:	aa13      	add	r2, sp, #76	; 0x4c
  40d292:	f7ff fbad 	bl	40c9f0 <__sprint_r.part.0>
  40d296:	2800      	cmp	r0, #0
  40d298:	d135      	bne.n	40d306 <_vfiprintf_r+0x89e>
  40d29a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d29c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d29e:	f103 0c01 	add.w	ip, r3, #1
  40d2a2:	4648      	mov	r0, r9
  40d2a4:	e781      	b.n	40d1aa <_vfiprintf_r+0x742>
  40d2a6:	08e0      	lsrs	r0, r4, #3
  40d2a8:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  40d2ac:	f004 0207 	and.w	r2, r4, #7
  40d2b0:	08e9      	lsrs	r1, r5, #3
  40d2b2:	3230      	adds	r2, #48	; 0x30
  40d2b4:	ea50 0b01 	orrs.w	fp, r0, r1
  40d2b8:	461f      	mov	r7, r3
  40d2ba:	701a      	strb	r2, [r3, #0]
  40d2bc:	4604      	mov	r4, r0
  40d2be:	460d      	mov	r5, r1
  40d2c0:	f103 33ff 	add.w	r3, r3, #4294967295
  40d2c4:	d1ef      	bne.n	40d2a6 <_vfiprintf_r+0x83e>
  40d2c6:	f01a 0f01 	tst.w	sl, #1
  40d2ca:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40d2ce:	4639      	mov	r1, r7
  40d2d0:	f000 80b9 	beq.w	40d446 <_vfiprintf_r+0x9de>
  40d2d4:	2a30      	cmp	r2, #48	; 0x30
  40d2d6:	f43f acf8 	beq.w	40ccca <_vfiprintf_r+0x262>
  40d2da:	461f      	mov	r7, r3
  40d2dc:	ebc7 0509 	rsb	r5, r7, r9
  40d2e0:	2330      	movs	r3, #48	; 0x30
  40d2e2:	9505      	str	r5, [sp, #20]
  40d2e4:	f801 3c01 	strb.w	r3, [r1, #-1]
  40d2e8:	e4f2      	b.n	40ccd0 <_vfiprintf_r+0x268>
  40d2ea:	bf00      	nop
  40d2ec:	00413404 	.word	0x00413404
  40d2f0:	00413460 	.word	0x00413460
  40d2f4:	00413470 	.word	0x00413470
  40d2f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d2fa:	b123      	cbz	r3, 40d306 <_vfiprintf_r+0x89e>
  40d2fc:	9806      	ldr	r0, [sp, #24]
  40d2fe:	9902      	ldr	r1, [sp, #8]
  40d300:	aa13      	add	r2, sp, #76	; 0x4c
  40d302:	f7ff fb75 	bl	40c9f0 <__sprint_r.part.0>
  40d306:	9c02      	ldr	r4, [sp, #8]
  40d308:	89a3      	ldrh	r3, [r4, #12]
  40d30a:	065b      	lsls	r3, r3, #25
  40d30c:	f53f ac9c 	bmi.w	40cc48 <_vfiprintf_r+0x1e0>
  40d310:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d312:	b031      	add	sp, #196	; 0xc4
  40d314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d318:	9806      	ldr	r0, [sp, #24]
  40d31a:	9902      	ldr	r1, [sp, #8]
  40d31c:	aa13      	add	r2, sp, #76	; 0x4c
  40d31e:	f7ff fb67 	bl	40c9f0 <__sprint_r.part.0>
  40d322:	2800      	cmp	r0, #0
  40d324:	d1ef      	bne.n	40d306 <_vfiprintf_r+0x89e>
  40d326:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d328:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d32a:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40d32e:	9d04      	ldr	r5, [sp, #16]
  40d330:	45ab      	cmp	fp, r5
  40d332:	bfac      	ite	ge
  40d334:	445c      	addge	r4, fp
  40d336:	1964      	addlt	r4, r4, r5
  40d338:	9409      	str	r4, [sp, #36]	; 0x24
  40d33a:	b132      	cbz	r2, 40d34a <_vfiprintf_r+0x8e2>
  40d33c:	9806      	ldr	r0, [sp, #24]
  40d33e:	9902      	ldr	r1, [sp, #8]
  40d340:	aa13      	add	r2, sp, #76	; 0x4c
  40d342:	f7ff fb55 	bl	40c9f0 <__sprint_r.part.0>
  40d346:	2800      	cmp	r0, #0
  40d348:	d1dd      	bne.n	40d306 <_vfiprintf_r+0x89e>
  40d34a:	2000      	movs	r0, #0
  40d34c:	9014      	str	r0, [sp, #80]	; 0x50
  40d34e:	464e      	mov	r6, r9
  40d350:	f7ff bbbd 	b.w	40cace <_vfiprintf_r+0x66>
  40d354:	4650      	mov	r0, sl
  40d356:	4659      	mov	r1, fp
  40d358:	aa13      	add	r2, sp, #76	; 0x4c
  40d35a:	f7ff fb49 	bl	40c9f0 <__sprint_r.part.0>
  40d35e:	2800      	cmp	r0, #0
  40d360:	d1d1      	bne.n	40d306 <_vfiprintf_r+0x89e>
  40d362:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d364:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d366:	1c48      	adds	r0, r1, #1
  40d368:	464e      	mov	r6, r9
  40d36a:	e768      	b.n	40d23e <_vfiprintf_r+0x7d6>
  40d36c:	2a00      	cmp	r2, #0
  40d36e:	f040 80fa 	bne.w	40d566 <_vfiprintf_r+0xafe>
  40d372:	9c05      	ldr	r4, [sp, #20]
  40d374:	9720      	str	r7, [sp, #128]	; 0x80
  40d376:	2301      	movs	r3, #1
  40d378:	9421      	str	r4, [sp, #132]	; 0x84
  40d37a:	9415      	str	r4, [sp, #84]	; 0x54
  40d37c:	4622      	mov	r2, r4
  40d37e:	9314      	str	r3, [sp, #80]	; 0x50
  40d380:	464e      	mov	r6, r9
  40d382:	3608      	adds	r6, #8
  40d384:	e741      	b.n	40d20a <_vfiprintf_r+0x7a2>
  40d386:	9d04      	ldr	r5, [sp, #16]
  40d388:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40d38c:	ebcb 0405 	rsb	r4, fp, r5
  40d390:	2c00      	cmp	r4, #0
  40d392:	f77f aef7 	ble.w	40d184 <_vfiprintf_r+0x71c>
  40d396:	2c10      	cmp	r4, #16
  40d398:	4da8      	ldr	r5, [pc, #672]	; (40d63c <_vfiprintf_r+0xbd4>)
  40d39a:	f340 8174 	ble.w	40d686 <_vfiprintf_r+0xc1e>
  40d39e:	4629      	mov	r1, r5
  40d3a0:	f04f 0b10 	mov.w	fp, #16
  40d3a4:	4625      	mov	r5, r4
  40d3a6:	4664      	mov	r4, ip
  40d3a8:	46b4      	mov	ip, r6
  40d3aa:	460e      	mov	r6, r1
  40d3ac:	e006      	b.n	40d3bc <_vfiprintf_r+0x954>
  40d3ae:	1c98      	adds	r0, r3, #2
  40d3b0:	f10c 0c08 	add.w	ip, ip, #8
  40d3b4:	460b      	mov	r3, r1
  40d3b6:	3d10      	subs	r5, #16
  40d3b8:	2d10      	cmp	r5, #16
  40d3ba:	dd0f      	ble.n	40d3dc <_vfiprintf_r+0x974>
  40d3bc:	1c59      	adds	r1, r3, #1
  40d3be:	3210      	adds	r2, #16
  40d3c0:	2907      	cmp	r1, #7
  40d3c2:	9215      	str	r2, [sp, #84]	; 0x54
  40d3c4:	e88c 0840 	stmia.w	ip, {r6, fp}
  40d3c8:	9114      	str	r1, [sp, #80]	; 0x50
  40d3ca:	ddf0      	ble.n	40d3ae <_vfiprintf_r+0x946>
  40d3cc:	b9ba      	cbnz	r2, 40d3fe <_vfiprintf_r+0x996>
  40d3ce:	3d10      	subs	r5, #16
  40d3d0:	2d10      	cmp	r5, #16
  40d3d2:	f04f 0001 	mov.w	r0, #1
  40d3d6:	4613      	mov	r3, r2
  40d3d8:	46cc      	mov	ip, r9
  40d3da:	dcef      	bgt.n	40d3bc <_vfiprintf_r+0x954>
  40d3dc:	4633      	mov	r3, r6
  40d3de:	4666      	mov	r6, ip
  40d3e0:	46a4      	mov	ip, r4
  40d3e2:	462c      	mov	r4, r5
  40d3e4:	461d      	mov	r5, r3
  40d3e6:	4422      	add	r2, r4
  40d3e8:	2807      	cmp	r0, #7
  40d3ea:	9215      	str	r2, [sp, #84]	; 0x54
  40d3ec:	6035      	str	r5, [r6, #0]
  40d3ee:	6074      	str	r4, [r6, #4]
  40d3f0:	9014      	str	r0, [sp, #80]	; 0x50
  40d3f2:	f300 80b2 	bgt.w	40d55a <_vfiprintf_r+0xaf2>
  40d3f6:	3608      	adds	r6, #8
  40d3f8:	1c41      	adds	r1, r0, #1
  40d3fa:	4603      	mov	r3, r0
  40d3fc:	e6c2      	b.n	40d184 <_vfiprintf_r+0x71c>
  40d3fe:	9806      	ldr	r0, [sp, #24]
  40d400:	9902      	ldr	r1, [sp, #8]
  40d402:	aa13      	add	r2, sp, #76	; 0x4c
  40d404:	f7ff faf4 	bl	40c9f0 <__sprint_r.part.0>
  40d408:	2800      	cmp	r0, #0
  40d40a:	f47f af7c 	bne.w	40d306 <_vfiprintf_r+0x89e>
  40d40e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d410:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d412:	1c58      	adds	r0, r3, #1
  40d414:	46cc      	mov	ip, r9
  40d416:	e7ce      	b.n	40d3b6 <_vfiprintf_r+0x94e>
  40d418:	2a00      	cmp	r2, #0
  40d41a:	d17c      	bne.n	40d516 <_vfiprintf_r+0xaae>
  40d41c:	4619      	mov	r1, r3
  40d41e:	464e      	mov	r6, r9
  40d420:	4613      	mov	r3, r2
  40d422:	e69c      	b.n	40d15e <_vfiprintf_r+0x6f6>
  40d424:	2a00      	cmp	r2, #0
  40d426:	f040 8087 	bne.w	40d538 <_vfiprintf_r+0xad0>
  40d42a:	2101      	movs	r1, #1
  40d42c:	4613      	mov	r3, r2
  40d42e:	464e      	mov	r6, r9
  40d430:	e6a4      	b.n	40d17c <_vfiprintf_r+0x714>
  40d432:	464f      	mov	r7, r9
  40d434:	e44c      	b.n	40ccd0 <_vfiprintf_r+0x268>
  40d436:	2d00      	cmp	r5, #0
  40d438:	bf08      	it	eq
  40d43a:	2c0a      	cmpeq	r4, #10
  40d43c:	d249      	bcs.n	40d4d2 <_vfiprintf_r+0xa6a>
  40d43e:	af30      	add	r7, sp, #192	; 0xc0
  40d440:	3430      	adds	r4, #48	; 0x30
  40d442:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40d446:	ebc7 0309 	rsb	r3, r7, r9
  40d44a:	9305      	str	r3, [sp, #20]
  40d44c:	e440      	b.n	40ccd0 <_vfiprintf_r+0x268>
  40d44e:	2302      	movs	r3, #2
  40d450:	e41b      	b.n	40cc8a <_vfiprintf_r+0x222>
  40d452:	2a00      	cmp	r2, #0
  40d454:	f040 80b2 	bne.w	40d5bc <_vfiprintf_r+0xb54>
  40d458:	4613      	mov	r3, r2
  40d45a:	2101      	movs	r1, #1
  40d45c:	464e      	mov	r6, r9
  40d45e:	e66d      	b.n	40d13c <_vfiprintf_r+0x6d4>
  40d460:	4644      	mov	r4, r8
  40d462:	f7ff bb5c 	b.w	40cb1e <_vfiprintf_r+0xb6>
  40d466:	9806      	ldr	r0, [sp, #24]
  40d468:	9902      	ldr	r1, [sp, #8]
  40d46a:	aa13      	add	r2, sp, #76	; 0x4c
  40d46c:	f7ff fac0 	bl	40c9f0 <__sprint_r.part.0>
  40d470:	2800      	cmp	r0, #0
  40d472:	f47f af48 	bne.w	40d306 <_vfiprintf_r+0x89e>
  40d476:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d478:	464e      	mov	r6, r9
  40d47a:	e6c6      	b.n	40d20a <_vfiprintf_r+0x7a2>
  40d47c:	9d08      	ldr	r5, [sp, #32]
  40d47e:	682c      	ldr	r4, [r5, #0]
  40d480:	3504      	adds	r5, #4
  40d482:	9508      	str	r5, [sp, #32]
  40d484:	2500      	movs	r5, #0
  40d486:	e400      	b.n	40cc8a <_vfiprintf_r+0x222>
  40d488:	9d08      	ldr	r5, [sp, #32]
  40d48a:	682c      	ldr	r4, [r5, #0]
  40d48c:	3504      	adds	r5, #4
  40d48e:	9508      	str	r5, [sp, #32]
  40d490:	2301      	movs	r3, #1
  40d492:	2500      	movs	r5, #0
  40d494:	f7ff bbf9 	b.w	40cc8a <_vfiprintf_r+0x222>
  40d498:	9d08      	ldr	r5, [sp, #32]
  40d49a:	682c      	ldr	r4, [r5, #0]
  40d49c:	3504      	adds	r5, #4
  40d49e:	9508      	str	r5, [sp, #32]
  40d4a0:	2500      	movs	r5, #0
  40d4a2:	e528      	b.n	40cef6 <_vfiprintf_r+0x48e>
  40d4a4:	9d08      	ldr	r5, [sp, #32]
  40d4a6:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d4aa:	682c      	ldr	r4, [r5, #0]
  40d4ac:	f10b 0b04 	add.w	fp, fp, #4
  40d4b0:	17e5      	asrs	r5, r4, #31
  40d4b2:	f8cd b020 	str.w	fp, [sp, #32]
  40d4b6:	4622      	mov	r2, r4
  40d4b8:	462b      	mov	r3, r5
  40d4ba:	e48f      	b.n	40cddc <_vfiprintf_r+0x374>
  40d4bc:	9806      	ldr	r0, [sp, #24]
  40d4be:	9902      	ldr	r1, [sp, #8]
  40d4c0:	aa13      	add	r2, sp, #76	; 0x4c
  40d4c2:	f7ff fa95 	bl	40c9f0 <__sprint_r.part.0>
  40d4c6:	2800      	cmp	r0, #0
  40d4c8:	f47f af1d 	bne.w	40d306 <_vfiprintf_r+0x89e>
  40d4cc:	464e      	mov	r6, r9
  40d4ce:	f7ff bb9b 	b.w	40cc08 <_vfiprintf_r+0x1a0>
  40d4d2:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
  40d4d6:	9603      	str	r6, [sp, #12]
  40d4d8:	465e      	mov	r6, fp
  40d4da:	46e3      	mov	fp, ip
  40d4dc:	4620      	mov	r0, r4
  40d4de:	4629      	mov	r1, r5
  40d4e0:	220a      	movs	r2, #10
  40d4e2:	2300      	movs	r3, #0
  40d4e4:	f7fc fafa 	bl	409adc <__aeabi_uldivmod>
  40d4e8:	3230      	adds	r2, #48	; 0x30
  40d4ea:	7032      	strb	r2, [r6, #0]
  40d4ec:	4620      	mov	r0, r4
  40d4ee:	4629      	mov	r1, r5
  40d4f0:	220a      	movs	r2, #10
  40d4f2:	2300      	movs	r3, #0
  40d4f4:	f7fc faf2 	bl	409adc <__aeabi_uldivmod>
  40d4f8:	4604      	mov	r4, r0
  40d4fa:	460d      	mov	r5, r1
  40d4fc:	ea54 0005 	orrs.w	r0, r4, r5
  40d500:	4637      	mov	r7, r6
  40d502:	f106 36ff 	add.w	r6, r6, #4294967295
  40d506:	d1e9      	bne.n	40d4dc <_vfiprintf_r+0xa74>
  40d508:	ebc7 0309 	rsb	r3, r7, r9
  40d50c:	46dc      	mov	ip, fp
  40d50e:	9e03      	ldr	r6, [sp, #12]
  40d510:	9305      	str	r3, [sp, #20]
  40d512:	f7ff bbdd 	b.w	40ccd0 <_vfiprintf_r+0x268>
  40d516:	9806      	ldr	r0, [sp, #24]
  40d518:	9902      	ldr	r1, [sp, #8]
  40d51a:	f8cd c004 	str.w	ip, [sp, #4]
  40d51e:	aa13      	add	r2, sp, #76	; 0x4c
  40d520:	f7ff fa66 	bl	40c9f0 <__sprint_r.part.0>
  40d524:	f8dd c004 	ldr.w	ip, [sp, #4]
  40d528:	2800      	cmp	r0, #0
  40d52a:	f47f aeec 	bne.w	40d306 <_vfiprintf_r+0x89e>
  40d52e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d530:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d532:	1c59      	adds	r1, r3, #1
  40d534:	464e      	mov	r6, r9
  40d536:	e612      	b.n	40d15e <_vfiprintf_r+0x6f6>
  40d538:	9806      	ldr	r0, [sp, #24]
  40d53a:	9902      	ldr	r1, [sp, #8]
  40d53c:	f8cd c004 	str.w	ip, [sp, #4]
  40d540:	aa13      	add	r2, sp, #76	; 0x4c
  40d542:	f7ff fa55 	bl	40c9f0 <__sprint_r.part.0>
  40d546:	f8dd c004 	ldr.w	ip, [sp, #4]
  40d54a:	2800      	cmp	r0, #0
  40d54c:	f47f aedb 	bne.w	40d306 <_vfiprintf_r+0x89e>
  40d550:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d552:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d554:	1c59      	adds	r1, r3, #1
  40d556:	464e      	mov	r6, r9
  40d558:	e610      	b.n	40d17c <_vfiprintf_r+0x714>
  40d55a:	2a00      	cmp	r2, #0
  40d55c:	d156      	bne.n	40d60c <_vfiprintf_r+0xba4>
  40d55e:	2101      	movs	r1, #1
  40d560:	4613      	mov	r3, r2
  40d562:	464e      	mov	r6, r9
  40d564:	e60e      	b.n	40d184 <_vfiprintf_r+0x71c>
  40d566:	9806      	ldr	r0, [sp, #24]
  40d568:	9902      	ldr	r1, [sp, #8]
  40d56a:	aa13      	add	r2, sp, #76	; 0x4c
  40d56c:	f7ff fa40 	bl	40c9f0 <__sprint_r.part.0>
  40d570:	2800      	cmp	r0, #0
  40d572:	f47f aec8 	bne.w	40d306 <_vfiprintf_r+0x89e>
  40d576:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d578:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d57a:	3101      	adds	r1, #1
  40d57c:	464e      	mov	r6, r9
  40d57e:	e636      	b.n	40d1ee <_vfiprintf_r+0x786>
  40d580:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  40d584:	4264      	negs	r4, r4
  40d586:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40d58a:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  40d58e:	f8cd b01c 	str.w	fp, [sp, #28]
  40d592:	f8cd c014 	str.w	ip, [sp, #20]
  40d596:	2301      	movs	r3, #1
  40d598:	f7ff bb7f 	b.w	40cc9a <_vfiprintf_r+0x232>
  40d59c:	f01a 0f10 	tst.w	sl, #16
  40d5a0:	d11d      	bne.n	40d5de <_vfiprintf_r+0xb76>
  40d5a2:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40d5a6:	d059      	beq.n	40d65c <_vfiprintf_r+0xbf4>
  40d5a8:	9d08      	ldr	r5, [sp, #32]
  40d5aa:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40d5ae:	682b      	ldr	r3, [r5, #0]
  40d5b0:	3504      	adds	r5, #4
  40d5b2:	9508      	str	r5, [sp, #32]
  40d5b4:	f8a3 b000 	strh.w	fp, [r3]
  40d5b8:	f7ff ba89 	b.w	40cace <_vfiprintf_r+0x66>
  40d5bc:	9806      	ldr	r0, [sp, #24]
  40d5be:	9902      	ldr	r1, [sp, #8]
  40d5c0:	f8cd c004 	str.w	ip, [sp, #4]
  40d5c4:	aa13      	add	r2, sp, #76	; 0x4c
  40d5c6:	f7ff fa13 	bl	40c9f0 <__sprint_r.part.0>
  40d5ca:	f8dd c004 	ldr.w	ip, [sp, #4]
  40d5ce:	2800      	cmp	r0, #0
  40d5d0:	f47f ae99 	bne.w	40d306 <_vfiprintf_r+0x89e>
  40d5d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d5d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d5d8:	1c59      	adds	r1, r3, #1
  40d5da:	464e      	mov	r6, r9
  40d5dc:	e5ae      	b.n	40d13c <_vfiprintf_r+0x6d4>
  40d5de:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d5e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d5e4:	f8db 3000 	ldr.w	r3, [fp]
  40d5e8:	f10b 0b04 	add.w	fp, fp, #4
  40d5ec:	f8cd b020 	str.w	fp, [sp, #32]
  40d5f0:	601c      	str	r4, [r3, #0]
  40d5f2:	f7ff ba6c 	b.w	40cace <_vfiprintf_r+0x66>
  40d5f6:	9408      	str	r4, [sp, #32]
  40d5f8:	f7fc ff84 	bl	40a504 <strlen>
  40d5fc:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
  40d600:	9005      	str	r0, [sp, #20]
  40d602:	9407      	str	r4, [sp, #28]
  40d604:	f04f 0c00 	mov.w	ip, #0
  40d608:	f7ff bb62 	b.w	40ccd0 <_vfiprintf_r+0x268>
  40d60c:	9806      	ldr	r0, [sp, #24]
  40d60e:	9902      	ldr	r1, [sp, #8]
  40d610:	f8cd c004 	str.w	ip, [sp, #4]
  40d614:	aa13      	add	r2, sp, #76	; 0x4c
  40d616:	f7ff f9eb 	bl	40c9f0 <__sprint_r.part.0>
  40d61a:	f8dd c004 	ldr.w	ip, [sp, #4]
  40d61e:	2800      	cmp	r0, #0
  40d620:	f47f ae71 	bne.w	40d306 <_vfiprintf_r+0x89e>
  40d624:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d626:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d628:	1c59      	adds	r1, r3, #1
  40d62a:	464e      	mov	r6, r9
  40d62c:	e5aa      	b.n	40d184 <_vfiprintf_r+0x71c>
  40d62e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d630:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d632:	4d03      	ldr	r5, [pc, #12]	; (40d640 <_vfiprintf_r+0xbd8>)
  40d634:	3301      	adds	r3, #1
  40d636:	f7ff bb9b 	b.w	40cd70 <_vfiprintf_r+0x308>
  40d63a:	bf00      	nop
  40d63c:	00413460 	.word	0x00413460
  40d640:	00413470 	.word	0x00413470
  40d644:	f1bc 0f06 	cmp.w	ip, #6
  40d648:	bf34      	ite	cc
  40d64a:	4663      	movcc	r3, ip
  40d64c:	2306      	movcs	r3, #6
  40d64e:	9408      	str	r4, [sp, #32]
  40d650:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
  40d654:	9305      	str	r3, [sp, #20]
  40d656:	9403      	str	r4, [sp, #12]
  40d658:	4f16      	ldr	r7, [pc, #88]	; (40d6b4 <_vfiprintf_r+0xc4c>)
  40d65a:	e470      	b.n	40cf3e <_vfiprintf_r+0x4d6>
  40d65c:	9c08      	ldr	r4, [sp, #32]
  40d65e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d660:	6823      	ldr	r3, [r4, #0]
  40d662:	3404      	adds	r4, #4
  40d664:	9408      	str	r4, [sp, #32]
  40d666:	601d      	str	r5, [r3, #0]
  40d668:	f7ff ba31 	b.w	40cace <_vfiprintf_r+0x66>
  40d66c:	9814      	ldr	r0, [sp, #80]	; 0x50
  40d66e:	4d12      	ldr	r5, [pc, #72]	; (40d6b8 <_vfiprintf_r+0xc50>)
  40d670:	3001      	adds	r0, #1
  40d672:	e5f8      	b.n	40d266 <_vfiprintf_r+0x7fe>
  40d674:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  40d678:	f8cd c014 	str.w	ip, [sp, #20]
  40d67c:	9507      	str	r5, [sp, #28]
  40d67e:	9408      	str	r4, [sp, #32]
  40d680:	4684      	mov	ip, r0
  40d682:	f7ff bb25 	b.w	40ccd0 <_vfiprintf_r+0x268>
  40d686:	4608      	mov	r0, r1
  40d688:	e6ad      	b.n	40d3e6 <_vfiprintf_r+0x97e>
  40d68a:	46a0      	mov	r8, r4
  40d68c:	2500      	movs	r5, #0
  40d68e:	f7ff ba5a 	b.w	40cb46 <_vfiprintf_r+0xde>
  40d692:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d696:	f898 3001 	ldrb.w	r3, [r8, #1]
  40d69a:	f8db 5000 	ldr.w	r5, [fp]
  40d69e:	f10b 0204 	add.w	r2, fp, #4
  40d6a2:	2d00      	cmp	r5, #0
  40d6a4:	9208      	str	r2, [sp, #32]
  40d6a6:	46a0      	mov	r8, r4
  40d6a8:	f6bf aa4b 	bge.w	40cb42 <_vfiprintf_r+0xda>
  40d6ac:	f04f 35ff 	mov.w	r5, #4294967295
  40d6b0:	f7ff ba47 	b.w	40cb42 <_vfiprintf_r+0xda>
  40d6b4:	00413418 	.word	0x00413418
  40d6b8:	00413470 	.word	0x00413470

0040d6bc <__sbprintf>:
  40d6bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40d6c0:	460c      	mov	r4, r1
  40d6c2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  40d6c6:	f8b1 900c 	ldrh.w	r9, [r1, #12]
  40d6ca:	69e7      	ldr	r7, [r4, #28]
  40d6cc:	6e49      	ldr	r1, [r1, #100]	; 0x64
  40d6ce:	f8b4 800e 	ldrh.w	r8, [r4, #14]
  40d6d2:	9119      	str	r1, [sp, #100]	; 0x64
  40d6d4:	ad1a      	add	r5, sp, #104	; 0x68
  40d6d6:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40d6da:	f04f 0e00 	mov.w	lr, #0
  40d6de:	9707      	str	r7, [sp, #28]
  40d6e0:	f029 0902 	bic.w	r9, r9, #2
  40d6e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40d6e6:	9500      	str	r5, [sp, #0]
  40d6e8:	4669      	mov	r1, sp
  40d6ea:	9504      	str	r5, [sp, #16]
  40d6ec:	9602      	str	r6, [sp, #8]
  40d6ee:	9605      	str	r6, [sp, #20]
  40d6f0:	f8ad 900c 	strh.w	r9, [sp, #12]
  40d6f4:	f8ad 800e 	strh.w	r8, [sp, #14]
  40d6f8:	9709      	str	r7, [sp, #36]	; 0x24
  40d6fa:	f8cd e018 	str.w	lr, [sp, #24]
  40d6fe:	4606      	mov	r6, r0
  40d700:	f7ff f9b2 	bl	40ca68 <_vfiprintf_r>
  40d704:	1e05      	subs	r5, r0, #0
  40d706:	db07      	blt.n	40d718 <__sbprintf+0x5c>
  40d708:	4630      	mov	r0, r6
  40d70a:	4669      	mov	r1, sp
  40d70c:	f001 f90a 	bl	40e924 <_fflush_r>
  40d710:	2800      	cmp	r0, #0
  40d712:	bf18      	it	ne
  40d714:	f04f 35ff 	movne.w	r5, #4294967295
  40d718:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40d71c:	065b      	lsls	r3, r3, #25
  40d71e:	d503      	bpl.n	40d728 <__sbprintf+0x6c>
  40d720:	89a3      	ldrh	r3, [r4, #12]
  40d722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d726:	81a3      	strh	r3, [r4, #12]
  40d728:	4628      	mov	r0, r5
  40d72a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  40d72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d732:	bf00      	nop

0040d734 <_write_r>:
  40d734:	b570      	push	{r4, r5, r6, lr}
  40d736:	4c08      	ldr	r4, [pc, #32]	; (40d758 <_write_r+0x24>)
  40d738:	4606      	mov	r6, r0
  40d73a:	2500      	movs	r5, #0
  40d73c:	4608      	mov	r0, r1
  40d73e:	4611      	mov	r1, r2
  40d740:	461a      	mov	r2, r3
  40d742:	6025      	str	r5, [r4, #0]
  40d744:	f7fa fc1c 	bl	407f80 <_write>
  40d748:	1c43      	adds	r3, r0, #1
  40d74a:	d000      	beq.n	40d74e <_write_r+0x1a>
  40d74c:	bd70      	pop	{r4, r5, r6, pc}
  40d74e:	6823      	ldr	r3, [r4, #0]
  40d750:	2b00      	cmp	r3, #0
  40d752:	d0fb      	beq.n	40d74c <_write_r+0x18>
  40d754:	6033      	str	r3, [r6, #0]
  40d756:	bd70      	pop	{r4, r5, r6, pc}
  40d758:	2000c00c 	.word	0x2000c00c

0040d75c <__swsetup_r>:
  40d75c:	4b2f      	ldr	r3, [pc, #188]	; (40d81c <__swsetup_r+0xc0>)
  40d75e:	681b      	ldr	r3, [r3, #0]
  40d760:	b570      	push	{r4, r5, r6, lr}
  40d762:	4606      	mov	r6, r0
  40d764:	460c      	mov	r4, r1
  40d766:	b113      	cbz	r3, 40d76e <__swsetup_r+0x12>
  40d768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40d76a:	2a00      	cmp	r2, #0
  40d76c:	d036      	beq.n	40d7dc <__swsetup_r+0x80>
  40d76e:	89a5      	ldrh	r5, [r4, #12]
  40d770:	b2ab      	uxth	r3, r5
  40d772:	0719      	lsls	r1, r3, #28
  40d774:	d50c      	bpl.n	40d790 <__swsetup_r+0x34>
  40d776:	6922      	ldr	r2, [r4, #16]
  40d778:	b1aa      	cbz	r2, 40d7a6 <__swsetup_r+0x4a>
  40d77a:	f013 0101 	ands.w	r1, r3, #1
  40d77e:	d01e      	beq.n	40d7be <__swsetup_r+0x62>
  40d780:	6963      	ldr	r3, [r4, #20]
  40d782:	2100      	movs	r1, #0
  40d784:	425b      	negs	r3, r3
  40d786:	61a3      	str	r3, [r4, #24]
  40d788:	60a1      	str	r1, [r4, #8]
  40d78a:	b1f2      	cbz	r2, 40d7ca <__swsetup_r+0x6e>
  40d78c:	2000      	movs	r0, #0
  40d78e:	bd70      	pop	{r4, r5, r6, pc}
  40d790:	06da      	lsls	r2, r3, #27
  40d792:	d53b      	bpl.n	40d80c <__swsetup_r+0xb0>
  40d794:	075b      	lsls	r3, r3, #29
  40d796:	d425      	bmi.n	40d7e4 <__swsetup_r+0x88>
  40d798:	6922      	ldr	r2, [r4, #16]
  40d79a:	f045 0308 	orr.w	r3, r5, #8
  40d79e:	81a3      	strh	r3, [r4, #12]
  40d7a0:	b29b      	uxth	r3, r3
  40d7a2:	2a00      	cmp	r2, #0
  40d7a4:	d1e9      	bne.n	40d77a <__swsetup_r+0x1e>
  40d7a6:	f403 7120 	and.w	r1, r3, #640	; 0x280
  40d7aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  40d7ae:	d0e4      	beq.n	40d77a <__swsetup_r+0x1e>
  40d7b0:	4630      	mov	r0, r6
  40d7b2:	4621      	mov	r1, r4
  40d7b4:	f001 fcc4 	bl	40f140 <__smakebuf_r>
  40d7b8:	89a3      	ldrh	r3, [r4, #12]
  40d7ba:	6922      	ldr	r2, [r4, #16]
  40d7bc:	e7dd      	b.n	40d77a <__swsetup_r+0x1e>
  40d7be:	0798      	lsls	r0, r3, #30
  40d7c0:	bf58      	it	pl
  40d7c2:	6961      	ldrpl	r1, [r4, #20]
  40d7c4:	60a1      	str	r1, [r4, #8]
  40d7c6:	2a00      	cmp	r2, #0
  40d7c8:	d1e0      	bne.n	40d78c <__swsetup_r+0x30>
  40d7ca:	89a3      	ldrh	r3, [r4, #12]
  40d7cc:	061a      	lsls	r2, r3, #24
  40d7ce:	d5dd      	bpl.n	40d78c <__swsetup_r+0x30>
  40d7d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d7d4:	81a3      	strh	r3, [r4, #12]
  40d7d6:	f04f 30ff 	mov.w	r0, #4294967295
  40d7da:	bd70      	pop	{r4, r5, r6, pc}
  40d7dc:	4618      	mov	r0, r3
  40d7de:	f001 f8bd 	bl	40e95c <__sinit>
  40d7e2:	e7c4      	b.n	40d76e <__swsetup_r+0x12>
  40d7e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40d7e6:	b149      	cbz	r1, 40d7fc <__swsetup_r+0xa0>
  40d7e8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40d7ec:	4299      	cmp	r1, r3
  40d7ee:	d003      	beq.n	40d7f8 <__swsetup_r+0x9c>
  40d7f0:	4630      	mov	r0, r6
  40d7f2:	f001 f9f5 	bl	40ebe0 <_free_r>
  40d7f6:	89a5      	ldrh	r5, [r4, #12]
  40d7f8:	2300      	movs	r3, #0
  40d7fa:	6323      	str	r3, [r4, #48]	; 0x30
  40d7fc:	f025 0524 	bic.w	r5, r5, #36	; 0x24
  40d800:	2300      	movs	r3, #0
  40d802:	6922      	ldr	r2, [r4, #16]
  40d804:	6063      	str	r3, [r4, #4]
  40d806:	b2ad      	uxth	r5, r5
  40d808:	6022      	str	r2, [r4, #0]
  40d80a:	e7c6      	b.n	40d79a <__swsetup_r+0x3e>
  40d80c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  40d810:	2309      	movs	r3, #9
  40d812:	6033      	str	r3, [r6, #0]
  40d814:	f04f 30ff 	mov.w	r0, #4294967295
  40d818:	81a5      	strh	r5, [r4, #12]
  40d81a:	bd70      	pop	{r4, r5, r6, pc}
  40d81c:	20000640 	.word	0x20000640

0040d820 <register_fini>:
  40d820:	4b02      	ldr	r3, [pc, #8]	; (40d82c <register_fini+0xc>)
  40d822:	b113      	cbz	r3, 40d82a <register_fini+0xa>
  40d824:	4802      	ldr	r0, [pc, #8]	; (40d830 <register_fini+0x10>)
  40d826:	f000 b805 	b.w	40d834 <atexit>
  40d82a:	4770      	bx	lr
  40d82c:	00000000 	.word	0x00000000
  40d830:	0040ea59 	.word	0x0040ea59

0040d834 <atexit>:
  40d834:	4601      	mov	r1, r0
  40d836:	2000      	movs	r0, #0
  40d838:	4602      	mov	r2, r0
  40d83a:	4603      	mov	r3, r0
  40d83c:	f004 bb94 	b.w	411f68 <__register_exitproc>

0040d840 <_close_r>:
  40d840:	b538      	push	{r3, r4, r5, lr}
  40d842:	4c07      	ldr	r4, [pc, #28]	; (40d860 <_close_r+0x20>)
  40d844:	2300      	movs	r3, #0
  40d846:	4605      	mov	r5, r0
  40d848:	4608      	mov	r0, r1
  40d84a:	6023      	str	r3, [r4, #0]
  40d84c:	f7fc f84e 	bl	4098ec <_close>
  40d850:	1c43      	adds	r3, r0, #1
  40d852:	d000      	beq.n	40d856 <_close_r+0x16>
  40d854:	bd38      	pop	{r3, r4, r5, pc}
  40d856:	6823      	ldr	r3, [r4, #0]
  40d858:	2b00      	cmp	r3, #0
  40d85a:	d0fb      	beq.n	40d854 <_close_r+0x14>
  40d85c:	602b      	str	r3, [r5, #0]
  40d85e:	bd38      	pop	{r3, r4, r5, pc}
  40d860:	2000c00c 	.word	0x2000c00c

0040d864 <quorem>:
  40d864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d868:	6903      	ldr	r3, [r0, #16]
  40d86a:	690d      	ldr	r5, [r1, #16]
  40d86c:	429d      	cmp	r5, r3
  40d86e:	b083      	sub	sp, #12
  40d870:	4683      	mov	fp, r0
  40d872:	f300 808b 	bgt.w	40d98c <quorem+0x128>
  40d876:	3d01      	subs	r5, #1
  40d878:	f101 0414 	add.w	r4, r1, #20
  40d87c:	f100 0a14 	add.w	sl, r0, #20
  40d880:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
  40d884:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  40d888:	3201      	adds	r2, #1
  40d88a:	fbb3 f8f2 	udiv	r8, r3, r2
  40d88e:	00aa      	lsls	r2, r5, #2
  40d890:	4691      	mov	r9, r2
  40d892:	9200      	str	r2, [sp, #0]
  40d894:	4452      	add	r2, sl
  40d896:	44a1      	add	r9, r4
  40d898:	9201      	str	r2, [sp, #4]
  40d89a:	f1b8 0f00 	cmp.w	r8, #0
  40d89e:	d03d      	beq.n	40d91c <quorem+0xb8>
  40d8a0:	f04f 0e00 	mov.w	lr, #0
  40d8a4:	4670      	mov	r0, lr
  40d8a6:	4622      	mov	r2, r4
  40d8a8:	4653      	mov	r3, sl
  40d8aa:	468c      	mov	ip, r1
  40d8ac:	f852 6b04 	ldr.w	r6, [r2], #4
  40d8b0:	6819      	ldr	r1, [r3, #0]
  40d8b2:	b2b7      	uxth	r7, r6
  40d8b4:	0c36      	lsrs	r6, r6, #16
  40d8b6:	fb07 ee08 	mla	lr, r7, r8, lr
  40d8ba:	fb06 f608 	mul.w	r6, r6, r8
  40d8be:	eb06 461e 	add.w	r6, r6, lr, lsr #16
  40d8c2:	fa1f f78e 	uxth.w	r7, lr
  40d8c6:	1bc7      	subs	r7, r0, r7
  40d8c8:	b2b0      	uxth	r0, r6
  40d8ca:	fa17 f781 	uxtah	r7, r7, r1
  40d8ce:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
  40d8d2:	eb00 4027 	add.w	r0, r0, r7, asr #16
  40d8d6:	b2bf      	uxth	r7, r7
  40d8d8:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
  40d8dc:	4591      	cmp	r9, r2
  40d8de:	f843 7b04 	str.w	r7, [r3], #4
  40d8e2:	ea4f 4020 	mov.w	r0, r0, asr #16
  40d8e6:	ea4f 4e16 	mov.w	lr, r6, lsr #16
  40d8ea:	d2df      	bcs.n	40d8ac <quorem+0x48>
  40d8ec:	9a00      	ldr	r2, [sp, #0]
  40d8ee:	f85a 3002 	ldr.w	r3, [sl, r2]
  40d8f2:	4661      	mov	r1, ip
  40d8f4:	b993      	cbnz	r3, 40d91c <quorem+0xb8>
  40d8f6:	9a01      	ldr	r2, [sp, #4]
  40d8f8:	1f13      	subs	r3, r2, #4
  40d8fa:	459a      	cmp	sl, r3
  40d8fc:	d20c      	bcs.n	40d918 <quorem+0xb4>
  40d8fe:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40d902:	b94b      	cbnz	r3, 40d918 <quorem+0xb4>
  40d904:	f1a2 0308 	sub.w	r3, r2, #8
  40d908:	e002      	b.n	40d910 <quorem+0xac>
  40d90a:	681a      	ldr	r2, [r3, #0]
  40d90c:	3b04      	subs	r3, #4
  40d90e:	b91a      	cbnz	r2, 40d918 <quorem+0xb4>
  40d910:	459a      	cmp	sl, r3
  40d912:	f105 35ff 	add.w	r5, r5, #4294967295
  40d916:	d3f8      	bcc.n	40d90a <quorem+0xa6>
  40d918:	f8cb 5010 	str.w	r5, [fp, #16]
  40d91c:	4658      	mov	r0, fp
  40d91e:	f002 fa7d 	bl	40fe1c <__mcmp>
  40d922:	2800      	cmp	r0, #0
  40d924:	db2e      	blt.n	40d984 <quorem+0x120>
  40d926:	f108 0801 	add.w	r8, r8, #1
  40d92a:	4653      	mov	r3, sl
  40d92c:	2200      	movs	r2, #0
  40d92e:	f854 6b04 	ldr.w	r6, [r4], #4
  40d932:	6818      	ldr	r0, [r3, #0]
  40d934:	b2b1      	uxth	r1, r6
  40d936:	1a52      	subs	r2, r2, r1
  40d938:	0c36      	lsrs	r6, r6, #16
  40d93a:	fa12 f180 	uxtah	r1, r2, r0
  40d93e:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
  40d942:	eb02 4221 	add.w	r2, r2, r1, asr #16
  40d946:	b289      	uxth	r1, r1
  40d948:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  40d94c:	45a1      	cmp	r9, r4
  40d94e:	f843 1b04 	str.w	r1, [r3], #4
  40d952:	ea4f 4222 	mov.w	r2, r2, asr #16
  40d956:	d2ea      	bcs.n	40d92e <quorem+0xca>
  40d958:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
  40d95c:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
  40d960:	b982      	cbnz	r2, 40d984 <quorem+0x120>
  40d962:	1f1a      	subs	r2, r3, #4
  40d964:	4592      	cmp	sl, r2
  40d966:	d20b      	bcs.n	40d980 <quorem+0x11c>
  40d968:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40d96c:	b942      	cbnz	r2, 40d980 <quorem+0x11c>
  40d96e:	3b08      	subs	r3, #8
  40d970:	e002      	b.n	40d978 <quorem+0x114>
  40d972:	681a      	ldr	r2, [r3, #0]
  40d974:	3b04      	subs	r3, #4
  40d976:	b91a      	cbnz	r2, 40d980 <quorem+0x11c>
  40d978:	459a      	cmp	sl, r3
  40d97a:	f105 35ff 	add.w	r5, r5, #4294967295
  40d97e:	d3f8      	bcc.n	40d972 <quorem+0x10e>
  40d980:	f8cb 5010 	str.w	r5, [fp, #16]
  40d984:	4640      	mov	r0, r8
  40d986:	b003      	add	sp, #12
  40d988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d98c:	2000      	movs	r0, #0
  40d98e:	b003      	add	sp, #12
  40d990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d994:	0000      	movs	r0, r0
	...

0040d998 <_dtoa_r>:
  40d998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d99c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40d99e:	b09b      	sub	sp, #108	; 0x6c
  40d9a0:	4604      	mov	r4, r0
  40d9a2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
  40d9a4:	4692      	mov	sl, r2
  40d9a6:	469b      	mov	fp, r3
  40d9a8:	b149      	cbz	r1, 40d9be <_dtoa_r+0x26>
  40d9aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
  40d9ac:	604b      	str	r3, [r1, #4]
  40d9ae:	2201      	movs	r2, #1
  40d9b0:	fa02 f303 	lsl.w	r3, r2, r3
  40d9b4:	608b      	str	r3, [r1, #8]
  40d9b6:	f001 ffed 	bl	40f994 <_Bfree>
  40d9ba:	2300      	movs	r3, #0
  40d9bc:	6423      	str	r3, [r4, #64]	; 0x40
  40d9be:	f1bb 0f00 	cmp.w	fp, #0
  40d9c2:	46d9      	mov	r9, fp
  40d9c4:	db33      	blt.n	40da2e <_dtoa_r+0x96>
  40d9c6:	2300      	movs	r3, #0
  40d9c8:	602b      	str	r3, [r5, #0]
  40d9ca:	4ba5      	ldr	r3, [pc, #660]	; (40dc60 <_dtoa_r+0x2c8>)
  40d9cc:	461a      	mov	r2, r3
  40d9ce:	ea09 0303 	and.w	r3, r9, r3
  40d9d2:	4293      	cmp	r3, r2
  40d9d4:	d014      	beq.n	40da00 <_dtoa_r+0x68>
  40d9d6:	4650      	mov	r0, sl
  40d9d8:	4659      	mov	r1, fp
  40d9da:	2200      	movs	r2, #0
  40d9dc:	2300      	movs	r3, #0
  40d9de:	f005 fb87 	bl	4130f0 <__aeabi_dcmpeq>
  40d9e2:	4680      	mov	r8, r0
  40d9e4:	b348      	cbz	r0, 40da3a <_dtoa_r+0xa2>
  40d9e6:	9e26      	ldr	r6, [sp, #152]	; 0x98
  40d9e8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  40d9ea:	2301      	movs	r3, #1
  40d9ec:	6033      	str	r3, [r6, #0]
  40d9ee:	2d00      	cmp	r5, #0
  40d9f0:	f000 80c9 	beq.w	40db86 <_dtoa_r+0x1ee>
  40d9f4:	489b      	ldr	r0, [pc, #620]	; (40dc64 <_dtoa_r+0x2cc>)
  40d9f6:	6028      	str	r0, [r5, #0]
  40d9f8:	3801      	subs	r0, #1
  40d9fa:	b01b      	add	sp, #108	; 0x6c
  40d9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40da00:	9d26      	ldr	r5, [sp, #152]	; 0x98
  40da02:	f242 730f 	movw	r3, #9999	; 0x270f
  40da06:	602b      	str	r3, [r5, #0]
  40da08:	f1ba 0f00 	cmp.w	sl, #0
  40da0c:	f000 80a4 	beq.w	40db58 <_dtoa_r+0x1c0>
  40da10:	4895      	ldr	r0, [pc, #596]	; (40dc68 <_dtoa_r+0x2d0>)
  40da12:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  40da14:	2e00      	cmp	r6, #0
  40da16:	d0f0      	beq.n	40d9fa <_dtoa_r+0x62>
  40da18:	78c3      	ldrb	r3, [r0, #3]
  40da1a:	2b00      	cmp	r3, #0
  40da1c:	f000 80b5 	beq.w	40db8a <_dtoa_r+0x1f2>
  40da20:	f100 0308 	add.w	r3, r0, #8
  40da24:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  40da26:	602b      	str	r3, [r5, #0]
  40da28:	b01b      	add	sp, #108	; 0x6c
  40da2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40da2e:	2301      	movs	r3, #1
  40da30:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  40da34:	602b      	str	r3, [r5, #0]
  40da36:	46cb      	mov	fp, r9
  40da38:	e7c7      	b.n	40d9ca <_dtoa_r+0x32>
  40da3a:	aa19      	add	r2, sp, #100	; 0x64
  40da3c:	ab18      	add	r3, sp, #96	; 0x60
  40da3e:	e88d 000c 	stmia.w	sp, {r2, r3}
  40da42:	4620      	mov	r0, r4
  40da44:	4652      	mov	r2, sl
  40da46:	465b      	mov	r3, fp
  40da48:	f002 faf0 	bl	41002c <__d2b>
  40da4c:	ea5f 5519 	movs.w	r5, r9, lsr #20
  40da50:	900a      	str	r0, [sp, #40]	; 0x28
  40da52:	f040 808a 	bne.w	40db6a <_dtoa_r+0x1d2>
  40da56:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40da58:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40da5a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  40da5e:	443d      	add	r5, r7
  40da60:	429d      	cmp	r5, r3
  40da62:	f2c0 8294 	blt.w	40df8e <_dtoa_r+0x5f6>
  40da66:	331f      	adds	r3, #31
  40da68:	f205 4212 	addw	r2, r5, #1042	; 0x412
  40da6c:	1b5b      	subs	r3, r3, r5
  40da6e:	fa09 f303 	lsl.w	r3, r9, r3
  40da72:	fa2a f202 	lsr.w	r2, sl, r2
  40da76:	ea43 0002 	orr.w	r0, r3, r2
  40da7a:	f005 f85b 	bl	412b34 <__aeabi_ui2d>
  40da7e:	2601      	movs	r6, #1
  40da80:	3d01      	subs	r5, #1
  40da82:	46b8      	mov	r8, r7
  40da84:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40da88:	9616      	str	r6, [sp, #88]	; 0x58
  40da8a:	2200      	movs	r2, #0
  40da8c:	4b77      	ldr	r3, [pc, #476]	; (40dc6c <_dtoa_r+0x2d4>)
  40da8e:	f004 ff13 	bl	4128b8 <__aeabi_dsub>
  40da92:	a36d      	add	r3, pc, #436	; (adr r3, 40dc48 <_dtoa_r+0x2b0>)
  40da94:	e9d3 2300 	ldrd	r2, r3, [r3]
  40da98:	f005 f8c2 	bl	412c20 <__aeabi_dmul>
  40da9c:	a36c      	add	r3, pc, #432	; (adr r3, 40dc50 <_dtoa_r+0x2b8>)
  40da9e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40daa2:	f004 ff0b 	bl	4128bc <__adddf3>
  40daa6:	4606      	mov	r6, r0
  40daa8:	4628      	mov	r0, r5
  40daaa:	460f      	mov	r7, r1
  40daac:	f005 f852 	bl	412b54 <__aeabi_i2d>
  40dab0:	a369      	add	r3, pc, #420	; (adr r3, 40dc58 <_dtoa_r+0x2c0>)
  40dab2:	e9d3 2300 	ldrd	r2, r3, [r3]
  40dab6:	f005 f8b3 	bl	412c20 <__aeabi_dmul>
  40daba:	4602      	mov	r2, r0
  40dabc:	460b      	mov	r3, r1
  40dabe:	4630      	mov	r0, r6
  40dac0:	4639      	mov	r1, r7
  40dac2:	f004 fefb 	bl	4128bc <__adddf3>
  40dac6:	4606      	mov	r6, r0
  40dac8:	460f      	mov	r7, r1
  40daca:	f005 fb43 	bl	413154 <__aeabi_d2iz>
  40dace:	4639      	mov	r1, r7
  40dad0:	9007      	str	r0, [sp, #28]
  40dad2:	2200      	movs	r2, #0
  40dad4:	4630      	mov	r0, r6
  40dad6:	2300      	movs	r3, #0
  40dad8:	f005 fb14 	bl	413104 <__aeabi_dcmplt>
  40dadc:	2800      	cmp	r0, #0
  40dade:	f040 8228 	bne.w	40df32 <_dtoa_r+0x59a>
  40dae2:	9e07      	ldr	r6, [sp, #28]
  40dae4:	2e16      	cmp	r6, #22
  40dae6:	f200 8221 	bhi.w	40df2c <_dtoa_r+0x594>
  40daea:	4b61      	ldr	r3, [pc, #388]	; (40dc70 <_dtoa_r+0x2d8>)
  40daec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40daf0:	e9d3 0100 	ldrd	r0, r1, [r3]
  40daf4:	4652      	mov	r2, sl
  40daf6:	465b      	mov	r3, fp
  40daf8:	f005 fb22 	bl	413140 <__aeabi_dcmpgt>
  40dafc:	2800      	cmp	r0, #0
  40dafe:	f000 824b 	beq.w	40df98 <_dtoa_r+0x600>
  40db02:	3e01      	subs	r6, #1
  40db04:	9607      	str	r6, [sp, #28]
  40db06:	2600      	movs	r6, #0
  40db08:	960e      	str	r6, [sp, #56]	; 0x38
  40db0a:	ebc5 0508 	rsb	r5, r5, r8
  40db0e:	3d01      	subs	r5, #1
  40db10:	9506      	str	r5, [sp, #24]
  40db12:	f100 8225 	bmi.w	40df60 <_dtoa_r+0x5c8>
  40db16:	2500      	movs	r5, #0
  40db18:	9508      	str	r5, [sp, #32]
  40db1a:	9e07      	ldr	r6, [sp, #28]
  40db1c:	2e00      	cmp	r6, #0
  40db1e:	f2c0 8216 	blt.w	40df4e <_dtoa_r+0x5b6>
  40db22:	9d06      	ldr	r5, [sp, #24]
  40db24:	960d      	str	r6, [sp, #52]	; 0x34
  40db26:	4435      	add	r5, r6
  40db28:	2600      	movs	r6, #0
  40db2a:	9506      	str	r5, [sp, #24]
  40db2c:	960c      	str	r6, [sp, #48]	; 0x30
  40db2e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40db30:	2d09      	cmp	r5, #9
  40db32:	d82c      	bhi.n	40db8e <_dtoa_r+0x1f6>
  40db34:	2d05      	cmp	r5, #5
  40db36:	bfc4      	itt	gt
  40db38:	3d04      	subgt	r5, #4
  40db3a:	9524      	strgt	r5, [sp, #144]	; 0x90
  40db3c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40db3e:	f1a6 0302 	sub.w	r3, r6, #2
  40db42:	bfcc      	ite	gt
  40db44:	2500      	movgt	r5, #0
  40db46:	2501      	movle	r5, #1
  40db48:	2b03      	cmp	r3, #3
  40db4a:	d822      	bhi.n	40db92 <_dtoa_r+0x1fa>
  40db4c:	e8df f013 	tbh	[pc, r3, lsl #1]
  40db50:	029e03b7 	.word	0x029e03b7
  40db54:	049a03c0 	.word	0x049a03c0
  40db58:	4a46      	ldr	r2, [pc, #280]	; (40dc74 <_dtoa_r+0x2dc>)
  40db5a:	4b43      	ldr	r3, [pc, #268]	; (40dc68 <_dtoa_r+0x2d0>)
  40db5c:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40db60:	2800      	cmp	r0, #0
  40db62:	bf0c      	ite	eq
  40db64:	4610      	moveq	r0, r2
  40db66:	4618      	movne	r0, r3
  40db68:	e753      	b.n	40da12 <_dtoa_r+0x7a>
  40db6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40db6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40db72:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  40db76:	4650      	mov	r0, sl
  40db78:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40db7c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40db80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  40db84:	e781      	b.n	40da8a <_dtoa_r+0xf2>
  40db86:	483c      	ldr	r0, [pc, #240]	; (40dc78 <_dtoa_r+0x2e0>)
  40db88:	e737      	b.n	40d9fa <_dtoa_r+0x62>
  40db8a:	1cc3      	adds	r3, r0, #3
  40db8c:	e74a      	b.n	40da24 <_dtoa_r+0x8c>
  40db8e:	2500      	movs	r5, #0
  40db90:	9524      	str	r5, [sp, #144]	; 0x90
  40db92:	2500      	movs	r5, #0
  40db94:	6465      	str	r5, [r4, #68]	; 0x44
  40db96:	4629      	mov	r1, r5
  40db98:	4620      	mov	r0, r4
  40db9a:	f001 fed5 	bl	40f948 <_Balloc>
  40db9e:	f04f 39ff 	mov.w	r9, #4294967295
  40dba2:	2601      	movs	r6, #1
  40dba4:	9009      	str	r0, [sp, #36]	; 0x24
  40dba6:	9525      	str	r5, [sp, #148]	; 0x94
  40dba8:	6420      	str	r0, [r4, #64]	; 0x40
  40dbaa:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40dbae:	960b      	str	r6, [sp, #44]	; 0x2c
  40dbb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40dbb2:	2b00      	cmp	r3, #0
  40dbb4:	f2c0 80d2 	blt.w	40dd5c <_dtoa_r+0x3c4>
  40dbb8:	9e07      	ldr	r6, [sp, #28]
  40dbba:	2e0e      	cmp	r6, #14
  40dbbc:	f300 80ce 	bgt.w	40dd5c <_dtoa_r+0x3c4>
  40dbc0:	4b2b      	ldr	r3, [pc, #172]	; (40dc70 <_dtoa_r+0x2d8>)
  40dbc2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40dbc6:	e9d3 0100 	ldrd	r0, r1, [r3]
  40dbca:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40dbce:	9925      	ldr	r1, [sp, #148]	; 0x94
  40dbd0:	2900      	cmp	r1, #0
  40dbd2:	f2c0 8380 	blt.w	40e2d6 <_dtoa_r+0x93e>
  40dbd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40dbda:	4659      	mov	r1, fp
  40dbdc:	4650      	mov	r0, sl
  40dbde:	f005 f949 	bl	412e74 <__aeabi_ddiv>
  40dbe2:	f005 fab7 	bl	413154 <__aeabi_d2iz>
  40dbe6:	4605      	mov	r5, r0
  40dbe8:	f004 ffb4 	bl	412b54 <__aeabi_i2d>
  40dbec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40dbf0:	f005 f816 	bl	412c20 <__aeabi_dmul>
  40dbf4:	4602      	mov	r2, r0
  40dbf6:	460b      	mov	r3, r1
  40dbf8:	4650      	mov	r0, sl
  40dbfa:	4659      	mov	r1, fp
  40dbfc:	f004 fe5c 	bl	4128b8 <__aeabi_dsub>
  40dc00:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dc02:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40dc06:	f1b9 0f01 	cmp.w	r9, #1
  40dc0a:	4606      	mov	r6, r0
  40dc0c:	460f      	mov	r7, r1
  40dc0e:	7013      	strb	r3, [r2, #0]
  40dc10:	f102 0b01 	add.w	fp, r2, #1
  40dc14:	d064      	beq.n	40dce0 <_dtoa_r+0x348>
  40dc16:	2200      	movs	r2, #0
  40dc18:	4b18      	ldr	r3, [pc, #96]	; (40dc7c <_dtoa_r+0x2e4>)
  40dc1a:	f005 f801 	bl	412c20 <__aeabi_dmul>
  40dc1e:	2200      	movs	r2, #0
  40dc20:	2300      	movs	r3, #0
  40dc22:	4606      	mov	r6, r0
  40dc24:	460f      	mov	r7, r1
  40dc26:	f005 fa63 	bl	4130f0 <__aeabi_dcmpeq>
  40dc2a:	2800      	cmp	r0, #0
  40dc2c:	f040 8081 	bne.w	40dd32 <_dtoa_r+0x39a>
  40dc30:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  40dc34:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40dc36:	9403      	str	r4, [sp, #12]
  40dc38:	44c8      	add	r8, r9
  40dc3a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  40dc3e:	f105 0902 	add.w	r9, r5, #2
  40dc42:	e028      	b.n	40dc96 <_dtoa_r+0x2fe>
  40dc44:	f3af 8000 	nop.w
  40dc48:	636f4361 	.word	0x636f4361
  40dc4c:	3fd287a7 	.word	0x3fd287a7
  40dc50:	8b60c8b3 	.word	0x8b60c8b3
  40dc54:	3fc68a28 	.word	0x3fc68a28
  40dc58:	509f79fb 	.word	0x509f79fb
  40dc5c:	3fd34413 	.word	0x3fd34413
  40dc60:	7ff00000 	.word	0x7ff00000
  40dc64:	00413421 	.word	0x00413421
  40dc68:	00413590 	.word	0x00413590
  40dc6c:	3ff80000 	.word	0x3ff80000
  40dc70:	004135a0 	.word	0x004135a0
  40dc74:	00413584 	.word	0x00413584
  40dc78:	00413420 	.word	0x00413420
  40dc7c:	40240000 	.word	0x40240000
  40dc80:	f004 ffce 	bl	412c20 <__aeabi_dmul>
  40dc84:	2200      	movs	r2, #0
  40dc86:	2300      	movs	r3, #0
  40dc88:	4606      	mov	r6, r0
  40dc8a:	460f      	mov	r7, r1
  40dc8c:	f005 fa30 	bl	4130f0 <__aeabi_dcmpeq>
  40dc90:	2800      	cmp	r0, #0
  40dc92:	f040 83c1 	bne.w	40e418 <_dtoa_r+0xa80>
  40dc96:	4652      	mov	r2, sl
  40dc98:	465b      	mov	r3, fp
  40dc9a:	4630      	mov	r0, r6
  40dc9c:	4639      	mov	r1, r7
  40dc9e:	f005 f8e9 	bl	412e74 <__aeabi_ddiv>
  40dca2:	f005 fa57 	bl	413154 <__aeabi_d2iz>
  40dca6:	4605      	mov	r5, r0
  40dca8:	f004 ff54 	bl	412b54 <__aeabi_i2d>
  40dcac:	4652      	mov	r2, sl
  40dcae:	465b      	mov	r3, fp
  40dcb0:	f004 ffb6 	bl	412c20 <__aeabi_dmul>
  40dcb4:	4602      	mov	r2, r0
  40dcb6:	460b      	mov	r3, r1
  40dcb8:	4630      	mov	r0, r6
  40dcba:	4639      	mov	r1, r7
  40dcbc:	f004 fdfc 	bl	4128b8 <__aeabi_dsub>
  40dcc0:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  40dcc4:	45c1      	cmp	r9, r8
  40dcc6:	f809 ec01 	strb.w	lr, [r9, #-1]
  40dcca:	464c      	mov	r4, r9
  40dccc:	4606      	mov	r6, r0
  40dcce:	460f      	mov	r7, r1
  40dcd0:	f04f 0200 	mov.w	r2, #0
  40dcd4:	4ba7      	ldr	r3, [pc, #668]	; (40df74 <_dtoa_r+0x5dc>)
  40dcd6:	f109 0901 	add.w	r9, r9, #1
  40dcda:	d1d1      	bne.n	40dc80 <_dtoa_r+0x2e8>
  40dcdc:	46a3      	mov	fp, r4
  40dcde:	9c03      	ldr	r4, [sp, #12]
  40dce0:	4632      	mov	r2, r6
  40dce2:	463b      	mov	r3, r7
  40dce4:	4630      	mov	r0, r6
  40dce6:	4639      	mov	r1, r7
  40dce8:	f004 fde8 	bl	4128bc <__adddf3>
  40dcec:	4606      	mov	r6, r0
  40dcee:	460f      	mov	r7, r1
  40dcf0:	4632      	mov	r2, r6
  40dcf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40dcf6:	463b      	mov	r3, r7
  40dcf8:	f005 fa04 	bl	413104 <__aeabi_dcmplt>
  40dcfc:	b940      	cbnz	r0, 40dd10 <_dtoa_r+0x378>
  40dcfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40dd02:	4632      	mov	r2, r6
  40dd04:	463b      	mov	r3, r7
  40dd06:	f005 f9f3 	bl	4130f0 <__aeabi_dcmpeq>
  40dd0a:	b190      	cbz	r0, 40dd32 <_dtoa_r+0x39a>
  40dd0c:	07eb      	lsls	r3, r5, #31
  40dd0e:	d510      	bpl.n	40dd32 <_dtoa_r+0x39a>
  40dd10:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  40dd14:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dd16:	e005      	b.n	40dd24 <_dtoa_r+0x38c>
  40dd18:	429a      	cmp	r2, r3
  40dd1a:	f000 8428 	beq.w	40e56e <_dtoa_r+0xbd6>
  40dd1e:	f813 5c01 	ldrb.w	r5, [r3, #-1]
  40dd22:	469b      	mov	fp, r3
  40dd24:	2d39      	cmp	r5, #57	; 0x39
  40dd26:	f10b 33ff 	add.w	r3, fp, #4294967295
  40dd2a:	d0f5      	beq.n	40dd18 <_dtoa_r+0x380>
  40dd2c:	1c6a      	adds	r2, r5, #1
  40dd2e:	b2d2      	uxtb	r2, r2
  40dd30:	701a      	strb	r2, [r3, #0]
  40dd32:	4620      	mov	r0, r4
  40dd34:	990a      	ldr	r1, [sp, #40]	; 0x28
  40dd36:	f001 fe2d 	bl	40f994 <_Bfree>
  40dd3a:	9e07      	ldr	r6, [sp, #28]
  40dd3c:	9d26      	ldr	r5, [sp, #152]	; 0x98
  40dd3e:	1c73      	adds	r3, r6, #1
  40dd40:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  40dd42:	2200      	movs	r2, #0
  40dd44:	f88b 2000 	strb.w	r2, [fp]
  40dd48:	602b      	str	r3, [r5, #0]
  40dd4a:	2e00      	cmp	r6, #0
  40dd4c:	f000 8325 	beq.w	40e39a <_dtoa_r+0xa02>
  40dd50:	9809      	ldr	r0, [sp, #36]	; 0x24
  40dd52:	f8c6 b000 	str.w	fp, [r6]
  40dd56:	b01b      	add	sp, #108	; 0x6c
  40dd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dd5c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40dd5e:	2d00      	cmp	r5, #0
  40dd60:	f000 8103 	beq.w	40df6a <_dtoa_r+0x5d2>
  40dd64:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40dd66:	2e01      	cmp	r6, #1
  40dd68:	f340 82dc 	ble.w	40e324 <_dtoa_r+0x98c>
  40dd6c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40dd6e:	f109 37ff 	add.w	r7, r9, #4294967295
  40dd72:	42be      	cmp	r6, r7
  40dd74:	f2c0 8389 	blt.w	40e48a <_dtoa_r+0xaf2>
  40dd78:	1bf7      	subs	r7, r6, r7
  40dd7a:	f1b9 0f00 	cmp.w	r9, #0
  40dd7e:	f2c0 8486 	blt.w	40e68e <_dtoa_r+0xcf6>
  40dd82:	9d08      	ldr	r5, [sp, #32]
  40dd84:	464b      	mov	r3, r9
  40dd86:	9e08      	ldr	r6, [sp, #32]
  40dd88:	441e      	add	r6, r3
  40dd8a:	9608      	str	r6, [sp, #32]
  40dd8c:	9e06      	ldr	r6, [sp, #24]
  40dd8e:	4620      	mov	r0, r4
  40dd90:	441e      	add	r6, r3
  40dd92:	2101      	movs	r1, #1
  40dd94:	9606      	str	r6, [sp, #24]
  40dd96:	f001 feed 	bl	40fb74 <__i2b>
  40dd9a:	4606      	mov	r6, r0
  40dd9c:	b165      	cbz	r5, 40ddb8 <_dtoa_r+0x420>
  40dd9e:	9806      	ldr	r0, [sp, #24]
  40dda0:	2800      	cmp	r0, #0
  40dda2:	dd09      	ble.n	40ddb8 <_dtoa_r+0x420>
  40dda4:	4603      	mov	r3, r0
  40dda6:	9908      	ldr	r1, [sp, #32]
  40dda8:	42ab      	cmp	r3, r5
  40ddaa:	bfa8      	it	ge
  40ddac:	462b      	movge	r3, r5
  40ddae:	1ac9      	subs	r1, r1, r3
  40ddb0:	1ac0      	subs	r0, r0, r3
  40ddb2:	9108      	str	r1, [sp, #32]
  40ddb4:	1aed      	subs	r5, r5, r3
  40ddb6:	9006      	str	r0, [sp, #24]
  40ddb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ddba:	2a00      	cmp	r2, #0
  40ddbc:	dd1d      	ble.n	40ddfa <_dtoa_r+0x462>
  40ddbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ddc0:	2b00      	cmp	r3, #0
  40ddc2:	f000 8358 	beq.w	40e476 <_dtoa_r+0xade>
  40ddc6:	2f00      	cmp	r7, #0
  40ddc8:	dd11      	ble.n	40ddee <_dtoa_r+0x456>
  40ddca:	4631      	mov	r1, r6
  40ddcc:	463a      	mov	r2, r7
  40ddce:	4620      	mov	r0, r4
  40ddd0:	f001 ff78 	bl	40fcc4 <__pow5mult>
  40ddd4:	4606      	mov	r6, r0
  40ddd6:	4631      	mov	r1, r6
  40ddd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ddda:	4620      	mov	r0, r4
  40dddc:	f001 fed4 	bl	40fb88 <__multiply>
  40dde0:	990a      	ldr	r1, [sp, #40]	; 0x28
  40dde2:	4680      	mov	r8, r0
  40dde4:	4620      	mov	r0, r4
  40dde6:	f001 fdd5 	bl	40f994 <_Bfree>
  40ddea:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  40ddee:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  40ddf2:	ebbe 0207 	subs.w	r2, lr, r7
  40ddf6:	f040 828f 	bne.w	40e318 <_dtoa_r+0x980>
  40ddfa:	4620      	mov	r0, r4
  40ddfc:	2101      	movs	r1, #1
  40ddfe:	f001 feb9 	bl	40fb74 <__i2b>
  40de02:	4680      	mov	r8, r0
  40de04:	980d      	ldr	r0, [sp, #52]	; 0x34
  40de06:	2800      	cmp	r0, #0
  40de08:	dd05      	ble.n	40de16 <_dtoa_r+0x47e>
  40de0a:	4641      	mov	r1, r8
  40de0c:	4620      	mov	r0, r4
  40de0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40de10:	f001 ff58 	bl	40fcc4 <__pow5mult>
  40de14:	4680      	mov	r8, r0
  40de16:	9924      	ldr	r1, [sp, #144]	; 0x90
  40de18:	2901      	cmp	r1, #1
  40de1a:	f340 82c1 	ble.w	40e3a0 <_dtoa_r+0xa08>
  40de1e:	2700      	movs	r7, #0
  40de20:	980d      	ldr	r0, [sp, #52]	; 0x34
  40de22:	2800      	cmp	r0, #0
  40de24:	f040 82af 	bne.w	40e386 <_dtoa_r+0x9ee>
  40de28:	2001      	movs	r0, #1
  40de2a:	9b06      	ldr	r3, [sp, #24]
  40de2c:	4403      	add	r3, r0
  40de2e:	f013 031f 	ands.w	r3, r3, #31
  40de32:	f000 80a1 	beq.w	40df78 <_dtoa_r+0x5e0>
  40de36:	f1c3 0220 	rsb	r2, r3, #32
  40de3a:	2a04      	cmp	r2, #4
  40de3c:	f340 84b5 	ble.w	40e7aa <_dtoa_r+0xe12>
  40de40:	9908      	ldr	r1, [sp, #32]
  40de42:	9a06      	ldr	r2, [sp, #24]
  40de44:	f1c3 031c 	rsb	r3, r3, #28
  40de48:	4419      	add	r1, r3
  40de4a:	441a      	add	r2, r3
  40de4c:	9108      	str	r1, [sp, #32]
  40de4e:	441d      	add	r5, r3
  40de50:	9206      	str	r2, [sp, #24]
  40de52:	9908      	ldr	r1, [sp, #32]
  40de54:	2900      	cmp	r1, #0
  40de56:	dd05      	ble.n	40de64 <_dtoa_r+0x4cc>
  40de58:	990a      	ldr	r1, [sp, #40]	; 0x28
  40de5a:	9a08      	ldr	r2, [sp, #32]
  40de5c:	4620      	mov	r0, r4
  40de5e:	f001 ff7f 	bl	40fd60 <__lshift>
  40de62:	900a      	str	r0, [sp, #40]	; 0x28
  40de64:	9a06      	ldr	r2, [sp, #24]
  40de66:	2a00      	cmp	r2, #0
  40de68:	dd04      	ble.n	40de74 <_dtoa_r+0x4dc>
  40de6a:	4641      	mov	r1, r8
  40de6c:	4620      	mov	r0, r4
  40de6e:	f001 ff77 	bl	40fd60 <__lshift>
  40de72:	4680      	mov	r8, r0
  40de74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40de76:	2b00      	cmp	r3, #0
  40de78:	f040 826a 	bne.w	40e350 <_dtoa_r+0x9b8>
  40de7c:	f1b9 0f00 	cmp.w	r9, #0
  40de80:	f340 82a6 	ble.w	40e3d0 <_dtoa_r+0xa38>
  40de84:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40de86:	2800      	cmp	r0, #0
  40de88:	f040 8088 	bne.w	40df9c <_dtoa_r+0x604>
  40de8c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40de8e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40de90:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40de94:	e006      	b.n	40dea4 <_dtoa_r+0x50c>
  40de96:	4639      	mov	r1, r7
  40de98:	4620      	mov	r0, r4
  40de9a:	220a      	movs	r2, #10
  40de9c:	2300      	movs	r3, #0
  40de9e:	f001 fd83 	bl	40f9a8 <__multadd>
  40dea2:	4607      	mov	r7, r0
  40dea4:	4638      	mov	r0, r7
  40dea6:	4641      	mov	r1, r8
  40dea8:	f7ff fcdc 	bl	40d864 <quorem>
  40deac:	3030      	adds	r0, #48	; 0x30
  40deae:	f80b 0005 	strb.w	r0, [fp, r5]
  40deb2:	3501      	adds	r5, #1
  40deb4:	45a9      	cmp	r9, r5
  40deb6:	dcee      	bgt.n	40de96 <_dtoa_r+0x4fe>
  40deb8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40debc:	970a      	str	r7, [sp, #40]	; 0x28
  40debe:	4682      	mov	sl, r0
  40dec0:	f1b9 0f01 	cmp.w	r9, #1
  40dec4:	bfac      	ite	ge
  40dec6:	44cb      	addge	fp, r9
  40dec8:	f10b 0b01 	addlt.w	fp, fp, #1
  40decc:	2500      	movs	r5, #0
  40dece:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ded0:	2201      	movs	r2, #1
  40ded2:	4620      	mov	r0, r4
  40ded4:	f001 ff44 	bl	40fd60 <__lshift>
  40ded8:	4641      	mov	r1, r8
  40deda:	900a      	str	r0, [sp, #40]	; 0x28
  40dedc:	f001 ff9e 	bl	40fe1c <__mcmp>
  40dee0:	2800      	cmp	r0, #0
  40dee2:	f340 8309 	ble.w	40e4f8 <_dtoa_r+0xb60>
  40dee6:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  40deea:	9909      	ldr	r1, [sp, #36]	; 0x24
  40deec:	e005      	b.n	40defa <_dtoa_r+0x562>
  40deee:	4299      	cmp	r1, r3
  40def0:	f000 828b 	beq.w	40e40a <_dtoa_r+0xa72>
  40def4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  40def8:	469b      	mov	fp, r3
  40defa:	2a39      	cmp	r2, #57	; 0x39
  40defc:	f10b 33ff 	add.w	r3, fp, #4294967295
  40df00:	d0f5      	beq.n	40deee <_dtoa_r+0x556>
  40df02:	3201      	adds	r2, #1
  40df04:	701a      	strb	r2, [r3, #0]
  40df06:	4641      	mov	r1, r8
  40df08:	4620      	mov	r0, r4
  40df0a:	f001 fd43 	bl	40f994 <_Bfree>
  40df0e:	2e00      	cmp	r6, #0
  40df10:	f43f af0f 	beq.w	40dd32 <_dtoa_r+0x39a>
  40df14:	b12d      	cbz	r5, 40df22 <_dtoa_r+0x58a>
  40df16:	42b5      	cmp	r5, r6
  40df18:	d003      	beq.n	40df22 <_dtoa_r+0x58a>
  40df1a:	4629      	mov	r1, r5
  40df1c:	4620      	mov	r0, r4
  40df1e:	f001 fd39 	bl	40f994 <_Bfree>
  40df22:	4631      	mov	r1, r6
  40df24:	4620      	mov	r0, r4
  40df26:	f001 fd35 	bl	40f994 <_Bfree>
  40df2a:	e702      	b.n	40dd32 <_dtoa_r+0x39a>
  40df2c:	2601      	movs	r6, #1
  40df2e:	960e      	str	r6, [sp, #56]	; 0x38
  40df30:	e5eb      	b.n	40db0a <_dtoa_r+0x172>
  40df32:	9807      	ldr	r0, [sp, #28]
  40df34:	f004 fe0e 	bl	412b54 <__aeabi_i2d>
  40df38:	4632      	mov	r2, r6
  40df3a:	463b      	mov	r3, r7
  40df3c:	f005 f8d8 	bl	4130f0 <__aeabi_dcmpeq>
  40df40:	2800      	cmp	r0, #0
  40df42:	f47f adce 	bne.w	40dae2 <_dtoa_r+0x14a>
  40df46:	9e07      	ldr	r6, [sp, #28]
  40df48:	3e01      	subs	r6, #1
  40df4a:	9607      	str	r6, [sp, #28]
  40df4c:	e5c9      	b.n	40dae2 <_dtoa_r+0x14a>
  40df4e:	9e07      	ldr	r6, [sp, #28]
  40df50:	9d08      	ldr	r5, [sp, #32]
  40df52:	1bad      	subs	r5, r5, r6
  40df54:	9508      	str	r5, [sp, #32]
  40df56:	4275      	negs	r5, r6
  40df58:	2600      	movs	r6, #0
  40df5a:	950c      	str	r5, [sp, #48]	; 0x30
  40df5c:	960d      	str	r6, [sp, #52]	; 0x34
  40df5e:	e5e6      	b.n	40db2e <_dtoa_r+0x196>
  40df60:	426d      	negs	r5, r5
  40df62:	2600      	movs	r6, #0
  40df64:	9508      	str	r5, [sp, #32]
  40df66:	9606      	str	r6, [sp, #24]
  40df68:	e5d7      	b.n	40db1a <_dtoa_r+0x182>
  40df6a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40df6c:	9d08      	ldr	r5, [sp, #32]
  40df6e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40df70:	e714      	b.n	40dd9c <_dtoa_r+0x404>
  40df72:	bf00      	nop
  40df74:	40240000 	.word	0x40240000
  40df78:	231c      	movs	r3, #28
  40df7a:	f8dd e020 	ldr.w	lr, [sp, #32]
  40df7e:	9806      	ldr	r0, [sp, #24]
  40df80:	449e      	add	lr, r3
  40df82:	4418      	add	r0, r3
  40df84:	f8cd e020 	str.w	lr, [sp, #32]
  40df88:	441d      	add	r5, r3
  40df8a:	9006      	str	r0, [sp, #24]
  40df8c:	e761      	b.n	40de52 <_dtoa_r+0x4ba>
  40df8e:	48a7      	ldr	r0, [pc, #668]	; (40e22c <_dtoa_r+0x894>)
  40df90:	1b40      	subs	r0, r0, r5
  40df92:	fa0a f000 	lsl.w	r0, sl, r0
  40df96:	e570      	b.n	40da7a <_dtoa_r+0xe2>
  40df98:	900e      	str	r0, [sp, #56]	; 0x38
  40df9a:	e5b6      	b.n	40db0a <_dtoa_r+0x172>
  40df9c:	2d00      	cmp	r5, #0
  40df9e:	dd05      	ble.n	40dfac <_dtoa_r+0x614>
  40dfa0:	4631      	mov	r1, r6
  40dfa2:	462a      	mov	r2, r5
  40dfa4:	4620      	mov	r0, r4
  40dfa6:	f001 fedb 	bl	40fd60 <__lshift>
  40dfaa:	4606      	mov	r6, r0
  40dfac:	2f00      	cmp	r7, #0
  40dfae:	f040 82e8 	bne.w	40e582 <_dtoa_r+0xbea>
  40dfb2:	4637      	mov	r7, r6
  40dfb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40dfb6:	9809      	ldr	r0, [sp, #36]	; 0x24
  40dfb8:	444d      	add	r5, r9
  40dfba:	9508      	str	r5, [sp, #32]
  40dfbc:	f00a 0501 	and.w	r5, sl, #1
  40dfc0:	950b      	str	r5, [sp, #44]	; 0x2c
  40dfc2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  40dfc6:	1c45      	adds	r5, r0, #1
  40dfc8:	e00a      	b.n	40dfe0 <_dtoa_r+0x648>
  40dfca:	f001 fced 	bl	40f9a8 <__multadd>
  40dfce:	4639      	mov	r1, r7
  40dfd0:	4606      	mov	r6, r0
  40dfd2:	220a      	movs	r2, #10
  40dfd4:	4620      	mov	r0, r4
  40dfd6:	2300      	movs	r3, #0
  40dfd8:	f001 fce6 	bl	40f9a8 <__multadd>
  40dfdc:	4607      	mov	r7, r0
  40dfde:	3501      	adds	r5, #1
  40dfe0:	4641      	mov	r1, r8
  40dfe2:	4648      	mov	r0, r9
  40dfe4:	f7ff fc3e 	bl	40d864 <quorem>
  40dfe8:	4631      	mov	r1, r6
  40dfea:	4683      	mov	fp, r0
  40dfec:	4648      	mov	r0, r9
  40dfee:	f001 ff15 	bl	40fe1c <__mcmp>
  40dff2:	4641      	mov	r1, r8
  40dff4:	9003      	str	r0, [sp, #12]
  40dff6:	463a      	mov	r2, r7
  40dff8:	4620      	mov	r0, r4
  40dffa:	f001 ff33 	bl	40fe64 <__mdiff>
  40dffe:	68c2      	ldr	r2, [r0, #12]
  40e000:	1e69      	subs	r1, r5, #1
  40e002:	4603      	mov	r3, r0
  40e004:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
  40e008:	9106      	str	r1, [sp, #24]
  40e00a:	2a00      	cmp	r2, #0
  40e00c:	f040 8193 	bne.w	40e336 <_dtoa_r+0x99e>
  40e010:	4619      	mov	r1, r3
  40e012:	4648      	mov	r0, r9
  40e014:	9302      	str	r3, [sp, #8]
  40e016:	f001 ff01 	bl	40fe1c <__mcmp>
  40e01a:	9b02      	ldr	r3, [sp, #8]
  40e01c:	4602      	mov	r2, r0
  40e01e:	4619      	mov	r1, r3
  40e020:	4620      	mov	r0, r4
  40e022:	9202      	str	r2, [sp, #8]
  40e024:	f001 fcb6 	bl	40f994 <_Bfree>
  40e028:	9a02      	ldr	r2, [sp, #8]
  40e02a:	b92a      	cbnz	r2, 40e038 <_dtoa_r+0x6a0>
  40e02c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40e02e:	b91b      	cbnz	r3, 40e038 <_dtoa_r+0x6a0>
  40e030:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e032:	2800      	cmp	r0, #0
  40e034:	f000 8391 	beq.w	40e75a <_dtoa_r+0xdc2>
  40e038:	9b03      	ldr	r3, [sp, #12]
  40e03a:	2b00      	cmp	r3, #0
  40e03c:	f2c0 8234 	blt.w	40e4a8 <_dtoa_r+0xb10>
  40e040:	d105      	bne.n	40e04e <_dtoa_r+0x6b6>
  40e042:	9824      	ldr	r0, [sp, #144]	; 0x90
  40e044:	b918      	cbnz	r0, 40e04e <_dtoa_r+0x6b6>
  40e046:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40e048:	2900      	cmp	r1, #0
  40e04a:	f000 822d 	beq.w	40e4a8 <_dtoa_r+0xb10>
  40e04e:	2a00      	cmp	r2, #0
  40e050:	f300 82ab 	bgt.w	40e5aa <_dtoa_r+0xc12>
  40e054:	f8dd e020 	ldr.w	lr, [sp, #32]
  40e058:	f805 ac01 	strb.w	sl, [r5, #-1]
  40e05c:	4575      	cmp	r5, lr
  40e05e:	46ab      	mov	fp, r5
  40e060:	f000 82b3 	beq.w	40e5ca <_dtoa_r+0xc32>
  40e064:	4649      	mov	r1, r9
  40e066:	220a      	movs	r2, #10
  40e068:	2300      	movs	r3, #0
  40e06a:	4620      	mov	r0, r4
  40e06c:	f001 fc9c 	bl	40f9a8 <__multadd>
  40e070:	42be      	cmp	r6, r7
  40e072:	4681      	mov	r9, r0
  40e074:	4631      	mov	r1, r6
  40e076:	4620      	mov	r0, r4
  40e078:	f04f 020a 	mov.w	r2, #10
  40e07c:	f04f 0300 	mov.w	r3, #0
  40e080:	d1a3      	bne.n	40dfca <_dtoa_r+0x632>
  40e082:	f001 fc91 	bl	40f9a8 <__multadd>
  40e086:	4606      	mov	r6, r0
  40e088:	4607      	mov	r7, r0
  40e08a:	e7a8      	b.n	40dfde <_dtoa_r+0x646>
  40e08c:	2600      	movs	r6, #0
  40e08e:	960b      	str	r6, [sp, #44]	; 0x2c
  40e090:	9e07      	ldr	r6, [sp, #28]
  40e092:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
  40e096:	44b6      	add	lr, r6
  40e098:	f10e 0901 	add.w	r9, lr, #1
  40e09c:	f1b9 0f00 	cmp.w	r9, #0
  40e0a0:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  40e0a4:	464e      	mov	r6, r9
  40e0a6:	f340 8150 	ble.w	40e34a <_dtoa_r+0x9b2>
  40e0aa:	2100      	movs	r1, #0
  40e0ac:	2e17      	cmp	r6, #23
  40e0ae:	6461      	str	r1, [r4, #68]	; 0x44
  40e0b0:	d90a      	bls.n	40e0c8 <_dtoa_r+0x730>
  40e0b2:	2201      	movs	r2, #1
  40e0b4:	2304      	movs	r3, #4
  40e0b6:	005b      	lsls	r3, r3, #1
  40e0b8:	f103 0014 	add.w	r0, r3, #20
  40e0bc:	42b0      	cmp	r0, r6
  40e0be:	4611      	mov	r1, r2
  40e0c0:	f102 0201 	add.w	r2, r2, #1
  40e0c4:	d9f7      	bls.n	40e0b6 <_dtoa_r+0x71e>
  40e0c6:	6461      	str	r1, [r4, #68]	; 0x44
  40e0c8:	4620      	mov	r0, r4
  40e0ca:	f001 fc3d 	bl	40f948 <_Balloc>
  40e0ce:	2e0e      	cmp	r6, #14
  40e0d0:	9009      	str	r0, [sp, #36]	; 0x24
  40e0d2:	6420      	str	r0, [r4, #64]	; 0x40
  40e0d4:	f63f ad6c 	bhi.w	40dbb0 <_dtoa_r+0x218>
  40e0d8:	2d00      	cmp	r5, #0
  40e0da:	f43f ad69 	beq.w	40dbb0 <_dtoa_r+0x218>
  40e0de:	9d07      	ldr	r5, [sp, #28]
  40e0e0:	2d00      	cmp	r5, #0
  40e0e2:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
  40e0e6:	f340 821b 	ble.w	40e520 <_dtoa_r+0xb88>
  40e0ea:	4b51      	ldr	r3, [pc, #324]	; (40e230 <_dtoa_r+0x898>)
  40e0ec:	f005 020f 	and.w	r2, r5, #15
  40e0f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40e0f4:	112d      	asrs	r5, r5, #4
  40e0f6:	e9d3 6700 	ldrd	r6, r7, [r3]
  40e0fa:	06eb      	lsls	r3, r5, #27
  40e0fc:	f140 81cd 	bpl.w	40e49a <_dtoa_r+0xb02>
  40e100:	4b4c      	ldr	r3, [pc, #304]	; (40e234 <_dtoa_r+0x89c>)
  40e102:	4650      	mov	r0, sl
  40e104:	4659      	mov	r1, fp
  40e106:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40e10a:	f004 feb3 	bl	412e74 <__aeabi_ddiv>
  40e10e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40e112:	f005 050f 	and.w	r5, r5, #15
  40e116:	f04f 0803 	mov.w	r8, #3
  40e11a:	b18d      	cbz	r5, 40e140 <_dtoa_r+0x7a8>
  40e11c:	f8df a114 	ldr.w	sl, [pc, #276]	; 40e234 <_dtoa_r+0x89c>
  40e120:	4630      	mov	r0, r6
  40e122:	4639      	mov	r1, r7
  40e124:	07ee      	lsls	r6, r5, #31
  40e126:	d505      	bpl.n	40e134 <_dtoa_r+0x79c>
  40e128:	e9da 2300 	ldrd	r2, r3, [sl]
  40e12c:	f108 0801 	add.w	r8, r8, #1
  40e130:	f004 fd76 	bl	412c20 <__aeabi_dmul>
  40e134:	106d      	asrs	r5, r5, #1
  40e136:	f10a 0a08 	add.w	sl, sl, #8
  40e13a:	d1f3      	bne.n	40e124 <_dtoa_r+0x78c>
  40e13c:	4606      	mov	r6, r0
  40e13e:	460f      	mov	r7, r1
  40e140:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40e144:	4632      	mov	r2, r6
  40e146:	463b      	mov	r3, r7
  40e148:	f004 fe94 	bl	412e74 <__aeabi_ddiv>
  40e14c:	4682      	mov	sl, r0
  40e14e:	468b      	mov	fp, r1
  40e150:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40e152:	b145      	cbz	r5, 40e166 <_dtoa_r+0x7ce>
  40e154:	4650      	mov	r0, sl
  40e156:	4659      	mov	r1, fp
  40e158:	2200      	movs	r2, #0
  40e15a:	4b37      	ldr	r3, [pc, #220]	; (40e238 <_dtoa_r+0x8a0>)
  40e15c:	f004 ffd2 	bl	413104 <__aeabi_dcmplt>
  40e160:	2800      	cmp	r0, #0
  40e162:	f040 82a9 	bne.w	40e6b8 <_dtoa_r+0xd20>
  40e166:	4640      	mov	r0, r8
  40e168:	f004 fcf4 	bl	412b54 <__aeabi_i2d>
  40e16c:	4652      	mov	r2, sl
  40e16e:	465b      	mov	r3, fp
  40e170:	f004 fd56 	bl	412c20 <__aeabi_dmul>
  40e174:	2200      	movs	r2, #0
  40e176:	4b31      	ldr	r3, [pc, #196]	; (40e23c <_dtoa_r+0x8a4>)
  40e178:	f004 fba0 	bl	4128bc <__adddf3>
  40e17c:	4606      	mov	r6, r0
  40e17e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40e182:	f1b9 0f00 	cmp.w	r9, #0
  40e186:	f000 815a 	beq.w	40e43e <_dtoa_r+0xaa6>
  40e18a:	9d07      	ldr	r5, [sp, #28]
  40e18c:	9517      	str	r5, [sp, #92]	; 0x5c
  40e18e:	46c8      	mov	r8, r9
  40e190:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40e192:	2d00      	cmp	r5, #0
  40e194:	f000 8222 	beq.w	40e5dc <_dtoa_r+0xc44>
  40e198:	4b25      	ldr	r3, [pc, #148]	; (40e230 <_dtoa_r+0x898>)
  40e19a:	4929      	ldr	r1, [pc, #164]	; (40e240 <_dtoa_r+0x8a8>)
  40e19c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40e1a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40e1a4:	2000      	movs	r0, #0
  40e1a6:	f004 fe65 	bl	412e74 <__aeabi_ddiv>
  40e1aa:	4632      	mov	r2, r6
  40e1ac:	463b      	mov	r3, r7
  40e1ae:	f004 fb83 	bl	4128b8 <__aeabi_dsub>
  40e1b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40e1b6:	4659      	mov	r1, fp
  40e1b8:	4650      	mov	r0, sl
  40e1ba:	f004 ffcb 	bl	413154 <__aeabi_d2iz>
  40e1be:	4605      	mov	r5, r0
  40e1c0:	f004 fcc8 	bl	412b54 <__aeabi_i2d>
  40e1c4:	4602      	mov	r2, r0
  40e1c6:	460b      	mov	r3, r1
  40e1c8:	4650      	mov	r0, sl
  40e1ca:	4659      	mov	r1, fp
  40e1cc:	f004 fb74 	bl	4128b8 <__aeabi_dsub>
  40e1d0:	3530      	adds	r5, #48	; 0x30
  40e1d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40e1d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40e1d8:	b2ed      	uxtb	r5, r5
  40e1da:	7035      	strb	r5, [r6, #0]
  40e1dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40e1e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40e1e4:	f106 0b01 	add.w	fp, r6, #1
  40e1e8:	f004 ffaa 	bl	413140 <__aeabi_dcmpgt>
  40e1ec:	2800      	cmp	r0, #0
  40e1ee:	f040 82a9 	bne.w	40e744 <_dtoa_r+0xdac>
  40e1f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40e1f6:	2000      	movs	r0, #0
  40e1f8:	490f      	ldr	r1, [pc, #60]	; (40e238 <_dtoa_r+0x8a0>)
  40e1fa:	f004 fb5d 	bl	4128b8 <__aeabi_dsub>
  40e1fe:	4602      	mov	r2, r0
  40e200:	460b      	mov	r3, r1
  40e202:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40e206:	f004 ff9b 	bl	413140 <__aeabi_dcmpgt>
  40e20a:	2800      	cmp	r0, #0
  40e20c:	f040 82a0 	bne.w	40e750 <_dtoa_r+0xdb8>
  40e210:	f1b8 0f01 	cmp.w	r8, #1
  40e214:	f340 8180 	ble.w	40e518 <_dtoa_r+0xb80>
  40e218:	44b0      	add	r8, r6
  40e21a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  40e21e:	46a2      	mov	sl, r4
  40e220:	46c1      	mov	r9, r8
  40e222:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  40e226:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  40e22a:	e019      	b.n	40e260 <_dtoa_r+0x8c8>
  40e22c:	fffffbee 	.word	0xfffffbee
  40e230:	004135a0 	.word	0x004135a0
  40e234:	00413668 	.word	0x00413668
  40e238:	3ff00000 	.word	0x3ff00000
  40e23c:	401c0000 	.word	0x401c0000
  40e240:	3fe00000 	.word	0x3fe00000
  40e244:	2000      	movs	r0, #0
  40e246:	49a8      	ldr	r1, [pc, #672]	; (40e4e8 <_dtoa_r+0xb50>)
  40e248:	f004 fb36 	bl	4128b8 <__aeabi_dsub>
  40e24c:	4622      	mov	r2, r4
  40e24e:	462b      	mov	r3, r5
  40e250:	f004 ff58 	bl	413104 <__aeabi_dcmplt>
  40e254:	2800      	cmp	r0, #0
  40e256:	f040 8279 	bne.w	40e74c <_dtoa_r+0xdb4>
  40e25a:	45cb      	cmp	fp, r9
  40e25c:	f000 8159 	beq.w	40e512 <_dtoa_r+0xb7a>
  40e260:	4620      	mov	r0, r4
  40e262:	4629      	mov	r1, r5
  40e264:	2200      	movs	r2, #0
  40e266:	4ba1      	ldr	r3, [pc, #644]	; (40e4ec <_dtoa_r+0xb54>)
  40e268:	f004 fcda 	bl	412c20 <__aeabi_dmul>
  40e26c:	2200      	movs	r2, #0
  40e26e:	4b9f      	ldr	r3, [pc, #636]	; (40e4ec <_dtoa_r+0xb54>)
  40e270:	4604      	mov	r4, r0
  40e272:	460d      	mov	r5, r1
  40e274:	4630      	mov	r0, r6
  40e276:	4639      	mov	r1, r7
  40e278:	f004 fcd2 	bl	412c20 <__aeabi_dmul>
  40e27c:	460f      	mov	r7, r1
  40e27e:	4606      	mov	r6, r0
  40e280:	f004 ff68 	bl	413154 <__aeabi_d2iz>
  40e284:	4680      	mov	r8, r0
  40e286:	f004 fc65 	bl	412b54 <__aeabi_i2d>
  40e28a:	4602      	mov	r2, r0
  40e28c:	460b      	mov	r3, r1
  40e28e:	4630      	mov	r0, r6
  40e290:	4639      	mov	r1, r7
  40e292:	f004 fb11 	bl	4128b8 <__aeabi_dsub>
  40e296:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40e29a:	fa5f f888 	uxtb.w	r8, r8
  40e29e:	4622      	mov	r2, r4
  40e2a0:	462b      	mov	r3, r5
  40e2a2:	f80b 8b01 	strb.w	r8, [fp], #1
  40e2a6:	4606      	mov	r6, r0
  40e2a8:	460f      	mov	r7, r1
  40e2aa:	f004 ff2b 	bl	413104 <__aeabi_dcmplt>
  40e2ae:	4632      	mov	r2, r6
  40e2b0:	463b      	mov	r3, r7
  40e2b2:	2800      	cmp	r0, #0
  40e2b4:	d0c6      	beq.n	40e244 <_dtoa_r+0x8ac>
  40e2b6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40e2b8:	9607      	str	r6, [sp, #28]
  40e2ba:	4654      	mov	r4, sl
  40e2bc:	e539      	b.n	40dd32 <_dtoa_r+0x39a>
  40e2be:	2600      	movs	r6, #0
  40e2c0:	960b      	str	r6, [sp, #44]	; 0x2c
  40e2c2:	9825      	ldr	r0, [sp, #148]	; 0x94
  40e2c4:	2800      	cmp	r0, #0
  40e2c6:	dd3c      	ble.n	40e342 <_dtoa_r+0x9aa>
  40e2c8:	4606      	mov	r6, r0
  40e2ca:	900f      	str	r0, [sp, #60]	; 0x3c
  40e2cc:	4681      	mov	r9, r0
  40e2ce:	e6ec      	b.n	40e0aa <_dtoa_r+0x712>
  40e2d0:	2601      	movs	r6, #1
  40e2d2:	960b      	str	r6, [sp, #44]	; 0x2c
  40e2d4:	e7f5      	b.n	40e2c2 <_dtoa_r+0x92a>
  40e2d6:	f1b9 0f00 	cmp.w	r9, #0
  40e2da:	f73f ac7c 	bgt.w	40dbd6 <_dtoa_r+0x23e>
  40e2de:	f040 80c6 	bne.w	40e46e <_dtoa_r+0xad6>
  40e2e2:	2200      	movs	r2, #0
  40e2e4:	4b82      	ldr	r3, [pc, #520]	; (40e4f0 <_dtoa_r+0xb58>)
  40e2e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40e2ea:	f004 fc99 	bl	412c20 <__aeabi_dmul>
  40e2ee:	4652      	mov	r2, sl
  40e2f0:	465b      	mov	r3, fp
  40e2f2:	f004 ff1b 	bl	41312c <__aeabi_dcmpge>
  40e2f6:	46c8      	mov	r8, r9
  40e2f8:	464e      	mov	r6, r9
  40e2fa:	2800      	cmp	r0, #0
  40e2fc:	d07c      	beq.n	40e3f8 <_dtoa_r+0xa60>
  40e2fe:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40e300:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40e304:	43ed      	mvns	r5, r5
  40e306:	9507      	str	r5, [sp, #28]
  40e308:	4641      	mov	r1, r8
  40e30a:	4620      	mov	r0, r4
  40e30c:	f001 fb42 	bl	40f994 <_Bfree>
  40e310:	2e00      	cmp	r6, #0
  40e312:	f47f ae06 	bne.w	40df22 <_dtoa_r+0x58a>
  40e316:	e50c      	b.n	40dd32 <_dtoa_r+0x39a>
  40e318:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e31a:	4620      	mov	r0, r4
  40e31c:	f001 fcd2 	bl	40fcc4 <__pow5mult>
  40e320:	900a      	str	r0, [sp, #40]	; 0x28
  40e322:	e56a      	b.n	40ddfa <_dtoa_r+0x462>
  40e324:	9d16      	ldr	r5, [sp, #88]	; 0x58
  40e326:	2d00      	cmp	r5, #0
  40e328:	f000 81b7 	beq.w	40e69a <_dtoa_r+0xd02>
  40e32c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40e330:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40e332:	9d08      	ldr	r5, [sp, #32]
  40e334:	e527      	b.n	40dd86 <_dtoa_r+0x3ee>
  40e336:	4601      	mov	r1, r0
  40e338:	4620      	mov	r0, r4
  40e33a:	f001 fb2b 	bl	40f994 <_Bfree>
  40e33e:	2201      	movs	r2, #1
  40e340:	e67a      	b.n	40e038 <_dtoa_r+0x6a0>
  40e342:	2601      	movs	r6, #1
  40e344:	9625      	str	r6, [sp, #148]	; 0x94
  40e346:	960f      	str	r6, [sp, #60]	; 0x3c
  40e348:	46b1      	mov	r9, r6
  40e34a:	2100      	movs	r1, #0
  40e34c:	6461      	str	r1, [r4, #68]	; 0x44
  40e34e:	e6bb      	b.n	40e0c8 <_dtoa_r+0x730>
  40e350:	980a      	ldr	r0, [sp, #40]	; 0x28
  40e352:	4641      	mov	r1, r8
  40e354:	f001 fd62 	bl	40fe1c <__mcmp>
  40e358:	2800      	cmp	r0, #0
  40e35a:	f6bf ad8f 	bge.w	40de7c <_dtoa_r+0x4e4>
  40e35e:	f8dd e01c 	ldr.w	lr, [sp, #28]
  40e362:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e364:	f10e 3eff 	add.w	lr, lr, #4294967295
  40e368:	4620      	mov	r0, r4
  40e36a:	220a      	movs	r2, #10
  40e36c:	2300      	movs	r3, #0
  40e36e:	f8cd e01c 	str.w	lr, [sp, #28]
  40e372:	f001 fb19 	bl	40f9a8 <__multadd>
  40e376:	900a      	str	r0, [sp, #40]	; 0x28
  40e378:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e37a:	2800      	cmp	r0, #0
  40e37c:	f040 8207 	bne.w	40e78e <_dtoa_r+0xdf6>
  40e380:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  40e384:	e57a      	b.n	40de7c <_dtoa_r+0x4e4>
  40e386:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40e38a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40e38e:	6918      	ldr	r0, [r3, #16]
  40e390:	f001 fba2 	bl	40fad8 <__hi0bits>
  40e394:	f1c0 0020 	rsb	r0, r0, #32
  40e398:	e547      	b.n	40de2a <_dtoa_r+0x492>
  40e39a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40e39c:	f7ff bb2d 	b.w	40d9fa <_dtoa_r+0x62>
  40e3a0:	f1ba 0f00 	cmp.w	sl, #0
  40e3a4:	f47f ad3b 	bne.w	40de1e <_dtoa_r+0x486>
  40e3a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40e3ac:	2b00      	cmp	r3, #0
  40e3ae:	f040 817b 	bne.w	40e6a8 <_dtoa_r+0xd10>
  40e3b2:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40e3b6:	0d3f      	lsrs	r7, r7, #20
  40e3b8:	053f      	lsls	r7, r7, #20
  40e3ba:	2f00      	cmp	r7, #0
  40e3bc:	f43f ad30 	beq.w	40de20 <_dtoa_r+0x488>
  40e3c0:	9a08      	ldr	r2, [sp, #32]
  40e3c2:	9b06      	ldr	r3, [sp, #24]
  40e3c4:	3201      	adds	r2, #1
  40e3c6:	3301      	adds	r3, #1
  40e3c8:	9208      	str	r2, [sp, #32]
  40e3ca:	9306      	str	r3, [sp, #24]
  40e3cc:	2701      	movs	r7, #1
  40e3ce:	e527      	b.n	40de20 <_dtoa_r+0x488>
  40e3d0:	9924      	ldr	r1, [sp, #144]	; 0x90
  40e3d2:	2902      	cmp	r1, #2
  40e3d4:	f77f ad56 	ble.w	40de84 <_dtoa_r+0x4ec>
  40e3d8:	f1b9 0f00 	cmp.w	r9, #0
  40e3dc:	d18f      	bne.n	40e2fe <_dtoa_r+0x966>
  40e3de:	4641      	mov	r1, r8
  40e3e0:	464b      	mov	r3, r9
  40e3e2:	2205      	movs	r2, #5
  40e3e4:	4620      	mov	r0, r4
  40e3e6:	f001 fadf 	bl	40f9a8 <__multadd>
  40e3ea:	4680      	mov	r8, r0
  40e3ec:	4641      	mov	r1, r8
  40e3ee:	980a      	ldr	r0, [sp, #40]	; 0x28
  40e3f0:	f001 fd14 	bl	40fe1c <__mcmp>
  40e3f4:	2800      	cmp	r0, #0
  40e3f6:	dd82      	ble.n	40e2fe <_dtoa_r+0x966>
  40e3f8:	9d07      	ldr	r5, [sp, #28]
  40e3fa:	3501      	adds	r5, #1
  40e3fc:	9507      	str	r5, [sp, #28]
  40e3fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e400:	2331      	movs	r3, #49	; 0x31
  40e402:	702b      	strb	r3, [r5, #0]
  40e404:	f105 0b01 	add.w	fp, r5, #1
  40e408:	e77e      	b.n	40e308 <_dtoa_r+0x970>
  40e40a:	9807      	ldr	r0, [sp, #28]
  40e40c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e40e:	2331      	movs	r3, #49	; 0x31
  40e410:	3001      	adds	r0, #1
  40e412:	9007      	str	r0, [sp, #28]
  40e414:	700b      	strb	r3, [r1, #0]
  40e416:	e576      	b.n	40df06 <_dtoa_r+0x56e>
  40e418:	46a3      	mov	fp, r4
  40e41a:	9c03      	ldr	r4, [sp, #12]
  40e41c:	e489      	b.n	40dd32 <_dtoa_r+0x39a>
  40e41e:	4640      	mov	r0, r8
  40e420:	f004 fb98 	bl	412b54 <__aeabi_i2d>
  40e424:	4602      	mov	r2, r0
  40e426:	460b      	mov	r3, r1
  40e428:	4650      	mov	r0, sl
  40e42a:	4659      	mov	r1, fp
  40e42c:	f004 fbf8 	bl	412c20 <__aeabi_dmul>
  40e430:	2200      	movs	r2, #0
  40e432:	4b30      	ldr	r3, [pc, #192]	; (40e4f4 <_dtoa_r+0xb5c>)
  40e434:	f004 fa42 	bl	4128bc <__adddf3>
  40e438:	4606      	mov	r6, r0
  40e43a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40e43e:	4650      	mov	r0, sl
  40e440:	4659      	mov	r1, fp
  40e442:	2200      	movs	r2, #0
  40e444:	4b2a      	ldr	r3, [pc, #168]	; (40e4f0 <_dtoa_r+0xb58>)
  40e446:	f004 fa37 	bl	4128b8 <__aeabi_dsub>
  40e44a:	4632      	mov	r2, r6
  40e44c:	463b      	mov	r3, r7
  40e44e:	4682      	mov	sl, r0
  40e450:	468b      	mov	fp, r1
  40e452:	f004 fe75 	bl	413140 <__aeabi_dcmpgt>
  40e456:	2800      	cmp	r0, #0
  40e458:	f040 80bc 	bne.w	40e5d4 <_dtoa_r+0xc3c>
  40e45c:	4632      	mov	r2, r6
  40e45e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40e462:	4650      	mov	r0, sl
  40e464:	4659      	mov	r1, fp
  40e466:	f004 fe4d 	bl	413104 <__aeabi_dcmplt>
  40e46a:	2800      	cmp	r0, #0
  40e46c:	d054      	beq.n	40e518 <_dtoa_r+0xb80>
  40e46e:	f04f 0800 	mov.w	r8, #0
  40e472:	4646      	mov	r6, r8
  40e474:	e743      	b.n	40e2fe <_dtoa_r+0x966>
  40e476:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40e47a:	4620      	mov	r0, r4
  40e47c:	f001 fc22 	bl	40fcc4 <__pow5mult>
  40e480:	900a      	str	r0, [sp, #40]	; 0x28
  40e482:	e4ba      	b.n	40ddfa <_dtoa_r+0x462>
  40e484:	2601      	movs	r6, #1
  40e486:	960b      	str	r6, [sp, #44]	; 0x2c
  40e488:	e602      	b.n	40e090 <_dtoa_r+0x6f8>
  40e48a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40e48c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40e48e:	970c      	str	r7, [sp, #48]	; 0x30
  40e490:	1b7b      	subs	r3, r7, r5
  40e492:	441e      	add	r6, r3
  40e494:	960d      	str	r6, [sp, #52]	; 0x34
  40e496:	2700      	movs	r7, #0
  40e498:	e46f      	b.n	40dd7a <_dtoa_r+0x3e2>
  40e49a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40e49e:	f04f 0802 	mov.w	r8, #2
  40e4a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40e4a6:	e638      	b.n	40e11a <_dtoa_r+0x782>
  40e4a8:	2a00      	cmp	r2, #0
  40e4aa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40e4ae:	46d9      	mov	r9, fp
  40e4b0:	dd11      	ble.n	40e4d6 <_dtoa_r+0xb3e>
  40e4b2:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e4b4:	2201      	movs	r2, #1
  40e4b6:	4620      	mov	r0, r4
  40e4b8:	f001 fc52 	bl	40fd60 <__lshift>
  40e4bc:	4641      	mov	r1, r8
  40e4be:	900a      	str	r0, [sp, #40]	; 0x28
  40e4c0:	f001 fcac 	bl	40fe1c <__mcmp>
  40e4c4:	2800      	cmp	r0, #0
  40e4c6:	f340 815b 	ble.w	40e780 <_dtoa_r+0xde8>
  40e4ca:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40e4ce:	f000 811a 	beq.w	40e706 <_dtoa_r+0xd6e>
  40e4d2:	f109 0a31 	add.w	sl, r9, #49	; 0x31
  40e4d6:	9b06      	ldr	r3, [sp, #24]
  40e4d8:	4635      	mov	r5, r6
  40e4da:	f883 a000 	strb.w	sl, [r3]
  40e4de:	f103 0b01 	add.w	fp, r3, #1
  40e4e2:	463e      	mov	r6, r7
  40e4e4:	e50f      	b.n	40df06 <_dtoa_r+0x56e>
  40e4e6:	bf00      	nop
  40e4e8:	3ff00000 	.word	0x3ff00000
  40e4ec:	40240000 	.word	0x40240000
  40e4f0:	40140000 	.word	0x40140000
  40e4f4:	401c0000 	.word	0x401c0000
  40e4f8:	d103      	bne.n	40e502 <_dtoa_r+0xb6a>
  40e4fa:	f01a 0f01 	tst.w	sl, #1
  40e4fe:	f47f acf2 	bne.w	40dee6 <_dtoa_r+0x54e>
  40e502:	465b      	mov	r3, fp
  40e504:	469b      	mov	fp, r3
  40e506:	3b01      	subs	r3, #1
  40e508:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  40e50c:	2a30      	cmp	r2, #48	; 0x30
  40e50e:	d0f9      	beq.n	40e504 <_dtoa_r+0xb6c>
  40e510:	e4f9      	b.n	40df06 <_dtoa_r+0x56e>
  40e512:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  40e516:	4654      	mov	r4, sl
  40e518:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  40e51c:	f7ff bb48 	b.w	40dbb0 <_dtoa_r+0x218>
  40e520:	9e07      	ldr	r6, [sp, #28]
  40e522:	4275      	negs	r5, r6
  40e524:	2d00      	cmp	r5, #0
  40e526:	f000 80c2 	beq.w	40e6ae <_dtoa_r+0xd16>
  40e52a:	4ba3      	ldr	r3, [pc, #652]	; (40e7b8 <_dtoa_r+0xe20>)
  40e52c:	f005 020f 	and.w	r2, r5, #15
  40e530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40e534:	e9d3 2300 	ldrd	r2, r3, [r3]
  40e538:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40e53c:	f004 fb70 	bl	412c20 <__aeabi_dmul>
  40e540:	112d      	asrs	r5, r5, #4
  40e542:	4682      	mov	sl, r0
  40e544:	468b      	mov	fp, r1
  40e546:	f000 812d 	beq.w	40e7a4 <_dtoa_r+0xe0c>
  40e54a:	4e9c      	ldr	r6, [pc, #624]	; (40e7bc <_dtoa_r+0xe24>)
  40e54c:	f04f 0802 	mov.w	r8, #2
  40e550:	07ea      	lsls	r2, r5, #31
  40e552:	d505      	bpl.n	40e560 <_dtoa_r+0xbc8>
  40e554:	e9d6 2300 	ldrd	r2, r3, [r6]
  40e558:	f108 0801 	add.w	r8, r8, #1
  40e55c:	f004 fb60 	bl	412c20 <__aeabi_dmul>
  40e560:	106d      	asrs	r5, r5, #1
  40e562:	f106 0608 	add.w	r6, r6, #8
  40e566:	d1f3      	bne.n	40e550 <_dtoa_r+0xbb8>
  40e568:	4682      	mov	sl, r0
  40e56a:	468b      	mov	fp, r1
  40e56c:	e5f0      	b.n	40e150 <_dtoa_r+0x7b8>
  40e56e:	9e07      	ldr	r6, [sp, #28]
  40e570:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e572:	2230      	movs	r2, #48	; 0x30
  40e574:	702a      	strb	r2, [r5, #0]
  40e576:	3601      	adds	r6, #1
  40e578:	2231      	movs	r2, #49	; 0x31
  40e57a:	9607      	str	r6, [sp, #28]
  40e57c:	701a      	strb	r2, [r3, #0]
  40e57e:	f7ff bbd8 	b.w	40dd32 <_dtoa_r+0x39a>
  40e582:	6871      	ldr	r1, [r6, #4]
  40e584:	4620      	mov	r0, r4
  40e586:	f001 f9df 	bl	40f948 <_Balloc>
  40e58a:	6933      	ldr	r3, [r6, #16]
  40e58c:	1c9a      	adds	r2, r3, #2
  40e58e:	4605      	mov	r5, r0
  40e590:	0092      	lsls	r2, r2, #2
  40e592:	f106 010c 	add.w	r1, r6, #12
  40e596:	300c      	adds	r0, #12
  40e598:	f7fb fdb2 	bl	40a100 <memcpy>
  40e59c:	4620      	mov	r0, r4
  40e59e:	4629      	mov	r1, r5
  40e5a0:	2201      	movs	r2, #1
  40e5a2:	f001 fbdd 	bl	40fd60 <__lshift>
  40e5a6:	4607      	mov	r7, r0
  40e5a8:	e504      	b.n	40dfb4 <_dtoa_r+0x61c>
  40e5aa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40e5ae:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40e5b2:	f000 80a8 	beq.w	40e706 <_dtoa_r+0xd6e>
  40e5b6:	9d06      	ldr	r5, [sp, #24]
  40e5b8:	f10a 0301 	add.w	r3, sl, #1
  40e5bc:	702b      	strb	r3, [r5, #0]
  40e5be:	4635      	mov	r5, r6
  40e5c0:	9e06      	ldr	r6, [sp, #24]
  40e5c2:	f106 0b01 	add.w	fp, r6, #1
  40e5c6:	463e      	mov	r6, r7
  40e5c8:	e49d      	b.n	40df06 <_dtoa_r+0x56e>
  40e5ca:	4635      	mov	r5, r6
  40e5cc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40e5d0:	463e      	mov	r6, r7
  40e5d2:	e47c      	b.n	40dece <_dtoa_r+0x536>
  40e5d4:	f04f 0800 	mov.w	r8, #0
  40e5d8:	4646      	mov	r6, r8
  40e5da:	e70d      	b.n	40e3f8 <_dtoa_r+0xa60>
  40e5dc:	4976      	ldr	r1, [pc, #472]	; (40e7b8 <_dtoa_r+0xe20>)
  40e5de:	f108 35ff 	add.w	r5, r8, #4294967295
  40e5e2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  40e5e6:	4632      	mov	r2, r6
  40e5e8:	463b      	mov	r3, r7
  40e5ea:	e9d1 0100 	ldrd	r0, r1, [r1]
  40e5ee:	9510      	str	r5, [sp, #64]	; 0x40
  40e5f0:	f004 fb16 	bl	412c20 <__aeabi_dmul>
  40e5f4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  40e5f8:	4659      	mov	r1, fp
  40e5fa:	4650      	mov	r0, sl
  40e5fc:	f004 fdaa 	bl	413154 <__aeabi_d2iz>
  40e600:	4605      	mov	r5, r0
  40e602:	f004 faa7 	bl	412b54 <__aeabi_i2d>
  40e606:	4602      	mov	r2, r0
  40e608:	460b      	mov	r3, r1
  40e60a:	4650      	mov	r0, sl
  40e60c:	4659      	mov	r1, fp
  40e60e:	f004 f953 	bl	4128b8 <__aeabi_dsub>
  40e612:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  40e616:	3530      	adds	r5, #48	; 0x30
  40e618:	f1b8 0f01 	cmp.w	r8, #1
  40e61c:	4606      	mov	r6, r0
  40e61e:	460f      	mov	r7, r1
  40e620:	f88e 5000 	strb.w	r5, [lr]
  40e624:	f10e 0b01 	add.w	fp, lr, #1
  40e628:	d01e      	beq.n	40e668 <_dtoa_r+0xcd0>
  40e62a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e62c:	1e6b      	subs	r3, r5, #1
  40e62e:	eb03 0a08 	add.w	sl, r3, r8
  40e632:	2200      	movs	r2, #0
  40e634:	4b62      	ldr	r3, [pc, #392]	; (40e7c0 <_dtoa_r+0xe28>)
  40e636:	f004 faf3 	bl	412c20 <__aeabi_dmul>
  40e63a:	460f      	mov	r7, r1
  40e63c:	4606      	mov	r6, r0
  40e63e:	f004 fd89 	bl	413154 <__aeabi_d2iz>
  40e642:	4680      	mov	r8, r0
  40e644:	f004 fa86 	bl	412b54 <__aeabi_i2d>
  40e648:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40e64c:	4602      	mov	r2, r0
  40e64e:	460b      	mov	r3, r1
  40e650:	4630      	mov	r0, r6
  40e652:	4639      	mov	r1, r7
  40e654:	f004 f930 	bl	4128b8 <__aeabi_dsub>
  40e658:	f805 8f01 	strb.w	r8, [r5, #1]!
  40e65c:	4555      	cmp	r5, sl
  40e65e:	d1e8      	bne.n	40e632 <_dtoa_r+0xc9a>
  40e660:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40e662:	4606      	mov	r6, r0
  40e664:	460f      	mov	r7, r1
  40e666:	44ab      	add	fp, r5
  40e668:	2200      	movs	r2, #0
  40e66a:	4b56      	ldr	r3, [pc, #344]	; (40e7c4 <_dtoa_r+0xe2c>)
  40e66c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  40e670:	f004 f924 	bl	4128bc <__adddf3>
  40e674:	4632      	mov	r2, r6
  40e676:	463b      	mov	r3, r7
  40e678:	f004 fd44 	bl	413104 <__aeabi_dcmplt>
  40e67c:	2800      	cmp	r0, #0
  40e67e:	d04d      	beq.n	40e71c <_dtoa_r+0xd84>
  40e680:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40e682:	9607      	str	r6, [sp, #28]
  40e684:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  40e688:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e68a:	f7ff bb4b 	b.w	40dd24 <_dtoa_r+0x38c>
  40e68e:	9e08      	ldr	r6, [sp, #32]
  40e690:	2300      	movs	r3, #0
  40e692:	ebc9 0506 	rsb	r5, r9, r6
  40e696:	f7ff bb76 	b.w	40dd86 <_dtoa_r+0x3ee>
  40e69a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40e69c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40e69e:	9d08      	ldr	r5, [sp, #32]
  40e6a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40e6a4:	f7ff bb6f 	b.w	40dd86 <_dtoa_r+0x3ee>
  40e6a8:	4657      	mov	r7, sl
  40e6aa:	f7ff bbb9 	b.w	40de20 <_dtoa_r+0x488>
  40e6ae:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  40e6b2:	f04f 0802 	mov.w	r8, #2
  40e6b6:	e54b      	b.n	40e150 <_dtoa_r+0x7b8>
  40e6b8:	f1b9 0f00 	cmp.w	r9, #0
  40e6bc:	f43f aeaf 	beq.w	40e41e <_dtoa_r+0xa86>
  40e6c0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40e6c2:	2e00      	cmp	r6, #0
  40e6c4:	f77f af28 	ble.w	40e518 <_dtoa_r+0xb80>
  40e6c8:	2200      	movs	r2, #0
  40e6ca:	4b3d      	ldr	r3, [pc, #244]	; (40e7c0 <_dtoa_r+0xe28>)
  40e6cc:	4650      	mov	r0, sl
  40e6ce:	4659      	mov	r1, fp
  40e6d0:	f004 faa6 	bl	412c20 <__aeabi_dmul>
  40e6d4:	4682      	mov	sl, r0
  40e6d6:	f108 0001 	add.w	r0, r8, #1
  40e6da:	468b      	mov	fp, r1
  40e6dc:	f004 fa3a 	bl	412b54 <__aeabi_i2d>
  40e6e0:	4602      	mov	r2, r0
  40e6e2:	460b      	mov	r3, r1
  40e6e4:	4650      	mov	r0, sl
  40e6e6:	4659      	mov	r1, fp
  40e6e8:	f004 fa9a 	bl	412c20 <__aeabi_dmul>
  40e6ec:	2200      	movs	r2, #0
  40e6ee:	4b36      	ldr	r3, [pc, #216]	; (40e7c8 <_dtoa_r+0xe30>)
  40e6f0:	f004 f8e4 	bl	4128bc <__adddf3>
  40e6f4:	9d07      	ldr	r5, [sp, #28]
  40e6f6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  40e6fa:	3d01      	subs	r5, #1
  40e6fc:	4606      	mov	r6, r0
  40e6fe:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40e702:	9517      	str	r5, [sp, #92]	; 0x5c
  40e704:	e544      	b.n	40e190 <_dtoa_r+0x7f8>
  40e706:	4635      	mov	r5, r6
  40e708:	9b06      	ldr	r3, [sp, #24]
  40e70a:	9e06      	ldr	r6, [sp, #24]
  40e70c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e70e:	2239      	movs	r2, #57	; 0x39
  40e710:	7032      	strb	r2, [r6, #0]
  40e712:	f103 0b01 	add.w	fp, r3, #1
  40e716:	463e      	mov	r6, r7
  40e718:	f7ff bbef 	b.w	40defa <_dtoa_r+0x562>
  40e71c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  40e720:	2000      	movs	r0, #0
  40e722:	4928      	ldr	r1, [pc, #160]	; (40e7c4 <_dtoa_r+0xe2c>)
  40e724:	f004 f8c8 	bl	4128b8 <__aeabi_dsub>
  40e728:	4632      	mov	r2, r6
  40e72a:	463b      	mov	r3, r7
  40e72c:	f004 fd08 	bl	413140 <__aeabi_dcmpgt>
  40e730:	2800      	cmp	r0, #0
  40e732:	f43f aef1 	beq.w	40e518 <_dtoa_r+0xb80>
  40e736:	465b      	mov	r3, fp
  40e738:	469b      	mov	fp, r3
  40e73a:	3b01      	subs	r3, #1
  40e73c:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  40e740:	2a30      	cmp	r2, #48	; 0x30
  40e742:	d0f9      	beq.n	40e738 <_dtoa_r+0xda0>
  40e744:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40e746:	9507      	str	r5, [sp, #28]
  40e748:	f7ff baf3 	b.w	40dd32 <_dtoa_r+0x39a>
  40e74c:	4645      	mov	r5, r8
  40e74e:	4654      	mov	r4, sl
  40e750:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40e752:	9607      	str	r6, [sp, #28]
  40e754:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e756:	f7ff bae5 	b.w	40dd24 <_dtoa_r+0x38c>
  40e75a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40e75e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40e762:	d0d0      	beq.n	40e706 <_dtoa_r+0xd6e>
  40e764:	9b03      	ldr	r3, [sp, #12]
  40e766:	4635      	mov	r5, r6
  40e768:	2b00      	cmp	r3, #0
  40e76a:	9e06      	ldr	r6, [sp, #24]
  40e76c:	bfc8      	it	gt
  40e76e:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
  40e772:	f886 a000 	strb.w	sl, [r6]
  40e776:	f106 0b01 	add.w	fp, r6, #1
  40e77a:	463e      	mov	r6, r7
  40e77c:	f7ff bbc3 	b.w	40df06 <_dtoa_r+0x56e>
  40e780:	f47f aea9 	bne.w	40e4d6 <_dtoa_r+0xb3e>
  40e784:	f01a 0f01 	tst.w	sl, #1
  40e788:	f43f aea5 	beq.w	40e4d6 <_dtoa_r+0xb3e>
  40e78c:	e69d      	b.n	40e4ca <_dtoa_r+0xb32>
  40e78e:	4631      	mov	r1, r6
  40e790:	4620      	mov	r0, r4
  40e792:	220a      	movs	r2, #10
  40e794:	2300      	movs	r3, #0
  40e796:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  40e79a:	f001 f905 	bl	40f9a8 <__multadd>
  40e79e:	4606      	mov	r6, r0
  40e7a0:	f7ff bb6c 	b.w	40de7c <_dtoa_r+0x4e4>
  40e7a4:	f04f 0802 	mov.w	r8, #2
  40e7a8:	e4d2      	b.n	40e150 <_dtoa_r+0x7b8>
  40e7aa:	f43f ab52 	beq.w	40de52 <_dtoa_r+0x4ba>
  40e7ae:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  40e7b2:	f7ff bbe2 	b.w	40df7a <_dtoa_r+0x5e2>
  40e7b6:	bf00      	nop
  40e7b8:	004135a0 	.word	0x004135a0
  40e7bc:	00413668 	.word	0x00413668
  40e7c0:	40240000 	.word	0x40240000
  40e7c4:	3fe00000 	.word	0x3fe00000
  40e7c8:	401c0000 	.word	0x401c0000
  40e7cc:	f3af 8000 	nop.w

0040e7d0 <__sflush_r>:
  40e7d0:	898b      	ldrh	r3, [r1, #12]
  40e7d2:	b29a      	uxth	r2, r3
  40e7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e7d8:	460d      	mov	r5, r1
  40e7da:	0711      	lsls	r1, r2, #28
  40e7dc:	4680      	mov	r8, r0
  40e7de:	d43c      	bmi.n	40e85a <__sflush_r+0x8a>
  40e7e0:	686a      	ldr	r2, [r5, #4]
  40e7e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40e7e6:	2a00      	cmp	r2, #0
  40e7e8:	81ab      	strh	r3, [r5, #12]
  40e7ea:	dd59      	ble.n	40e8a0 <__sflush_r+0xd0>
  40e7ec:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40e7ee:	2c00      	cmp	r4, #0
  40e7f0:	d04b      	beq.n	40e88a <__sflush_r+0xba>
  40e7f2:	b29b      	uxth	r3, r3
  40e7f4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40e7f8:	2100      	movs	r1, #0
  40e7fa:	b292      	uxth	r2, r2
  40e7fc:	f8d8 6000 	ldr.w	r6, [r8]
  40e800:	f8c8 1000 	str.w	r1, [r8]
  40e804:	2a00      	cmp	r2, #0
  40e806:	d04f      	beq.n	40e8a8 <__sflush_r+0xd8>
  40e808:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40e80a:	075f      	lsls	r7, r3, #29
  40e80c:	d505      	bpl.n	40e81a <__sflush_r+0x4a>
  40e80e:	6869      	ldr	r1, [r5, #4]
  40e810:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40e812:	1a52      	subs	r2, r2, r1
  40e814:	b10b      	cbz	r3, 40e81a <__sflush_r+0x4a>
  40e816:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40e818:	1ad2      	subs	r2, r2, r3
  40e81a:	4640      	mov	r0, r8
  40e81c:	69e9      	ldr	r1, [r5, #28]
  40e81e:	2300      	movs	r3, #0
  40e820:	47a0      	blx	r4
  40e822:	1c44      	adds	r4, r0, #1
  40e824:	d04a      	beq.n	40e8bc <__sflush_r+0xec>
  40e826:	89aa      	ldrh	r2, [r5, #12]
  40e828:	692b      	ldr	r3, [r5, #16]
  40e82a:	602b      	str	r3, [r5, #0]
  40e82c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40e830:	b29b      	uxth	r3, r3
  40e832:	2200      	movs	r2, #0
  40e834:	606a      	str	r2, [r5, #4]
  40e836:	04da      	lsls	r2, r3, #19
  40e838:	81ab      	strh	r3, [r5, #12]
  40e83a:	d44c      	bmi.n	40e8d6 <__sflush_r+0x106>
  40e83c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40e83e:	f8c8 6000 	str.w	r6, [r8]
  40e842:	b311      	cbz	r1, 40e88a <__sflush_r+0xba>
  40e844:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40e848:	4299      	cmp	r1, r3
  40e84a:	d002      	beq.n	40e852 <__sflush_r+0x82>
  40e84c:	4640      	mov	r0, r8
  40e84e:	f000 f9c7 	bl	40ebe0 <_free_r>
  40e852:	2000      	movs	r0, #0
  40e854:	6328      	str	r0, [r5, #48]	; 0x30
  40e856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e85a:	692e      	ldr	r6, [r5, #16]
  40e85c:	b1ae      	cbz	r6, 40e88a <__sflush_r+0xba>
  40e85e:	682c      	ldr	r4, [r5, #0]
  40e860:	602e      	str	r6, [r5, #0]
  40e862:	0791      	lsls	r1, r2, #30
  40e864:	bf0c      	ite	eq
  40e866:	696b      	ldreq	r3, [r5, #20]
  40e868:	2300      	movne	r3, #0
  40e86a:	1ba4      	subs	r4, r4, r6
  40e86c:	60ab      	str	r3, [r5, #8]
  40e86e:	e00a      	b.n	40e886 <__sflush_r+0xb6>
  40e870:	4632      	mov	r2, r6
  40e872:	4623      	mov	r3, r4
  40e874:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40e876:	69e9      	ldr	r1, [r5, #28]
  40e878:	4640      	mov	r0, r8
  40e87a:	47b8      	blx	r7
  40e87c:	2800      	cmp	r0, #0
  40e87e:	ebc0 0404 	rsb	r4, r0, r4
  40e882:	4406      	add	r6, r0
  40e884:	dd04      	ble.n	40e890 <__sflush_r+0xc0>
  40e886:	2c00      	cmp	r4, #0
  40e888:	dcf2      	bgt.n	40e870 <__sflush_r+0xa0>
  40e88a:	2000      	movs	r0, #0
  40e88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e890:	89ab      	ldrh	r3, [r5, #12]
  40e892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e896:	81ab      	strh	r3, [r5, #12]
  40e898:	f04f 30ff 	mov.w	r0, #4294967295
  40e89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e8a0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40e8a2:	2a00      	cmp	r2, #0
  40e8a4:	dca2      	bgt.n	40e7ec <__sflush_r+0x1c>
  40e8a6:	e7f0      	b.n	40e88a <__sflush_r+0xba>
  40e8a8:	2301      	movs	r3, #1
  40e8aa:	4640      	mov	r0, r8
  40e8ac:	69e9      	ldr	r1, [r5, #28]
  40e8ae:	47a0      	blx	r4
  40e8b0:	1c43      	adds	r3, r0, #1
  40e8b2:	4602      	mov	r2, r0
  40e8b4:	d01e      	beq.n	40e8f4 <__sflush_r+0x124>
  40e8b6:	89ab      	ldrh	r3, [r5, #12]
  40e8b8:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40e8ba:	e7a6      	b.n	40e80a <__sflush_r+0x3a>
  40e8bc:	f8d8 3000 	ldr.w	r3, [r8]
  40e8c0:	b95b      	cbnz	r3, 40e8da <__sflush_r+0x10a>
  40e8c2:	89a9      	ldrh	r1, [r5, #12]
  40e8c4:	606b      	str	r3, [r5, #4]
  40e8c6:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
  40e8ca:	b29b      	uxth	r3, r3
  40e8cc:	692a      	ldr	r2, [r5, #16]
  40e8ce:	81ab      	strh	r3, [r5, #12]
  40e8d0:	04db      	lsls	r3, r3, #19
  40e8d2:	602a      	str	r2, [r5, #0]
  40e8d4:	d5b2      	bpl.n	40e83c <__sflush_r+0x6c>
  40e8d6:	6528      	str	r0, [r5, #80]	; 0x50
  40e8d8:	e7b0      	b.n	40e83c <__sflush_r+0x6c>
  40e8da:	2b1d      	cmp	r3, #29
  40e8dc:	d001      	beq.n	40e8e2 <__sflush_r+0x112>
  40e8de:	2b16      	cmp	r3, #22
  40e8e0:	d119      	bne.n	40e916 <__sflush_r+0x146>
  40e8e2:	89aa      	ldrh	r2, [r5, #12]
  40e8e4:	692b      	ldr	r3, [r5, #16]
  40e8e6:	602b      	str	r3, [r5, #0]
  40e8e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  40e8ec:	2300      	movs	r3, #0
  40e8ee:	81aa      	strh	r2, [r5, #12]
  40e8f0:	606b      	str	r3, [r5, #4]
  40e8f2:	e7a3      	b.n	40e83c <__sflush_r+0x6c>
  40e8f4:	f8d8 3000 	ldr.w	r3, [r8]
  40e8f8:	2b00      	cmp	r3, #0
  40e8fa:	d0dc      	beq.n	40e8b6 <__sflush_r+0xe6>
  40e8fc:	2b1d      	cmp	r3, #29
  40e8fe:	d007      	beq.n	40e910 <__sflush_r+0x140>
  40e900:	2b16      	cmp	r3, #22
  40e902:	d005      	beq.n	40e910 <__sflush_r+0x140>
  40e904:	89ab      	ldrh	r3, [r5, #12]
  40e906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e90a:	81ab      	strh	r3, [r5, #12]
  40e90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e910:	f8c8 6000 	str.w	r6, [r8]
  40e914:	e7b9      	b.n	40e88a <__sflush_r+0xba>
  40e916:	89ab      	ldrh	r3, [r5, #12]
  40e918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e91c:	81ab      	strh	r3, [r5, #12]
  40e91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e922:	bf00      	nop

0040e924 <_fflush_r>:
  40e924:	b510      	push	{r4, lr}
  40e926:	4604      	mov	r4, r0
  40e928:	b082      	sub	sp, #8
  40e92a:	b108      	cbz	r0, 40e930 <_fflush_r+0xc>
  40e92c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e92e:	b153      	cbz	r3, 40e946 <_fflush_r+0x22>
  40e930:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40e934:	b908      	cbnz	r0, 40e93a <_fflush_r+0x16>
  40e936:	b002      	add	sp, #8
  40e938:	bd10      	pop	{r4, pc}
  40e93a:	4620      	mov	r0, r4
  40e93c:	b002      	add	sp, #8
  40e93e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40e942:	f7ff bf45 	b.w	40e7d0 <__sflush_r>
  40e946:	9101      	str	r1, [sp, #4]
  40e948:	f000 f808 	bl	40e95c <__sinit>
  40e94c:	9901      	ldr	r1, [sp, #4]
  40e94e:	e7ef      	b.n	40e930 <_fflush_r+0xc>

0040e950 <_cleanup_r>:
  40e950:	4901      	ldr	r1, [pc, #4]	; (40e958 <_cleanup_r+0x8>)
  40e952:	f000 bb9f 	b.w	40f094 <_fwalk>
  40e956:	bf00      	nop
  40e958:	004120f1 	.word	0x004120f1

0040e95c <__sinit>:
  40e95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e960:	6b84      	ldr	r4, [r0, #56]	; 0x38
  40e962:	b083      	sub	sp, #12
  40e964:	4607      	mov	r7, r0
  40e966:	2c00      	cmp	r4, #0
  40e968:	d165      	bne.n	40ea36 <__sinit+0xda>
  40e96a:	6845      	ldr	r5, [r0, #4]
  40e96c:	4833      	ldr	r0, [pc, #204]	; (40ea3c <__sinit+0xe0>)
  40e96e:	63f8      	str	r0, [r7, #60]	; 0x3c
  40e970:	2304      	movs	r3, #4
  40e972:	2103      	movs	r1, #3
  40e974:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  40e978:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  40e97c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  40e980:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  40e984:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40e988:	81ab      	strh	r3, [r5, #12]
  40e98a:	602c      	str	r4, [r5, #0]
  40e98c:	606c      	str	r4, [r5, #4]
  40e98e:	60ac      	str	r4, [r5, #8]
  40e990:	666c      	str	r4, [r5, #100]	; 0x64
  40e992:	81ec      	strh	r4, [r5, #14]
  40e994:	612c      	str	r4, [r5, #16]
  40e996:	616c      	str	r4, [r5, #20]
  40e998:	61ac      	str	r4, [r5, #24]
  40e99a:	4621      	mov	r1, r4
  40e99c:	2208      	movs	r2, #8
  40e99e:	f7fb fc49 	bl	40a234 <memset>
  40e9a2:	68be      	ldr	r6, [r7, #8]
  40e9a4:	f8df b098 	ldr.w	fp, [pc, #152]	; 40ea40 <__sinit+0xe4>
  40e9a8:	f8df a098 	ldr.w	sl, [pc, #152]	; 40ea44 <__sinit+0xe8>
  40e9ac:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40ea48 <__sinit+0xec>
  40e9b0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 40ea4c <__sinit+0xf0>
  40e9b4:	61ed      	str	r5, [r5, #28]
  40e9b6:	2301      	movs	r3, #1
  40e9b8:	2209      	movs	r2, #9
  40e9ba:	f8c5 b020 	str.w	fp, [r5, #32]
  40e9be:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40e9c2:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40e9c6:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40e9ca:	4621      	mov	r1, r4
  40e9cc:	81f3      	strh	r3, [r6, #14]
  40e9ce:	81b2      	strh	r2, [r6, #12]
  40e9d0:	6034      	str	r4, [r6, #0]
  40e9d2:	6074      	str	r4, [r6, #4]
  40e9d4:	60b4      	str	r4, [r6, #8]
  40e9d6:	6674      	str	r4, [r6, #100]	; 0x64
  40e9d8:	6134      	str	r4, [r6, #16]
  40e9da:	6174      	str	r4, [r6, #20]
  40e9dc:	61b4      	str	r4, [r6, #24]
  40e9de:	2208      	movs	r2, #8
  40e9e0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40e9e4:	9301      	str	r3, [sp, #4]
  40e9e6:	f7fb fc25 	bl	40a234 <memset>
  40e9ea:	68fd      	ldr	r5, [r7, #12]
  40e9ec:	61f6      	str	r6, [r6, #28]
  40e9ee:	2012      	movs	r0, #18
  40e9f0:	2202      	movs	r2, #2
  40e9f2:	f8c6 b020 	str.w	fp, [r6, #32]
  40e9f6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40e9fa:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40e9fe:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40ea02:	4621      	mov	r1, r4
  40ea04:	81a8      	strh	r0, [r5, #12]
  40ea06:	81ea      	strh	r2, [r5, #14]
  40ea08:	602c      	str	r4, [r5, #0]
  40ea0a:	606c      	str	r4, [r5, #4]
  40ea0c:	60ac      	str	r4, [r5, #8]
  40ea0e:	666c      	str	r4, [r5, #100]	; 0x64
  40ea10:	612c      	str	r4, [r5, #16]
  40ea12:	616c      	str	r4, [r5, #20]
  40ea14:	61ac      	str	r4, [r5, #24]
  40ea16:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40ea1a:	2208      	movs	r2, #8
  40ea1c:	f7fb fc0a 	bl	40a234 <memset>
  40ea20:	9b01      	ldr	r3, [sp, #4]
  40ea22:	61ed      	str	r5, [r5, #28]
  40ea24:	f8c5 b020 	str.w	fp, [r5, #32]
  40ea28:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40ea2c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40ea30:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40ea34:	63bb      	str	r3, [r7, #56]	; 0x38
  40ea36:	b003      	add	sp, #12
  40ea38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ea3c:	0040e951 	.word	0x0040e951
  40ea40:	0040a47d 	.word	0x0040a47d
  40ea44:	0040a4a5 	.word	0x0040a4a5
  40ea48:	0040a4dd 	.word	0x0040a4dd
  40ea4c:	0040a4fd 	.word	0x0040a4fd

0040ea50 <__sfp_lock_acquire>:
  40ea50:	4770      	bx	lr
  40ea52:	bf00      	nop

0040ea54 <__sfp_lock_release>:
  40ea54:	4770      	bx	lr
  40ea56:	bf00      	nop

0040ea58 <__libc_fini_array>:
  40ea58:	b538      	push	{r3, r4, r5, lr}
  40ea5a:	4d09      	ldr	r5, [pc, #36]	; (40ea80 <__libc_fini_array+0x28>)
  40ea5c:	4c09      	ldr	r4, [pc, #36]	; (40ea84 <__libc_fini_array+0x2c>)
  40ea5e:	1b64      	subs	r4, r4, r5
  40ea60:	10a4      	asrs	r4, r4, #2
  40ea62:	bf18      	it	ne
  40ea64:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  40ea68:	d005      	beq.n	40ea76 <__libc_fini_array+0x1e>
  40ea6a:	3c01      	subs	r4, #1
  40ea6c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40ea70:	4798      	blx	r3
  40ea72:	2c00      	cmp	r4, #0
  40ea74:	d1f9      	bne.n	40ea6a <__libc_fini_array+0x12>
  40ea76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40ea7a:	f004 becb 	b.w	413814 <_fini>
  40ea7e:	bf00      	nop
  40ea80:	00413820 	.word	0x00413820
  40ea84:	00413824 	.word	0x00413824

0040ea88 <_fputwc_r>:
  40ea88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ea8c:	8993      	ldrh	r3, [r2, #12]
  40ea8e:	460f      	mov	r7, r1
  40ea90:	0499      	lsls	r1, r3, #18
  40ea92:	b082      	sub	sp, #8
  40ea94:	4614      	mov	r4, r2
  40ea96:	4680      	mov	r8, r0
  40ea98:	d406      	bmi.n	40eaa8 <_fputwc_r+0x20>
  40ea9a:	6e52      	ldr	r2, [r2, #100]	; 0x64
  40ea9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40eaa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40eaa4:	81a3      	strh	r3, [r4, #12]
  40eaa6:	6662      	str	r2, [r4, #100]	; 0x64
  40eaa8:	f000 fb2c 	bl	40f104 <__locale_mb_cur_max>
  40eaac:	2801      	cmp	r0, #1
  40eaae:	d03d      	beq.n	40eb2c <_fputwc_r+0xa4>
  40eab0:	463a      	mov	r2, r7
  40eab2:	4640      	mov	r0, r8
  40eab4:	a901      	add	r1, sp, #4
  40eab6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40eaba:	f003 fa1f 	bl	411efc <_wcrtomb_r>
  40eabe:	1c42      	adds	r2, r0, #1
  40eac0:	4606      	mov	r6, r0
  40eac2:	d02c      	beq.n	40eb1e <_fputwc_r+0x96>
  40eac4:	2800      	cmp	r0, #0
  40eac6:	d039      	beq.n	40eb3c <_fputwc_r+0xb4>
  40eac8:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40eacc:	2500      	movs	r5, #0
  40eace:	e009      	b.n	40eae4 <_fputwc_r+0x5c>
  40ead0:	6823      	ldr	r3, [r4, #0]
  40ead2:	7019      	strb	r1, [r3, #0]
  40ead4:	6823      	ldr	r3, [r4, #0]
  40ead6:	3301      	adds	r3, #1
  40ead8:	6023      	str	r3, [r4, #0]
  40eada:	3501      	adds	r5, #1
  40eadc:	42b5      	cmp	r5, r6
  40eade:	d22d      	bcs.n	40eb3c <_fputwc_r+0xb4>
  40eae0:	ab01      	add	r3, sp, #4
  40eae2:	5ce9      	ldrb	r1, [r5, r3]
  40eae4:	68a3      	ldr	r3, [r4, #8]
  40eae6:	3b01      	subs	r3, #1
  40eae8:	2b00      	cmp	r3, #0
  40eaea:	60a3      	str	r3, [r4, #8]
  40eaec:	daf0      	bge.n	40ead0 <_fputwc_r+0x48>
  40eaee:	69a2      	ldr	r2, [r4, #24]
  40eaf0:	4293      	cmp	r3, r2
  40eaf2:	db05      	blt.n	40eb00 <_fputwc_r+0x78>
  40eaf4:	6823      	ldr	r3, [r4, #0]
  40eaf6:	7019      	strb	r1, [r3, #0]
  40eaf8:	6823      	ldr	r3, [r4, #0]
  40eafa:	7819      	ldrb	r1, [r3, #0]
  40eafc:	290a      	cmp	r1, #10
  40eafe:	d1ea      	bne.n	40ead6 <_fputwc_r+0x4e>
  40eb00:	4640      	mov	r0, r8
  40eb02:	4622      	mov	r2, r4
  40eb04:	f003 f9a6 	bl	411e54 <__swbuf_r>
  40eb08:	f1b0 33ff 	subs.w	r3, r0, #4294967295
  40eb0c:	4258      	negs	r0, r3
  40eb0e:	4158      	adcs	r0, r3
  40eb10:	2800      	cmp	r0, #0
  40eb12:	d0e2      	beq.n	40eada <_fputwc_r+0x52>
  40eb14:	f04f 30ff 	mov.w	r0, #4294967295
  40eb18:	b002      	add	sp, #8
  40eb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40eb1e:	89a3      	ldrh	r3, [r4, #12]
  40eb20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40eb24:	81a3      	strh	r3, [r4, #12]
  40eb26:	b002      	add	sp, #8
  40eb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40eb2c:	1e7b      	subs	r3, r7, #1
  40eb2e:	2bfe      	cmp	r3, #254	; 0xfe
  40eb30:	d8be      	bhi.n	40eab0 <_fputwc_r+0x28>
  40eb32:	b2f9      	uxtb	r1, r7
  40eb34:	4606      	mov	r6, r0
  40eb36:	f88d 1004 	strb.w	r1, [sp, #4]
  40eb3a:	e7c7      	b.n	40eacc <_fputwc_r+0x44>
  40eb3c:	4638      	mov	r0, r7
  40eb3e:	b002      	add	sp, #8
  40eb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040eb44 <_malloc_trim_r>:
  40eb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40eb46:	4d23      	ldr	r5, [pc, #140]	; (40ebd4 <_malloc_trim_r+0x90>)
  40eb48:	460f      	mov	r7, r1
  40eb4a:	4604      	mov	r4, r0
  40eb4c:	f000 fef8 	bl	40f940 <__malloc_lock>
  40eb50:	68ab      	ldr	r3, [r5, #8]
  40eb52:	685e      	ldr	r6, [r3, #4]
  40eb54:	f026 0603 	bic.w	r6, r6, #3
  40eb58:	1bf1      	subs	r1, r6, r7
  40eb5a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40eb5e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40eb62:	f021 010f 	bic.w	r1, r1, #15
  40eb66:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  40eb6a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  40eb6e:	db07      	blt.n	40eb80 <_malloc_trim_r+0x3c>
  40eb70:	4620      	mov	r0, r4
  40eb72:	2100      	movs	r1, #0
  40eb74:	f001 fd56 	bl	410624 <_sbrk_r>
  40eb78:	68ab      	ldr	r3, [r5, #8]
  40eb7a:	4433      	add	r3, r6
  40eb7c:	4298      	cmp	r0, r3
  40eb7e:	d004      	beq.n	40eb8a <_malloc_trim_r+0x46>
  40eb80:	4620      	mov	r0, r4
  40eb82:	f000 fedf 	bl	40f944 <__malloc_unlock>
  40eb86:	2000      	movs	r0, #0
  40eb88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40eb8a:	4620      	mov	r0, r4
  40eb8c:	4279      	negs	r1, r7
  40eb8e:	f001 fd49 	bl	410624 <_sbrk_r>
  40eb92:	3001      	adds	r0, #1
  40eb94:	d00d      	beq.n	40ebb2 <_malloc_trim_r+0x6e>
  40eb96:	4b10      	ldr	r3, [pc, #64]	; (40ebd8 <_malloc_trim_r+0x94>)
  40eb98:	68aa      	ldr	r2, [r5, #8]
  40eb9a:	6819      	ldr	r1, [r3, #0]
  40eb9c:	1bf6      	subs	r6, r6, r7
  40eb9e:	f046 0601 	orr.w	r6, r6, #1
  40eba2:	4620      	mov	r0, r4
  40eba4:	1bc9      	subs	r1, r1, r7
  40eba6:	6056      	str	r6, [r2, #4]
  40eba8:	6019      	str	r1, [r3, #0]
  40ebaa:	f000 fecb 	bl	40f944 <__malloc_unlock>
  40ebae:	2001      	movs	r0, #1
  40ebb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ebb2:	4620      	mov	r0, r4
  40ebb4:	2100      	movs	r1, #0
  40ebb6:	f001 fd35 	bl	410624 <_sbrk_r>
  40ebba:	68ab      	ldr	r3, [r5, #8]
  40ebbc:	1ac2      	subs	r2, r0, r3
  40ebbe:	2a0f      	cmp	r2, #15
  40ebc0:	ddde      	ble.n	40eb80 <_malloc_trim_r+0x3c>
  40ebc2:	4d06      	ldr	r5, [pc, #24]	; (40ebdc <_malloc_trim_r+0x98>)
  40ebc4:	4904      	ldr	r1, [pc, #16]	; (40ebd8 <_malloc_trim_r+0x94>)
  40ebc6:	682d      	ldr	r5, [r5, #0]
  40ebc8:	f042 0201 	orr.w	r2, r2, #1
  40ebcc:	1b40      	subs	r0, r0, r5
  40ebce:	605a      	str	r2, [r3, #4]
  40ebd0:	6008      	str	r0, [r1, #0]
  40ebd2:	e7d5      	b.n	40eb80 <_malloc_trim_r+0x3c>
  40ebd4:	200006a4 	.word	0x200006a4
  40ebd8:	2000af20 	.word	0x2000af20
  40ebdc:	20000ab0 	.word	0x20000ab0

0040ebe0 <_free_r>:
  40ebe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ebe4:	460d      	mov	r5, r1
  40ebe6:	4606      	mov	r6, r0
  40ebe8:	2900      	cmp	r1, #0
  40ebea:	d055      	beq.n	40ec98 <_free_r+0xb8>
  40ebec:	f000 fea8 	bl	40f940 <__malloc_lock>
  40ebf0:	f855 1c04 	ldr.w	r1, [r5, #-4]
  40ebf4:	f8df c174 	ldr.w	ip, [pc, #372]	; 40ed6c <_free_r+0x18c>
  40ebf8:	f021 0301 	bic.w	r3, r1, #1
  40ebfc:	f1a5 0408 	sub.w	r4, r5, #8
  40ec00:	18e2      	adds	r2, r4, r3
  40ec02:	f8dc 0008 	ldr.w	r0, [ip, #8]
  40ec06:	6857      	ldr	r7, [r2, #4]
  40ec08:	4290      	cmp	r0, r2
  40ec0a:	f027 0703 	bic.w	r7, r7, #3
  40ec0e:	d069      	beq.n	40ece4 <_free_r+0x104>
  40ec10:	f011 0101 	ands.w	r1, r1, #1
  40ec14:	6057      	str	r7, [r2, #4]
  40ec16:	d032      	beq.n	40ec7e <_free_r+0x9e>
  40ec18:	2100      	movs	r1, #0
  40ec1a:	19d0      	adds	r0, r2, r7
  40ec1c:	6840      	ldr	r0, [r0, #4]
  40ec1e:	07c0      	lsls	r0, r0, #31
  40ec20:	d406      	bmi.n	40ec30 <_free_r+0x50>
  40ec22:	443b      	add	r3, r7
  40ec24:	6890      	ldr	r0, [r2, #8]
  40ec26:	2900      	cmp	r1, #0
  40ec28:	d04e      	beq.n	40ecc8 <_free_r+0xe8>
  40ec2a:	68d2      	ldr	r2, [r2, #12]
  40ec2c:	60c2      	str	r2, [r0, #12]
  40ec2e:	6090      	str	r0, [r2, #8]
  40ec30:	f043 0201 	orr.w	r2, r3, #1
  40ec34:	6062      	str	r2, [r4, #4]
  40ec36:	50e3      	str	r3, [r4, r3]
  40ec38:	b9e1      	cbnz	r1, 40ec74 <_free_r+0x94>
  40ec3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40ec3e:	d32d      	bcc.n	40ec9c <_free_r+0xbc>
  40ec40:	0a5a      	lsrs	r2, r3, #9
  40ec42:	2a04      	cmp	r2, #4
  40ec44:	d86a      	bhi.n	40ed1c <_free_r+0x13c>
  40ec46:	0998      	lsrs	r0, r3, #6
  40ec48:	3038      	adds	r0, #56	; 0x38
  40ec4a:	0041      	lsls	r1, r0, #1
  40ec4c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  40ec50:	4946      	ldr	r1, [pc, #280]	; (40ed6c <_free_r+0x18c>)
  40ec52:	f8dc 2008 	ldr.w	r2, [ip, #8]
  40ec56:	4562      	cmp	r2, ip
  40ec58:	d066      	beq.n	40ed28 <_free_r+0x148>
  40ec5a:	6851      	ldr	r1, [r2, #4]
  40ec5c:	f021 0103 	bic.w	r1, r1, #3
  40ec60:	428b      	cmp	r3, r1
  40ec62:	d202      	bcs.n	40ec6a <_free_r+0x8a>
  40ec64:	6892      	ldr	r2, [r2, #8]
  40ec66:	4594      	cmp	ip, r2
  40ec68:	d1f7      	bne.n	40ec5a <_free_r+0x7a>
  40ec6a:	68d3      	ldr	r3, [r2, #12]
  40ec6c:	60e3      	str	r3, [r4, #12]
  40ec6e:	60a2      	str	r2, [r4, #8]
  40ec70:	609c      	str	r4, [r3, #8]
  40ec72:	60d4      	str	r4, [r2, #12]
  40ec74:	4630      	mov	r0, r6
  40ec76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40ec7a:	f000 be63 	b.w	40f944 <__malloc_unlock>
  40ec7e:	f855 5c08 	ldr.w	r5, [r5, #-8]
  40ec82:	1b64      	subs	r4, r4, r5
  40ec84:	f10c 0808 	add.w	r8, ip, #8
  40ec88:	68a0      	ldr	r0, [r4, #8]
  40ec8a:	4540      	cmp	r0, r8
  40ec8c:	442b      	add	r3, r5
  40ec8e:	d043      	beq.n	40ed18 <_free_r+0x138>
  40ec90:	68e5      	ldr	r5, [r4, #12]
  40ec92:	60c5      	str	r5, [r0, #12]
  40ec94:	60a8      	str	r0, [r5, #8]
  40ec96:	e7c0      	b.n	40ec1a <_free_r+0x3a>
  40ec98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ec9c:	08db      	lsrs	r3, r3, #3
  40ec9e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  40eca2:	2501      	movs	r5, #1
  40eca4:	f8dc 0004 	ldr.w	r0, [ip, #4]
  40eca8:	6891      	ldr	r1, [r2, #8]
  40ecaa:	60a1      	str	r1, [r4, #8]
  40ecac:	109b      	asrs	r3, r3, #2
  40ecae:	fa05 f303 	lsl.w	r3, r5, r3
  40ecb2:	4318      	orrs	r0, r3
  40ecb4:	60e2      	str	r2, [r4, #12]
  40ecb6:	f8cc 0004 	str.w	r0, [ip, #4]
  40ecba:	6094      	str	r4, [r2, #8]
  40ecbc:	4630      	mov	r0, r6
  40ecbe:	60cc      	str	r4, [r1, #12]
  40ecc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40ecc4:	f000 be3e 	b.w	40f944 <__malloc_unlock>
  40ecc8:	4d29      	ldr	r5, [pc, #164]	; (40ed70 <_free_r+0x190>)
  40ecca:	42a8      	cmp	r0, r5
  40eccc:	d1ad      	bne.n	40ec2a <_free_r+0x4a>
  40ecce:	f043 0201 	orr.w	r2, r3, #1
  40ecd2:	f8cc 4014 	str.w	r4, [ip, #20]
  40ecd6:	f8cc 4010 	str.w	r4, [ip, #16]
  40ecda:	60e0      	str	r0, [r4, #12]
  40ecdc:	60a0      	str	r0, [r4, #8]
  40ecde:	6062      	str	r2, [r4, #4]
  40ece0:	50e3      	str	r3, [r4, r3]
  40ece2:	e7c7      	b.n	40ec74 <_free_r+0x94>
  40ece4:	441f      	add	r7, r3
  40ece6:	07cb      	lsls	r3, r1, #31
  40ece8:	d407      	bmi.n	40ecfa <_free_r+0x11a>
  40ecea:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40ecee:	1ae4      	subs	r4, r4, r3
  40ecf0:	441f      	add	r7, r3
  40ecf2:	68a2      	ldr	r2, [r4, #8]
  40ecf4:	68e3      	ldr	r3, [r4, #12]
  40ecf6:	60d3      	str	r3, [r2, #12]
  40ecf8:	609a      	str	r2, [r3, #8]
  40ecfa:	4b1e      	ldr	r3, [pc, #120]	; (40ed74 <_free_r+0x194>)
  40ecfc:	681b      	ldr	r3, [r3, #0]
  40ecfe:	f047 0201 	orr.w	r2, r7, #1
  40ed02:	429f      	cmp	r7, r3
  40ed04:	6062      	str	r2, [r4, #4]
  40ed06:	f8cc 4008 	str.w	r4, [ip, #8]
  40ed0a:	d3b3      	bcc.n	40ec74 <_free_r+0x94>
  40ed0c:	4b1a      	ldr	r3, [pc, #104]	; (40ed78 <_free_r+0x198>)
  40ed0e:	4630      	mov	r0, r6
  40ed10:	6819      	ldr	r1, [r3, #0]
  40ed12:	f7ff ff17 	bl	40eb44 <_malloc_trim_r>
  40ed16:	e7ad      	b.n	40ec74 <_free_r+0x94>
  40ed18:	2101      	movs	r1, #1
  40ed1a:	e77e      	b.n	40ec1a <_free_r+0x3a>
  40ed1c:	2a14      	cmp	r2, #20
  40ed1e:	d80c      	bhi.n	40ed3a <_free_r+0x15a>
  40ed20:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  40ed24:	0041      	lsls	r1, r0, #1
  40ed26:	e791      	b.n	40ec4c <_free_r+0x6c>
  40ed28:	684b      	ldr	r3, [r1, #4]
  40ed2a:	1080      	asrs	r0, r0, #2
  40ed2c:	2501      	movs	r5, #1
  40ed2e:	fa05 f000 	lsl.w	r0, r5, r0
  40ed32:	4303      	orrs	r3, r0
  40ed34:	604b      	str	r3, [r1, #4]
  40ed36:	4613      	mov	r3, r2
  40ed38:	e798      	b.n	40ec6c <_free_r+0x8c>
  40ed3a:	2a54      	cmp	r2, #84	; 0x54
  40ed3c:	d803      	bhi.n	40ed46 <_free_r+0x166>
  40ed3e:	0b18      	lsrs	r0, r3, #12
  40ed40:	306e      	adds	r0, #110	; 0x6e
  40ed42:	0041      	lsls	r1, r0, #1
  40ed44:	e782      	b.n	40ec4c <_free_r+0x6c>
  40ed46:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40ed4a:	d803      	bhi.n	40ed54 <_free_r+0x174>
  40ed4c:	0bd8      	lsrs	r0, r3, #15
  40ed4e:	3077      	adds	r0, #119	; 0x77
  40ed50:	0041      	lsls	r1, r0, #1
  40ed52:	e77b      	b.n	40ec4c <_free_r+0x6c>
  40ed54:	f240 5154 	movw	r1, #1364	; 0x554
  40ed58:	428a      	cmp	r2, r1
  40ed5a:	d803      	bhi.n	40ed64 <_free_r+0x184>
  40ed5c:	0c98      	lsrs	r0, r3, #18
  40ed5e:	307c      	adds	r0, #124	; 0x7c
  40ed60:	0041      	lsls	r1, r0, #1
  40ed62:	e773      	b.n	40ec4c <_free_r+0x6c>
  40ed64:	21fc      	movs	r1, #252	; 0xfc
  40ed66:	207e      	movs	r0, #126	; 0x7e
  40ed68:	e770      	b.n	40ec4c <_free_r+0x6c>
  40ed6a:	bf00      	nop
  40ed6c:	200006a4 	.word	0x200006a4
  40ed70:	200006ac 	.word	0x200006ac
  40ed74:	20000aac 	.word	0x20000aac
  40ed78:	2000af1c 	.word	0x2000af1c

0040ed7c <__sfvwrite_r>:
  40ed7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ed80:	6893      	ldr	r3, [r2, #8]
  40ed82:	b083      	sub	sp, #12
  40ed84:	4616      	mov	r6, r2
  40ed86:	4681      	mov	r9, r0
  40ed88:	460c      	mov	r4, r1
  40ed8a:	b32b      	cbz	r3, 40edd8 <__sfvwrite_r+0x5c>
  40ed8c:	898b      	ldrh	r3, [r1, #12]
  40ed8e:	0719      	lsls	r1, r3, #28
  40ed90:	d526      	bpl.n	40ede0 <__sfvwrite_r+0x64>
  40ed92:	6922      	ldr	r2, [r4, #16]
  40ed94:	b322      	cbz	r2, 40ede0 <__sfvwrite_r+0x64>
  40ed96:	f003 0202 	and.w	r2, r3, #2
  40ed9a:	b292      	uxth	r2, r2
  40ed9c:	6835      	ldr	r5, [r6, #0]
  40ed9e:	2a00      	cmp	r2, #0
  40eda0:	d02c      	beq.n	40edfc <__sfvwrite_r+0x80>
  40eda2:	f04f 0a00 	mov.w	sl, #0
  40eda6:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 40f090 <__sfvwrite_r+0x314>
  40edaa:	46d0      	mov	r8, sl
  40edac:	45d8      	cmp	r8, fp
  40edae:	bf34      	ite	cc
  40edb0:	4643      	movcc	r3, r8
  40edb2:	465b      	movcs	r3, fp
  40edb4:	4652      	mov	r2, sl
  40edb6:	4648      	mov	r0, r9
  40edb8:	f1b8 0f00 	cmp.w	r8, #0
  40edbc:	d04f      	beq.n	40ee5e <__sfvwrite_r+0xe2>
  40edbe:	69e1      	ldr	r1, [r4, #28]
  40edc0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40edc2:	47b8      	blx	r7
  40edc4:	2800      	cmp	r0, #0
  40edc6:	dd56      	ble.n	40ee76 <__sfvwrite_r+0xfa>
  40edc8:	68b3      	ldr	r3, [r6, #8]
  40edca:	1a1b      	subs	r3, r3, r0
  40edcc:	4482      	add	sl, r0
  40edce:	ebc0 0808 	rsb	r8, r0, r8
  40edd2:	60b3      	str	r3, [r6, #8]
  40edd4:	2b00      	cmp	r3, #0
  40edd6:	d1e9      	bne.n	40edac <__sfvwrite_r+0x30>
  40edd8:	2000      	movs	r0, #0
  40edda:	b003      	add	sp, #12
  40eddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ede0:	4648      	mov	r0, r9
  40ede2:	4621      	mov	r1, r4
  40ede4:	f7fe fcba 	bl	40d75c <__swsetup_r>
  40ede8:	2800      	cmp	r0, #0
  40edea:	f040 8148 	bne.w	40f07e <__sfvwrite_r+0x302>
  40edee:	89a3      	ldrh	r3, [r4, #12]
  40edf0:	6835      	ldr	r5, [r6, #0]
  40edf2:	f003 0202 	and.w	r2, r3, #2
  40edf6:	b292      	uxth	r2, r2
  40edf8:	2a00      	cmp	r2, #0
  40edfa:	d1d2      	bne.n	40eda2 <__sfvwrite_r+0x26>
  40edfc:	f013 0a01 	ands.w	sl, r3, #1
  40ee00:	d142      	bne.n	40ee88 <__sfvwrite_r+0x10c>
  40ee02:	46d0      	mov	r8, sl
  40ee04:	f1b8 0f00 	cmp.w	r8, #0
  40ee08:	d023      	beq.n	40ee52 <__sfvwrite_r+0xd6>
  40ee0a:	059a      	lsls	r2, r3, #22
  40ee0c:	68a7      	ldr	r7, [r4, #8]
  40ee0e:	d576      	bpl.n	40eefe <__sfvwrite_r+0x182>
  40ee10:	45b8      	cmp	r8, r7
  40ee12:	f0c0 80a4 	bcc.w	40ef5e <__sfvwrite_r+0x1e2>
  40ee16:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40ee1a:	f040 80b2 	bne.w	40ef82 <__sfvwrite_r+0x206>
  40ee1e:	6820      	ldr	r0, [r4, #0]
  40ee20:	46bb      	mov	fp, r7
  40ee22:	4651      	mov	r1, sl
  40ee24:	465a      	mov	r2, fp
  40ee26:	f000 fd2b 	bl	40f880 <memmove>
  40ee2a:	68a2      	ldr	r2, [r4, #8]
  40ee2c:	6821      	ldr	r1, [r4, #0]
  40ee2e:	1bd2      	subs	r2, r2, r7
  40ee30:	eb01 030b 	add.w	r3, r1, fp
  40ee34:	60a2      	str	r2, [r4, #8]
  40ee36:	6023      	str	r3, [r4, #0]
  40ee38:	4642      	mov	r2, r8
  40ee3a:	68b3      	ldr	r3, [r6, #8]
  40ee3c:	1a9b      	subs	r3, r3, r2
  40ee3e:	4492      	add	sl, r2
  40ee40:	ebc2 0808 	rsb	r8, r2, r8
  40ee44:	60b3      	str	r3, [r6, #8]
  40ee46:	2b00      	cmp	r3, #0
  40ee48:	d0c6      	beq.n	40edd8 <__sfvwrite_r+0x5c>
  40ee4a:	89a3      	ldrh	r3, [r4, #12]
  40ee4c:	f1b8 0f00 	cmp.w	r8, #0
  40ee50:	d1db      	bne.n	40ee0a <__sfvwrite_r+0x8e>
  40ee52:	f8d5 a000 	ldr.w	sl, [r5]
  40ee56:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40ee5a:	3508      	adds	r5, #8
  40ee5c:	e7d2      	b.n	40ee04 <__sfvwrite_r+0x88>
  40ee5e:	f8d5 a000 	ldr.w	sl, [r5]
  40ee62:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40ee66:	3508      	adds	r5, #8
  40ee68:	e7a0      	b.n	40edac <__sfvwrite_r+0x30>
  40ee6a:	4648      	mov	r0, r9
  40ee6c:	4621      	mov	r1, r4
  40ee6e:	f7ff fd59 	bl	40e924 <_fflush_r>
  40ee72:	2800      	cmp	r0, #0
  40ee74:	d059      	beq.n	40ef2a <__sfvwrite_r+0x1ae>
  40ee76:	89a3      	ldrh	r3, [r4, #12]
  40ee78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ee7c:	f04f 30ff 	mov.w	r0, #4294967295
  40ee80:	81a3      	strh	r3, [r4, #12]
  40ee82:	b003      	add	sp, #12
  40ee84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ee88:	4692      	mov	sl, r2
  40ee8a:	9201      	str	r2, [sp, #4]
  40ee8c:	4693      	mov	fp, r2
  40ee8e:	4690      	mov	r8, r2
  40ee90:	f1b8 0f00 	cmp.w	r8, #0
  40ee94:	d02b      	beq.n	40eeee <__sfvwrite_r+0x172>
  40ee96:	9f01      	ldr	r7, [sp, #4]
  40ee98:	2f00      	cmp	r7, #0
  40ee9a:	d064      	beq.n	40ef66 <__sfvwrite_r+0x1ea>
  40ee9c:	6820      	ldr	r0, [r4, #0]
  40ee9e:	6921      	ldr	r1, [r4, #16]
  40eea0:	f8d4 c008 	ldr.w	ip, [r4, #8]
  40eea4:	6962      	ldr	r2, [r4, #20]
  40eea6:	45c2      	cmp	sl, r8
  40eea8:	bf34      	ite	cc
  40eeaa:	4653      	movcc	r3, sl
  40eeac:	4643      	movcs	r3, r8
  40eeae:	4288      	cmp	r0, r1
  40eeb0:	461f      	mov	r7, r3
  40eeb2:	d903      	bls.n	40eebc <__sfvwrite_r+0x140>
  40eeb4:	4494      	add	ip, r2
  40eeb6:	4563      	cmp	r3, ip
  40eeb8:	f300 80ae 	bgt.w	40f018 <__sfvwrite_r+0x29c>
  40eebc:	4293      	cmp	r3, r2
  40eebe:	db36      	blt.n	40ef2e <__sfvwrite_r+0x1b2>
  40eec0:	4613      	mov	r3, r2
  40eec2:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40eec4:	69e1      	ldr	r1, [r4, #28]
  40eec6:	4648      	mov	r0, r9
  40eec8:	465a      	mov	r2, fp
  40eeca:	47b8      	blx	r7
  40eecc:	1e07      	subs	r7, r0, #0
  40eece:	ddd2      	ble.n	40ee76 <__sfvwrite_r+0xfa>
  40eed0:	ebba 0a07 	subs.w	sl, sl, r7
  40eed4:	d03a      	beq.n	40ef4c <__sfvwrite_r+0x1d0>
  40eed6:	68b3      	ldr	r3, [r6, #8]
  40eed8:	1bdb      	subs	r3, r3, r7
  40eeda:	44bb      	add	fp, r7
  40eedc:	ebc7 0808 	rsb	r8, r7, r8
  40eee0:	60b3      	str	r3, [r6, #8]
  40eee2:	2b00      	cmp	r3, #0
  40eee4:	f43f af78 	beq.w	40edd8 <__sfvwrite_r+0x5c>
  40eee8:	f1b8 0f00 	cmp.w	r8, #0
  40eeec:	d1d3      	bne.n	40ee96 <__sfvwrite_r+0x11a>
  40eeee:	2700      	movs	r7, #0
  40eef0:	f8d5 b000 	ldr.w	fp, [r5]
  40eef4:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40eef8:	9701      	str	r7, [sp, #4]
  40eefa:	3508      	adds	r5, #8
  40eefc:	e7c8      	b.n	40ee90 <__sfvwrite_r+0x114>
  40eefe:	6820      	ldr	r0, [r4, #0]
  40ef00:	6923      	ldr	r3, [r4, #16]
  40ef02:	4298      	cmp	r0, r3
  40ef04:	d802      	bhi.n	40ef0c <__sfvwrite_r+0x190>
  40ef06:	6963      	ldr	r3, [r4, #20]
  40ef08:	4598      	cmp	r8, r3
  40ef0a:	d272      	bcs.n	40eff2 <__sfvwrite_r+0x276>
  40ef0c:	45b8      	cmp	r8, r7
  40ef0e:	bf38      	it	cc
  40ef10:	4647      	movcc	r7, r8
  40ef12:	463a      	mov	r2, r7
  40ef14:	4651      	mov	r1, sl
  40ef16:	f000 fcb3 	bl	40f880 <memmove>
  40ef1a:	68a3      	ldr	r3, [r4, #8]
  40ef1c:	6822      	ldr	r2, [r4, #0]
  40ef1e:	1bdb      	subs	r3, r3, r7
  40ef20:	443a      	add	r2, r7
  40ef22:	60a3      	str	r3, [r4, #8]
  40ef24:	6022      	str	r2, [r4, #0]
  40ef26:	2b00      	cmp	r3, #0
  40ef28:	d09f      	beq.n	40ee6a <__sfvwrite_r+0xee>
  40ef2a:	463a      	mov	r2, r7
  40ef2c:	e785      	b.n	40ee3a <__sfvwrite_r+0xbe>
  40ef2e:	461a      	mov	r2, r3
  40ef30:	4659      	mov	r1, fp
  40ef32:	9300      	str	r3, [sp, #0]
  40ef34:	f000 fca4 	bl	40f880 <memmove>
  40ef38:	9b00      	ldr	r3, [sp, #0]
  40ef3a:	68a1      	ldr	r1, [r4, #8]
  40ef3c:	6822      	ldr	r2, [r4, #0]
  40ef3e:	1ac9      	subs	r1, r1, r3
  40ef40:	ebba 0a07 	subs.w	sl, sl, r7
  40ef44:	4413      	add	r3, r2
  40ef46:	60a1      	str	r1, [r4, #8]
  40ef48:	6023      	str	r3, [r4, #0]
  40ef4a:	d1c4      	bne.n	40eed6 <__sfvwrite_r+0x15a>
  40ef4c:	4648      	mov	r0, r9
  40ef4e:	4621      	mov	r1, r4
  40ef50:	f7ff fce8 	bl	40e924 <_fflush_r>
  40ef54:	2800      	cmp	r0, #0
  40ef56:	d18e      	bne.n	40ee76 <__sfvwrite_r+0xfa>
  40ef58:	f8cd a004 	str.w	sl, [sp, #4]
  40ef5c:	e7bb      	b.n	40eed6 <__sfvwrite_r+0x15a>
  40ef5e:	6820      	ldr	r0, [r4, #0]
  40ef60:	4647      	mov	r7, r8
  40ef62:	46c3      	mov	fp, r8
  40ef64:	e75d      	b.n	40ee22 <__sfvwrite_r+0xa6>
  40ef66:	4658      	mov	r0, fp
  40ef68:	210a      	movs	r1, #10
  40ef6a:	4642      	mov	r2, r8
  40ef6c:	f000 fc40 	bl	40f7f0 <memchr>
  40ef70:	2800      	cmp	r0, #0
  40ef72:	d07f      	beq.n	40f074 <__sfvwrite_r+0x2f8>
  40ef74:	f100 0a01 	add.w	sl, r0, #1
  40ef78:	2701      	movs	r7, #1
  40ef7a:	ebcb 0a0a 	rsb	sl, fp, sl
  40ef7e:	9701      	str	r7, [sp, #4]
  40ef80:	e78c      	b.n	40ee9c <__sfvwrite_r+0x120>
  40ef82:	6822      	ldr	r2, [r4, #0]
  40ef84:	6921      	ldr	r1, [r4, #16]
  40ef86:	6967      	ldr	r7, [r4, #20]
  40ef88:	ebc1 0c02 	rsb	ip, r1, r2
  40ef8c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40ef90:	f10c 0201 	add.w	r2, ip, #1
  40ef94:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40ef98:	4442      	add	r2, r8
  40ef9a:	107f      	asrs	r7, r7, #1
  40ef9c:	4297      	cmp	r7, r2
  40ef9e:	bf34      	ite	cc
  40efa0:	4617      	movcc	r7, r2
  40efa2:	463a      	movcs	r2, r7
  40efa4:	055b      	lsls	r3, r3, #21
  40efa6:	d54f      	bpl.n	40f048 <__sfvwrite_r+0x2cc>
  40efa8:	4611      	mov	r1, r2
  40efaa:	4648      	mov	r0, r9
  40efac:	f8cd c000 	str.w	ip, [sp]
  40efb0:	f000 f93e 	bl	40f230 <_malloc_r>
  40efb4:	f8dd c000 	ldr.w	ip, [sp]
  40efb8:	4683      	mov	fp, r0
  40efba:	2800      	cmp	r0, #0
  40efbc:	d062      	beq.n	40f084 <__sfvwrite_r+0x308>
  40efbe:	4662      	mov	r2, ip
  40efc0:	6921      	ldr	r1, [r4, #16]
  40efc2:	f8cd c000 	str.w	ip, [sp]
  40efc6:	f7fb f89b 	bl	40a100 <memcpy>
  40efca:	89a2      	ldrh	r2, [r4, #12]
  40efcc:	f8dd c000 	ldr.w	ip, [sp]
  40efd0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40efd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40efd8:	81a2      	strh	r2, [r4, #12]
  40efda:	eb0b 000c 	add.w	r0, fp, ip
  40efde:	ebcc 0207 	rsb	r2, ip, r7
  40efe2:	f8c4 b010 	str.w	fp, [r4, #16]
  40efe6:	6167      	str	r7, [r4, #20]
  40efe8:	6020      	str	r0, [r4, #0]
  40efea:	60a2      	str	r2, [r4, #8]
  40efec:	4647      	mov	r7, r8
  40efee:	46c3      	mov	fp, r8
  40eff0:	e717      	b.n	40ee22 <__sfvwrite_r+0xa6>
  40eff2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40eff6:	4590      	cmp	r8, r2
  40eff8:	bf38      	it	cc
  40effa:	4642      	movcc	r2, r8
  40effc:	fb92 f2f3 	sdiv	r2, r2, r3
  40f000:	fb02 f303 	mul.w	r3, r2, r3
  40f004:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40f006:	69e1      	ldr	r1, [r4, #28]
  40f008:	4648      	mov	r0, r9
  40f00a:	4652      	mov	r2, sl
  40f00c:	47b8      	blx	r7
  40f00e:	2800      	cmp	r0, #0
  40f010:	f77f af31 	ble.w	40ee76 <__sfvwrite_r+0xfa>
  40f014:	4602      	mov	r2, r0
  40f016:	e710      	b.n	40ee3a <__sfvwrite_r+0xbe>
  40f018:	4662      	mov	r2, ip
  40f01a:	4659      	mov	r1, fp
  40f01c:	f8cd c000 	str.w	ip, [sp]
  40f020:	f000 fc2e 	bl	40f880 <memmove>
  40f024:	f8dd c000 	ldr.w	ip, [sp]
  40f028:	6823      	ldr	r3, [r4, #0]
  40f02a:	4463      	add	r3, ip
  40f02c:	6023      	str	r3, [r4, #0]
  40f02e:	4648      	mov	r0, r9
  40f030:	4621      	mov	r1, r4
  40f032:	f8cd c000 	str.w	ip, [sp]
  40f036:	f7ff fc75 	bl	40e924 <_fflush_r>
  40f03a:	f8dd c000 	ldr.w	ip, [sp]
  40f03e:	2800      	cmp	r0, #0
  40f040:	f47f af19 	bne.w	40ee76 <__sfvwrite_r+0xfa>
  40f044:	4667      	mov	r7, ip
  40f046:	e743      	b.n	40eed0 <__sfvwrite_r+0x154>
  40f048:	4648      	mov	r0, r9
  40f04a:	f8cd c000 	str.w	ip, [sp]
  40f04e:	f001 f8db 	bl	410208 <_realloc_r>
  40f052:	f8dd c000 	ldr.w	ip, [sp]
  40f056:	4683      	mov	fp, r0
  40f058:	2800      	cmp	r0, #0
  40f05a:	d1be      	bne.n	40efda <__sfvwrite_r+0x25e>
  40f05c:	4648      	mov	r0, r9
  40f05e:	6921      	ldr	r1, [r4, #16]
  40f060:	f7ff fdbe 	bl	40ebe0 <_free_r>
  40f064:	89a3      	ldrh	r3, [r4, #12]
  40f066:	220c      	movs	r2, #12
  40f068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40f06c:	b29b      	uxth	r3, r3
  40f06e:	f8c9 2000 	str.w	r2, [r9]
  40f072:	e701      	b.n	40ee78 <__sfvwrite_r+0xfc>
  40f074:	2701      	movs	r7, #1
  40f076:	f108 0a01 	add.w	sl, r8, #1
  40f07a:	9701      	str	r7, [sp, #4]
  40f07c:	e70e      	b.n	40ee9c <__sfvwrite_r+0x120>
  40f07e:	f04f 30ff 	mov.w	r0, #4294967295
  40f082:	e6aa      	b.n	40edda <__sfvwrite_r+0x5e>
  40f084:	230c      	movs	r3, #12
  40f086:	f8c9 3000 	str.w	r3, [r9]
  40f08a:	89a3      	ldrh	r3, [r4, #12]
  40f08c:	e6f4      	b.n	40ee78 <__sfvwrite_r+0xfc>
  40f08e:	bf00      	nop
  40f090:	7ffffc00 	.word	0x7ffffc00

0040f094 <_fwalk>:
  40f094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f098:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40f09c:	4688      	mov	r8, r1
  40f09e:	d01a      	beq.n	40f0d6 <_fwalk+0x42>
  40f0a0:	2600      	movs	r6, #0
  40f0a2:	687d      	ldr	r5, [r7, #4]
  40f0a4:	68bc      	ldr	r4, [r7, #8]
  40f0a6:	3d01      	subs	r5, #1
  40f0a8:	d40f      	bmi.n	40f0ca <_fwalk+0x36>
  40f0aa:	89a3      	ldrh	r3, [r4, #12]
  40f0ac:	2b01      	cmp	r3, #1
  40f0ae:	f105 35ff 	add.w	r5, r5, #4294967295
  40f0b2:	d906      	bls.n	40f0c2 <_fwalk+0x2e>
  40f0b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40f0b8:	3301      	adds	r3, #1
  40f0ba:	4620      	mov	r0, r4
  40f0bc:	d001      	beq.n	40f0c2 <_fwalk+0x2e>
  40f0be:	47c0      	blx	r8
  40f0c0:	4306      	orrs	r6, r0
  40f0c2:	1c6b      	adds	r3, r5, #1
  40f0c4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40f0c8:	d1ef      	bne.n	40f0aa <_fwalk+0x16>
  40f0ca:	683f      	ldr	r7, [r7, #0]
  40f0cc:	2f00      	cmp	r7, #0
  40f0ce:	d1e8      	bne.n	40f0a2 <_fwalk+0xe>
  40f0d0:	4630      	mov	r0, r6
  40f0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f0d6:	463e      	mov	r6, r7
  40f0d8:	4630      	mov	r0, r6
  40f0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f0de:	bf00      	nop

0040f0e0 <iswspace>:
  40f0e0:	28ff      	cmp	r0, #255	; 0xff
  40f0e2:	d807      	bhi.n	40f0f4 <iswspace+0x14>
  40f0e4:	4b04      	ldr	r3, [pc, #16]	; (40f0f8 <iswspace+0x18>)
  40f0e6:	681b      	ldr	r3, [r3, #0]
  40f0e8:	4418      	add	r0, r3
  40f0ea:	7840      	ldrb	r0, [r0, #1]
  40f0ec:	f000 0008 	and.w	r0, r0, #8
  40f0f0:	b2c0      	uxtb	r0, r0
  40f0f2:	4770      	bx	lr
  40f0f4:	2000      	movs	r0, #0
  40f0f6:	4770      	bx	lr
  40f0f8:	20000644 	.word	0x20000644

0040f0fc <__locale_charset>:
  40f0fc:	4800      	ldr	r0, [pc, #0]	; (40f100 <__locale_charset+0x4>)
  40f0fe:	4770      	bx	lr
  40f100:	20000680 	.word	0x20000680

0040f104 <__locale_mb_cur_max>:
  40f104:	4b01      	ldr	r3, [pc, #4]	; (40f10c <__locale_mb_cur_max+0x8>)
  40f106:	6818      	ldr	r0, [r3, #0]
  40f108:	4770      	bx	lr
  40f10a:	bf00      	nop
  40f10c:	200006a0 	.word	0x200006a0

0040f110 <_localeconv_r>:
  40f110:	4800      	ldr	r0, [pc, #0]	; (40f114 <_localeconv_r+0x4>)
  40f112:	4770      	bx	lr
  40f114:	20000648 	.word	0x20000648

0040f118 <_lseek_r>:
  40f118:	b570      	push	{r4, r5, r6, lr}
  40f11a:	4c08      	ldr	r4, [pc, #32]	; (40f13c <_lseek_r+0x24>)
  40f11c:	4606      	mov	r6, r0
  40f11e:	2500      	movs	r5, #0
  40f120:	4608      	mov	r0, r1
  40f122:	4611      	mov	r1, r2
  40f124:	461a      	mov	r2, r3
  40f126:	6025      	str	r5, [r4, #0]
  40f128:	f7fa fc08 	bl	40993c <_lseek>
  40f12c:	1c43      	adds	r3, r0, #1
  40f12e:	d000      	beq.n	40f132 <_lseek_r+0x1a>
  40f130:	bd70      	pop	{r4, r5, r6, pc}
  40f132:	6823      	ldr	r3, [r4, #0]
  40f134:	2b00      	cmp	r3, #0
  40f136:	d0fb      	beq.n	40f130 <_lseek_r+0x18>
  40f138:	6033      	str	r3, [r6, #0]
  40f13a:	bd70      	pop	{r4, r5, r6, pc}
  40f13c:	2000c00c 	.word	0x2000c00c

0040f140 <__smakebuf_r>:
  40f140:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f142:	898b      	ldrh	r3, [r1, #12]
  40f144:	b29a      	uxth	r2, r3
  40f146:	0796      	lsls	r6, r2, #30
  40f148:	b091      	sub	sp, #68	; 0x44
  40f14a:	460c      	mov	r4, r1
  40f14c:	4605      	mov	r5, r0
  40f14e:	d437      	bmi.n	40f1c0 <__smakebuf_r+0x80>
  40f150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f154:	2900      	cmp	r1, #0
  40f156:	db17      	blt.n	40f188 <__smakebuf_r+0x48>
  40f158:	aa01      	add	r2, sp, #4
  40f15a:	f002 ffd1 	bl	412100 <_fstat_r>
  40f15e:	2800      	cmp	r0, #0
  40f160:	db10      	blt.n	40f184 <__smakebuf_r+0x44>
  40f162:	9b02      	ldr	r3, [sp, #8]
  40f164:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  40f168:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
  40f16c:	424f      	negs	r7, r1
  40f16e:	414f      	adcs	r7, r1
  40f170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  40f174:	d02c      	beq.n	40f1d0 <__smakebuf_r+0x90>
  40f176:	89a3      	ldrh	r3, [r4, #12]
  40f178:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40f17c:	81a3      	strh	r3, [r4, #12]
  40f17e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40f182:	e00b      	b.n	40f19c <__smakebuf_r+0x5c>
  40f184:	89a3      	ldrh	r3, [r4, #12]
  40f186:	b29a      	uxth	r2, r3
  40f188:	f012 0f80 	tst.w	r2, #128	; 0x80
  40f18c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40f190:	81a3      	strh	r3, [r4, #12]
  40f192:	bf14      	ite	ne
  40f194:	2640      	movne	r6, #64	; 0x40
  40f196:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40f19a:	2700      	movs	r7, #0
  40f19c:	4628      	mov	r0, r5
  40f19e:	4631      	mov	r1, r6
  40f1a0:	f000 f846 	bl	40f230 <_malloc_r>
  40f1a4:	89a3      	ldrh	r3, [r4, #12]
  40f1a6:	2800      	cmp	r0, #0
  40f1a8:	d029      	beq.n	40f1fe <__smakebuf_r+0xbe>
  40f1aa:	4a1b      	ldr	r2, [pc, #108]	; (40f218 <__smakebuf_r+0xd8>)
  40f1ac:	63ea      	str	r2, [r5, #60]	; 0x3c
  40f1ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40f1b2:	81a3      	strh	r3, [r4, #12]
  40f1b4:	6020      	str	r0, [r4, #0]
  40f1b6:	6120      	str	r0, [r4, #16]
  40f1b8:	6166      	str	r6, [r4, #20]
  40f1ba:	b9a7      	cbnz	r7, 40f1e6 <__smakebuf_r+0xa6>
  40f1bc:	b011      	add	sp, #68	; 0x44
  40f1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f1c0:	f101 0343 	add.w	r3, r1, #67	; 0x43
  40f1c4:	2201      	movs	r2, #1
  40f1c6:	600b      	str	r3, [r1, #0]
  40f1c8:	610b      	str	r3, [r1, #16]
  40f1ca:	614a      	str	r2, [r1, #20]
  40f1cc:	b011      	add	sp, #68	; 0x44
  40f1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f1d0:	4a12      	ldr	r2, [pc, #72]	; (40f21c <__smakebuf_r+0xdc>)
  40f1d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40f1d4:	4293      	cmp	r3, r2
  40f1d6:	d1ce      	bne.n	40f176 <__smakebuf_r+0x36>
  40f1d8:	89a3      	ldrh	r3, [r4, #12]
  40f1da:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40f1de:	4333      	orrs	r3, r6
  40f1e0:	81a3      	strh	r3, [r4, #12]
  40f1e2:	64e6      	str	r6, [r4, #76]	; 0x4c
  40f1e4:	e7da      	b.n	40f19c <__smakebuf_r+0x5c>
  40f1e6:	4628      	mov	r0, r5
  40f1e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40f1ec:	f003 fb4e 	bl	41288c <_isatty_r>
  40f1f0:	2800      	cmp	r0, #0
  40f1f2:	d0e3      	beq.n	40f1bc <__smakebuf_r+0x7c>
  40f1f4:	89a3      	ldrh	r3, [r4, #12]
  40f1f6:	f043 0301 	orr.w	r3, r3, #1
  40f1fa:	81a3      	strh	r3, [r4, #12]
  40f1fc:	e7de      	b.n	40f1bc <__smakebuf_r+0x7c>
  40f1fe:	059a      	lsls	r2, r3, #22
  40f200:	d4dc      	bmi.n	40f1bc <__smakebuf_r+0x7c>
  40f202:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40f206:	f043 0302 	orr.w	r3, r3, #2
  40f20a:	2101      	movs	r1, #1
  40f20c:	81a3      	strh	r3, [r4, #12]
  40f20e:	6022      	str	r2, [r4, #0]
  40f210:	6122      	str	r2, [r4, #16]
  40f212:	6161      	str	r1, [r4, #20]
  40f214:	e7d2      	b.n	40f1bc <__smakebuf_r+0x7c>
  40f216:	bf00      	nop
  40f218:	0040e951 	.word	0x0040e951
  40f21c:	0040a4dd 	.word	0x0040a4dd

0040f220 <malloc>:
  40f220:	4b02      	ldr	r3, [pc, #8]	; (40f22c <malloc+0xc>)
  40f222:	4601      	mov	r1, r0
  40f224:	6818      	ldr	r0, [r3, #0]
  40f226:	f000 b803 	b.w	40f230 <_malloc_r>
  40f22a:	bf00      	nop
  40f22c:	20000640 	.word	0x20000640

0040f230 <_malloc_r>:
  40f230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f234:	f101 050b 	add.w	r5, r1, #11
  40f238:	2d16      	cmp	r5, #22
  40f23a:	b083      	sub	sp, #12
  40f23c:	4606      	mov	r6, r0
  40f23e:	d927      	bls.n	40f290 <_malloc_r+0x60>
  40f240:	f035 0507 	bics.w	r5, r5, #7
  40f244:	d427      	bmi.n	40f296 <_malloc_r+0x66>
  40f246:	42a9      	cmp	r1, r5
  40f248:	d825      	bhi.n	40f296 <_malloc_r+0x66>
  40f24a:	4630      	mov	r0, r6
  40f24c:	f000 fb78 	bl	40f940 <__malloc_lock>
  40f250:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40f254:	d226      	bcs.n	40f2a4 <_malloc_r+0x74>
  40f256:	4fc1      	ldr	r7, [pc, #772]	; (40f55c <_malloc_r+0x32c>)
  40f258:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  40f25c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  40f260:	68dc      	ldr	r4, [r3, #12]
  40f262:	429c      	cmp	r4, r3
  40f264:	f000 81d2 	beq.w	40f60c <_malloc_r+0x3dc>
  40f268:	6863      	ldr	r3, [r4, #4]
  40f26a:	68e2      	ldr	r2, [r4, #12]
  40f26c:	68a1      	ldr	r1, [r4, #8]
  40f26e:	f023 0303 	bic.w	r3, r3, #3
  40f272:	4423      	add	r3, r4
  40f274:	4630      	mov	r0, r6
  40f276:	685d      	ldr	r5, [r3, #4]
  40f278:	60ca      	str	r2, [r1, #12]
  40f27a:	f045 0501 	orr.w	r5, r5, #1
  40f27e:	6091      	str	r1, [r2, #8]
  40f280:	605d      	str	r5, [r3, #4]
  40f282:	f000 fb5f 	bl	40f944 <__malloc_unlock>
  40f286:	3408      	adds	r4, #8
  40f288:	4620      	mov	r0, r4
  40f28a:	b003      	add	sp, #12
  40f28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f290:	2510      	movs	r5, #16
  40f292:	42a9      	cmp	r1, r5
  40f294:	d9d9      	bls.n	40f24a <_malloc_r+0x1a>
  40f296:	2400      	movs	r4, #0
  40f298:	230c      	movs	r3, #12
  40f29a:	4620      	mov	r0, r4
  40f29c:	6033      	str	r3, [r6, #0]
  40f29e:	b003      	add	sp, #12
  40f2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f2a4:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  40f2a8:	f000 808a 	beq.w	40f3c0 <_malloc_r+0x190>
  40f2ac:	f1bc 0f04 	cmp.w	ip, #4
  40f2b0:	f200 8160 	bhi.w	40f574 <_malloc_r+0x344>
  40f2b4:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  40f2b8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  40f2bc:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40f2c0:	4fa6      	ldr	r7, [pc, #664]	; (40f55c <_malloc_r+0x32c>)
  40f2c2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40f2c6:	68cc      	ldr	r4, [r1, #12]
  40f2c8:	42a1      	cmp	r1, r4
  40f2ca:	d105      	bne.n	40f2d8 <_malloc_r+0xa8>
  40f2cc:	e00c      	b.n	40f2e8 <_malloc_r+0xb8>
  40f2ce:	2b00      	cmp	r3, #0
  40f2d0:	da7a      	bge.n	40f3c8 <_malloc_r+0x198>
  40f2d2:	68e4      	ldr	r4, [r4, #12]
  40f2d4:	42a1      	cmp	r1, r4
  40f2d6:	d007      	beq.n	40f2e8 <_malloc_r+0xb8>
  40f2d8:	6862      	ldr	r2, [r4, #4]
  40f2da:	f022 0203 	bic.w	r2, r2, #3
  40f2de:	1b53      	subs	r3, r2, r5
  40f2e0:	2b0f      	cmp	r3, #15
  40f2e2:	ddf4      	ble.n	40f2ce <_malloc_r+0x9e>
  40f2e4:	f10c 3cff 	add.w	ip, ip, #4294967295
  40f2e8:	f10c 0c01 	add.w	ip, ip, #1
  40f2ec:	4b9b      	ldr	r3, [pc, #620]	; (40f55c <_malloc_r+0x32c>)
  40f2ee:	693c      	ldr	r4, [r7, #16]
  40f2f0:	f103 0e08 	add.w	lr, r3, #8
  40f2f4:	4574      	cmp	r4, lr
  40f2f6:	f000 817e 	beq.w	40f5f6 <_malloc_r+0x3c6>
  40f2fa:	6861      	ldr	r1, [r4, #4]
  40f2fc:	f021 0103 	bic.w	r1, r1, #3
  40f300:	1b4a      	subs	r2, r1, r5
  40f302:	2a0f      	cmp	r2, #15
  40f304:	f300 8164 	bgt.w	40f5d0 <_malloc_r+0x3a0>
  40f308:	2a00      	cmp	r2, #0
  40f30a:	f8c3 e014 	str.w	lr, [r3, #20]
  40f30e:	f8c3 e010 	str.w	lr, [r3, #16]
  40f312:	da6a      	bge.n	40f3ea <_malloc_r+0x1ba>
  40f314:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  40f318:	f080 813a 	bcs.w	40f590 <_malloc_r+0x360>
  40f31c:	08c9      	lsrs	r1, r1, #3
  40f31e:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  40f322:	ea4f 08a1 	mov.w	r8, r1, asr #2
  40f326:	685a      	ldr	r2, [r3, #4]
  40f328:	6881      	ldr	r1, [r0, #8]
  40f32a:	60a1      	str	r1, [r4, #8]
  40f32c:	f04f 0901 	mov.w	r9, #1
  40f330:	fa09 f808 	lsl.w	r8, r9, r8
  40f334:	ea48 0202 	orr.w	r2, r8, r2
  40f338:	60e0      	str	r0, [r4, #12]
  40f33a:	605a      	str	r2, [r3, #4]
  40f33c:	6084      	str	r4, [r0, #8]
  40f33e:	60cc      	str	r4, [r1, #12]
  40f340:	ea4f 03ac 	mov.w	r3, ip, asr #2
  40f344:	2001      	movs	r0, #1
  40f346:	4098      	lsls	r0, r3
  40f348:	4290      	cmp	r0, r2
  40f34a:	d85b      	bhi.n	40f404 <_malloc_r+0x1d4>
  40f34c:	4202      	tst	r2, r0
  40f34e:	d106      	bne.n	40f35e <_malloc_r+0x12e>
  40f350:	f02c 0c03 	bic.w	ip, ip, #3
  40f354:	0040      	lsls	r0, r0, #1
  40f356:	4202      	tst	r2, r0
  40f358:	f10c 0c04 	add.w	ip, ip, #4
  40f35c:	d0fa      	beq.n	40f354 <_malloc_r+0x124>
  40f35e:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  40f362:	4644      	mov	r4, r8
  40f364:	46e1      	mov	r9, ip
  40f366:	68e3      	ldr	r3, [r4, #12]
  40f368:	429c      	cmp	r4, r3
  40f36a:	d107      	bne.n	40f37c <_malloc_r+0x14c>
  40f36c:	e145      	b.n	40f5fa <_malloc_r+0x3ca>
  40f36e:	2a00      	cmp	r2, #0
  40f370:	f280 8156 	bge.w	40f620 <_malloc_r+0x3f0>
  40f374:	68db      	ldr	r3, [r3, #12]
  40f376:	429c      	cmp	r4, r3
  40f378:	f000 813f 	beq.w	40f5fa <_malloc_r+0x3ca>
  40f37c:	6859      	ldr	r1, [r3, #4]
  40f37e:	f021 0103 	bic.w	r1, r1, #3
  40f382:	1b4a      	subs	r2, r1, r5
  40f384:	2a0f      	cmp	r2, #15
  40f386:	ddf2      	ble.n	40f36e <_malloc_r+0x13e>
  40f388:	461c      	mov	r4, r3
  40f38a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40f38e:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40f392:	1959      	adds	r1, r3, r5
  40f394:	f045 0901 	orr.w	r9, r5, #1
  40f398:	f042 0501 	orr.w	r5, r2, #1
  40f39c:	f8c3 9004 	str.w	r9, [r3, #4]
  40f3a0:	4630      	mov	r0, r6
  40f3a2:	f8c8 c00c 	str.w	ip, [r8, #12]
  40f3a6:	f8cc 8008 	str.w	r8, [ip, #8]
  40f3aa:	6179      	str	r1, [r7, #20]
  40f3ac:	6139      	str	r1, [r7, #16]
  40f3ae:	f8c1 e00c 	str.w	lr, [r1, #12]
  40f3b2:	f8c1 e008 	str.w	lr, [r1, #8]
  40f3b6:	604d      	str	r5, [r1, #4]
  40f3b8:	508a      	str	r2, [r1, r2]
  40f3ba:	f000 fac3 	bl	40f944 <__malloc_unlock>
  40f3be:	e763      	b.n	40f288 <_malloc_r+0x58>
  40f3c0:	217e      	movs	r1, #126	; 0x7e
  40f3c2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40f3c6:	e77b      	b.n	40f2c0 <_malloc_r+0x90>
  40f3c8:	4422      	add	r2, r4
  40f3ca:	68e3      	ldr	r3, [r4, #12]
  40f3cc:	6850      	ldr	r0, [r2, #4]
  40f3ce:	68a1      	ldr	r1, [r4, #8]
  40f3d0:	f040 0501 	orr.w	r5, r0, #1
  40f3d4:	60cb      	str	r3, [r1, #12]
  40f3d6:	4630      	mov	r0, r6
  40f3d8:	6099      	str	r1, [r3, #8]
  40f3da:	6055      	str	r5, [r2, #4]
  40f3dc:	f000 fab2 	bl	40f944 <__malloc_unlock>
  40f3e0:	3408      	adds	r4, #8
  40f3e2:	4620      	mov	r0, r4
  40f3e4:	b003      	add	sp, #12
  40f3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f3ea:	4421      	add	r1, r4
  40f3ec:	4630      	mov	r0, r6
  40f3ee:	684b      	ldr	r3, [r1, #4]
  40f3f0:	f043 0301 	orr.w	r3, r3, #1
  40f3f4:	604b      	str	r3, [r1, #4]
  40f3f6:	f000 faa5 	bl	40f944 <__malloc_unlock>
  40f3fa:	3408      	adds	r4, #8
  40f3fc:	4620      	mov	r0, r4
  40f3fe:	b003      	add	sp, #12
  40f400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f404:	68bc      	ldr	r4, [r7, #8]
  40f406:	6863      	ldr	r3, [r4, #4]
  40f408:	f023 0903 	bic.w	r9, r3, #3
  40f40c:	45a9      	cmp	r9, r5
  40f40e:	d304      	bcc.n	40f41a <_malloc_r+0x1ea>
  40f410:	ebc5 0309 	rsb	r3, r5, r9
  40f414:	2b0f      	cmp	r3, #15
  40f416:	f300 8091 	bgt.w	40f53c <_malloc_r+0x30c>
  40f41a:	4b51      	ldr	r3, [pc, #324]	; (40f560 <_malloc_r+0x330>)
  40f41c:	4a51      	ldr	r2, [pc, #324]	; (40f564 <_malloc_r+0x334>)
  40f41e:	6819      	ldr	r1, [r3, #0]
  40f420:	6813      	ldr	r3, [r2, #0]
  40f422:	3301      	adds	r3, #1
  40f424:	eb05 0a01 	add.w	sl, r5, r1
  40f428:	eb04 0b09 	add.w	fp, r4, r9
  40f42c:	f000 8161 	beq.w	40f6f2 <_malloc_r+0x4c2>
  40f430:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  40f434:	f10a 0a0f 	add.w	sl, sl, #15
  40f438:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  40f43c:	f02a 0a0f 	bic.w	sl, sl, #15
  40f440:	4630      	mov	r0, r6
  40f442:	4651      	mov	r1, sl
  40f444:	9201      	str	r2, [sp, #4]
  40f446:	f001 f8ed 	bl	410624 <_sbrk_r>
  40f44a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40f44e:	4680      	mov	r8, r0
  40f450:	9a01      	ldr	r2, [sp, #4]
  40f452:	f000 8100 	beq.w	40f656 <_malloc_r+0x426>
  40f456:	4583      	cmp	fp, r0
  40f458:	f200 80fa 	bhi.w	40f650 <_malloc_r+0x420>
  40f45c:	f8df c110 	ldr.w	ip, [pc, #272]	; 40f570 <_malloc_r+0x340>
  40f460:	f8dc 3000 	ldr.w	r3, [ip]
  40f464:	45c3      	cmp	fp, r8
  40f466:	4453      	add	r3, sl
  40f468:	f8cc 3000 	str.w	r3, [ip]
  40f46c:	f000 814a 	beq.w	40f704 <_malloc_r+0x4d4>
  40f470:	6812      	ldr	r2, [r2, #0]
  40f472:	493c      	ldr	r1, [pc, #240]	; (40f564 <_malloc_r+0x334>)
  40f474:	3201      	adds	r2, #1
  40f476:	bf1b      	ittet	ne
  40f478:	ebcb 0b08 	rsbne	fp, fp, r8
  40f47c:	445b      	addne	r3, fp
  40f47e:	f8c1 8000 	streq.w	r8, [r1]
  40f482:	f8cc 3000 	strne.w	r3, [ip]
  40f486:	f018 0307 	ands.w	r3, r8, #7
  40f48a:	f000 8113 	beq.w	40f6b4 <_malloc_r+0x484>
  40f48e:	f1c3 0208 	rsb	r2, r3, #8
  40f492:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  40f496:	4490      	add	r8, r2
  40f498:	3308      	adds	r3, #8
  40f49a:	44c2      	add	sl, r8
  40f49c:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  40f4a0:	ebca 0a03 	rsb	sl, sl, r3
  40f4a4:	4651      	mov	r1, sl
  40f4a6:	4630      	mov	r0, r6
  40f4a8:	f8cd c004 	str.w	ip, [sp, #4]
  40f4ac:	f001 f8ba 	bl	410624 <_sbrk_r>
  40f4b0:	1c43      	adds	r3, r0, #1
  40f4b2:	f8dd c004 	ldr.w	ip, [sp, #4]
  40f4b6:	f000 8135 	beq.w	40f724 <_malloc_r+0x4f4>
  40f4ba:	ebc8 0200 	rsb	r2, r8, r0
  40f4be:	4452      	add	r2, sl
  40f4c0:	f042 0201 	orr.w	r2, r2, #1
  40f4c4:	f8dc 3000 	ldr.w	r3, [ip]
  40f4c8:	f8c7 8008 	str.w	r8, [r7, #8]
  40f4cc:	4453      	add	r3, sl
  40f4ce:	42bc      	cmp	r4, r7
  40f4d0:	f8c8 2004 	str.w	r2, [r8, #4]
  40f4d4:	f8cc 3000 	str.w	r3, [ip]
  40f4d8:	f8df a094 	ldr.w	sl, [pc, #148]	; 40f570 <_malloc_r+0x340>
  40f4dc:	d015      	beq.n	40f50a <_malloc_r+0x2da>
  40f4de:	f1b9 0f0f 	cmp.w	r9, #15
  40f4e2:	f240 80ea 	bls.w	40f6ba <_malloc_r+0x48a>
  40f4e6:	6861      	ldr	r1, [r4, #4]
  40f4e8:	f1a9 020c 	sub.w	r2, r9, #12
  40f4ec:	f022 0207 	bic.w	r2, r2, #7
  40f4f0:	f001 0e01 	and.w	lr, r1, #1
  40f4f4:	18a1      	adds	r1, r4, r2
  40f4f6:	2005      	movs	r0, #5
  40f4f8:	ea42 0e0e 	orr.w	lr, r2, lr
  40f4fc:	2a0f      	cmp	r2, #15
  40f4fe:	f8c4 e004 	str.w	lr, [r4, #4]
  40f502:	6048      	str	r0, [r1, #4]
  40f504:	6088      	str	r0, [r1, #8]
  40f506:	f200 8111 	bhi.w	40f72c <_malloc_r+0x4fc>
  40f50a:	4a17      	ldr	r2, [pc, #92]	; (40f568 <_malloc_r+0x338>)
  40f50c:	68bc      	ldr	r4, [r7, #8]
  40f50e:	6811      	ldr	r1, [r2, #0]
  40f510:	428b      	cmp	r3, r1
  40f512:	bf88      	it	hi
  40f514:	6013      	strhi	r3, [r2, #0]
  40f516:	4a15      	ldr	r2, [pc, #84]	; (40f56c <_malloc_r+0x33c>)
  40f518:	6811      	ldr	r1, [r2, #0]
  40f51a:	428b      	cmp	r3, r1
  40f51c:	bf88      	it	hi
  40f51e:	6013      	strhi	r3, [r2, #0]
  40f520:	6862      	ldr	r2, [r4, #4]
  40f522:	f022 0203 	bic.w	r2, r2, #3
  40f526:	4295      	cmp	r5, r2
  40f528:	ebc5 0302 	rsb	r3, r5, r2
  40f52c:	d801      	bhi.n	40f532 <_malloc_r+0x302>
  40f52e:	2b0f      	cmp	r3, #15
  40f530:	dc04      	bgt.n	40f53c <_malloc_r+0x30c>
  40f532:	4630      	mov	r0, r6
  40f534:	f000 fa06 	bl	40f944 <__malloc_unlock>
  40f538:	2400      	movs	r4, #0
  40f53a:	e6a5      	b.n	40f288 <_malloc_r+0x58>
  40f53c:	1962      	adds	r2, r4, r5
  40f53e:	f043 0301 	orr.w	r3, r3, #1
  40f542:	f045 0501 	orr.w	r5, r5, #1
  40f546:	6065      	str	r5, [r4, #4]
  40f548:	4630      	mov	r0, r6
  40f54a:	60ba      	str	r2, [r7, #8]
  40f54c:	6053      	str	r3, [r2, #4]
  40f54e:	f000 f9f9 	bl	40f944 <__malloc_unlock>
  40f552:	3408      	adds	r4, #8
  40f554:	4620      	mov	r0, r4
  40f556:	b003      	add	sp, #12
  40f558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f55c:	200006a4 	.word	0x200006a4
  40f560:	2000af1c 	.word	0x2000af1c
  40f564:	20000ab0 	.word	0x20000ab0
  40f568:	2000af18 	.word	0x2000af18
  40f56c:	2000af14 	.word	0x2000af14
  40f570:	2000af20 	.word	0x2000af20
  40f574:	f1bc 0f14 	cmp.w	ip, #20
  40f578:	d961      	bls.n	40f63e <_malloc_r+0x40e>
  40f57a:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  40f57e:	f200 808f 	bhi.w	40f6a0 <_malloc_r+0x470>
  40f582:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  40f586:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40f58a:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40f58e:	e697      	b.n	40f2c0 <_malloc_r+0x90>
  40f590:	0a4b      	lsrs	r3, r1, #9
  40f592:	2b04      	cmp	r3, #4
  40f594:	d958      	bls.n	40f648 <_malloc_r+0x418>
  40f596:	2b14      	cmp	r3, #20
  40f598:	f200 80ae 	bhi.w	40f6f8 <_malloc_r+0x4c8>
  40f59c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  40f5a0:	0050      	lsls	r0, r2, #1
  40f5a2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  40f5a6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 40f764 <_malloc_r+0x534>
  40f5aa:	6883      	ldr	r3, [r0, #8]
  40f5ac:	4283      	cmp	r3, r0
  40f5ae:	f000 808a 	beq.w	40f6c6 <_malloc_r+0x496>
  40f5b2:	685a      	ldr	r2, [r3, #4]
  40f5b4:	f022 0203 	bic.w	r2, r2, #3
  40f5b8:	4291      	cmp	r1, r2
  40f5ba:	d202      	bcs.n	40f5c2 <_malloc_r+0x392>
  40f5bc:	689b      	ldr	r3, [r3, #8]
  40f5be:	4298      	cmp	r0, r3
  40f5c0:	d1f7      	bne.n	40f5b2 <_malloc_r+0x382>
  40f5c2:	68d9      	ldr	r1, [r3, #12]
  40f5c4:	687a      	ldr	r2, [r7, #4]
  40f5c6:	60e1      	str	r1, [r4, #12]
  40f5c8:	60a3      	str	r3, [r4, #8]
  40f5ca:	608c      	str	r4, [r1, #8]
  40f5cc:	60dc      	str	r4, [r3, #12]
  40f5ce:	e6b7      	b.n	40f340 <_malloc_r+0x110>
  40f5d0:	1961      	adds	r1, r4, r5
  40f5d2:	f042 0701 	orr.w	r7, r2, #1
  40f5d6:	f045 0501 	orr.w	r5, r5, #1
  40f5da:	6065      	str	r5, [r4, #4]
  40f5dc:	4630      	mov	r0, r6
  40f5de:	6159      	str	r1, [r3, #20]
  40f5e0:	6119      	str	r1, [r3, #16]
  40f5e2:	f8c1 e00c 	str.w	lr, [r1, #12]
  40f5e6:	f8c1 e008 	str.w	lr, [r1, #8]
  40f5ea:	604f      	str	r7, [r1, #4]
  40f5ec:	508a      	str	r2, [r1, r2]
  40f5ee:	3408      	adds	r4, #8
  40f5f0:	f000 f9a8 	bl	40f944 <__malloc_unlock>
  40f5f4:	e648      	b.n	40f288 <_malloc_r+0x58>
  40f5f6:	685a      	ldr	r2, [r3, #4]
  40f5f8:	e6a2      	b.n	40f340 <_malloc_r+0x110>
  40f5fa:	f109 0901 	add.w	r9, r9, #1
  40f5fe:	f019 0f03 	tst.w	r9, #3
  40f602:	f104 0408 	add.w	r4, r4, #8
  40f606:	f47f aeae 	bne.w	40f366 <_malloc_r+0x136>
  40f60a:	e02d      	b.n	40f668 <_malloc_r+0x438>
  40f60c:	f104 0308 	add.w	r3, r4, #8
  40f610:	6964      	ldr	r4, [r4, #20]
  40f612:	42a3      	cmp	r3, r4
  40f614:	bf08      	it	eq
  40f616:	f10c 0c02 	addeq.w	ip, ip, #2
  40f61a:	f43f ae67 	beq.w	40f2ec <_malloc_r+0xbc>
  40f61e:	e623      	b.n	40f268 <_malloc_r+0x38>
  40f620:	4419      	add	r1, r3
  40f622:	461c      	mov	r4, r3
  40f624:	6848      	ldr	r0, [r1, #4]
  40f626:	68db      	ldr	r3, [r3, #12]
  40f628:	f854 2f08 	ldr.w	r2, [r4, #8]!
  40f62c:	f040 0501 	orr.w	r5, r0, #1
  40f630:	604d      	str	r5, [r1, #4]
  40f632:	4630      	mov	r0, r6
  40f634:	60d3      	str	r3, [r2, #12]
  40f636:	609a      	str	r2, [r3, #8]
  40f638:	f000 f984 	bl	40f944 <__malloc_unlock>
  40f63c:	e624      	b.n	40f288 <_malloc_r+0x58>
  40f63e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40f642:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40f646:	e63b      	b.n	40f2c0 <_malloc_r+0x90>
  40f648:	098a      	lsrs	r2, r1, #6
  40f64a:	3238      	adds	r2, #56	; 0x38
  40f64c:	0050      	lsls	r0, r2, #1
  40f64e:	e7a8      	b.n	40f5a2 <_malloc_r+0x372>
  40f650:	42bc      	cmp	r4, r7
  40f652:	f43f af03 	beq.w	40f45c <_malloc_r+0x22c>
  40f656:	68bc      	ldr	r4, [r7, #8]
  40f658:	6862      	ldr	r2, [r4, #4]
  40f65a:	f022 0203 	bic.w	r2, r2, #3
  40f65e:	e762      	b.n	40f526 <_malloc_r+0x2f6>
  40f660:	f8d8 8000 	ldr.w	r8, [r8]
  40f664:	4598      	cmp	r8, r3
  40f666:	d17b      	bne.n	40f760 <_malloc_r+0x530>
  40f668:	f01c 0f03 	tst.w	ip, #3
  40f66c:	f1a8 0308 	sub.w	r3, r8, #8
  40f670:	f10c 3cff 	add.w	ip, ip, #4294967295
  40f674:	d1f4      	bne.n	40f660 <_malloc_r+0x430>
  40f676:	687b      	ldr	r3, [r7, #4]
  40f678:	ea23 0300 	bic.w	r3, r3, r0
  40f67c:	607b      	str	r3, [r7, #4]
  40f67e:	0040      	lsls	r0, r0, #1
  40f680:	4298      	cmp	r0, r3
  40f682:	f63f aebf 	bhi.w	40f404 <_malloc_r+0x1d4>
  40f686:	2800      	cmp	r0, #0
  40f688:	f43f aebc 	beq.w	40f404 <_malloc_r+0x1d4>
  40f68c:	4203      	tst	r3, r0
  40f68e:	46cc      	mov	ip, r9
  40f690:	f47f ae65 	bne.w	40f35e <_malloc_r+0x12e>
  40f694:	0040      	lsls	r0, r0, #1
  40f696:	4203      	tst	r3, r0
  40f698:	f10c 0c04 	add.w	ip, ip, #4
  40f69c:	d0fa      	beq.n	40f694 <_malloc_r+0x464>
  40f69e:	e65e      	b.n	40f35e <_malloc_r+0x12e>
  40f6a0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  40f6a4:	d81a      	bhi.n	40f6dc <_malloc_r+0x4ac>
  40f6a6:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  40f6aa:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  40f6ae:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40f6b2:	e605      	b.n	40f2c0 <_malloc_r+0x90>
  40f6b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40f6b8:	e6ef      	b.n	40f49a <_malloc_r+0x26a>
  40f6ba:	2301      	movs	r3, #1
  40f6bc:	f8c8 3004 	str.w	r3, [r8, #4]
  40f6c0:	4644      	mov	r4, r8
  40f6c2:	2200      	movs	r2, #0
  40f6c4:	e72f      	b.n	40f526 <_malloc_r+0x2f6>
  40f6c6:	1091      	asrs	r1, r2, #2
  40f6c8:	2001      	movs	r0, #1
  40f6ca:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40f6ce:	fa00 f101 	lsl.w	r1, r0, r1
  40f6d2:	430a      	orrs	r2, r1
  40f6d4:	f8c8 2004 	str.w	r2, [r8, #4]
  40f6d8:	4619      	mov	r1, r3
  40f6da:	e774      	b.n	40f5c6 <_malloc_r+0x396>
  40f6dc:	f240 5354 	movw	r3, #1364	; 0x554
  40f6e0:	459c      	cmp	ip, r3
  40f6e2:	d81b      	bhi.n	40f71c <_malloc_r+0x4ec>
  40f6e4:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  40f6e8:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  40f6ec:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40f6f0:	e5e6      	b.n	40f2c0 <_malloc_r+0x90>
  40f6f2:	f10a 0a10 	add.w	sl, sl, #16
  40f6f6:	e6a3      	b.n	40f440 <_malloc_r+0x210>
  40f6f8:	2b54      	cmp	r3, #84	; 0x54
  40f6fa:	d81f      	bhi.n	40f73c <_malloc_r+0x50c>
  40f6fc:	0b0a      	lsrs	r2, r1, #12
  40f6fe:	326e      	adds	r2, #110	; 0x6e
  40f700:	0050      	lsls	r0, r2, #1
  40f702:	e74e      	b.n	40f5a2 <_malloc_r+0x372>
  40f704:	f3cb 010b 	ubfx	r1, fp, #0, #12
  40f708:	2900      	cmp	r1, #0
  40f70a:	f47f aeb1 	bne.w	40f470 <_malloc_r+0x240>
  40f70e:	eb0a 0109 	add.w	r1, sl, r9
  40f712:	68ba      	ldr	r2, [r7, #8]
  40f714:	f041 0101 	orr.w	r1, r1, #1
  40f718:	6051      	str	r1, [r2, #4]
  40f71a:	e6f6      	b.n	40f50a <_malloc_r+0x2da>
  40f71c:	21fc      	movs	r1, #252	; 0xfc
  40f71e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40f722:	e5cd      	b.n	40f2c0 <_malloc_r+0x90>
  40f724:	2201      	movs	r2, #1
  40f726:	f04f 0a00 	mov.w	sl, #0
  40f72a:	e6cb      	b.n	40f4c4 <_malloc_r+0x294>
  40f72c:	f104 0108 	add.w	r1, r4, #8
  40f730:	4630      	mov	r0, r6
  40f732:	f7ff fa55 	bl	40ebe0 <_free_r>
  40f736:	f8da 3000 	ldr.w	r3, [sl]
  40f73a:	e6e6      	b.n	40f50a <_malloc_r+0x2da>
  40f73c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40f740:	d803      	bhi.n	40f74a <_malloc_r+0x51a>
  40f742:	0bca      	lsrs	r2, r1, #15
  40f744:	3277      	adds	r2, #119	; 0x77
  40f746:	0050      	lsls	r0, r2, #1
  40f748:	e72b      	b.n	40f5a2 <_malloc_r+0x372>
  40f74a:	f240 5254 	movw	r2, #1364	; 0x554
  40f74e:	4293      	cmp	r3, r2
  40f750:	d803      	bhi.n	40f75a <_malloc_r+0x52a>
  40f752:	0c8a      	lsrs	r2, r1, #18
  40f754:	327c      	adds	r2, #124	; 0x7c
  40f756:	0050      	lsls	r0, r2, #1
  40f758:	e723      	b.n	40f5a2 <_malloc_r+0x372>
  40f75a:	20fc      	movs	r0, #252	; 0xfc
  40f75c:	227e      	movs	r2, #126	; 0x7e
  40f75e:	e720      	b.n	40f5a2 <_malloc_r+0x372>
  40f760:	687b      	ldr	r3, [r7, #4]
  40f762:	e78c      	b.n	40f67e <_malloc_r+0x44e>
  40f764:	200006a4 	.word	0x200006a4

0040f768 <_mbrtowc_r>:
  40f768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40f76c:	b083      	sub	sp, #12
  40f76e:	461f      	mov	r7, r3
  40f770:	4614      	mov	r4, r2
  40f772:	4605      	mov	r5, r0
  40f774:	4688      	mov	r8, r1
  40f776:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40f778:	4b10      	ldr	r3, [pc, #64]	; (40f7bc <_mbrtowc_r+0x54>)
  40f77a:	b19a      	cbz	r2, 40f7a4 <_mbrtowc_r+0x3c>
  40f77c:	f8d3 9000 	ldr.w	r9, [r3]
  40f780:	f7ff fcbc 	bl	40f0fc <__locale_charset>
  40f784:	4641      	mov	r1, r8
  40f786:	e88d 0041 	stmia.w	sp, {r0, r6}
  40f78a:	4622      	mov	r2, r4
  40f78c:	463b      	mov	r3, r7
  40f78e:	4628      	mov	r0, r5
  40f790:	47c8      	blx	r9
  40f792:	1c43      	adds	r3, r0, #1
  40f794:	d103      	bne.n	40f79e <_mbrtowc_r+0x36>
  40f796:	2200      	movs	r2, #0
  40f798:	238a      	movs	r3, #138	; 0x8a
  40f79a:	6032      	str	r2, [r6, #0]
  40f79c:	602b      	str	r3, [r5, #0]
  40f79e:	b003      	add	sp, #12
  40f7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40f7a4:	681f      	ldr	r7, [r3, #0]
  40f7a6:	f7ff fca9 	bl	40f0fc <__locale_charset>
  40f7aa:	4621      	mov	r1, r4
  40f7ac:	e88d 0041 	stmia.w	sp, {r0, r6}
  40f7b0:	4a03      	ldr	r2, [pc, #12]	; (40f7c0 <_mbrtowc_r+0x58>)
  40f7b2:	4628      	mov	r0, r5
  40f7b4:	2301      	movs	r3, #1
  40f7b6:	47b8      	blx	r7
  40f7b8:	e7eb      	b.n	40f792 <_mbrtowc_r+0x2a>
  40f7ba:	bf00      	nop
  40f7bc:	20000ab4 	.word	0x20000ab4
  40f7c0:	00413400 	.word	0x00413400

0040f7c4 <__ascii_mbtowc>:
  40f7c4:	b082      	sub	sp, #8
  40f7c6:	b149      	cbz	r1, 40f7dc <__ascii_mbtowc+0x18>
  40f7c8:	b15a      	cbz	r2, 40f7e2 <__ascii_mbtowc+0x1e>
  40f7ca:	b16b      	cbz	r3, 40f7e8 <__ascii_mbtowc+0x24>
  40f7cc:	7813      	ldrb	r3, [r2, #0]
  40f7ce:	600b      	str	r3, [r1, #0]
  40f7d0:	7810      	ldrb	r0, [r2, #0]
  40f7d2:	3000      	adds	r0, #0
  40f7d4:	bf18      	it	ne
  40f7d6:	2001      	movne	r0, #1
  40f7d8:	b002      	add	sp, #8
  40f7da:	4770      	bx	lr
  40f7dc:	a901      	add	r1, sp, #4
  40f7de:	2a00      	cmp	r2, #0
  40f7e0:	d1f3      	bne.n	40f7ca <__ascii_mbtowc+0x6>
  40f7e2:	4610      	mov	r0, r2
  40f7e4:	b002      	add	sp, #8
  40f7e6:	4770      	bx	lr
  40f7e8:	f06f 0001 	mvn.w	r0, #1
  40f7ec:	e7f4      	b.n	40f7d8 <__ascii_mbtowc+0x14>
  40f7ee:	bf00      	nop

0040f7f0 <memchr>:
  40f7f0:	0783      	lsls	r3, r0, #30
  40f7f2:	b470      	push	{r4, r5, r6}
  40f7f4:	b2c9      	uxtb	r1, r1
  40f7f6:	d03f      	beq.n	40f878 <memchr+0x88>
  40f7f8:	1e54      	subs	r4, r2, #1
  40f7fa:	b32a      	cbz	r2, 40f848 <memchr+0x58>
  40f7fc:	7803      	ldrb	r3, [r0, #0]
  40f7fe:	428b      	cmp	r3, r1
  40f800:	d023      	beq.n	40f84a <memchr+0x5a>
  40f802:	1c43      	adds	r3, r0, #1
  40f804:	e004      	b.n	40f810 <memchr+0x20>
  40f806:	b1fc      	cbz	r4, 40f848 <memchr+0x58>
  40f808:	7804      	ldrb	r4, [r0, #0]
  40f80a:	428c      	cmp	r4, r1
  40f80c:	d01d      	beq.n	40f84a <memchr+0x5a>
  40f80e:	4614      	mov	r4, r2
  40f810:	f013 0f03 	tst.w	r3, #3
  40f814:	4618      	mov	r0, r3
  40f816:	f104 32ff 	add.w	r2, r4, #4294967295
  40f81a:	f103 0301 	add.w	r3, r3, #1
  40f81e:	d1f2      	bne.n	40f806 <memchr+0x16>
  40f820:	2c03      	cmp	r4, #3
  40f822:	d814      	bhi.n	40f84e <memchr+0x5e>
  40f824:	1e65      	subs	r5, r4, #1
  40f826:	b34c      	cbz	r4, 40f87c <memchr+0x8c>
  40f828:	7803      	ldrb	r3, [r0, #0]
  40f82a:	428b      	cmp	r3, r1
  40f82c:	d00d      	beq.n	40f84a <memchr+0x5a>
  40f82e:	1c42      	adds	r2, r0, #1
  40f830:	2300      	movs	r3, #0
  40f832:	e002      	b.n	40f83a <memchr+0x4a>
  40f834:	7804      	ldrb	r4, [r0, #0]
  40f836:	428c      	cmp	r4, r1
  40f838:	d007      	beq.n	40f84a <memchr+0x5a>
  40f83a:	42ab      	cmp	r3, r5
  40f83c:	4610      	mov	r0, r2
  40f83e:	f103 0301 	add.w	r3, r3, #1
  40f842:	f102 0201 	add.w	r2, r2, #1
  40f846:	d1f5      	bne.n	40f834 <memchr+0x44>
  40f848:	2000      	movs	r0, #0
  40f84a:	bc70      	pop	{r4, r5, r6}
  40f84c:	4770      	bx	lr
  40f84e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40f852:	4603      	mov	r3, r0
  40f854:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40f858:	4618      	mov	r0, r3
  40f85a:	3304      	adds	r3, #4
  40f85c:	6802      	ldr	r2, [r0, #0]
  40f85e:	4072      	eors	r2, r6
  40f860:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  40f864:	ea25 0202 	bic.w	r2, r5, r2
  40f868:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40f86c:	d1da      	bne.n	40f824 <memchr+0x34>
  40f86e:	3c04      	subs	r4, #4
  40f870:	2c03      	cmp	r4, #3
  40f872:	4618      	mov	r0, r3
  40f874:	d8f0      	bhi.n	40f858 <memchr+0x68>
  40f876:	e7d5      	b.n	40f824 <memchr+0x34>
  40f878:	4614      	mov	r4, r2
  40f87a:	e7d1      	b.n	40f820 <memchr+0x30>
  40f87c:	4620      	mov	r0, r4
  40f87e:	e7e4      	b.n	40f84a <memchr+0x5a>

0040f880 <memmove>:
  40f880:	4288      	cmp	r0, r1
  40f882:	b4f0      	push	{r4, r5, r6, r7}
  40f884:	d910      	bls.n	40f8a8 <memmove+0x28>
  40f886:	188c      	adds	r4, r1, r2
  40f888:	42a0      	cmp	r0, r4
  40f88a:	d20d      	bcs.n	40f8a8 <memmove+0x28>
  40f88c:	1885      	adds	r5, r0, r2
  40f88e:	1e53      	subs	r3, r2, #1
  40f890:	b142      	cbz	r2, 40f8a4 <memmove+0x24>
  40f892:	4621      	mov	r1, r4
  40f894:	462a      	mov	r2, r5
  40f896:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  40f89a:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40f89e:	3b01      	subs	r3, #1
  40f8a0:	1c5c      	adds	r4, r3, #1
  40f8a2:	d1f8      	bne.n	40f896 <memmove+0x16>
  40f8a4:	bcf0      	pop	{r4, r5, r6, r7}
  40f8a6:	4770      	bx	lr
  40f8a8:	2a0f      	cmp	r2, #15
  40f8aa:	d93f      	bls.n	40f92c <memmove+0xac>
  40f8ac:	ea40 0301 	orr.w	r3, r0, r1
  40f8b0:	079b      	lsls	r3, r3, #30
  40f8b2:	d13f      	bne.n	40f934 <memmove+0xb4>
  40f8b4:	f1a2 0710 	sub.w	r7, r2, #16
  40f8b8:	093f      	lsrs	r7, r7, #4
  40f8ba:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  40f8be:	3610      	adds	r6, #16
  40f8c0:	460c      	mov	r4, r1
  40f8c2:	4603      	mov	r3, r0
  40f8c4:	6825      	ldr	r5, [r4, #0]
  40f8c6:	601d      	str	r5, [r3, #0]
  40f8c8:	6865      	ldr	r5, [r4, #4]
  40f8ca:	605d      	str	r5, [r3, #4]
  40f8cc:	68a5      	ldr	r5, [r4, #8]
  40f8ce:	609d      	str	r5, [r3, #8]
  40f8d0:	68e5      	ldr	r5, [r4, #12]
  40f8d2:	60dd      	str	r5, [r3, #12]
  40f8d4:	3310      	adds	r3, #16
  40f8d6:	42b3      	cmp	r3, r6
  40f8d8:	f104 0410 	add.w	r4, r4, #16
  40f8dc:	d1f2      	bne.n	40f8c4 <memmove+0x44>
  40f8de:	1c7b      	adds	r3, r7, #1
  40f8e0:	f002 0c0f 	and.w	ip, r2, #15
  40f8e4:	011b      	lsls	r3, r3, #4
  40f8e6:	f1bc 0f03 	cmp.w	ip, #3
  40f8ea:	4419      	add	r1, r3
  40f8ec:	4403      	add	r3, r0
  40f8ee:	d923      	bls.n	40f938 <memmove+0xb8>
  40f8f0:	460e      	mov	r6, r1
  40f8f2:	461d      	mov	r5, r3
  40f8f4:	4664      	mov	r4, ip
  40f8f6:	3c04      	subs	r4, #4
  40f8f8:	f856 7b04 	ldr.w	r7, [r6], #4
  40f8fc:	f845 7b04 	str.w	r7, [r5], #4
  40f900:	2c03      	cmp	r4, #3
  40f902:	d8f8      	bhi.n	40f8f6 <memmove+0x76>
  40f904:	f1ac 0404 	sub.w	r4, ip, #4
  40f908:	f024 0403 	bic.w	r4, r4, #3
  40f90c:	3404      	adds	r4, #4
  40f90e:	f002 0203 	and.w	r2, r2, #3
  40f912:	4423      	add	r3, r4
  40f914:	4421      	add	r1, r4
  40f916:	2a00      	cmp	r2, #0
  40f918:	d0c4      	beq.n	40f8a4 <memmove+0x24>
  40f91a:	441a      	add	r2, r3
  40f91c:	f811 4b01 	ldrb.w	r4, [r1], #1
  40f920:	f803 4b01 	strb.w	r4, [r3], #1
  40f924:	4293      	cmp	r3, r2
  40f926:	d1f9      	bne.n	40f91c <memmove+0x9c>
  40f928:	bcf0      	pop	{r4, r5, r6, r7}
  40f92a:	4770      	bx	lr
  40f92c:	4603      	mov	r3, r0
  40f92e:	2a00      	cmp	r2, #0
  40f930:	d1f3      	bne.n	40f91a <memmove+0x9a>
  40f932:	e7b7      	b.n	40f8a4 <memmove+0x24>
  40f934:	4603      	mov	r3, r0
  40f936:	e7f0      	b.n	40f91a <memmove+0x9a>
  40f938:	4662      	mov	r2, ip
  40f93a:	2a00      	cmp	r2, #0
  40f93c:	d1ed      	bne.n	40f91a <memmove+0x9a>
  40f93e:	e7b1      	b.n	40f8a4 <memmove+0x24>

0040f940 <__malloc_lock>:
  40f940:	4770      	bx	lr
  40f942:	bf00      	nop

0040f944 <__malloc_unlock>:
  40f944:	4770      	bx	lr
  40f946:	bf00      	nop

0040f948 <_Balloc>:
  40f948:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40f94a:	b570      	push	{r4, r5, r6, lr}
  40f94c:	4605      	mov	r5, r0
  40f94e:	460c      	mov	r4, r1
  40f950:	b14a      	cbz	r2, 40f966 <_Balloc+0x1e>
  40f952:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  40f956:	b180      	cbz	r0, 40f97a <_Balloc+0x32>
  40f958:	6801      	ldr	r1, [r0, #0]
  40f95a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  40f95e:	2200      	movs	r2, #0
  40f960:	6102      	str	r2, [r0, #16]
  40f962:	60c2      	str	r2, [r0, #12]
  40f964:	bd70      	pop	{r4, r5, r6, pc}
  40f966:	2221      	movs	r2, #33	; 0x21
  40f968:	2104      	movs	r1, #4
  40f96a:	f002 fb51 	bl	412010 <_calloc_r>
  40f96e:	64e8      	str	r0, [r5, #76]	; 0x4c
  40f970:	4602      	mov	r2, r0
  40f972:	2800      	cmp	r0, #0
  40f974:	d1ed      	bne.n	40f952 <_Balloc+0xa>
  40f976:	2000      	movs	r0, #0
  40f978:	bd70      	pop	{r4, r5, r6, pc}
  40f97a:	2101      	movs	r1, #1
  40f97c:	fa01 f604 	lsl.w	r6, r1, r4
  40f980:	1d72      	adds	r2, r6, #5
  40f982:	4628      	mov	r0, r5
  40f984:	0092      	lsls	r2, r2, #2
  40f986:	f002 fb43 	bl	412010 <_calloc_r>
  40f98a:	2800      	cmp	r0, #0
  40f98c:	d0f3      	beq.n	40f976 <_Balloc+0x2e>
  40f98e:	6044      	str	r4, [r0, #4]
  40f990:	6086      	str	r6, [r0, #8]
  40f992:	e7e4      	b.n	40f95e <_Balloc+0x16>

0040f994 <_Bfree>:
  40f994:	b131      	cbz	r1, 40f9a4 <_Bfree+0x10>
  40f996:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40f998:	684a      	ldr	r2, [r1, #4]
  40f99a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40f99e:	6008      	str	r0, [r1, #0]
  40f9a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40f9a4:	4770      	bx	lr
  40f9a6:	bf00      	nop

0040f9a8 <__multadd>:
  40f9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f9ac:	f8d1 8010 	ldr.w	r8, [r1, #16]
  40f9b0:	b082      	sub	sp, #8
  40f9b2:	4689      	mov	r9, r1
  40f9b4:	4682      	mov	sl, r0
  40f9b6:	f101 0514 	add.w	r5, r1, #20
  40f9ba:	2400      	movs	r4, #0
  40f9bc:	682f      	ldr	r7, [r5, #0]
  40f9be:	b2be      	uxth	r6, r7
  40f9c0:	0c3f      	lsrs	r7, r7, #16
  40f9c2:	fb02 3606 	mla	r6, r2, r6, r3
  40f9c6:	fb02 f307 	mul.w	r3, r2, r7
  40f9ca:	eb03 4316 	add.w	r3, r3, r6, lsr #16
  40f9ce:	3401      	adds	r4, #1
  40f9d0:	b2b6      	uxth	r6, r6
  40f9d2:	eb06 4603 	add.w	r6, r6, r3, lsl #16
  40f9d6:	45a0      	cmp	r8, r4
  40f9d8:	f845 6b04 	str.w	r6, [r5], #4
  40f9dc:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40f9e0:	dcec      	bgt.n	40f9bc <__multadd+0x14>
  40f9e2:	b153      	cbz	r3, 40f9fa <__multadd+0x52>
  40f9e4:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40f9e8:	4590      	cmp	r8, r2
  40f9ea:	da0a      	bge.n	40fa02 <__multadd+0x5a>
  40f9ec:	eb09 0188 	add.w	r1, r9, r8, lsl #2
  40f9f0:	f108 0201 	add.w	r2, r8, #1
  40f9f4:	614b      	str	r3, [r1, #20]
  40f9f6:	f8c9 2010 	str.w	r2, [r9, #16]
  40f9fa:	4648      	mov	r0, r9
  40f9fc:	b002      	add	sp, #8
  40f9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40fa02:	f8d9 1004 	ldr.w	r1, [r9, #4]
  40fa06:	9301      	str	r3, [sp, #4]
  40fa08:	3101      	adds	r1, #1
  40fa0a:	4650      	mov	r0, sl
  40fa0c:	f7ff ff9c 	bl	40f948 <_Balloc>
  40fa10:	f8d9 2010 	ldr.w	r2, [r9, #16]
  40fa14:	3202      	adds	r2, #2
  40fa16:	f109 010c 	add.w	r1, r9, #12
  40fa1a:	4604      	mov	r4, r0
  40fa1c:	0092      	lsls	r2, r2, #2
  40fa1e:	300c      	adds	r0, #12
  40fa20:	f7fa fb6e 	bl	40a100 <memcpy>
  40fa24:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
  40fa28:	f8d9 1004 	ldr.w	r1, [r9, #4]
  40fa2c:	9b01      	ldr	r3, [sp, #4]
  40fa2e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40fa32:	f8c9 0000 	str.w	r0, [r9]
  40fa36:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
  40fa3a:	46a1      	mov	r9, r4
  40fa3c:	e7d6      	b.n	40f9ec <__multadd+0x44>
  40fa3e:	bf00      	nop

0040fa40 <__s2b>:
  40fa40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40fa44:	4699      	mov	r9, r3
  40fa46:	4b23      	ldr	r3, [pc, #140]	; (40fad4 <__s2b+0x94>)
  40fa48:	9e08      	ldr	r6, [sp, #32]
  40fa4a:	f109 0408 	add.w	r4, r9, #8
  40fa4e:	fb83 5304 	smull	r5, r3, r3, r4
  40fa52:	17e4      	asrs	r4, r4, #31
  40fa54:	ebc4 0363 	rsb	r3, r4, r3, asr #1
  40fa58:	2b01      	cmp	r3, #1
  40fa5a:	4607      	mov	r7, r0
  40fa5c:	460c      	mov	r4, r1
  40fa5e:	4690      	mov	r8, r2
  40fa60:	dd35      	ble.n	40face <__s2b+0x8e>
  40fa62:	2501      	movs	r5, #1
  40fa64:	2100      	movs	r1, #0
  40fa66:	006d      	lsls	r5, r5, #1
  40fa68:	42ab      	cmp	r3, r5
  40fa6a:	f101 0101 	add.w	r1, r1, #1
  40fa6e:	dcfa      	bgt.n	40fa66 <__s2b+0x26>
  40fa70:	4638      	mov	r0, r7
  40fa72:	f7ff ff69 	bl	40f948 <_Balloc>
  40fa76:	2301      	movs	r3, #1
  40fa78:	f1b8 0f09 	cmp.w	r8, #9
  40fa7c:	6146      	str	r6, [r0, #20]
  40fa7e:	6103      	str	r3, [r0, #16]
  40fa80:	dd21      	ble.n	40fac6 <__s2b+0x86>
  40fa82:	f104 0609 	add.w	r6, r4, #9
  40fa86:	4635      	mov	r5, r6
  40fa88:	4444      	add	r4, r8
  40fa8a:	f815 3b01 	ldrb.w	r3, [r5], #1
  40fa8e:	4601      	mov	r1, r0
  40fa90:	3b30      	subs	r3, #48	; 0x30
  40fa92:	4638      	mov	r0, r7
  40fa94:	220a      	movs	r2, #10
  40fa96:	f7ff ff87 	bl	40f9a8 <__multadd>
  40fa9a:	42a5      	cmp	r5, r4
  40fa9c:	d1f5      	bne.n	40fa8a <__s2b+0x4a>
  40fa9e:	eb06 0408 	add.w	r4, r6, r8
  40faa2:	3c08      	subs	r4, #8
  40faa4:	45c1      	cmp	r9, r8
  40faa6:	dd0c      	ble.n	40fac2 <__s2b+0x82>
  40faa8:	ebc8 0809 	rsb	r8, r8, r9
  40faac:	44a0      	add	r8, r4
  40faae:	f814 3b01 	ldrb.w	r3, [r4], #1
  40fab2:	4601      	mov	r1, r0
  40fab4:	3b30      	subs	r3, #48	; 0x30
  40fab6:	4638      	mov	r0, r7
  40fab8:	220a      	movs	r2, #10
  40faba:	f7ff ff75 	bl	40f9a8 <__multadd>
  40fabe:	4544      	cmp	r4, r8
  40fac0:	d1f5      	bne.n	40faae <__s2b+0x6e>
  40fac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40fac6:	340a      	adds	r4, #10
  40fac8:	f04f 0809 	mov.w	r8, #9
  40facc:	e7ea      	b.n	40faa4 <__s2b+0x64>
  40face:	2100      	movs	r1, #0
  40fad0:	e7ce      	b.n	40fa70 <__s2b+0x30>
  40fad2:	bf00      	nop
  40fad4:	38e38e39 	.word	0x38e38e39

0040fad8 <__hi0bits>:
  40fad8:	0c03      	lsrs	r3, r0, #16
  40fada:	041b      	lsls	r3, r3, #16
  40fadc:	b9b3      	cbnz	r3, 40fb0c <__hi0bits+0x34>
  40fade:	0400      	lsls	r0, r0, #16
  40fae0:	2310      	movs	r3, #16
  40fae2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40fae6:	bf04      	itt	eq
  40fae8:	0200      	lsleq	r0, r0, #8
  40faea:	3308      	addeq	r3, #8
  40faec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40faf0:	bf04      	itt	eq
  40faf2:	0100      	lsleq	r0, r0, #4
  40faf4:	3304      	addeq	r3, #4
  40faf6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40fafa:	bf04      	itt	eq
  40fafc:	0080      	lsleq	r0, r0, #2
  40fafe:	3302      	addeq	r3, #2
  40fb00:	2800      	cmp	r0, #0
  40fb02:	db07      	blt.n	40fb14 <__hi0bits+0x3c>
  40fb04:	0042      	lsls	r2, r0, #1
  40fb06:	d403      	bmi.n	40fb10 <__hi0bits+0x38>
  40fb08:	2020      	movs	r0, #32
  40fb0a:	4770      	bx	lr
  40fb0c:	2300      	movs	r3, #0
  40fb0e:	e7e8      	b.n	40fae2 <__hi0bits+0xa>
  40fb10:	1c58      	adds	r0, r3, #1
  40fb12:	4770      	bx	lr
  40fb14:	4618      	mov	r0, r3
  40fb16:	4770      	bx	lr

0040fb18 <__lo0bits>:
  40fb18:	6803      	ldr	r3, [r0, #0]
  40fb1a:	f013 0207 	ands.w	r2, r3, #7
  40fb1e:	d007      	beq.n	40fb30 <__lo0bits+0x18>
  40fb20:	07d9      	lsls	r1, r3, #31
  40fb22:	d420      	bmi.n	40fb66 <__lo0bits+0x4e>
  40fb24:	079a      	lsls	r2, r3, #30
  40fb26:	d420      	bmi.n	40fb6a <__lo0bits+0x52>
  40fb28:	089b      	lsrs	r3, r3, #2
  40fb2a:	6003      	str	r3, [r0, #0]
  40fb2c:	2002      	movs	r0, #2
  40fb2e:	4770      	bx	lr
  40fb30:	b299      	uxth	r1, r3
  40fb32:	b909      	cbnz	r1, 40fb38 <__lo0bits+0x20>
  40fb34:	0c1b      	lsrs	r3, r3, #16
  40fb36:	2210      	movs	r2, #16
  40fb38:	f013 0fff 	tst.w	r3, #255	; 0xff
  40fb3c:	bf04      	itt	eq
  40fb3e:	0a1b      	lsreq	r3, r3, #8
  40fb40:	3208      	addeq	r2, #8
  40fb42:	0719      	lsls	r1, r3, #28
  40fb44:	bf04      	itt	eq
  40fb46:	091b      	lsreq	r3, r3, #4
  40fb48:	3204      	addeq	r2, #4
  40fb4a:	0799      	lsls	r1, r3, #30
  40fb4c:	bf04      	itt	eq
  40fb4e:	089b      	lsreq	r3, r3, #2
  40fb50:	3202      	addeq	r2, #2
  40fb52:	07d9      	lsls	r1, r3, #31
  40fb54:	d404      	bmi.n	40fb60 <__lo0bits+0x48>
  40fb56:	085b      	lsrs	r3, r3, #1
  40fb58:	d101      	bne.n	40fb5e <__lo0bits+0x46>
  40fb5a:	2020      	movs	r0, #32
  40fb5c:	4770      	bx	lr
  40fb5e:	3201      	adds	r2, #1
  40fb60:	6003      	str	r3, [r0, #0]
  40fb62:	4610      	mov	r0, r2
  40fb64:	4770      	bx	lr
  40fb66:	2000      	movs	r0, #0
  40fb68:	4770      	bx	lr
  40fb6a:	085b      	lsrs	r3, r3, #1
  40fb6c:	6003      	str	r3, [r0, #0]
  40fb6e:	2001      	movs	r0, #1
  40fb70:	4770      	bx	lr
  40fb72:	bf00      	nop

0040fb74 <__i2b>:
  40fb74:	b510      	push	{r4, lr}
  40fb76:	460c      	mov	r4, r1
  40fb78:	2101      	movs	r1, #1
  40fb7a:	f7ff fee5 	bl	40f948 <_Balloc>
  40fb7e:	2201      	movs	r2, #1
  40fb80:	6144      	str	r4, [r0, #20]
  40fb82:	6102      	str	r2, [r0, #16]
  40fb84:	bd10      	pop	{r4, pc}
  40fb86:	bf00      	nop

0040fb88 <__multiply>:
  40fb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fb8c:	690d      	ldr	r5, [r1, #16]
  40fb8e:	f8d2 9010 	ldr.w	r9, [r2, #16]
  40fb92:	454d      	cmp	r5, r9
  40fb94:	b085      	sub	sp, #20
  40fb96:	460c      	mov	r4, r1
  40fb98:	4692      	mov	sl, r2
  40fb9a:	da04      	bge.n	40fba6 <__multiply+0x1e>
  40fb9c:	462a      	mov	r2, r5
  40fb9e:	4654      	mov	r4, sl
  40fba0:	464d      	mov	r5, r9
  40fba2:	468a      	mov	sl, r1
  40fba4:	4691      	mov	r9, r2
  40fba6:	68a3      	ldr	r3, [r4, #8]
  40fba8:	6861      	ldr	r1, [r4, #4]
  40fbaa:	eb05 0709 	add.w	r7, r5, r9
  40fbae:	429f      	cmp	r7, r3
  40fbb0:	bfc8      	it	gt
  40fbb2:	3101      	addgt	r1, #1
  40fbb4:	f7ff fec8 	bl	40f948 <_Balloc>
  40fbb8:	f100 0614 	add.w	r6, r0, #20
  40fbbc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
  40fbc0:	4546      	cmp	r6, r8
  40fbc2:	9001      	str	r0, [sp, #4]
  40fbc4:	d205      	bcs.n	40fbd2 <__multiply+0x4a>
  40fbc6:	4633      	mov	r3, r6
  40fbc8:	2000      	movs	r0, #0
  40fbca:	f843 0b04 	str.w	r0, [r3], #4
  40fbce:	4598      	cmp	r8, r3
  40fbd0:	d8fb      	bhi.n	40fbca <__multiply+0x42>
  40fbd2:	f10a 0c14 	add.w	ip, sl, #20
  40fbd6:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
  40fbda:	3414      	adds	r4, #20
  40fbdc:	45cc      	cmp	ip, r9
  40fbde:	9400      	str	r4, [sp, #0]
  40fbe0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  40fbe4:	d25b      	bcs.n	40fc9e <__multiply+0x116>
  40fbe6:	f8cd 8008 	str.w	r8, [sp, #8]
  40fbea:	9703      	str	r7, [sp, #12]
  40fbec:	46c8      	mov	r8, r9
  40fbee:	f85c 3b04 	ldr.w	r3, [ip], #4
  40fbf2:	b29c      	uxth	r4, r3
  40fbf4:	b324      	cbz	r4, 40fc40 <__multiply+0xb8>
  40fbf6:	9a00      	ldr	r2, [sp, #0]
  40fbf8:	4633      	mov	r3, r6
  40fbfa:	f04f 0900 	mov.w	r9, #0
  40fbfe:	e000      	b.n	40fc02 <__multiply+0x7a>
  40fc00:	460b      	mov	r3, r1
  40fc02:	f852 7b04 	ldr.w	r7, [r2], #4
  40fc06:	6819      	ldr	r1, [r3, #0]
  40fc08:	fa1f fb87 	uxth.w	fp, r7
  40fc0c:	fa1f fa81 	uxth.w	sl, r1
  40fc10:	0c38      	lsrs	r0, r7, #16
  40fc12:	0c09      	lsrs	r1, r1, #16
  40fc14:	fb04 a70b 	mla	r7, r4, fp, sl
  40fc18:	44b9      	add	r9, r7
  40fc1a:	fb04 1000 	mla	r0, r4, r0, r1
  40fc1e:	eb00 4019 	add.w	r0, r0, r9, lsr #16
  40fc22:	4619      	mov	r1, r3
  40fc24:	fa1f f989 	uxth.w	r9, r9
  40fc28:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
  40fc2c:	4295      	cmp	r5, r2
  40fc2e:	ea4f 4910 	mov.w	r9, r0, lsr #16
  40fc32:	f841 7b04 	str.w	r7, [r1], #4
  40fc36:	d8e3      	bhi.n	40fc00 <__multiply+0x78>
  40fc38:	f8c3 9004 	str.w	r9, [r3, #4]
  40fc3c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
  40fc40:	ea5f 4913 	movs.w	r9, r3, lsr #16
  40fc44:	d024      	beq.n	40fc90 <__multiply+0x108>
  40fc46:	f8d6 a000 	ldr.w	sl, [r6]
  40fc4a:	9b00      	ldr	r3, [sp, #0]
  40fc4c:	4650      	mov	r0, sl
  40fc4e:	4631      	mov	r1, r6
  40fc50:	f04f 0b00 	mov.w	fp, #0
  40fc54:	e000      	b.n	40fc58 <__multiply+0xd0>
  40fc56:	4611      	mov	r1, r2
  40fc58:	881a      	ldrh	r2, [r3, #0]
  40fc5a:	0c00      	lsrs	r0, r0, #16
  40fc5c:	fb09 0002 	mla	r0, r9, r2, r0
  40fc60:	4483      	add	fp, r0
  40fc62:	fa1f fa8a 	uxth.w	sl, sl
  40fc66:	460a      	mov	r2, r1
  40fc68:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
  40fc6c:	f842 0b04 	str.w	r0, [r2], #4
  40fc70:	f853 7b04 	ldr.w	r7, [r3], #4
  40fc74:	6848      	ldr	r0, [r1, #4]
  40fc76:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40fc7a:	b284      	uxth	r4, r0
  40fc7c:	fb09 4a0a 	mla	sl, r9, sl, r4
  40fc80:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
  40fc84:	429d      	cmp	r5, r3
  40fc86:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
  40fc8a:	d8e4      	bhi.n	40fc56 <__multiply+0xce>
  40fc8c:	f8c1 a004 	str.w	sl, [r1, #4]
  40fc90:	45e0      	cmp	r8, ip
  40fc92:	f106 0604 	add.w	r6, r6, #4
  40fc96:	d8aa      	bhi.n	40fbee <__multiply+0x66>
  40fc98:	f8dd 8008 	ldr.w	r8, [sp, #8]
  40fc9c:	9f03      	ldr	r7, [sp, #12]
  40fc9e:	2f00      	cmp	r7, #0
  40fca0:	dd0a      	ble.n	40fcb8 <__multiply+0x130>
  40fca2:	f858 3c04 	ldr.w	r3, [r8, #-4]
  40fca6:	f1a8 0804 	sub.w	r8, r8, #4
  40fcaa:	b11b      	cbz	r3, 40fcb4 <__multiply+0x12c>
  40fcac:	e004      	b.n	40fcb8 <__multiply+0x130>
  40fcae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  40fcb2:	b90b      	cbnz	r3, 40fcb8 <__multiply+0x130>
  40fcb4:	3f01      	subs	r7, #1
  40fcb6:	d1fa      	bne.n	40fcae <__multiply+0x126>
  40fcb8:	9b01      	ldr	r3, [sp, #4]
  40fcba:	4618      	mov	r0, r3
  40fcbc:	611f      	str	r7, [r3, #16]
  40fcbe:	b005      	add	sp, #20
  40fcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040fcc4 <__pow5mult>:
  40fcc4:	f012 0303 	ands.w	r3, r2, #3
  40fcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40fccc:	4614      	mov	r4, r2
  40fcce:	4607      	mov	r7, r0
  40fcd0:	460e      	mov	r6, r1
  40fcd2:	d12c      	bne.n	40fd2e <__pow5mult+0x6a>
  40fcd4:	10a4      	asrs	r4, r4, #2
  40fcd6:	d01c      	beq.n	40fd12 <__pow5mult+0x4e>
  40fcd8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40fcda:	2d00      	cmp	r5, #0
  40fcdc:	d030      	beq.n	40fd40 <__pow5mult+0x7c>
  40fcde:	f04f 0800 	mov.w	r8, #0
  40fce2:	e004      	b.n	40fcee <__pow5mult+0x2a>
  40fce4:	1064      	asrs	r4, r4, #1
  40fce6:	d014      	beq.n	40fd12 <__pow5mult+0x4e>
  40fce8:	6828      	ldr	r0, [r5, #0]
  40fcea:	b1a8      	cbz	r0, 40fd18 <__pow5mult+0x54>
  40fcec:	4605      	mov	r5, r0
  40fcee:	07e3      	lsls	r3, r4, #31
  40fcf0:	d5f8      	bpl.n	40fce4 <__pow5mult+0x20>
  40fcf2:	4638      	mov	r0, r7
  40fcf4:	4631      	mov	r1, r6
  40fcf6:	462a      	mov	r2, r5
  40fcf8:	f7ff ff46 	bl	40fb88 <__multiply>
  40fcfc:	b1ae      	cbz	r6, 40fd2a <__pow5mult+0x66>
  40fcfe:	6872      	ldr	r2, [r6, #4]
  40fd00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40fd02:	1064      	asrs	r4, r4, #1
  40fd04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40fd08:	6031      	str	r1, [r6, #0]
  40fd0a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40fd0e:	4606      	mov	r6, r0
  40fd10:	d1ea      	bne.n	40fce8 <__pow5mult+0x24>
  40fd12:	4630      	mov	r0, r6
  40fd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40fd18:	4638      	mov	r0, r7
  40fd1a:	4629      	mov	r1, r5
  40fd1c:	462a      	mov	r2, r5
  40fd1e:	f7ff ff33 	bl	40fb88 <__multiply>
  40fd22:	6028      	str	r0, [r5, #0]
  40fd24:	f8c0 8000 	str.w	r8, [r0]
  40fd28:	e7e0      	b.n	40fcec <__pow5mult+0x28>
  40fd2a:	4606      	mov	r6, r0
  40fd2c:	e7da      	b.n	40fce4 <__pow5mult+0x20>
  40fd2e:	1e5d      	subs	r5, r3, #1
  40fd30:	4a0a      	ldr	r2, [pc, #40]	; (40fd5c <__pow5mult+0x98>)
  40fd32:	2300      	movs	r3, #0
  40fd34:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
  40fd38:	f7ff fe36 	bl	40f9a8 <__multadd>
  40fd3c:	4606      	mov	r6, r0
  40fd3e:	e7c9      	b.n	40fcd4 <__pow5mult+0x10>
  40fd40:	2101      	movs	r1, #1
  40fd42:	4638      	mov	r0, r7
  40fd44:	f7ff fe00 	bl	40f948 <_Balloc>
  40fd48:	f240 2171 	movw	r1, #625	; 0x271
  40fd4c:	2201      	movs	r2, #1
  40fd4e:	2300      	movs	r3, #0
  40fd50:	6141      	str	r1, [r0, #20]
  40fd52:	6102      	str	r2, [r0, #16]
  40fd54:	4605      	mov	r5, r0
  40fd56:	64b8      	str	r0, [r7, #72]	; 0x48
  40fd58:	6003      	str	r3, [r0, #0]
  40fd5a:	e7c0      	b.n	40fcde <__pow5mult+0x1a>
  40fd5c:	00413690 	.word	0x00413690

0040fd60 <__lshift>:
  40fd60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fd64:	4693      	mov	fp, r2
  40fd66:	690a      	ldr	r2, [r1, #16]
  40fd68:	688b      	ldr	r3, [r1, #8]
  40fd6a:	ea4f 1a6b 	mov.w	sl, fp, asr #5
  40fd6e:	eb0a 0902 	add.w	r9, sl, r2
  40fd72:	f109 0601 	add.w	r6, r9, #1
  40fd76:	429e      	cmp	r6, r3
  40fd78:	460f      	mov	r7, r1
  40fd7a:	4680      	mov	r8, r0
  40fd7c:	6849      	ldr	r1, [r1, #4]
  40fd7e:	dd04      	ble.n	40fd8a <__lshift+0x2a>
  40fd80:	005b      	lsls	r3, r3, #1
  40fd82:	429e      	cmp	r6, r3
  40fd84:	f101 0101 	add.w	r1, r1, #1
  40fd88:	dcfa      	bgt.n	40fd80 <__lshift+0x20>
  40fd8a:	4640      	mov	r0, r8
  40fd8c:	f7ff fddc 	bl	40f948 <_Balloc>
  40fd90:	f1ba 0f00 	cmp.w	sl, #0
  40fd94:	f100 0414 	add.w	r4, r0, #20
  40fd98:	dd09      	ble.n	40fdae <__lshift+0x4e>
  40fd9a:	2300      	movs	r3, #0
  40fd9c:	461a      	mov	r2, r3
  40fd9e:	4625      	mov	r5, r4
  40fda0:	3301      	adds	r3, #1
  40fda2:	4553      	cmp	r3, sl
  40fda4:	f845 2b04 	str.w	r2, [r5], #4
  40fda8:	d1fa      	bne.n	40fda0 <__lshift+0x40>
  40fdaa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  40fdae:	693a      	ldr	r2, [r7, #16]
  40fdb0:	f107 0314 	add.w	r3, r7, #20
  40fdb4:	f01b 0b1f 	ands.w	fp, fp, #31
  40fdb8:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
  40fdbc:	d021      	beq.n	40fe02 <__lshift+0xa2>
  40fdbe:	f1cb 0a20 	rsb	sl, fp, #32
  40fdc2:	2200      	movs	r2, #0
  40fdc4:	e000      	b.n	40fdc8 <__lshift+0x68>
  40fdc6:	462c      	mov	r4, r5
  40fdc8:	6819      	ldr	r1, [r3, #0]
  40fdca:	4625      	mov	r5, r4
  40fdcc:	fa01 f10b 	lsl.w	r1, r1, fp
  40fdd0:	430a      	orrs	r2, r1
  40fdd2:	f845 2b04 	str.w	r2, [r5], #4
  40fdd6:	f853 2b04 	ldr.w	r2, [r3], #4
  40fdda:	4563      	cmp	r3, ip
  40fddc:	fa22 f20a 	lsr.w	r2, r2, sl
  40fde0:	d3f1      	bcc.n	40fdc6 <__lshift+0x66>
  40fde2:	6062      	str	r2, [r4, #4]
  40fde4:	b10a      	cbz	r2, 40fdea <__lshift+0x8a>
  40fde6:	f109 0602 	add.w	r6, r9, #2
  40fdea:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  40fdee:	687a      	ldr	r2, [r7, #4]
  40fdf0:	3e01      	subs	r6, #1
  40fdf2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40fdf6:	6106      	str	r6, [r0, #16]
  40fdf8:	6039      	str	r1, [r7, #0]
  40fdfa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40fdfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fe02:	f853 2b04 	ldr.w	r2, [r3], #4
  40fe06:	f844 2b04 	str.w	r2, [r4], #4
  40fe0a:	459c      	cmp	ip, r3
  40fe0c:	d9ed      	bls.n	40fdea <__lshift+0x8a>
  40fe0e:	f853 2b04 	ldr.w	r2, [r3], #4
  40fe12:	f844 2b04 	str.w	r2, [r4], #4
  40fe16:	459c      	cmp	ip, r3
  40fe18:	d8f3      	bhi.n	40fe02 <__lshift+0xa2>
  40fe1a:	e7e6      	b.n	40fdea <__lshift+0x8a>

0040fe1c <__mcmp>:
  40fe1c:	6902      	ldr	r2, [r0, #16]
  40fe1e:	690b      	ldr	r3, [r1, #16]
  40fe20:	1ad2      	subs	r2, r2, r3
  40fe22:	b410      	push	{r4}
  40fe24:	d115      	bne.n	40fe52 <__mcmp+0x36>
  40fe26:	009b      	lsls	r3, r3, #2
  40fe28:	3014      	adds	r0, #20
  40fe2a:	3114      	adds	r1, #20
  40fe2c:	4419      	add	r1, r3
  40fe2e:	4403      	add	r3, r0
  40fe30:	e001      	b.n	40fe36 <__mcmp+0x1a>
  40fe32:	4298      	cmp	r0, r3
  40fe34:	d211      	bcs.n	40fe5a <__mcmp+0x3e>
  40fe36:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40fe3a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40fe3e:	42a2      	cmp	r2, r4
  40fe40:	d0f7      	beq.n	40fe32 <__mcmp+0x16>
  40fe42:	4294      	cmp	r4, r2
  40fe44:	bf94      	ite	ls
  40fe46:	2001      	movls	r0, #1
  40fe48:	f04f 30ff 	movhi.w	r0, #4294967295
  40fe4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  40fe50:	4770      	bx	lr
  40fe52:	4610      	mov	r0, r2
  40fe54:	f85d 4b04 	ldr.w	r4, [sp], #4
  40fe58:	4770      	bx	lr
  40fe5a:	2000      	movs	r0, #0
  40fe5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  40fe60:	4770      	bx	lr
  40fe62:	bf00      	nop

0040fe64 <__mdiff>:
  40fe64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40fe68:	460d      	mov	r5, r1
  40fe6a:	4604      	mov	r4, r0
  40fe6c:	4611      	mov	r1, r2
  40fe6e:	4628      	mov	r0, r5
  40fe70:	4616      	mov	r6, r2
  40fe72:	f7ff ffd3 	bl	40fe1c <__mcmp>
  40fe76:	1e07      	subs	r7, r0, #0
  40fe78:	d055      	beq.n	40ff26 <__mdiff+0xc2>
  40fe7a:	db4e      	blt.n	40ff1a <__mdiff+0xb6>
  40fe7c:	f04f 0800 	mov.w	r8, #0
  40fe80:	6869      	ldr	r1, [r5, #4]
  40fe82:	4620      	mov	r0, r4
  40fe84:	f7ff fd60 	bl	40f948 <_Balloc>
  40fe88:	692f      	ldr	r7, [r5, #16]
  40fe8a:	6932      	ldr	r2, [r6, #16]
  40fe8c:	f8c0 800c 	str.w	r8, [r0, #12]
  40fe90:	3514      	adds	r5, #20
  40fe92:	3614      	adds	r6, #20
  40fe94:	f100 0314 	add.w	r3, r0, #20
  40fe98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
  40fe9c:	eb06 0882 	add.w	r8, r6, r2, lsl #2
  40fea0:	2100      	movs	r1, #0
  40fea2:	f856 2b04 	ldr.w	r2, [r6], #4
  40fea6:	f855 4b04 	ldr.w	r4, [r5], #4
  40feaa:	fa1f f982 	uxth.w	r9, r2
  40feae:	fa11 fa84 	uxtah	sl, r1, r4
  40feb2:	0c11      	lsrs	r1, r2, #16
  40feb4:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
  40feb8:	ebc9 020a 	rsb	r2, r9, sl
  40febc:	eb01 4122 	add.w	r1, r1, r2, asr #16
  40fec0:	b292      	uxth	r2, r2
  40fec2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  40fec6:	45b0      	cmp	r8, r6
  40fec8:	f843 2b04 	str.w	r2, [r3], #4
  40fecc:	ea4f 4121 	mov.w	r1, r1, asr #16
  40fed0:	462c      	mov	r4, r5
  40fed2:	d8e6      	bhi.n	40fea2 <__mdiff+0x3e>
  40fed4:	45ac      	cmp	ip, r5
  40fed6:	4698      	mov	r8, r3
  40fed8:	d915      	bls.n	40ff06 <__mdiff+0xa2>
  40feda:	f854 6b04 	ldr.w	r6, [r4], #4
  40fede:	fa11 f186 	uxtah	r1, r1, r6
  40fee2:	0c36      	lsrs	r6, r6, #16
  40fee4:	eb06 4621 	add.w	r6, r6, r1, asr #16
  40fee8:	b289      	uxth	r1, r1
  40feea:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
  40feee:	45a4      	cmp	ip, r4
  40fef0:	f843 2b04 	str.w	r2, [r3], #4
  40fef4:	ea4f 4126 	mov.w	r1, r6, asr #16
  40fef8:	d8ef      	bhi.n	40feda <__mdiff+0x76>
  40fefa:	43eb      	mvns	r3, r5
  40fefc:	4463      	add	r3, ip
  40fefe:	f023 0303 	bic.w	r3, r3, #3
  40ff02:	3304      	adds	r3, #4
  40ff04:	4443      	add	r3, r8
  40ff06:	3b04      	subs	r3, #4
  40ff08:	b922      	cbnz	r2, 40ff14 <__mdiff+0xb0>
  40ff0a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40ff0e:	3f01      	subs	r7, #1
  40ff10:	2a00      	cmp	r2, #0
  40ff12:	d0fa      	beq.n	40ff0a <__mdiff+0xa6>
  40ff14:	6107      	str	r7, [r0, #16]
  40ff16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ff1a:	462b      	mov	r3, r5
  40ff1c:	f04f 0801 	mov.w	r8, #1
  40ff20:	4635      	mov	r5, r6
  40ff22:	461e      	mov	r6, r3
  40ff24:	e7ac      	b.n	40fe80 <__mdiff+0x1c>
  40ff26:	4620      	mov	r0, r4
  40ff28:	4639      	mov	r1, r7
  40ff2a:	f7ff fd0d 	bl	40f948 <_Balloc>
  40ff2e:	2301      	movs	r3, #1
  40ff30:	6147      	str	r7, [r0, #20]
  40ff32:	6103      	str	r3, [r0, #16]
  40ff34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040ff38 <__ulp>:
  40ff38:	4b0e      	ldr	r3, [pc, #56]	; (40ff74 <__ulp+0x3c>)
  40ff3a:	400b      	ands	r3, r1
  40ff3c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  40ff40:	2b00      	cmp	r3, #0
  40ff42:	dd02      	ble.n	40ff4a <__ulp+0x12>
  40ff44:	4619      	mov	r1, r3
  40ff46:	2000      	movs	r0, #0
  40ff48:	4770      	bx	lr
  40ff4a:	425b      	negs	r3, r3
  40ff4c:	151b      	asrs	r3, r3, #20
  40ff4e:	2b13      	cmp	r3, #19
  40ff50:	dd0a      	ble.n	40ff68 <__ulp+0x30>
  40ff52:	2b32      	cmp	r3, #50	; 0x32
  40ff54:	bfdd      	ittte	le
  40ff56:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  40ff5a:	2201      	movle	r2, #1
  40ff5c:	fa02 f303 	lslle.w	r3, r2, r3
  40ff60:	2301      	movgt	r3, #1
  40ff62:	2100      	movs	r1, #0
  40ff64:	4618      	mov	r0, r3
  40ff66:	4770      	bx	lr
  40ff68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40ff6c:	fa42 f103 	asr.w	r1, r2, r3
  40ff70:	2000      	movs	r0, #0
  40ff72:	4770      	bx	lr
  40ff74:	7ff00000 	.word	0x7ff00000

0040ff78 <__b2d>:
  40ff78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ff7a:	6904      	ldr	r4, [r0, #16]
  40ff7c:	f100 0614 	add.w	r6, r0, #20
  40ff80:	eb06 0484 	add.w	r4, r6, r4, lsl #2
  40ff84:	460f      	mov	r7, r1
  40ff86:	f854 5c04 	ldr.w	r5, [r4, #-4]
  40ff8a:	4628      	mov	r0, r5
  40ff8c:	f7ff fda4 	bl	40fad8 <__hi0bits>
  40ff90:	f1c0 0320 	rsb	r3, r0, #32
  40ff94:	280a      	cmp	r0, #10
  40ff96:	603b      	str	r3, [r7, #0]
  40ff98:	f1a4 0104 	sub.w	r1, r4, #4
  40ff9c:	dc19      	bgt.n	40ffd2 <__b2d+0x5a>
  40ff9e:	428e      	cmp	r6, r1
  40ffa0:	f1c0 070b 	rsb	r7, r0, #11
  40ffa4:	bf38      	it	cc
  40ffa6:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
  40ffaa:	fa25 fc07 	lsr.w	ip, r5, r7
  40ffae:	f100 0015 	add.w	r0, r0, #21
  40ffb2:	bf38      	it	cc
  40ffb4:	fa21 f707 	lsrcc.w	r7, r1, r7
  40ffb8:	fa05 f500 	lsl.w	r5, r5, r0
  40ffbc:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  40ffc0:	bf28      	it	cs
  40ffc2:	2700      	movcs	r7, #0
  40ffc4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  40ffc8:	ea47 0205 	orr.w	r2, r7, r5
  40ffcc:	4610      	mov	r0, r2
  40ffce:	4619      	mov	r1, r3
  40ffd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ffd2:	428e      	cmp	r6, r1
  40ffd4:	bf36      	itet	cc
  40ffd6:	f1a4 0108 	subcc.w	r1, r4, #8
  40ffda:	2400      	movcs	r4, #0
  40ffdc:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
  40ffe0:	f1b0 070b 	subs.w	r7, r0, #11
  40ffe4:	d019      	beq.n	41001a <__b2d+0xa2>
  40ffe6:	42b1      	cmp	r1, r6
  40ffe8:	bf88      	it	hi
  40ffea:	f851 1c04 	ldrhi.w	r1, [r1, #-4]
  40ffee:	fa05 f507 	lsl.w	r5, r5, r7
  40fff2:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  40fff6:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
  40fffa:	fa24 fc00 	lsr.w	ip, r4, r0
  40fffe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  410002:	bf8c      	ite	hi
  410004:	fa21 f000 	lsrhi.w	r0, r1, r0
  410008:	2000      	movls	r0, #0
  41000a:	40bc      	lsls	r4, r7
  41000c:	ea45 030c 	orr.w	r3, r5, ip
  410010:	ea40 0204 	orr.w	r2, r0, r4
  410014:	4610      	mov	r0, r2
  410016:	4619      	mov	r1, r3
  410018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41001a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
  41001e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  410022:	4622      	mov	r2, r4
  410024:	4610      	mov	r0, r2
  410026:	4619      	mov	r1, r3
  410028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41002a:	bf00      	nop

0041002c <__d2b>:
  41002c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  410030:	b083      	sub	sp, #12
  410032:	2101      	movs	r1, #1
  410034:	461d      	mov	r5, r3
  410036:	f3c3 560a 	ubfx	r6, r3, #20, #11
  41003a:	4614      	mov	r4, r2
  41003c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  41003e:	f7ff fc83 	bl	40f948 <_Balloc>
  410042:	f3c5 0313 	ubfx	r3, r5, #0, #20
  410046:	4680      	mov	r8, r0
  410048:	b10e      	cbz	r6, 41004e <__d2b+0x22>
  41004a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  41004e:	9301      	str	r3, [sp, #4]
  410050:	b324      	cbz	r4, 41009c <__d2b+0x70>
  410052:	a802      	add	r0, sp, #8
  410054:	f840 4d08 	str.w	r4, [r0, #-8]!
  410058:	4668      	mov	r0, sp
  41005a:	f7ff fd5d 	bl	40fb18 <__lo0bits>
  41005e:	2800      	cmp	r0, #0
  410060:	d135      	bne.n	4100ce <__d2b+0xa2>
  410062:	e89d 000c 	ldmia.w	sp, {r2, r3}
  410066:	f8c8 2014 	str.w	r2, [r8, #20]
  41006a:	2b00      	cmp	r3, #0
  41006c:	bf0c      	ite	eq
  41006e:	2401      	moveq	r4, #1
  410070:	2402      	movne	r4, #2
  410072:	f8c8 3018 	str.w	r3, [r8, #24]
  410076:	f8c8 4010 	str.w	r4, [r8, #16]
  41007a:	b9de      	cbnz	r6, 4100b4 <__d2b+0x88>
  41007c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  410080:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  410084:	6038      	str	r0, [r7, #0]
  410086:	6918      	ldr	r0, [r3, #16]
  410088:	f7ff fd26 	bl	40fad8 <__hi0bits>
  41008c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  41008e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  410092:	6018      	str	r0, [r3, #0]
  410094:	4640      	mov	r0, r8
  410096:	b003      	add	sp, #12
  410098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41009c:	a801      	add	r0, sp, #4
  41009e:	f7ff fd3b 	bl	40fb18 <__lo0bits>
  4100a2:	2401      	movs	r4, #1
  4100a4:	9b01      	ldr	r3, [sp, #4]
  4100a6:	f8c8 3014 	str.w	r3, [r8, #20]
  4100aa:	3020      	adds	r0, #32
  4100ac:	f8c8 4010 	str.w	r4, [r8, #16]
  4100b0:	2e00      	cmp	r6, #0
  4100b2:	d0e3      	beq.n	41007c <__d2b+0x50>
  4100b4:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
  4100b8:	eb09 0300 	add.w	r3, r9, r0
  4100bc:	603b      	str	r3, [r7, #0]
  4100be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4100c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4100c4:	6018      	str	r0, [r3, #0]
  4100c6:	4640      	mov	r0, r8
  4100c8:	b003      	add	sp, #12
  4100ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4100ce:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4100d2:	f1c0 0120 	rsb	r1, r0, #32
  4100d6:	fa03 f101 	lsl.w	r1, r3, r1
  4100da:	430a      	orrs	r2, r1
  4100dc:	40c3      	lsrs	r3, r0
  4100de:	9301      	str	r3, [sp, #4]
  4100e0:	f8c8 2014 	str.w	r2, [r8, #20]
  4100e4:	e7c1      	b.n	41006a <__d2b+0x3e>
  4100e6:	bf00      	nop

004100e8 <__ratio>:
  4100e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4100ea:	b083      	sub	sp, #12
  4100ec:	460e      	mov	r6, r1
  4100ee:	4669      	mov	r1, sp
  4100f0:	4607      	mov	r7, r0
  4100f2:	f7ff ff41 	bl	40ff78 <__b2d>
  4100f6:	4604      	mov	r4, r0
  4100f8:	460d      	mov	r5, r1
  4100fa:	4630      	mov	r0, r6
  4100fc:	a901      	add	r1, sp, #4
  4100fe:	f7ff ff3b 	bl	40ff78 <__b2d>
  410102:	4602      	mov	r2, r0
  410104:	460b      	mov	r3, r1
  410106:	e89d 0003 	ldmia.w	sp, {r0, r1}
  41010a:	693f      	ldr	r7, [r7, #16]
  41010c:	6936      	ldr	r6, [r6, #16]
  41010e:	1a41      	subs	r1, r0, r1
  410110:	ebc6 0e07 	rsb	lr, r6, r7
  410114:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
  410118:	f1be 0f00 	cmp.w	lr, #0
  41011c:	dd08      	ble.n	410130 <__ratio+0x48>
  41011e:	eb05 510e 	add.w	r1, r5, lr, lsl #20
  410122:	460d      	mov	r5, r1
  410124:	4620      	mov	r0, r4
  410126:	4629      	mov	r1, r5
  410128:	f002 fea4 	bl	412e74 <__aeabi_ddiv>
  41012c:	b003      	add	sp, #12
  41012e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410130:	eba3 570e 	sub.w	r7, r3, lr, lsl #20
  410134:	463b      	mov	r3, r7
  410136:	e7f5      	b.n	410124 <__ratio+0x3c>

00410138 <__copybits>:
  410138:	b470      	push	{r4, r5, r6}
  41013a:	6915      	ldr	r5, [r2, #16]
  41013c:	f102 0314 	add.w	r3, r2, #20
  410140:	3901      	subs	r1, #1
  410142:	114e      	asrs	r6, r1, #5
  410144:	eb03 0585 	add.w	r5, r3, r5, lsl #2
  410148:	3601      	adds	r6, #1
  41014a:	42ab      	cmp	r3, r5
  41014c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  410150:	d20c      	bcs.n	41016c <__copybits+0x34>
  410152:	4601      	mov	r1, r0
  410154:	f853 4b04 	ldr.w	r4, [r3], #4
  410158:	f841 4b04 	str.w	r4, [r1], #4
  41015c:	429d      	cmp	r5, r3
  41015e:	d8f9      	bhi.n	410154 <__copybits+0x1c>
  410160:	1aab      	subs	r3, r5, r2
  410162:	3b15      	subs	r3, #21
  410164:	f023 0303 	bic.w	r3, r3, #3
  410168:	3304      	adds	r3, #4
  41016a:	4418      	add	r0, r3
  41016c:	4286      	cmp	r6, r0
  41016e:	d904      	bls.n	41017a <__copybits+0x42>
  410170:	2300      	movs	r3, #0
  410172:	f840 3b04 	str.w	r3, [r0], #4
  410176:	4286      	cmp	r6, r0
  410178:	d8fb      	bhi.n	410172 <__copybits+0x3a>
  41017a:	bc70      	pop	{r4, r5, r6}
  41017c:	4770      	bx	lr
  41017e:	bf00      	nop

00410180 <__any_on>:
  410180:	6903      	ldr	r3, [r0, #16]
  410182:	114a      	asrs	r2, r1, #5
  410184:	4293      	cmp	r3, r2
  410186:	b410      	push	{r4}
  410188:	f100 0414 	add.w	r4, r0, #20
  41018c:	da10      	bge.n	4101b0 <__any_on+0x30>
  41018e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  410192:	429c      	cmp	r4, r3
  410194:	d221      	bcs.n	4101da <__any_on+0x5a>
  410196:	f853 0c04 	ldr.w	r0, [r3, #-4]
  41019a:	3b04      	subs	r3, #4
  41019c:	b118      	cbz	r0, 4101a6 <__any_on+0x26>
  41019e:	e015      	b.n	4101cc <__any_on+0x4c>
  4101a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4101a4:	b992      	cbnz	r2, 4101cc <__any_on+0x4c>
  4101a6:	429c      	cmp	r4, r3
  4101a8:	d3fa      	bcc.n	4101a0 <__any_on+0x20>
  4101aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4101ae:	4770      	bx	lr
  4101b0:	dd10      	ble.n	4101d4 <__any_on+0x54>
  4101b2:	f011 011f 	ands.w	r1, r1, #31
  4101b6:	d00d      	beq.n	4101d4 <__any_on+0x54>
  4101b8:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  4101bc:	fa20 f301 	lsr.w	r3, r0, r1
  4101c0:	fa03 f101 	lsl.w	r1, r3, r1
  4101c4:	4281      	cmp	r1, r0
  4101c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  4101ca:	d0e2      	beq.n	410192 <__any_on+0x12>
  4101cc:	2001      	movs	r0, #1
  4101ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  4101d2:	4770      	bx	lr
  4101d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  4101d8:	e7db      	b.n	410192 <__any_on+0x12>
  4101da:	2000      	movs	r0, #0
  4101dc:	e7e5      	b.n	4101aa <__any_on+0x2a>
  4101de:	bf00      	nop

004101e0 <_read_r>:
  4101e0:	b570      	push	{r4, r5, r6, lr}
  4101e2:	4c08      	ldr	r4, [pc, #32]	; (410204 <_read_r+0x24>)
  4101e4:	4606      	mov	r6, r0
  4101e6:	2500      	movs	r5, #0
  4101e8:	4608      	mov	r0, r1
  4101ea:	4611      	mov	r1, r2
  4101ec:	461a      	mov	r2, r3
  4101ee:	6025      	str	r5, [r4, #0]
  4101f0:	f7f4 fd3a 	bl	404c68 <_read>
  4101f4:	1c43      	adds	r3, r0, #1
  4101f6:	d000      	beq.n	4101fa <_read_r+0x1a>
  4101f8:	bd70      	pop	{r4, r5, r6, pc}
  4101fa:	6823      	ldr	r3, [r4, #0]
  4101fc:	2b00      	cmp	r3, #0
  4101fe:	d0fb      	beq.n	4101f8 <_read_r+0x18>
  410200:	6033      	str	r3, [r6, #0]
  410202:	bd70      	pop	{r4, r5, r6, pc}
  410204:	2000c00c 	.word	0x2000c00c

00410208 <_realloc_r>:
  410208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41020c:	460c      	mov	r4, r1
  41020e:	b083      	sub	sp, #12
  410210:	4690      	mov	r8, r2
  410212:	4681      	mov	r9, r0
  410214:	2900      	cmp	r1, #0
  410216:	f000 80e2 	beq.w	4103de <_realloc_r+0x1d6>
  41021a:	f7ff fb91 	bl	40f940 <__malloc_lock>
  41021e:	f108 060b 	add.w	r6, r8, #11
  410222:	f854 3c04 	ldr.w	r3, [r4, #-4]
  410226:	2e16      	cmp	r6, #22
  410228:	f023 0503 	bic.w	r5, r3, #3
  41022c:	f1a4 0708 	sub.w	r7, r4, #8
  410230:	d84b      	bhi.n	4102ca <_realloc_r+0xc2>
  410232:	2110      	movs	r1, #16
  410234:	460e      	mov	r6, r1
  410236:	45b0      	cmp	r8, r6
  410238:	d84c      	bhi.n	4102d4 <_realloc_r+0xcc>
  41023a:	428d      	cmp	r5, r1
  41023c:	da78      	bge.n	410330 <_realloc_r+0x128>
  41023e:	f8df b390 	ldr.w	fp, [pc, #912]	; 4105d0 <_realloc_r+0x3c8>
  410242:	f8db e008 	ldr.w	lr, [fp, #8]
  410246:	1978      	adds	r0, r7, r5
  410248:	4586      	cmp	lr, r0
  41024a:	f000 80ce 	beq.w	4103ea <_realloc_r+0x1e2>
  41024e:	6842      	ldr	r2, [r0, #4]
  410250:	f022 0c01 	bic.w	ip, r2, #1
  410254:	4484      	add	ip, r0
  410256:	f8dc c004 	ldr.w	ip, [ip, #4]
  41025a:	f01c 0f01 	tst.w	ip, #1
  41025e:	d07a      	beq.n	410356 <_realloc_r+0x14e>
  410260:	2200      	movs	r2, #0
  410262:	4610      	mov	r0, r2
  410264:	07db      	lsls	r3, r3, #31
  410266:	f100 8092 	bmi.w	41038e <_realloc_r+0x186>
  41026a:	f854 3c08 	ldr.w	r3, [r4, #-8]
  41026e:	ebc3 0a07 	rsb	sl, r3, r7
  410272:	f8da 3004 	ldr.w	r3, [sl, #4]
  410276:	f023 0303 	bic.w	r3, r3, #3
  41027a:	442b      	add	r3, r5
  41027c:	b388      	cbz	r0, 4102e2 <_realloc_r+0xda>
  41027e:	4570      	cmp	r0, lr
  410280:	f000 80ed 	beq.w	41045e <_realloc_r+0x256>
  410284:	eb02 0e03 	add.w	lr, r2, r3
  410288:	458e      	cmp	lr, r1
  41028a:	db2a      	blt.n	4102e2 <_realloc_r+0xda>
  41028c:	68c3      	ldr	r3, [r0, #12]
  41028e:	6882      	ldr	r2, [r0, #8]
  410290:	4657      	mov	r7, sl
  410292:	60d3      	str	r3, [r2, #12]
  410294:	609a      	str	r2, [r3, #8]
  410296:	f857 1f08 	ldr.w	r1, [r7, #8]!
  41029a:	f8da 300c 	ldr.w	r3, [sl, #12]
  41029e:	60cb      	str	r3, [r1, #12]
  4102a0:	1f2a      	subs	r2, r5, #4
  4102a2:	2a24      	cmp	r2, #36	; 0x24
  4102a4:	6099      	str	r1, [r3, #8]
  4102a6:	f200 8126 	bhi.w	4104f6 <_realloc_r+0x2ee>
  4102aa:	2a13      	cmp	r2, #19
  4102ac:	f240 80b3 	bls.w	410416 <_realloc_r+0x20e>
  4102b0:	6823      	ldr	r3, [r4, #0]
  4102b2:	f8ca 3008 	str.w	r3, [sl, #8]
  4102b6:	6863      	ldr	r3, [r4, #4]
  4102b8:	f8ca 300c 	str.w	r3, [sl, #12]
  4102bc:	2a1b      	cmp	r2, #27
  4102be:	f200 8130 	bhi.w	410522 <_realloc_r+0x31a>
  4102c2:	3408      	adds	r4, #8
  4102c4:	f10a 0310 	add.w	r3, sl, #16
  4102c8:	e0a6      	b.n	410418 <_realloc_r+0x210>
  4102ca:	f026 0607 	bic.w	r6, r6, #7
  4102ce:	2e00      	cmp	r6, #0
  4102d0:	4631      	mov	r1, r6
  4102d2:	dab0      	bge.n	410236 <_realloc_r+0x2e>
  4102d4:	230c      	movs	r3, #12
  4102d6:	2000      	movs	r0, #0
  4102d8:	f8c9 3000 	str.w	r3, [r9]
  4102dc:	b003      	add	sp, #12
  4102de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4102e2:	428b      	cmp	r3, r1
  4102e4:	db53      	blt.n	41038e <_realloc_r+0x186>
  4102e6:	4657      	mov	r7, sl
  4102e8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4102ec:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4102f0:	1f2a      	subs	r2, r5, #4
  4102f2:	2a24      	cmp	r2, #36	; 0x24
  4102f4:	60c1      	str	r1, [r0, #12]
  4102f6:	6088      	str	r0, [r1, #8]
  4102f8:	f200 8109 	bhi.w	41050e <_realloc_r+0x306>
  4102fc:	2a13      	cmp	r2, #19
  4102fe:	f240 8104 	bls.w	41050a <_realloc_r+0x302>
  410302:	6821      	ldr	r1, [r4, #0]
  410304:	f8ca 1008 	str.w	r1, [sl, #8]
  410308:	6861      	ldr	r1, [r4, #4]
  41030a:	f8ca 100c 	str.w	r1, [sl, #12]
  41030e:	2a1b      	cmp	r2, #27
  410310:	f200 811c 	bhi.w	41054c <_realloc_r+0x344>
  410314:	3408      	adds	r4, #8
  410316:	f10a 0210 	add.w	r2, sl, #16
  41031a:	6821      	ldr	r1, [r4, #0]
  41031c:	6011      	str	r1, [r2, #0]
  41031e:	6861      	ldr	r1, [r4, #4]
  410320:	6051      	str	r1, [r2, #4]
  410322:	68a1      	ldr	r1, [r4, #8]
  410324:	6091      	str	r1, [r2, #8]
  410326:	461d      	mov	r5, r3
  410328:	f8da 3004 	ldr.w	r3, [sl, #4]
  41032c:	463c      	mov	r4, r7
  41032e:	4657      	mov	r7, sl
  410330:	1baa      	subs	r2, r5, r6
  410332:	2a0f      	cmp	r2, #15
  410334:	f003 0301 	and.w	r3, r3, #1
  410338:	d819      	bhi.n	41036e <_realloc_r+0x166>
  41033a:	432b      	orrs	r3, r5
  41033c:	443d      	add	r5, r7
  41033e:	607b      	str	r3, [r7, #4]
  410340:	686b      	ldr	r3, [r5, #4]
  410342:	f043 0301 	orr.w	r3, r3, #1
  410346:	606b      	str	r3, [r5, #4]
  410348:	4648      	mov	r0, r9
  41034a:	f7ff fafb 	bl	40f944 <__malloc_unlock>
  41034e:	4620      	mov	r0, r4
  410350:	b003      	add	sp, #12
  410352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410356:	f022 0203 	bic.w	r2, r2, #3
  41035a:	eb02 0c05 	add.w	ip, r2, r5
  41035e:	458c      	cmp	ip, r1
  410360:	db80      	blt.n	410264 <_realloc_r+0x5c>
  410362:	68c2      	ldr	r2, [r0, #12]
  410364:	6881      	ldr	r1, [r0, #8]
  410366:	4665      	mov	r5, ip
  410368:	60ca      	str	r2, [r1, #12]
  41036a:	6091      	str	r1, [r2, #8]
  41036c:	e7e0      	b.n	410330 <_realloc_r+0x128>
  41036e:	19b9      	adds	r1, r7, r6
  410370:	f042 0001 	orr.w	r0, r2, #1
  410374:	431e      	orrs	r6, r3
  410376:	440a      	add	r2, r1
  410378:	607e      	str	r6, [r7, #4]
  41037a:	6048      	str	r0, [r1, #4]
  41037c:	6853      	ldr	r3, [r2, #4]
  41037e:	f043 0301 	orr.w	r3, r3, #1
  410382:	3108      	adds	r1, #8
  410384:	6053      	str	r3, [r2, #4]
  410386:	4648      	mov	r0, r9
  410388:	f7fe fc2a 	bl	40ebe0 <_free_r>
  41038c:	e7dc      	b.n	410348 <_realloc_r+0x140>
  41038e:	4641      	mov	r1, r8
  410390:	4648      	mov	r0, r9
  410392:	f7fe ff4d 	bl	40f230 <_malloc_r>
  410396:	4680      	mov	r8, r0
  410398:	b1d0      	cbz	r0, 4103d0 <_realloc_r+0x1c8>
  41039a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  41039e:	f023 0201 	bic.w	r2, r3, #1
  4103a2:	443a      	add	r2, r7
  4103a4:	f1a0 0108 	sub.w	r1, r0, #8
  4103a8:	4291      	cmp	r1, r2
  4103aa:	f000 809e 	beq.w	4104ea <_realloc_r+0x2e2>
  4103ae:	1f2a      	subs	r2, r5, #4
  4103b0:	2a24      	cmp	r2, #36	; 0x24
  4103b2:	d850      	bhi.n	410456 <_realloc_r+0x24e>
  4103b4:	2a13      	cmp	r2, #19
  4103b6:	d823      	bhi.n	410400 <_realloc_r+0x1f8>
  4103b8:	4603      	mov	r3, r0
  4103ba:	4622      	mov	r2, r4
  4103bc:	6811      	ldr	r1, [r2, #0]
  4103be:	6019      	str	r1, [r3, #0]
  4103c0:	6851      	ldr	r1, [r2, #4]
  4103c2:	6059      	str	r1, [r3, #4]
  4103c4:	6892      	ldr	r2, [r2, #8]
  4103c6:	609a      	str	r2, [r3, #8]
  4103c8:	4621      	mov	r1, r4
  4103ca:	4648      	mov	r0, r9
  4103cc:	f7fe fc08 	bl	40ebe0 <_free_r>
  4103d0:	4648      	mov	r0, r9
  4103d2:	f7ff fab7 	bl	40f944 <__malloc_unlock>
  4103d6:	4640      	mov	r0, r8
  4103d8:	b003      	add	sp, #12
  4103da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4103de:	4611      	mov	r1, r2
  4103e0:	b003      	add	sp, #12
  4103e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4103e6:	f7fe bf23 	b.w	40f230 <_malloc_r>
  4103ea:	f8de 2004 	ldr.w	r2, [lr, #4]
  4103ee:	f022 0203 	bic.w	r2, r2, #3
  4103f2:	1950      	adds	r0, r2, r5
  4103f4:	f106 0c10 	add.w	ip, r6, #16
  4103f8:	4560      	cmp	r0, ip
  4103fa:	da19      	bge.n	410430 <_realloc_r+0x228>
  4103fc:	4670      	mov	r0, lr
  4103fe:	e731      	b.n	410264 <_realloc_r+0x5c>
  410400:	6823      	ldr	r3, [r4, #0]
  410402:	6003      	str	r3, [r0, #0]
  410404:	6863      	ldr	r3, [r4, #4]
  410406:	6043      	str	r3, [r0, #4]
  410408:	2a1b      	cmp	r2, #27
  41040a:	d863      	bhi.n	4104d4 <_realloc_r+0x2cc>
  41040c:	f100 0308 	add.w	r3, r0, #8
  410410:	f104 0208 	add.w	r2, r4, #8
  410414:	e7d2      	b.n	4103bc <_realloc_r+0x1b4>
  410416:	463b      	mov	r3, r7
  410418:	6822      	ldr	r2, [r4, #0]
  41041a:	601a      	str	r2, [r3, #0]
  41041c:	6862      	ldr	r2, [r4, #4]
  41041e:	605a      	str	r2, [r3, #4]
  410420:	68a2      	ldr	r2, [r4, #8]
  410422:	609a      	str	r2, [r3, #8]
  410424:	463c      	mov	r4, r7
  410426:	4675      	mov	r5, lr
  410428:	f8da 3004 	ldr.w	r3, [sl, #4]
  41042c:	4657      	mov	r7, sl
  41042e:	e77f      	b.n	410330 <_realloc_r+0x128>
  410430:	4437      	add	r7, r6
  410432:	1b83      	subs	r3, r0, r6
  410434:	f043 0301 	orr.w	r3, r3, #1
  410438:	f8cb 7008 	str.w	r7, [fp, #8]
  41043c:	607b      	str	r3, [r7, #4]
  41043e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  410442:	f003 0301 	and.w	r3, r3, #1
  410446:	431e      	orrs	r6, r3
  410448:	4648      	mov	r0, r9
  41044a:	f844 6c04 	str.w	r6, [r4, #-4]
  41044e:	f7ff fa79 	bl	40f944 <__malloc_unlock>
  410452:	4620      	mov	r0, r4
  410454:	e77c      	b.n	410350 <_realloc_r+0x148>
  410456:	4621      	mov	r1, r4
  410458:	f7ff fa12 	bl	40f880 <memmove>
  41045c:	e7b4      	b.n	4103c8 <_realloc_r+0x1c0>
  41045e:	eb02 0c03 	add.w	ip, r2, r3
  410462:	f106 0210 	add.w	r2, r6, #16
  410466:	4594      	cmp	ip, r2
  410468:	f6ff af3b 	blt.w	4102e2 <_realloc_r+0xda>
  41046c:	4657      	mov	r7, sl
  41046e:	f8da 300c 	ldr.w	r3, [sl, #12]
  410472:	f857 1f08 	ldr.w	r1, [r7, #8]!
  410476:	1f2a      	subs	r2, r5, #4
  410478:	2a24      	cmp	r2, #36	; 0x24
  41047a:	60cb      	str	r3, [r1, #12]
  41047c:	6099      	str	r1, [r3, #8]
  41047e:	f200 8087 	bhi.w	410590 <_realloc_r+0x388>
  410482:	2a13      	cmp	r2, #19
  410484:	d978      	bls.n	410578 <_realloc_r+0x370>
  410486:	6823      	ldr	r3, [r4, #0]
  410488:	f8ca 3008 	str.w	r3, [sl, #8]
  41048c:	6863      	ldr	r3, [r4, #4]
  41048e:	f8ca 300c 	str.w	r3, [sl, #12]
  410492:	2a1b      	cmp	r2, #27
  410494:	f200 8085 	bhi.w	4105a2 <_realloc_r+0x39a>
  410498:	3408      	adds	r4, #8
  41049a:	f10a 0310 	add.w	r3, sl, #16
  41049e:	6822      	ldr	r2, [r4, #0]
  4104a0:	601a      	str	r2, [r3, #0]
  4104a2:	6862      	ldr	r2, [r4, #4]
  4104a4:	605a      	str	r2, [r3, #4]
  4104a6:	68a2      	ldr	r2, [r4, #8]
  4104a8:	609a      	str	r2, [r3, #8]
  4104aa:	eb0a 0306 	add.w	r3, sl, r6
  4104ae:	ebc6 020c 	rsb	r2, r6, ip
  4104b2:	f042 0201 	orr.w	r2, r2, #1
  4104b6:	f8cb 3008 	str.w	r3, [fp, #8]
  4104ba:	605a      	str	r2, [r3, #4]
  4104bc:	f8da 3004 	ldr.w	r3, [sl, #4]
  4104c0:	f003 0301 	and.w	r3, r3, #1
  4104c4:	431e      	orrs	r6, r3
  4104c6:	4648      	mov	r0, r9
  4104c8:	f8ca 6004 	str.w	r6, [sl, #4]
  4104cc:	f7ff fa3a 	bl	40f944 <__malloc_unlock>
  4104d0:	4638      	mov	r0, r7
  4104d2:	e73d      	b.n	410350 <_realloc_r+0x148>
  4104d4:	68a3      	ldr	r3, [r4, #8]
  4104d6:	6083      	str	r3, [r0, #8]
  4104d8:	68e3      	ldr	r3, [r4, #12]
  4104da:	60c3      	str	r3, [r0, #12]
  4104dc:	2a24      	cmp	r2, #36	; 0x24
  4104de:	d02c      	beq.n	41053a <_realloc_r+0x332>
  4104e0:	f100 0310 	add.w	r3, r0, #16
  4104e4:	f104 0210 	add.w	r2, r4, #16
  4104e8:	e768      	b.n	4103bc <_realloc_r+0x1b4>
  4104ea:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4104ee:	f022 0203 	bic.w	r2, r2, #3
  4104f2:	4415      	add	r5, r2
  4104f4:	e71c      	b.n	410330 <_realloc_r+0x128>
  4104f6:	4621      	mov	r1, r4
  4104f8:	4638      	mov	r0, r7
  4104fa:	4675      	mov	r5, lr
  4104fc:	463c      	mov	r4, r7
  4104fe:	f7ff f9bf 	bl	40f880 <memmove>
  410502:	4657      	mov	r7, sl
  410504:	f8da 3004 	ldr.w	r3, [sl, #4]
  410508:	e712      	b.n	410330 <_realloc_r+0x128>
  41050a:	463a      	mov	r2, r7
  41050c:	e705      	b.n	41031a <_realloc_r+0x112>
  41050e:	4621      	mov	r1, r4
  410510:	4638      	mov	r0, r7
  410512:	461d      	mov	r5, r3
  410514:	463c      	mov	r4, r7
  410516:	f7ff f9b3 	bl	40f880 <memmove>
  41051a:	4657      	mov	r7, sl
  41051c:	f8da 3004 	ldr.w	r3, [sl, #4]
  410520:	e706      	b.n	410330 <_realloc_r+0x128>
  410522:	68a3      	ldr	r3, [r4, #8]
  410524:	f8ca 3010 	str.w	r3, [sl, #16]
  410528:	68e3      	ldr	r3, [r4, #12]
  41052a:	f8ca 3014 	str.w	r3, [sl, #20]
  41052e:	2a24      	cmp	r2, #36	; 0x24
  410530:	d018      	beq.n	410564 <_realloc_r+0x35c>
  410532:	3410      	adds	r4, #16
  410534:	f10a 0318 	add.w	r3, sl, #24
  410538:	e76e      	b.n	410418 <_realloc_r+0x210>
  41053a:	6923      	ldr	r3, [r4, #16]
  41053c:	6103      	str	r3, [r0, #16]
  41053e:	6963      	ldr	r3, [r4, #20]
  410540:	6143      	str	r3, [r0, #20]
  410542:	f104 0218 	add.w	r2, r4, #24
  410546:	f100 0318 	add.w	r3, r0, #24
  41054a:	e737      	b.n	4103bc <_realloc_r+0x1b4>
  41054c:	68a1      	ldr	r1, [r4, #8]
  41054e:	f8ca 1010 	str.w	r1, [sl, #16]
  410552:	68e1      	ldr	r1, [r4, #12]
  410554:	f8ca 1014 	str.w	r1, [sl, #20]
  410558:	2a24      	cmp	r2, #36	; 0x24
  41055a:	d00f      	beq.n	41057c <_realloc_r+0x374>
  41055c:	3410      	adds	r4, #16
  41055e:	f10a 0218 	add.w	r2, sl, #24
  410562:	e6da      	b.n	41031a <_realloc_r+0x112>
  410564:	6923      	ldr	r3, [r4, #16]
  410566:	f8ca 3018 	str.w	r3, [sl, #24]
  41056a:	6963      	ldr	r3, [r4, #20]
  41056c:	f8ca 301c 	str.w	r3, [sl, #28]
  410570:	3418      	adds	r4, #24
  410572:	f10a 0320 	add.w	r3, sl, #32
  410576:	e74f      	b.n	410418 <_realloc_r+0x210>
  410578:	463b      	mov	r3, r7
  41057a:	e790      	b.n	41049e <_realloc_r+0x296>
  41057c:	6922      	ldr	r2, [r4, #16]
  41057e:	f8ca 2018 	str.w	r2, [sl, #24]
  410582:	6962      	ldr	r2, [r4, #20]
  410584:	f8ca 201c 	str.w	r2, [sl, #28]
  410588:	3418      	adds	r4, #24
  41058a:	f10a 0220 	add.w	r2, sl, #32
  41058e:	e6c4      	b.n	41031a <_realloc_r+0x112>
  410590:	4621      	mov	r1, r4
  410592:	4638      	mov	r0, r7
  410594:	f8cd c004 	str.w	ip, [sp, #4]
  410598:	f7ff f972 	bl	40f880 <memmove>
  41059c:	f8dd c004 	ldr.w	ip, [sp, #4]
  4105a0:	e783      	b.n	4104aa <_realloc_r+0x2a2>
  4105a2:	68a3      	ldr	r3, [r4, #8]
  4105a4:	f8ca 3010 	str.w	r3, [sl, #16]
  4105a8:	68e3      	ldr	r3, [r4, #12]
  4105aa:	f8ca 3014 	str.w	r3, [sl, #20]
  4105ae:	2a24      	cmp	r2, #36	; 0x24
  4105b0:	d003      	beq.n	4105ba <_realloc_r+0x3b2>
  4105b2:	3410      	adds	r4, #16
  4105b4:	f10a 0318 	add.w	r3, sl, #24
  4105b8:	e771      	b.n	41049e <_realloc_r+0x296>
  4105ba:	6923      	ldr	r3, [r4, #16]
  4105bc:	f8ca 3018 	str.w	r3, [sl, #24]
  4105c0:	6963      	ldr	r3, [r4, #20]
  4105c2:	f8ca 301c 	str.w	r3, [sl, #28]
  4105c6:	3418      	adds	r4, #24
  4105c8:	f10a 0320 	add.w	r3, sl, #32
  4105cc:	e767      	b.n	41049e <_realloc_r+0x296>
  4105ce:	bf00      	nop
  4105d0:	200006a4 	.word	0x200006a4

004105d4 <__fpclassifyd>:
  4105d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  4105d8:	b410      	push	{r4}
  4105da:	d008      	beq.n	4105ee <__fpclassifyd+0x1a>
  4105dc:	4a0f      	ldr	r2, [pc, #60]	; (41061c <__fpclassifyd+0x48>)
  4105de:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  4105e2:	4294      	cmp	r4, r2
  4105e4:	d80a      	bhi.n	4105fc <__fpclassifyd+0x28>
  4105e6:	2004      	movs	r0, #4
  4105e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4105ec:	4770      	bx	lr
  4105ee:	2800      	cmp	r0, #0
  4105f0:	bf0c      	ite	eq
  4105f2:	2002      	moveq	r0, #2
  4105f4:	2003      	movne	r0, #3
  4105f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4105fa:	4770      	bx	lr
  4105fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  410600:	d201      	bcs.n	410606 <__fpclassifyd+0x32>
  410602:	2003      	movs	r0, #3
  410604:	e7f7      	b.n	4105f6 <__fpclassifyd+0x22>
  410606:	4a06      	ldr	r2, [pc, #24]	; (410620 <__fpclassifyd+0x4c>)
  410608:	4293      	cmp	r3, r2
  41060a:	d001      	beq.n	410610 <__fpclassifyd+0x3c>
  41060c:	2000      	movs	r0, #0
  41060e:	e7f2      	b.n	4105f6 <__fpclassifyd+0x22>
  410610:	f1d0 0001 	rsbs	r0, r0, #1
  410614:	bf38      	it	cc
  410616:	2000      	movcc	r0, #0
  410618:	e7ed      	b.n	4105f6 <__fpclassifyd+0x22>
  41061a:	bf00      	nop
  41061c:	7fdfffff 	.word	0x7fdfffff
  410620:	7ff00000 	.word	0x7ff00000

00410624 <_sbrk_r>:
  410624:	b538      	push	{r3, r4, r5, lr}
  410626:	4c07      	ldr	r4, [pc, #28]	; (410644 <_sbrk_r+0x20>)
  410628:	2300      	movs	r3, #0
  41062a:	4605      	mov	r5, r0
  41062c:	4608      	mov	r0, r1
  41062e:	6023      	str	r3, [r4, #0]
  410630:	f7f9 f930 	bl	409894 <_sbrk>
  410634:	1c43      	adds	r3, r0, #1
  410636:	d000      	beq.n	41063a <_sbrk_r+0x16>
  410638:	bd38      	pop	{r3, r4, r5, pc}
  41063a:	6823      	ldr	r3, [r4, #0]
  41063c:	2b00      	cmp	r3, #0
  41063e:	d0fb      	beq.n	410638 <_sbrk_r+0x14>
  410640:	602b      	str	r3, [r5, #0]
  410642:	bd38      	pop	{r3, r4, r5, pc}
  410644:	2000c00c 	.word	0x2000c00c

00410648 <__sccl>:
  410648:	b470      	push	{r4, r5, r6}
  41064a:	780c      	ldrb	r4, [r1, #0]
  41064c:	2c5e      	cmp	r4, #94	; 0x5e
  41064e:	d02e      	beq.n	4106ae <__sccl+0x66>
  410650:	2200      	movs	r2, #0
  410652:	1c4d      	adds	r5, r1, #1
  410654:	4616      	mov	r6, r2
  410656:	2300      	movs	r3, #0
  410658:	54c2      	strb	r2, [r0, r3]
  41065a:	3301      	adds	r3, #1
  41065c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  410660:	d1fa      	bne.n	410658 <__sccl+0x10>
  410662:	b184      	cbz	r4, 410686 <__sccl+0x3e>
  410664:	f086 0201 	eor.w	r2, r6, #1
  410668:	5502      	strb	r2, [r0, r4]
  41066a:	1c6e      	adds	r6, r5, #1
  41066c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  410670:	2b2d      	cmp	r3, #45	; 0x2d
  410672:	d00e      	beq.n	410692 <__sccl+0x4a>
  410674:	2b5d      	cmp	r3, #93	; 0x5d
  410676:	d009      	beq.n	41068c <__sccl+0x44>
  410678:	b113      	cbz	r3, 410680 <__sccl+0x38>
  41067a:	461c      	mov	r4, r3
  41067c:	4635      	mov	r5, r6
  41067e:	e7f3      	b.n	410668 <__sccl+0x20>
  410680:	4628      	mov	r0, r5
  410682:	bc70      	pop	{r4, r5, r6}
  410684:	4770      	bx	lr
  410686:	1e68      	subs	r0, r5, #1
  410688:	bc70      	pop	{r4, r5, r6}
  41068a:	4770      	bx	lr
  41068c:	4630      	mov	r0, r6
  41068e:	bc70      	pop	{r4, r5, r6}
  410690:	4770      	bx	lr
  410692:	7869      	ldrb	r1, [r5, #1]
  410694:	295d      	cmp	r1, #93	; 0x5d
  410696:	d0f0      	beq.n	41067a <__sccl+0x32>
  410698:	428c      	cmp	r4, r1
  41069a:	dcee      	bgt.n	41067a <__sccl+0x32>
  41069c:	3502      	adds	r5, #2
  41069e:	1903      	adds	r3, r0, r4
  4106a0:	3401      	adds	r4, #1
  4106a2:	42a1      	cmp	r1, r4
  4106a4:	f803 2f01 	strb.w	r2, [r3, #1]!
  4106a8:	dcfa      	bgt.n	4106a0 <__sccl+0x58>
  4106aa:	3602      	adds	r6, #2
  4106ac:	e7de      	b.n	41066c <__sccl+0x24>
  4106ae:	2201      	movs	r2, #1
  4106b0:	784c      	ldrb	r4, [r1, #1]
  4106b2:	4616      	mov	r6, r2
  4106b4:	1c8d      	adds	r5, r1, #2
  4106b6:	e7ce      	b.n	410656 <__sccl+0xe>

004106b8 <nanf>:
  4106b8:	4800      	ldr	r0, [pc, #0]	; (4106bc <nanf+0x4>)
  4106ba:	4770      	bx	lr
  4106bc:	7fc00000 	.word	0x7fc00000

004106c0 <sulp>:
  4106c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4106c4:	460d      	mov	r5, r1
  4106c6:	4690      	mov	r8, r2
  4106c8:	f7ff fc36 	bl	40ff38 <__ulp>
  4106cc:	4606      	mov	r6, r0
  4106ce:	460f      	mov	r7, r1
  4106d0:	f1b8 0f00 	cmp.w	r8, #0
  4106d4:	d00f      	beq.n	4106f6 <sulp+0x36>
  4106d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
  4106da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  4106de:	2b00      	cmp	r3, #0
  4106e0:	dd09      	ble.n	4106f6 <sulp+0x36>
  4106e2:	051c      	lsls	r4, r3, #20
  4106e4:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
  4106e8:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
  4106ec:	2200      	movs	r2, #0
  4106ee:	f002 fa97 	bl	412c20 <__aeabi_dmul>
  4106f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4106f6:	4630      	mov	r0, r6
  4106f8:	4639      	mov	r1, r7
  4106fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4106fe:	bf00      	nop

00410700 <_strtod_r>:
  410700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410704:	b09f      	sub	sp, #124	; 0x7c
  410706:	460d      	mov	r5, r1
  410708:	9119      	str	r1, [sp, #100]	; 0x64
  41070a:	4683      	mov	fp, r0
  41070c:	9205      	str	r2, [sp, #20]
  41070e:	2000      	movs	r0, #0
  410710:	460a      	mov	r2, r1
  410712:	2100      	movs	r1, #0
  410714:	e9cd 0102 	strd	r0, r1, [sp, #8]
  410718:	2300      	movs	r3, #0
  41071a:	931a      	str	r3, [sp, #104]	; 0x68
  41071c:	4616      	mov	r6, r2
  41071e:	f812 4b01 	ldrb.w	r4, [r2], #1
  410722:	2c2d      	cmp	r4, #45	; 0x2d
  410724:	f200 8158 	bhi.w	4109d8 <_strtod_r+0x2d8>
  410728:	e8df f014 	tbh	[pc, r4, lsl #1]
  41072c:	01560039 	.word	0x01560039
  410730:	01560156 	.word	0x01560156
  410734:	01560156 	.word	0x01560156
  410738:	01560156 	.word	0x01560156
  41073c:	007d0156 	.word	0x007d0156
  410740:	007d007d 	.word	0x007d007d
  410744:	007d007d 	.word	0x007d007d
  410748:	01560156 	.word	0x01560156
  41074c:	01560156 	.word	0x01560156
  410750:	01560156 	.word	0x01560156
  410754:	01560156 	.word	0x01560156
  410758:	01560156 	.word	0x01560156
  41075c:	01560156 	.word	0x01560156
  410760:	01560156 	.word	0x01560156
  410764:	01560156 	.word	0x01560156
  410768:	01560156 	.word	0x01560156
  41076c:	0156007d 	.word	0x0156007d
  410770:	01560156 	.word	0x01560156
  410774:	01560156 	.word	0x01560156
  410778:	01560156 	.word	0x01560156
  41077c:	01560156 	.word	0x01560156
  410780:	004d0156 	.word	0x004d0156
  410784:	007f0156 	.word	0x007f0156
  410788:	2300      	movs	r3, #0
  41078a:	2101      	movs	r1, #1
  41078c:	469a      	mov	sl, r3
  41078e:	910b      	str	r1, [sp, #44]	; 0x2c
  410790:	2800      	cmp	r0, #0
  410792:	f040 8151 	bne.w	410a38 <_strtod_r+0x338>
  410796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410798:	2a00      	cmp	r2, #0
  41079a:	f040 814d 	bne.w	410a38 <_strtod_r+0x338>
  41079e:	2000      	movs	r0, #0
  4107a0:	f04f 0800 	mov.w	r8, #0
  4107a4:	f04f 0900 	mov.w	r9, #0
  4107a8:	9519      	str	r5, [sp, #100]	; 0x64
  4107aa:	9007      	str	r0, [sp, #28]
  4107ac:	9805      	ldr	r0, [sp, #20]
  4107ae:	b108      	cbz	r0, 4107b4 <_strtod_r+0xb4>
  4107b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4107b2:	6003      	str	r3, [r0, #0]
  4107b4:	9907      	ldr	r1, [sp, #28]
  4107b6:	2900      	cmp	r1, #0
  4107b8:	f040 809e 	bne.w	4108f8 <_strtod_r+0x1f8>
  4107bc:	4640      	mov	r0, r8
  4107be:	4649      	mov	r1, r9
  4107c0:	b01f      	add	sp, #124	; 0x7c
  4107c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4107c6:	2300      	movs	r3, #0
  4107c8:	9307      	str	r3, [sp, #28]
  4107ca:	1c73      	adds	r3, r6, #1
  4107cc:	9319      	str	r3, [sp, #100]	; 0x64
  4107ce:	7874      	ldrb	r4, [r6, #1]
  4107d0:	2c00      	cmp	r4, #0
  4107d2:	d0e4      	beq.n	41079e <_strtod_r+0x9e>
  4107d4:	2c30      	cmp	r4, #48	; 0x30
  4107d6:	461e      	mov	r6, r3
  4107d8:	f000 8103 	beq.w	4109e2 <_strtod_r+0x2e2>
  4107dc:	2300      	movs	r3, #0
  4107de:	9606      	str	r6, [sp, #24]
  4107e0:	930a      	str	r3, [sp, #40]	; 0x28
  4107e2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  4107e6:	2700      	movs	r7, #0
  4107e8:	2b09      	cmp	r3, #9
  4107ea:	46b9      	mov	r9, r7
  4107ec:	463e      	mov	r6, r7
  4107ee:	d81f      	bhi.n	410830 <_strtod_r+0x130>
  4107f0:	9806      	ldr	r0, [sp, #24]
  4107f2:	1c43      	adds	r3, r0, #1
  4107f4:	e00f      	b.n	410816 <_strtod_r+0x116>
  4107f6:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  4107fa:	eb04 0949 	add.w	r9, r4, r9, lsl #1
  4107fe:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
  410802:	9319      	str	r3, [sp, #100]	; 0x64
  410804:	4698      	mov	r8, r3
  410806:	f813 4b01 	ldrb.w	r4, [r3], #1
  41080a:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  41080e:	2a09      	cmp	r2, #9
  410810:	f106 0601 	add.w	r6, r6, #1
  410814:	d80e      	bhi.n	410834 <_strtod_r+0x134>
  410816:	2e08      	cmp	r6, #8
  410818:	dded      	ble.n	4107f6 <_strtod_r+0xf6>
  41081a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  41081e:	eb04 0747 	add.w	r7, r4, r7, lsl #1
  410822:	3f30      	subs	r7, #48	; 0x30
  410824:	e7ed      	b.n	410802 <_strtod_r+0x102>
  410826:	9219      	str	r2, [sp, #100]	; 0x64
  410828:	e778      	b.n	41071c <_strtod_r+0x1c>
  41082a:	2201      	movs	r2, #1
  41082c:	9207      	str	r2, [sp, #28]
  41082e:	e7cc      	b.n	4107ca <_strtod_r+0xca>
  410830:	f8dd 8018 	ldr.w	r8, [sp, #24]
  410834:	4658      	mov	r0, fp
  410836:	f7fe fc6b 	bl	40f110 <_localeconv_r>
  41083a:	f8d0 a000 	ldr.w	sl, [r0]
  41083e:	4658      	mov	r0, fp
  410840:	f7fe fc66 	bl	40f110 <_localeconv_r>
  410844:	6800      	ldr	r0, [r0, #0]
  410846:	f7f9 fe5d 	bl	40a504 <strlen>
  41084a:	4651      	mov	r1, sl
  41084c:	4602      	mov	r2, r0
  41084e:	4640      	mov	r0, r8
  410850:	f7f9 fe88 	bl	40a564 <strncmp>
  410854:	4680      	mov	r8, r0
  410856:	2800      	cmp	r0, #0
  410858:	f000 8146 	beq.w	410ae8 <_strtod_r+0x3e8>
  41085c:	2000      	movs	r0, #0
  41085e:	4603      	mov	r3, r0
  410860:	900b      	str	r0, [sp, #44]	; 0x2c
  410862:	46b2      	mov	sl, r6
  410864:	f024 0220 	bic.w	r2, r4, #32
  410868:	2a45      	cmp	r2, #69	; 0x45
  41086a:	f000 80e1 	beq.w	410a30 <_strtod_r+0x330>
  41086e:	2100      	movs	r1, #0
  410870:	f1ba 0f00 	cmp.w	sl, #0
  410874:	d054      	beq.n	410920 <_strtod_r+0x220>
  410876:	1acb      	subs	r3, r1, r3
  410878:	4648      	mov	r0, r9
  41087a:	9308      	str	r3, [sp, #32]
  41087c:	f002 f95a 	bl	412b34 <__aeabi_ui2d>
  410880:	f1ba 0f10 	cmp.w	sl, #16
  410884:	bfb4      	ite	lt
  410886:	46d0      	movlt	r8, sl
  410888:	f04f 0810 	movge.w	r8, #16
  41088c:	2e00      	cmp	r6, #0
  41088e:	bf08      	it	eq
  410890:	4656      	moveq	r6, sl
  410892:	f1b8 0f09 	cmp.w	r8, #9
  410896:	e9cd 0102 	strd	r0, r1, [sp, #8]
  41089a:	dd13      	ble.n	4108c4 <_strtod_r+0x1c4>
  41089c:	4ba0      	ldr	r3, [pc, #640]	; (410b20 <_strtod_r+0x420>)
  41089e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4108a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  4108a6:	f002 f9bb 	bl	412c20 <__aeabi_dmul>
  4108aa:	4604      	mov	r4, r0
  4108ac:	4638      	mov	r0, r7
  4108ae:	460d      	mov	r5, r1
  4108b0:	f002 f940 	bl	412b34 <__aeabi_ui2d>
  4108b4:	4602      	mov	r2, r0
  4108b6:	460b      	mov	r3, r1
  4108b8:	4620      	mov	r0, r4
  4108ba:	4629      	mov	r1, r5
  4108bc:	f001 fffe 	bl	4128bc <__adddf3>
  4108c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4108c4:	f1ba 0f0f 	cmp.w	sl, #15
  4108c8:	f300 812c 	bgt.w	410b24 <_strtod_r+0x424>
  4108cc:	9908      	ldr	r1, [sp, #32]
  4108ce:	2900      	cmp	r1, #0
  4108d0:	f000 80ab 	beq.w	410a2a <_strtod_r+0x32a>
  4108d4:	f340 8580 	ble.w	4113d8 <_strtod_r+0xcd8>
  4108d8:	9a08      	ldr	r2, [sp, #32]
  4108da:	2a16      	cmp	r2, #22
  4108dc:	f300 84ef 	bgt.w	4112be <_strtod_r+0xbbe>
  4108e0:	4b8f      	ldr	r3, [pc, #572]	; (410b20 <_strtod_r+0x420>)
  4108e2:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
  4108e6:	e9da 0100 	ldrd	r0, r1, [sl]
  4108ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4108ee:	f002 f997 	bl	412c20 <__aeabi_dmul>
  4108f2:	4680      	mov	r8, r0
  4108f4:	4689      	mov	r9, r1
  4108f6:	e759      	b.n	4107ac <_strtod_r+0xac>
  4108f8:	4640      	mov	r0, r8
  4108fa:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
  4108fe:	b01f      	add	sp, #124	; 0x7c
  410900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410904:	4633      	mov	r3, r6
  410906:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  41090a:	2a08      	cmp	r2, #8
  41090c:	f240 833c 	bls.w	410f88 <_strtod_r+0x888>
  410910:	f024 0220 	bic.w	r2, r4, #32
  410914:	2a45      	cmp	r2, #69	; 0x45
  410916:	4618      	mov	r0, r3
  410918:	f43f af36 	beq.w	410788 <_strtod_r+0x88>
  41091c:	2101      	movs	r1, #1
  41091e:	910b      	str	r1, [sp, #44]	; 0x2c
  410920:	2800      	cmp	r0, #0
  410922:	d171      	bne.n	410a08 <_strtod_r+0x308>
  410924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410926:	2b00      	cmp	r3, #0
  410928:	d16e      	bne.n	410a08 <_strtod_r+0x308>
  41092a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  41092c:	2800      	cmp	r0, #0
  41092e:	f47f af36 	bne.w	41079e <_strtod_r+0x9e>
  410932:	3c49      	subs	r4, #73	; 0x49
  410934:	2c25      	cmp	r4, #37	; 0x25
  410936:	f63f af32 	bhi.w	41079e <_strtod_r+0x9e>
  41093a:	a101      	add	r1, pc, #4	; (adr r1, 410940 <_strtod_r+0x240>)
  41093c:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
  410940:	00411003 	.word	0x00411003
  410944:	0041079f 	.word	0x0041079f
  410948:	0041079f 	.word	0x0041079f
  41094c:	0041079f 	.word	0x0041079f
  410950:	0041079f 	.word	0x0041079f
  410954:	00410fcb 	.word	0x00410fcb
  410958:	0041079f 	.word	0x0041079f
  41095c:	0041079f 	.word	0x0041079f
  410960:	0041079f 	.word	0x0041079f
  410964:	0041079f 	.word	0x0041079f
  410968:	0041079f 	.word	0x0041079f
  41096c:	0041079f 	.word	0x0041079f
  410970:	0041079f 	.word	0x0041079f
  410974:	0041079f 	.word	0x0041079f
  410978:	0041079f 	.word	0x0041079f
  41097c:	0041079f 	.word	0x0041079f
  410980:	0041079f 	.word	0x0041079f
  410984:	0041079f 	.word	0x0041079f
  410988:	0041079f 	.word	0x0041079f
  41098c:	0041079f 	.word	0x0041079f
  410990:	0041079f 	.word	0x0041079f
  410994:	0041079f 	.word	0x0041079f
  410998:	0041079f 	.word	0x0041079f
  41099c:	0041079f 	.word	0x0041079f
  4109a0:	0041079f 	.word	0x0041079f
  4109a4:	0041079f 	.word	0x0041079f
  4109a8:	0041079f 	.word	0x0041079f
  4109ac:	0041079f 	.word	0x0041079f
  4109b0:	0041079f 	.word	0x0041079f
  4109b4:	0041079f 	.word	0x0041079f
  4109b8:	0041079f 	.word	0x0041079f
  4109bc:	0041079f 	.word	0x0041079f
  4109c0:	00411003 	.word	0x00411003
  4109c4:	0041079f 	.word	0x0041079f
  4109c8:	0041079f 	.word	0x0041079f
  4109cc:	0041079f 	.word	0x0041079f
  4109d0:	0041079f 	.word	0x0041079f
  4109d4:	00410fcb 	.word	0x00410fcb
  4109d8:	2000      	movs	r0, #0
  4109da:	2c30      	cmp	r4, #48	; 0x30
  4109dc:	9007      	str	r0, [sp, #28]
  4109de:	f47f aefd 	bne.w	4107dc <_strtod_r+0xdc>
  4109e2:	7873      	ldrb	r3, [r6, #1]
  4109e4:	2b58      	cmp	r3, #88	; 0x58
  4109e6:	f000 8336 	beq.w	411056 <_strtod_r+0x956>
  4109ea:	2b78      	cmp	r3, #120	; 0x78
  4109ec:	f000 8333 	beq.w	411056 <_strtod_r+0x956>
  4109f0:	3601      	adds	r6, #1
  4109f2:	9619      	str	r6, [sp, #100]	; 0x64
  4109f4:	4633      	mov	r3, r6
  4109f6:	f816 4b01 	ldrb.w	r4, [r6], #1
  4109fa:	2c30      	cmp	r4, #48	; 0x30
  4109fc:	d0f9      	beq.n	4109f2 <_strtod_r+0x2f2>
  4109fe:	b11c      	cbz	r4, 410a08 <_strtod_r+0x308>
  410a00:	9306      	str	r3, [sp, #24]
  410a02:	2301      	movs	r3, #1
  410a04:	930a      	str	r3, [sp, #40]	; 0x28
  410a06:	e6ec      	b.n	4107e2 <_strtod_r+0xe2>
  410a08:	f04f 0800 	mov.w	r8, #0
  410a0c:	f04f 0900 	mov.w	r9, #0
  410a10:	e6cc      	b.n	4107ac <_strtod_r+0xac>
  410a12:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  410a16:	f04f 30ff 	mov.w	r0, #4294967295
  410a1a:	9303      	str	r3, [sp, #12]
  410a1c:	9002      	str	r0, [sp, #8]
  410a1e:	0722      	lsls	r2, r4, #28
  410a20:	bf42      	ittt	mi
  410a22:	9903      	ldrmi	r1, [sp, #12]
  410a24:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
  410a28:	9103      	strmi	r1, [sp, #12]
  410a2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  410a2e:	e6bd      	b.n	4107ac <_strtod_r+0xac>
  410a30:	f1ba 0f00 	cmp.w	sl, #0
  410a34:	f43f aeac 	beq.w	410790 <_strtod_r+0x90>
  410a38:	9d19      	ldr	r5, [sp, #100]	; 0x64
  410a3a:	1c6a      	adds	r2, r5, #1
  410a3c:	9219      	str	r2, [sp, #100]	; 0x64
  410a3e:	786c      	ldrb	r4, [r5, #1]
  410a40:	2c2b      	cmp	r4, #43	; 0x2b
  410a42:	f000 824b 	beq.w	410edc <_strtod_r+0x7dc>
  410a46:	2c2d      	cmp	r4, #45	; 0x2d
  410a48:	f040 8245 	bne.w	410ed6 <_strtod_r+0x7d6>
  410a4c:	2101      	movs	r1, #1
  410a4e:	9108      	str	r1, [sp, #32]
  410a50:	1caa      	adds	r2, r5, #2
  410a52:	9219      	str	r2, [sp, #100]	; 0x64
  410a54:	78ac      	ldrb	r4, [r5, #2]
  410a56:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  410a5a:	2a09      	cmp	r2, #9
  410a5c:	f200 81e5 	bhi.w	410e2a <_strtod_r+0x72a>
  410a60:	2c30      	cmp	r4, #48	; 0x30
  410a62:	d106      	bne.n	410a72 <_strtod_r+0x372>
  410a64:	9a19      	ldr	r2, [sp, #100]	; 0x64
  410a66:	3201      	adds	r2, #1
  410a68:	9219      	str	r2, [sp, #100]	; 0x64
  410a6a:	f812 4b01 	ldrb.w	r4, [r2], #1
  410a6e:	2c30      	cmp	r4, #48	; 0x30
  410a70:	d0fa      	beq.n	410a68 <_strtod_r+0x368>
  410a72:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  410a76:	2a08      	cmp	r2, #8
  410a78:	f63f aef9 	bhi.w	41086e <_strtod_r+0x16e>
  410a7c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  410a7e:	920e      	str	r2, [sp, #56]	; 0x38
  410a80:	f102 0801 	add.w	r8, r2, #1
  410a84:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  410a88:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
  410a8c:	7854      	ldrb	r4, [r2, #1]
  410a8e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  410a92:	2a09      	cmp	r2, #9
  410a94:	d812      	bhi.n	410abc <_strtod_r+0x3bc>
  410a96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  410a98:	f102 0c02 	add.w	ip, r2, #2
  410a9c:	4662      	mov	r2, ip
  410a9e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  410aa2:	9219      	str	r2, [sp, #100]	; 0x64
  410aa4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
  410aa8:	4690      	mov	r8, r2
  410aaa:	f812 4b01 	ldrb.w	r4, [r2], #1
  410aae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  410ab2:	f1bc 0f09 	cmp.w	ip, #9
  410ab6:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
  410aba:	d9f0      	bls.n	410a9e <_strtod_r+0x39e>
  410abc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  410abe:	ebc2 0808 	rsb	r8, r2, r8
  410ac2:	f1b8 0f08 	cmp.w	r8, #8
  410ac6:	f300 83f2 	bgt.w	4112ae <_strtod_r+0xbae>
  410aca:	f644 621f 	movw	r2, #19999	; 0x4e1f
  410ace:	4291      	cmp	r1, r2
  410ad0:	bfa8      	it	ge
  410ad2:	4611      	movge	r1, r2
  410ad4:	9a08      	ldr	r2, [sp, #32]
  410ad6:	2a00      	cmp	r2, #0
  410ad8:	f43f aeca 	beq.w	410870 <_strtod_r+0x170>
  410adc:	4249      	negs	r1, r1
  410ade:	f1ba 0f00 	cmp.w	sl, #0
  410ae2:	f47f aec8 	bne.w	410876 <_strtod_r+0x176>
  410ae6:	e71b      	b.n	410920 <_strtod_r+0x220>
  410ae8:	4658      	mov	r0, fp
  410aea:	9c19      	ldr	r4, [sp, #100]	; 0x64
  410aec:	f7fe fb10 	bl	40f110 <_localeconv_r>
  410af0:	6800      	ldr	r0, [r0, #0]
  410af2:	f7f9 fd07 	bl	40a504 <strlen>
  410af6:	1823      	adds	r3, r4, r0
  410af8:	9319      	str	r3, [sp, #100]	; 0x64
  410afa:	5c24      	ldrb	r4, [r4, r0]
  410afc:	2e00      	cmp	r6, #0
  410afe:	f040 81c3 	bne.w	410e88 <_strtod_r+0x788>
  410b02:	2c30      	cmp	r4, #48	; 0x30
  410b04:	f47f aefe 	bne.w	410904 <_strtod_r+0x204>
  410b08:	461a      	mov	r2, r3
  410b0a:	4633      	mov	r3, r6
  410b0c:	e000      	b.n	410b10 <_strtod_r+0x410>
  410b0e:	460a      	mov	r2, r1
  410b10:	1c51      	adds	r1, r2, #1
  410b12:	9119      	str	r1, [sp, #100]	; 0x64
  410b14:	7854      	ldrb	r4, [r2, #1]
  410b16:	2c30      	cmp	r4, #48	; 0x30
  410b18:	f103 0301 	add.w	r3, r3, #1
  410b1c:	d0f7      	beq.n	410b0e <_strtod_r+0x40e>
  410b1e:	e6f2      	b.n	410906 <_strtod_r+0x206>
  410b20:	004135a0 	.word	0x004135a0
  410b24:	9908      	ldr	r1, [sp, #32]
  410b26:	ebc8 080a 	rsb	r8, r8, sl
  410b2a:	4488      	add	r8, r1
  410b2c:	f1b8 0f00 	cmp.w	r8, #0
  410b30:	f340 8369 	ble.w	411206 <_strtod_r+0xb06>
  410b34:	f018 030f 	ands.w	r3, r8, #15
  410b38:	d00a      	beq.n	410b50 <_strtod_r+0x450>
  410b3a:	49a7      	ldr	r1, [pc, #668]	; (410dd8 <_strtod_r+0x6d8>)
  410b3c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  410b40:	e9d1 0100 	ldrd	r0, r1, [r1]
  410b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  410b48:	f002 f86a 	bl	412c20 <__aeabi_dmul>
  410b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  410b50:	f038 040f 	bics.w	r4, r8, #15
  410b54:	f040 81c8 	bne.w	410ee8 <_strtod_r+0x7e8>
  410b58:	2200      	movs	r2, #0
  410b5a:	920a      	str	r2, [sp, #40]	; 0x28
  410b5c:	f8cd 9000 	str.w	r9, [sp]
  410b60:	9906      	ldr	r1, [sp, #24]
  410b62:	4632      	mov	r2, r6
  410b64:	4653      	mov	r3, sl
  410b66:	4658      	mov	r0, fp
  410b68:	f7fe ff6a 	bl	40fa40 <__s2b>
  410b6c:	900b      	str	r0, [sp, #44]	; 0x2c
  410b6e:	2800      	cmp	r0, #0
  410b70:	f000 82d5 	beq.w	41111e <_strtod_r+0xa1e>
  410b74:	9908      	ldr	r1, [sp, #32]
  410b76:	2200      	movs	r2, #0
  410b78:	2900      	cmp	r1, #0
  410b7a:	f1c1 0300 	rsb	r3, r1, #0
  410b7e:	bfa8      	it	ge
  410b80:	4613      	movge	r3, r2
  410b82:	930e      	str	r3, [sp, #56]	; 0x38
  410b84:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  410b88:	9206      	str	r2, [sp, #24]
  410b8a:	930f      	str	r3, [sp, #60]	; 0x3c
  410b8c:	4617      	mov	r7, r2
  410b8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  410b90:	4658      	mov	r0, fp
  410b92:	6851      	ldr	r1, [r2, #4]
  410b94:	f7fe fed8 	bl	40f948 <_Balloc>
  410b98:	4606      	mov	r6, r0
  410b9a:	2800      	cmp	r0, #0
  410b9c:	f000 82cd 	beq.w	41113a <_strtod_r+0xa3a>
  410ba0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  410ba2:	6903      	ldr	r3, [r0, #16]
  410ba4:	1c9a      	adds	r2, r3, #2
  410ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  410ba8:	0092      	lsls	r2, r2, #2
  410baa:	f103 010c 	add.w	r1, r3, #12
  410bae:	f106 000c 	add.w	r0, r6, #12
  410bb2:	f7f9 faa5 	bl	40a100 <memcpy>
  410bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  410bba:	e9cd 0108 	strd	r0, r1, [sp, #32]
  410bbe:	a81b      	add	r0, sp, #108	; 0x6c
  410bc0:	a91c      	add	r1, sp, #112	; 0x70
  410bc2:	e88d 0003 	stmia.w	sp, {r0, r1}
  410bc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  410bca:	4658      	mov	r0, fp
  410bcc:	f7ff fa2e 	bl	41002c <__d2b>
  410bd0:	901a      	str	r0, [sp, #104]	; 0x68
  410bd2:	2800      	cmp	r0, #0
  410bd4:	f000 8412 	beq.w	4113fc <_strtod_r+0xcfc>
  410bd8:	4658      	mov	r0, fp
  410bda:	2101      	movs	r1, #1
  410bdc:	f7fe ffca 	bl	40fb74 <__i2b>
  410be0:	4607      	mov	r7, r0
  410be2:	2800      	cmp	r0, #0
  410be4:	f000 82a9 	beq.w	41113a <_strtod_r+0xa3a>
  410be8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  410bea:	2b00      	cmp	r3, #0
  410bec:	f2c0 8110 	blt.w	410e10 <_strtod_r+0x710>
  410bf0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  410bf4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  410bf6:	4499      	add	r9, r3
  410bf8:	980a      	ldr	r0, [sp, #40]	; 0x28
  410bfa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  410bfc:	1a1b      	subs	r3, r3, r0
  410bfe:	4413      	add	r3, r2
  410c00:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
  410c04:	428b      	cmp	r3, r1
  410c06:	f1c2 0a36 	rsb	sl, r2, #54	; 0x36
  410c0a:	f280 80da 	bge.w	410dc2 <_strtod_r+0x6c2>
  410c0e:	1aca      	subs	r2, r1, r3
  410c10:	2a1f      	cmp	r2, #31
  410c12:	ebc2 0a0a 	rsb	sl, r2, sl
  410c16:	f300 8100 	bgt.w	410e1a <_strtod_r+0x71a>
  410c1a:	f04f 0801 	mov.w	r8, #1
  410c1e:	2300      	movs	r3, #0
  410c20:	fa08 f802 	lsl.w	r8, r8, r2
  410c24:	930c      	str	r3, [sp, #48]	; 0x30
  410c26:	980a      	ldr	r0, [sp, #40]	; 0x28
  410c28:	4455      	add	r5, sl
  410c2a:	44ca      	add	sl, r9
  410c2c:	45ca      	cmp	sl, r9
  410c2e:	bfb4      	ite	lt
  410c30:	4653      	movlt	r3, sl
  410c32:	464b      	movge	r3, r9
  410c34:	4405      	add	r5, r0
  410c36:	42ab      	cmp	r3, r5
  410c38:	bfa8      	it	ge
  410c3a:	462b      	movge	r3, r5
  410c3c:	2b00      	cmp	r3, #0
  410c3e:	dd04      	ble.n	410c4a <_strtod_r+0x54a>
  410c40:	ebc3 0a0a 	rsb	sl, r3, sl
  410c44:	1aed      	subs	r5, r5, r3
  410c46:	ebc3 0909 	rsb	r9, r3, r9
  410c4a:	990e      	ldr	r1, [sp, #56]	; 0x38
  410c4c:	b1b1      	cbz	r1, 410c7c <_strtod_r+0x57c>
  410c4e:	4639      	mov	r1, r7
  410c50:	4658      	mov	r0, fp
  410c52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  410c54:	f7ff f836 	bl	40fcc4 <__pow5mult>
  410c58:	4607      	mov	r7, r0
  410c5a:	2800      	cmp	r0, #0
  410c5c:	f000 826d 	beq.w	41113a <_strtod_r+0xa3a>
  410c60:	4658      	mov	r0, fp
  410c62:	4639      	mov	r1, r7
  410c64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  410c66:	f7fe ff8f 	bl	40fb88 <__multiply>
  410c6a:	4604      	mov	r4, r0
  410c6c:	2800      	cmp	r0, #0
  410c6e:	f000 8264 	beq.w	41113a <_strtod_r+0xa3a>
  410c72:	4658      	mov	r0, fp
  410c74:	991a      	ldr	r1, [sp, #104]	; 0x68
  410c76:	f7fe fe8d 	bl	40f994 <_Bfree>
  410c7a:	941a      	str	r4, [sp, #104]	; 0x68
  410c7c:	f1ba 0f00 	cmp.w	sl, #0
  410c80:	dd08      	ble.n	410c94 <_strtod_r+0x594>
  410c82:	4652      	mov	r2, sl
  410c84:	4658      	mov	r0, fp
  410c86:	991a      	ldr	r1, [sp, #104]	; 0x68
  410c88:	f7ff f86a 	bl	40fd60 <__lshift>
  410c8c:	901a      	str	r0, [sp, #104]	; 0x68
  410c8e:	2800      	cmp	r0, #0
  410c90:	f000 83b4 	beq.w	4113fc <_strtod_r+0xcfc>
  410c94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410c96:	b142      	cbz	r2, 410caa <_strtod_r+0x5aa>
  410c98:	4631      	mov	r1, r6
  410c9a:	4658      	mov	r0, fp
  410c9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410c9e:	f7ff f811 	bl	40fcc4 <__pow5mult>
  410ca2:	4606      	mov	r6, r0
  410ca4:	2800      	cmp	r0, #0
  410ca6:	f000 8248 	beq.w	41113a <_strtod_r+0xa3a>
  410caa:	2d00      	cmp	r5, #0
  410cac:	dd08      	ble.n	410cc0 <_strtod_r+0x5c0>
  410cae:	4631      	mov	r1, r6
  410cb0:	462a      	mov	r2, r5
  410cb2:	4658      	mov	r0, fp
  410cb4:	f7ff f854 	bl	40fd60 <__lshift>
  410cb8:	4606      	mov	r6, r0
  410cba:	2800      	cmp	r0, #0
  410cbc:	f000 823d 	beq.w	41113a <_strtod_r+0xa3a>
  410cc0:	f1b9 0f00 	cmp.w	r9, #0
  410cc4:	dd08      	ble.n	410cd8 <_strtod_r+0x5d8>
  410cc6:	4639      	mov	r1, r7
  410cc8:	464a      	mov	r2, r9
  410cca:	4658      	mov	r0, fp
  410ccc:	f7ff f848 	bl	40fd60 <__lshift>
  410cd0:	4607      	mov	r7, r0
  410cd2:	2800      	cmp	r0, #0
  410cd4:	f000 8231 	beq.w	41113a <_strtod_r+0xa3a>
  410cd8:	4658      	mov	r0, fp
  410cda:	991a      	ldr	r1, [sp, #104]	; 0x68
  410cdc:	4632      	mov	r2, r6
  410cde:	f7ff f8c1 	bl	40fe64 <__mdiff>
  410ce2:	9006      	str	r0, [sp, #24]
  410ce4:	2800      	cmp	r0, #0
  410ce6:	f000 8228 	beq.w	41113a <_strtod_r+0xa3a>
  410cea:	9906      	ldr	r1, [sp, #24]
  410cec:	2300      	movs	r3, #0
  410cee:	f8d1 a00c 	ldr.w	sl, [r1, #12]
  410cf2:	60cb      	str	r3, [r1, #12]
  410cf4:	4639      	mov	r1, r7
  410cf6:	f7ff f891 	bl	40fe1c <__mcmp>
  410cfa:	2800      	cmp	r0, #0
  410cfc:	f2c0 83cb 	blt.w	411496 <_strtod_r+0xd96>
  410d00:	f000 8388 	beq.w	411414 <_strtod_r+0xd14>
  410d04:	9806      	ldr	r0, [sp, #24]
  410d06:	4639      	mov	r1, r7
  410d08:	f7ff f9ee 	bl	4100e8 <__ratio>
  410d0c:	2200      	movs	r2, #0
  410d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  410d12:	4604      	mov	r4, r0
  410d14:	460d      	mov	r5, r1
  410d16:	f002 f9ff 	bl	413118 <__aeabi_dcmple>
  410d1a:	2800      	cmp	r0, #0
  410d1c:	d064      	beq.n	410de8 <_strtod_r+0x6e8>
  410d1e:	f1ba 0f00 	cmp.w	sl, #0
  410d22:	f000 808e 	beq.w	410e42 <_strtod_r+0x742>
  410d26:	4d2d      	ldr	r5, [pc, #180]	; (410ddc <_strtod_r+0x6dc>)
  410d28:	f8dd 900c 	ldr.w	r9, [sp, #12]
  410d2c:	2400      	movs	r4, #0
  410d2e:	4622      	mov	r2, r4
  410d30:	462b      	mov	r3, r5
  410d32:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  410d36:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 410de4 <_strtod_r+0x6e4>
  410d3a:	4b29      	ldr	r3, [pc, #164]	; (410de0 <_strtod_r+0x6e0>)
  410d3c:	ea09 0808 	and.w	r8, r9, r8
  410d40:	4598      	cmp	r8, r3
  410d42:	f000 81bf 	beq.w	4110c4 <_strtod_r+0x9c4>
  410d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410d48:	b182      	cbz	r2, 410d6c <_strtod_r+0x66c>
  410d4a:	f1b8 6fd4 	cmp.w	r8, #111149056	; 0x6a00000
  410d4e:	d80d      	bhi.n	410d6c <_strtod_r+0x66c>
  410d50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  410d54:	a31e      	add	r3, pc, #120	; (adr r3, 410dd0 <_strtod_r+0x6d0>)
  410d56:	e9d3 2300 	ldrd	r2, r3, [r3]
  410d5a:	f002 f9dd 	bl	413118 <__aeabi_dcmple>
  410d5e:	2800      	cmp	r0, #0
  410d60:	f040 811b 	bne.w	410f9a <_strtod_r+0x89a>
  410d64:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
  410d68:	ebc8 0503 	rsb	r5, r8, r3
  410d6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  410d70:	f7ff f8e2 	bl	40ff38 <__ulp>
  410d74:	4602      	mov	r2, r0
  410d76:	460b      	mov	r3, r1
  410d78:	4620      	mov	r0, r4
  410d7a:	4629      	mov	r1, r5
  410d7c:	f001 ff50 	bl	412c20 <__aeabi_dmul>
  410d80:	4602      	mov	r2, r0
  410d82:	460b      	mov	r3, r1
  410d84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  410d88:	f001 fd98 	bl	4128bc <__adddf3>
  410d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  410d90:	9c03      	ldr	r4, [sp, #12]
  410d92:	990a      	ldr	r1, [sp, #40]	; 0x28
  410d94:	b921      	cbnz	r1, 410da0 <_strtod_r+0x6a0>
  410d96:	4b13      	ldr	r3, [pc, #76]	; (410de4 <_strtod_r+0x6e4>)
  410d98:	4023      	ands	r3, r4
  410d9a:	4598      	cmp	r8, r3
  410d9c:	f000 81ed 	beq.w	41117a <_strtod_r+0xa7a>
  410da0:	4658      	mov	r0, fp
  410da2:	991a      	ldr	r1, [sp, #104]	; 0x68
  410da4:	f7fe fdf6 	bl	40f994 <_Bfree>
  410da8:	4658      	mov	r0, fp
  410daa:	4631      	mov	r1, r6
  410dac:	f7fe fdf2 	bl	40f994 <_Bfree>
  410db0:	4658      	mov	r0, fp
  410db2:	4639      	mov	r1, r7
  410db4:	f7fe fdee 	bl	40f994 <_Bfree>
  410db8:	4658      	mov	r0, fp
  410dba:	9906      	ldr	r1, [sp, #24]
  410dbc:	f7fe fdea 	bl	40f994 <_Bfree>
  410dc0:	e6e5      	b.n	410b8e <_strtod_r+0x48e>
  410dc2:	2300      	movs	r3, #0
  410dc4:	930c      	str	r3, [sp, #48]	; 0x30
  410dc6:	f04f 0801 	mov.w	r8, #1
  410dca:	e72c      	b.n	410c26 <_strtod_r+0x526>
  410dcc:	f3af 8000 	nop.w
  410dd0:	ffc00000 	.word	0xffc00000
  410dd4:	41dfffff 	.word	0x41dfffff
  410dd8:	004135a0 	.word	0x004135a0
  410ddc:	3ff00000 	.word	0x3ff00000
  410de0:	7fe00000 	.word	0x7fe00000
  410de4:	7ff00000 	.word	0x7ff00000
  410de8:	4620      	mov	r0, r4
  410dea:	4629      	mov	r1, r5
  410dec:	2200      	movs	r2, #0
  410dee:	4ba8      	ldr	r3, [pc, #672]	; (411090 <_strtod_r+0x990>)
  410df0:	f001 ff16 	bl	412c20 <__aeabi_dmul>
  410df4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  410df8:	f1ba 0f00 	cmp.w	sl, #0
  410dfc:	d11c      	bne.n	410e38 <_strtod_r+0x738>
  410dfe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  410e02:	9010      	str	r0, [sp, #64]	; 0x40
  410e04:	9111      	str	r1, [sp, #68]	; 0x44
  410e06:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  410e0a:	f8dd 900c 	ldr.w	r9, [sp, #12]
  410e0e:	e792      	b.n	410d36 <_strtod_r+0x636>
  410e10:	990f      	ldr	r1, [sp, #60]	; 0x3c
  410e12:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  410e16:	1acd      	subs	r5, r1, r3
  410e18:	e6ee      	b.n	410bf8 <_strtod_r+0x4f8>
  410e1a:	4c9e      	ldr	r4, [pc, #632]	; (411094 <_strtod_r+0x994>)
  410e1c:	f04f 0801 	mov.w	r8, #1
  410e20:	1ae4      	subs	r4, r4, r3
  410e22:	fa08 f404 	lsl.w	r4, r8, r4
  410e26:	940c      	str	r4, [sp, #48]	; 0x30
  410e28:	e6fd      	b.n	410c26 <_strtod_r+0x526>
  410e2a:	9519      	str	r5, [sp, #100]	; 0x64
  410e2c:	2100      	movs	r1, #0
  410e2e:	f1ba 0f00 	cmp.w	sl, #0
  410e32:	f47f ad20 	bne.w	410876 <_strtod_r+0x176>
  410e36:	e573      	b.n	410920 <_strtod_r+0x220>
  410e38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  410e3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  410e40:	e7e1      	b.n	410e06 <_strtod_r+0x706>
  410e42:	9b02      	ldr	r3, [sp, #8]
  410e44:	2b00      	cmp	r3, #0
  410e46:	f040 8092 	bne.w	410f6e <_strtod_r+0x86e>
  410e4a:	9803      	ldr	r0, [sp, #12]
  410e4c:	f3c0 0313 	ubfx	r3, r0, #0, #20
  410e50:	4681      	mov	r9, r0
  410e52:	2b00      	cmp	r3, #0
  410e54:	f040 8091 	bne.w	410f7a <_strtod_r+0x87a>
  410e58:	4620      	mov	r0, r4
  410e5a:	4629      	mov	r1, r5
  410e5c:	2200      	movs	r2, #0
  410e5e:	4b8e      	ldr	r3, [pc, #568]	; (411098 <_strtod_r+0x998>)
  410e60:	f002 f950 	bl	413104 <__aeabi_dcmplt>
  410e64:	2800      	cmp	r0, #0
  410e66:	f040 8356 	bne.w	411516 <_strtod_r+0xe16>
  410e6a:	4620      	mov	r0, r4
  410e6c:	4629      	mov	r1, r5
  410e6e:	2200      	movs	r2, #0
  410e70:	4b87      	ldr	r3, [pc, #540]	; (411090 <_strtod_r+0x990>)
  410e72:	f001 fed5 	bl	412c20 <__aeabi_dmul>
  410e76:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  410e7a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  410e7e:	9016      	str	r0, [sp, #88]	; 0x58
  410e80:	9117      	str	r1, [sp, #92]	; 0x5c
  410e82:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  410e86:	e756      	b.n	410d36 <_strtod_r+0x636>
  410e88:	4640      	mov	r0, r8
  410e8a:	4643      	mov	r3, r8
  410e8c:	46b2      	mov	sl, r6
  410e8e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  410e92:	2a09      	cmp	r2, #9
  410e94:	d825      	bhi.n	410ee2 <_strtod_r+0x7e2>
  410e96:	9c19      	ldr	r4, [sp, #100]	; 0x64
  410e98:	3001      	adds	r0, #1
  410e9a:	2a00      	cmp	r2, #0
  410e9c:	f000 81af 	beq.w	4111fe <_strtod_r+0xafe>
  410ea0:	2801      	cmp	r0, #1
  410ea2:	4403      	add	r3, r0
  410ea4:	f000 81a0 	beq.w	4111e8 <_strtod_r+0xae8>
  410ea8:	4450      	add	r0, sl
  410eaa:	3801      	subs	r0, #1
  410eac:	e006      	b.n	410ebc <_strtod_r+0x7bc>
  410eae:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  410eb2:	ea4f 0949 	mov.w	r9, r9, lsl #1
  410eb6:	4582      	cmp	sl, r0
  410eb8:	f000 8197 	beq.w	4111ea <_strtod_r+0xaea>
  410ebc:	f10a 0a01 	add.w	sl, sl, #1
  410ec0:	f10a 31ff 	add.w	r1, sl, #4294967295
  410ec4:	2908      	cmp	r1, #8
  410ec6:	ddf2      	ble.n	410eae <_strtod_r+0x7ae>
  410ec8:	f1ba 0f10 	cmp.w	sl, #16
  410ecc:	bfdc      	itt	le
  410ece:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  410ed2:	007f      	lslle	r7, r7, #1
  410ed4:	e7ef      	b.n	410eb6 <_strtod_r+0x7b6>
  410ed6:	2200      	movs	r2, #0
  410ed8:	9208      	str	r2, [sp, #32]
  410eda:	e5bc      	b.n	410a56 <_strtod_r+0x356>
  410edc:	2100      	movs	r1, #0
  410ede:	9108      	str	r1, [sp, #32]
  410ee0:	e5b6      	b.n	410a50 <_strtod_r+0x350>
  410ee2:	2201      	movs	r2, #1
  410ee4:	920b      	str	r2, [sp, #44]	; 0x2c
  410ee6:	e4bd      	b.n	410864 <_strtod_r+0x164>
  410ee8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  410eec:	f300 8117 	bgt.w	41111e <_strtod_r+0xa1e>
  410ef0:	1124      	asrs	r4, r4, #4
  410ef2:	2c01      	cmp	r4, #1
  410ef4:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 4110c0 <_strtod_r+0x9c0>
  410ef8:	f340 832a 	ble.w	411550 <_strtod_r+0xe50>
  410efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  410f00:	4645      	mov	r5, r8
  410f02:	2700      	movs	r7, #0
  410f04:	f014 0f01 	tst.w	r4, #1
  410f08:	f107 0701 	add.w	r7, r7, #1
  410f0c:	ea4f 0464 	mov.w	r4, r4, asr #1
  410f10:	d003      	beq.n	410f1a <_strtod_r+0x81a>
  410f12:	e9d5 2300 	ldrd	r2, r3, [r5]
  410f16:	f001 fe83 	bl	412c20 <__aeabi_dmul>
  410f1a:	2c01      	cmp	r4, #1
  410f1c:	f105 0508 	add.w	r5, r5, #8
  410f20:	dcf0      	bgt.n	410f04 <_strtod_r+0x804>
  410f22:	e9cd 0102 	strd	r0, r1, [sp, #8]
  410f26:	9b03      	ldr	r3, [sp, #12]
  410f28:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  410f2c:	9303      	str	r3, [sp, #12]
  410f2e:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
  410f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  410f36:	e9d7 0100 	ldrd	r0, r1, [r7]
  410f3a:	f001 fe71 	bl	412c20 <__aeabi_dmul>
  410f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  410f42:	9803      	ldr	r0, [sp, #12]
  410f44:	4a55      	ldr	r2, [pc, #340]	; (41109c <_strtod_r+0x99c>)
  410f46:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  410f4a:	0d1b      	lsrs	r3, r3, #20
  410f4c:	051b      	lsls	r3, r3, #20
  410f4e:	4293      	cmp	r3, r2
  410f50:	f200 80e5 	bhi.w	41111e <_strtod_r+0xa1e>
  410f54:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  410f58:	4293      	cmp	r3, r2
  410f5a:	f240 82d5 	bls.w	411508 <_strtod_r+0xe08>
  410f5e:	4950      	ldr	r1, [pc, #320]	; (4110a0 <_strtod_r+0x9a0>)
  410f60:	9103      	str	r1, [sp, #12]
  410f62:	2200      	movs	r2, #0
  410f64:	f04f 33ff 	mov.w	r3, #4294967295
  410f68:	920a      	str	r2, [sp, #40]	; 0x28
  410f6a:	9302      	str	r3, [sp, #8]
  410f6c:	e5f6      	b.n	410b5c <_strtod_r+0x45c>
  410f6e:	9902      	ldr	r1, [sp, #8]
  410f70:	f8dd 900c 	ldr.w	r9, [sp, #12]
  410f74:	2901      	cmp	r1, #1
  410f76:	f000 81c9 	beq.w	41130c <_strtod_r+0xc0c>
  410f7a:	4947      	ldr	r1, [pc, #284]	; (411098 <_strtod_r+0x998>)
  410f7c:	4d49      	ldr	r5, [pc, #292]	; (4110a4 <_strtod_r+0x9a4>)
  410f7e:	2000      	movs	r0, #0
  410f80:	2400      	movs	r4, #0
  410f82:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  410f86:	e6d6      	b.n	410d36 <_strtod_r+0x636>
  410f88:	9919      	ldr	r1, [sp, #100]	; 0x64
  410f8a:	9106      	str	r1, [sp, #24]
  410f8c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  410f90:	f04f 0a00 	mov.w	sl, #0
  410f94:	460c      	mov	r4, r1
  410f96:	2001      	movs	r0, #1
  410f98:	e77f      	b.n	410e9a <_strtod_r+0x79a>
  410f9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  410f9e:	f002 f901 	bl	4131a4 <__aeabi_d2uiz>
  410fa2:	2800      	cmp	r0, #0
  410fa4:	f000 81ad 	beq.w	411302 <_strtod_r+0xc02>
  410fa8:	f001 fdc4 	bl	412b34 <__aeabi_ui2d>
  410fac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  410fb0:	f1ba 0f00 	cmp.w	sl, #0
  410fb4:	f040 81a0 	bne.w	4112f8 <_strtod_r+0xbf8>
  410fb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  410fba:	990c      	ldr	r1, [sp, #48]	; 0x30
  410fbc:	9114      	str	r1, [sp, #80]	; 0x50
  410fbe:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  410fc2:	9215      	str	r2, [sp, #84]	; 0x54
  410fc4:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  410fc8:	e6cc      	b.n	410d64 <_strtod_r+0x664>
  410fca:	4837      	ldr	r0, [pc, #220]	; (4110a8 <_strtod_r+0x9a8>)
  410fcc:	9919      	ldr	r1, [sp, #100]	; 0x64
  410fce:	e009      	b.n	410fe4 <_strtod_r+0x8e4>
  410fd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  410fd4:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  410fd8:	2c19      	cmp	r4, #25
  410fda:	bf98      	it	ls
  410fdc:	3320      	addls	r3, #32
  410fde:	4293      	cmp	r3, r2
  410fe0:	f47f abdd 	bne.w	41079e <_strtod_r+0x9e>
  410fe4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  410fe8:	2a00      	cmp	r2, #0
  410fea:	d1f1      	bne.n	410fd0 <_strtod_r+0x8d0>
  410fec:	1c4b      	adds	r3, r1, #1
  410fee:	9319      	str	r3, [sp, #100]	; 0x64
  410ff0:	784b      	ldrb	r3, [r1, #1]
  410ff2:	2b28      	cmp	r3, #40	; 0x28
  410ff4:	f000 82e2 	beq.w	4115bc <_strtod_r+0xebc>
  410ff8:	4a2c      	ldr	r2, [pc, #176]	; (4110ac <_strtod_r+0x9ac>)
  410ffa:	9203      	str	r2, [sp, #12]
  410ffc:	2300      	movs	r3, #0
  410ffe:	9302      	str	r3, [sp, #8]
  411000:	e513      	b.n	410a2a <_strtod_r+0x32a>
  411002:	482b      	ldr	r0, [pc, #172]	; (4110b0 <_strtod_r+0x9b0>)
  411004:	9919      	ldr	r1, [sp, #100]	; 0x64
  411006:	e009      	b.n	41101c <_strtod_r+0x91c>
  411008:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  41100c:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  411010:	2c19      	cmp	r4, #25
  411012:	bf98      	it	ls
  411014:	3320      	addls	r3, #32
  411016:	4293      	cmp	r3, r2
  411018:	f47f abc1 	bne.w	41079e <_strtod_r+0x9e>
  41101c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  411020:	2a00      	cmp	r2, #0
  411022:	d1f1      	bne.n	411008 <_strtod_r+0x908>
  411024:	9119      	str	r1, [sp, #100]	; 0x64
  411026:	4c23      	ldr	r4, [pc, #140]	; (4110b4 <_strtod_r+0x9b4>)
  411028:	4608      	mov	r0, r1
  41102a:	e009      	b.n	411040 <_strtod_r+0x940>
  41102c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  411030:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
  411034:	2d19      	cmp	r5, #25
  411036:	bf98      	it	ls
  411038:	3320      	addls	r3, #32
  41103a:	4293      	cmp	r3, r2
  41103c:	f040 8285 	bne.w	41154a <_strtod_r+0xe4a>
  411040:	f814 2f01 	ldrb.w	r2, [r4, #1]!
  411044:	2a00      	cmp	r2, #0
  411046:	d1f1      	bne.n	41102c <_strtod_r+0x92c>
  411048:	3001      	adds	r0, #1
  41104a:	9019      	str	r0, [sp, #100]	; 0x64
  41104c:	4a1a      	ldr	r2, [pc, #104]	; (4110b8 <_strtod_r+0x9b8>)
  41104e:	9203      	str	r2, [sp, #12]
  411050:	2300      	movs	r3, #0
  411052:	9302      	str	r3, [sp, #8]
  411054:	e4e9      	b.n	410a2a <_strtod_r+0x32a>
  411056:	9907      	ldr	r1, [sp, #28]
  411058:	9101      	str	r1, [sp, #4]
  41105a:	ab1a      	add	r3, sp, #104	; 0x68
  41105c:	9300      	str	r3, [sp, #0]
  41105e:	4658      	mov	r0, fp
  411060:	a919      	add	r1, sp, #100	; 0x64
  411062:	4a16      	ldr	r2, [pc, #88]	; (4110bc <_strtod_r+0x9bc>)
  411064:	ab1b      	add	r3, sp, #108	; 0x6c
  411066:	f001 f8af 	bl	4121c8 <__gethex>
  41106a:	f010 0507 	ands.w	r5, r0, #7
  41106e:	4604      	mov	r4, r0
  411070:	f43f acca 	beq.w	410a08 <_strtod_r+0x308>
  411074:	2d06      	cmp	r5, #6
  411076:	f040 8157 	bne.w	411328 <_strtod_r+0xc28>
  41107a:	3601      	adds	r6, #1
  41107c:	2200      	movs	r2, #0
  41107e:	9619      	str	r6, [sp, #100]	; 0x64
  411080:	f04f 0800 	mov.w	r8, #0
  411084:	f04f 0900 	mov.w	r9, #0
  411088:	9207      	str	r2, [sp, #28]
  41108a:	f7ff bb8f 	b.w	4107ac <_strtod_r+0xac>
  41108e:	bf00      	nop
  411090:	3fe00000 	.word	0x3fe00000
  411094:	fffffbe3 	.word	0xfffffbe3
  411098:	3ff00000 	.word	0x3ff00000
  41109c:	7ca00000 	.word	0x7ca00000
  4110a0:	7fefffff 	.word	0x7fefffff
  4110a4:	bff00000 	.word	0xbff00000
  4110a8:	004136bb 	.word	0x004136bb
  4110ac:	fff80000 	.word	0xfff80000
  4110b0:	004136af 	.word	0x004136af
  4110b4:	004136b3 	.word	0x004136b3
  4110b8:	7ff00000 	.word	0x7ff00000
  4110bc:	0041369c 	.word	0x0041369c
  4110c0:	00413668 	.word	0x00413668
  4110c4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  4110c8:	f8cd 900c 	str.w	r9, [sp, #12]
  4110cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4110d0:	f7fe ff32 	bl	40ff38 <__ulp>
  4110d4:	4602      	mov	r2, r0
  4110d6:	460b      	mov	r3, r1
  4110d8:	4620      	mov	r0, r4
  4110da:	4629      	mov	r1, r5
  4110dc:	f001 fda0 	bl	412c20 <__aeabi_dmul>
  4110e0:	4602      	mov	r2, r0
  4110e2:	460b      	mov	r3, r1
  4110e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4110e8:	f001 fbe8 	bl	4128bc <__adddf3>
  4110ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4110f0:	9903      	ldr	r1, [sp, #12]
  4110f2:	4aad      	ldr	r2, [pc, #692]	; (4113a8 <_strtod_r+0xca8>)
  4110f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4110f8:	0d1b      	lsrs	r3, r3, #20
  4110fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4110fe:	051b      	lsls	r3, r3, #20
  411100:	4293      	cmp	r3, r2
  411102:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  411106:	f240 80d5 	bls.w	4112b4 <_strtod_r+0xbb4>
  41110a:	4ba8      	ldr	r3, [pc, #672]	; (4113ac <_strtod_r+0xcac>)
  41110c:	9913      	ldr	r1, [sp, #76]	; 0x4c
  41110e:	4299      	cmp	r1, r3
  411110:	d010      	beq.n	411134 <_strtod_r+0xa34>
  411112:	4ba6      	ldr	r3, [pc, #664]	; (4113ac <_strtod_r+0xcac>)
  411114:	9303      	str	r3, [sp, #12]
  411116:	f04f 30ff 	mov.w	r0, #4294967295
  41111a:	9002      	str	r0, [sp, #8]
  41111c:	e640      	b.n	410da0 <_strtod_r+0x6a0>
  41111e:	4aa4      	ldr	r2, [pc, #656]	; (4113b0 <_strtod_r+0xcb0>)
  411120:	9203      	str	r2, [sp, #12]
  411122:	2000      	movs	r0, #0
  411124:	2322      	movs	r3, #34	; 0x22
  411126:	9002      	str	r0, [sp, #8]
  411128:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  41112c:	f8cb 3000 	str.w	r3, [fp]
  411130:	f7ff bb3c 	b.w	4107ac <_strtod_r+0xac>
  411134:	9a12      	ldr	r2, [sp, #72]	; 0x48
  411136:	3201      	adds	r2, #1
  411138:	d1eb      	bne.n	411112 <_strtod_r+0xa12>
  41113a:	46b2      	mov	sl, r6
  41113c:	991a      	ldr	r1, [sp, #104]	; 0x68
  41113e:	4a9c      	ldr	r2, [pc, #624]	; (4113b0 <_strtod_r+0xcb0>)
  411140:	9203      	str	r2, [sp, #12]
  411142:	2000      	movs	r0, #0
  411144:	9002      	str	r0, [sp, #8]
  411146:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  41114a:	2322      	movs	r3, #34	; 0x22
  41114c:	f8cb 3000 	str.w	r3, [fp]
  411150:	4658      	mov	r0, fp
  411152:	f7fe fc1f 	bl	40f994 <_Bfree>
  411156:	4658      	mov	r0, fp
  411158:	4651      	mov	r1, sl
  41115a:	f7fe fc1b 	bl	40f994 <_Bfree>
  41115e:	4658      	mov	r0, fp
  411160:	4639      	mov	r1, r7
  411162:	f7fe fc17 	bl	40f994 <_Bfree>
  411166:	4658      	mov	r0, fp
  411168:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41116a:	f7fe fc13 	bl	40f994 <_Bfree>
  41116e:	4658      	mov	r0, fp
  411170:	9906      	ldr	r1, [sp, #24]
  411172:	f7fe fc0f 	bl	40f994 <_Bfree>
  411176:	f7ff bb19 	b.w	4107ac <_strtod_r+0xac>
  41117a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  41117e:	f001 ffe9 	bl	413154 <__aeabi_d2iz>
  411182:	f001 fce7 	bl	412b54 <__aeabi_i2d>
  411186:	4602      	mov	r2, r0
  411188:	460b      	mov	r3, r1
  41118a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  41118e:	f001 fb93 	bl	4128b8 <__aeabi_dsub>
  411192:	4680      	mov	r8, r0
  411194:	4689      	mov	r9, r1
  411196:	f1ba 0f00 	cmp.w	sl, #0
  41119a:	d111      	bne.n	4111c0 <_strtod_r+0xac0>
  41119c:	9a02      	ldr	r2, [sp, #8]
  41119e:	b97a      	cbnz	r2, 4111c0 <_strtod_r+0xac0>
  4111a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4111a4:	b964      	cbnz	r4, 4111c0 <_strtod_r+0xac0>
  4111a6:	a37a      	add	r3, pc, #488	; (adr r3, 411390 <_strtod_r+0xc90>)
  4111a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4111ac:	f001 ffaa 	bl	413104 <__aeabi_dcmplt>
  4111b0:	2800      	cmp	r0, #0
  4111b2:	f43f adf5 	beq.w	410da0 <_strtod_r+0x6a0>
  4111b6:	46b2      	mov	sl, r6
  4111b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4111bc:	991a      	ldr	r1, [sp, #104]	; 0x68
  4111be:	e7c7      	b.n	411150 <_strtod_r+0xa50>
  4111c0:	4640      	mov	r0, r8
  4111c2:	4649      	mov	r1, r9
  4111c4:	a374      	add	r3, pc, #464	; (adr r3, 411398 <_strtod_r+0xc98>)
  4111c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4111ca:	f001 ff9b 	bl	413104 <__aeabi_dcmplt>
  4111ce:	2800      	cmp	r0, #0
  4111d0:	d1f1      	bne.n	4111b6 <_strtod_r+0xab6>
  4111d2:	4640      	mov	r0, r8
  4111d4:	4649      	mov	r1, r9
  4111d6:	a372      	add	r3, pc, #456	; (adr r3, 4113a0 <_strtod_r+0xca0>)
  4111d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4111dc:	f001 ffb0 	bl	413140 <__aeabi_dcmpgt>
  4111e0:	2800      	cmp	r0, #0
  4111e2:	f43f addd 	beq.w	410da0 <_strtod_r+0x6a0>
  4111e6:	e7e6      	b.n	4111b6 <_strtod_r+0xab6>
  4111e8:	4650      	mov	r0, sl
  4111ea:	2808      	cmp	r0, #8
  4111ec:	f100 0a01 	add.w	sl, r0, #1
  4111f0:	f300 8107 	bgt.w	411402 <_strtod_r+0xd02>
  4111f4:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  4111f8:	eb02 0949 	add.w	r9, r2, r9, lsl #1
  4111fc:	2000      	movs	r0, #0
  4111fe:	1c62      	adds	r2, r4, #1
  411200:	9219      	str	r2, [sp, #100]	; 0x64
  411202:	7864      	ldrb	r4, [r4, #1]
  411204:	e643      	b.n	410e8e <_strtod_r+0x78e>
  411206:	f43f aca7 	beq.w	410b58 <_strtod_r+0x458>
  41120a:	f1c8 0400 	rsb	r4, r8, #0
  41120e:	f014 030f 	ands.w	r3, r4, #15
  411212:	d00a      	beq.n	41122a <_strtod_r+0xb2a>
  411214:	4a67      	ldr	r2, [pc, #412]	; (4113b4 <_strtod_r+0xcb4>)
  411216:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  41121a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  41121e:	e9d3 2300 	ldrd	r2, r3, [r3]
  411222:	f001 fe27 	bl	412e74 <__aeabi_ddiv>
  411226:	e9cd 0102 	strd	r0, r1, [sp, #8]
  41122a:	1124      	asrs	r4, r4, #4
  41122c:	f43f ac94 	beq.w	410b58 <_strtod_r+0x458>
  411230:	2c1f      	cmp	r4, #31
  411232:	dc33      	bgt.n	41129c <_strtod_r+0xb9c>
  411234:	f014 0f10 	tst.w	r4, #16
  411238:	bf14      	ite	ne
  41123a:	216a      	movne	r1, #106	; 0x6a
  41123c:	2100      	moveq	r1, #0
  41123e:	2c00      	cmp	r4, #0
  411240:	910a      	str	r1, [sp, #40]	; 0x28
  411242:	dd0e      	ble.n	411262 <_strtod_r+0xb62>
  411244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  411248:	4d5b      	ldr	r5, [pc, #364]	; (4113b8 <_strtod_r+0xcb8>)
  41124a:	07e3      	lsls	r3, r4, #31
  41124c:	d503      	bpl.n	411256 <_strtod_r+0xb56>
  41124e:	e9d5 2300 	ldrd	r2, r3, [r5]
  411252:	f001 fce5 	bl	412c20 <__aeabi_dmul>
  411256:	1064      	asrs	r4, r4, #1
  411258:	f105 0508 	add.w	r5, r5, #8
  41125c:	d1f5      	bne.n	41124a <_strtod_r+0xb4a>
  41125e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  411262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411264:	b18a      	cbz	r2, 41128a <_strtod_r+0xb8a>
  411266:	9803      	ldr	r0, [sp, #12]
  411268:	f3c0 530a 	ubfx	r3, r0, #20, #11
  41126c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  411270:	2b00      	cmp	r3, #0
  411272:	dd0a      	ble.n	41128a <_strtod_r+0xb8a>
  411274:	2b1f      	cmp	r3, #31
  411276:	f340 81bd 	ble.w	4115f4 <_strtod_r+0xef4>
  41127a:	2100      	movs	r1, #0
  41127c:	2b34      	cmp	r3, #52	; 0x34
  41127e:	9102      	str	r1, [sp, #8]
  411280:	f340 81c0 	ble.w	411604 <_strtod_r+0xf04>
  411284:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
  411288:	9203      	str	r2, [sp, #12]
  41128a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  41128e:	2200      	movs	r2, #0
  411290:	2300      	movs	r3, #0
  411292:	f001 ff2d 	bl	4130f0 <__aeabi_dcmpeq>
  411296:	2800      	cmp	r0, #0
  411298:	f43f ac60 	beq.w	410b5c <_strtod_r+0x45c>
  41129c:	2322      	movs	r3, #34	; 0x22
  41129e:	f8cb 3000 	str.w	r3, [fp]
  4112a2:	f04f 0800 	mov.w	r8, #0
  4112a6:	f04f 0900 	mov.w	r9, #0
  4112aa:	f7ff ba7f 	b.w	4107ac <_strtod_r+0xac>
  4112ae:	f644 611f 	movw	r1, #19999	; 0x4e1f
  4112b2:	e40f      	b.n	410ad4 <_strtod_r+0x3d4>
  4112b4:	9903      	ldr	r1, [sp, #12]
  4112b6:	f101 7454 	add.w	r4, r1, #55574528	; 0x3500000
  4112ba:	9403      	str	r4, [sp, #12]
  4112bc:	e569      	b.n	410d92 <_strtod_r+0x692>
  4112be:	9808      	ldr	r0, [sp, #32]
  4112c0:	f1ca 0325 	rsb	r3, sl, #37	; 0x25
  4112c4:	4298      	cmp	r0, r3
  4112c6:	f73f ac2d 	bgt.w	410b24 <_strtod_r+0x424>
  4112ca:	4c3a      	ldr	r4, [pc, #232]	; (4113b4 <_strtod_r+0xcb4>)
  4112cc:	f1ca 050f 	rsb	r5, sl, #15
  4112d0:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  4112d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4112d8:	e9d1 0100 	ldrd	r0, r1, [r1]
  4112dc:	f001 fca0 	bl	412c20 <__aeabi_dmul>
  4112e0:	9a08      	ldr	r2, [sp, #32]
  4112e2:	1b55      	subs	r5, r2, r5
  4112e4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  4112e8:	e9d4 2300 	ldrd	r2, r3, [r4]
  4112ec:	f001 fc98 	bl	412c20 <__aeabi_dmul>
  4112f0:	4680      	mov	r8, r0
  4112f2:	4689      	mov	r9, r1
  4112f4:	f7ff ba5a 	b.w	4107ac <_strtod_r+0xac>
  4112f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4112fc:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  411300:	e660      	b.n	410fc4 <_strtod_r+0x8c4>
  411302:	492e      	ldr	r1, [pc, #184]	; (4113bc <_strtod_r+0xcbc>)
  411304:	2000      	movs	r0, #0
  411306:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  41130a:	e651      	b.n	410fb0 <_strtod_r+0x8b0>
  41130c:	464a      	mov	r2, r9
  41130e:	2a00      	cmp	r2, #0
  411310:	f47f ae33 	bne.w	410f7a <_strtod_r+0x87a>
  411314:	46b2      	mov	sl, r6
  411316:	2322      	movs	r3, #34	; 0x22
  411318:	f8cb 3000 	str.w	r3, [fp]
  41131c:	991a      	ldr	r1, [sp, #104]	; 0x68
  41131e:	f04f 0800 	mov.w	r8, #0
  411322:	f04f 0900 	mov.w	r9, #0
  411326:	e713      	b.n	411150 <_strtod_r+0xa50>
  411328:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  41132a:	b13a      	cbz	r2, 41133c <_strtod_r+0xc3c>
  41132c:	a81c      	add	r0, sp, #112	; 0x70
  41132e:	2135      	movs	r1, #53	; 0x35
  411330:	f7fe ff02 	bl	410138 <__copybits>
  411334:	4658      	mov	r0, fp
  411336:	991a      	ldr	r1, [sp, #104]	; 0x68
  411338:	f7fe fb2c 	bl	40f994 <_Bfree>
  41133c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  41133e:	2d06      	cmp	r5, #6
  411340:	f63f ab6d 	bhi.w	410a1e <_strtod_r+0x31e>
  411344:	a001      	add	r0, pc, #4	; (adr r0, 41134c <_strtod_r+0xc4c>)
  411346:	f850 f025 	ldr.w	pc, [r0, r5, lsl #2]
  41134a:	bf00      	nop
  41134c:	00411381 	.word	0x00411381
  411350:	004113c1 	.word	0x004113c1
  411354:	00411375 	.word	0x00411375
  411358:	00411369 	.word	0x00411369
  41135c:	00410a13 	.word	0x00410a13
  411360:	004113c1 	.word	0x004113c1
  411364:	00411381 	.word	0x00411381
  411368:	4911      	ldr	r1, [pc, #68]	; (4113b0 <_strtod_r+0xcb0>)
  41136a:	9103      	str	r1, [sp, #12]
  41136c:	2200      	movs	r2, #0
  41136e:	9202      	str	r2, [sp, #8]
  411370:	f7ff bb55 	b.w	410a1e <_strtod_r+0x31e>
  411374:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  411376:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  411378:	9202      	str	r2, [sp, #8]
  41137a:	9303      	str	r3, [sp, #12]
  41137c:	f7ff bb4f 	b.w	410a1e <_strtod_r+0x31e>
  411380:	2100      	movs	r1, #0
  411382:	9103      	str	r1, [sp, #12]
  411384:	9102      	str	r1, [sp, #8]
  411386:	f7ff bb4a 	b.w	410a1e <_strtod_r+0x31e>
  41138a:	bf00      	nop
  41138c:	f3af 8000 	nop.w
  411390:	94a03595 	.word	0x94a03595
  411394:	3fcfffff 	.word	0x3fcfffff
  411398:	94a03595 	.word	0x94a03595
  41139c:	3fdfffff 	.word	0x3fdfffff
  4113a0:	35afe535 	.word	0x35afe535
  4113a4:	3fe00000 	.word	0x3fe00000
  4113a8:	7c9fffff 	.word	0x7c9fffff
  4113ac:	7fefffff 	.word	0x7fefffff
  4113b0:	7ff00000 	.word	0x7ff00000
  4113b4:	004135a0 	.word	0x004135a0
  4113b8:	004136d8 	.word	0x004136d8
  4113bc:	3ff00000 	.word	0x3ff00000
  4113c0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  4113c2:	981c      	ldr	r0, [sp, #112]	; 0x70
  4113c4:	9002      	str	r0, [sp, #8]
  4113c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4113ca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  4113ce:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  4113d2:	9203      	str	r2, [sp, #12]
  4113d4:	f7ff bb23 	b.w	410a1e <_strtod_r+0x31e>
  4113d8:	9b08      	ldr	r3, [sp, #32]
  4113da:	3316      	adds	r3, #22
  4113dc:	f6ff aba2 	blt.w	410b24 <_strtod_r+0x424>
  4113e0:	4b8e      	ldr	r3, [pc, #568]	; (41161c <_strtod_r+0xf1c>)
  4113e2:	9808      	ldr	r0, [sp, #32]
  4113e4:	eba3 0ac0 	sub.w	sl, r3, r0, lsl #3
  4113e8:	e9da 2300 	ldrd	r2, r3, [sl]
  4113ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4113f0:	f001 fd40 	bl	412e74 <__aeabi_ddiv>
  4113f4:	4680      	mov	r8, r0
  4113f6:	4689      	mov	r9, r1
  4113f8:	f7ff b9d8 	b.w	4107ac <_strtod_r+0xac>
  4113fc:	46b2      	mov	sl, r6
  4113fe:	4601      	mov	r1, r0
  411400:	e69d      	b.n	41113e <_strtod_r+0xa3e>
  411402:	f1ba 0f10 	cmp.w	sl, #16
  411406:	bfdc      	itt	le
  411408:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  41140c:	eb02 0747 	addle.w	r7, r2, r7, lsl #1
  411410:	2000      	movs	r0, #0
  411412:	e6f4      	b.n	4111fe <_strtod_r+0xafe>
  411414:	4655      	mov	r5, sl
  411416:	46c4      	mov	ip, r8
  411418:	46b2      	mov	sl, r6
  41141a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  41141e:	2d00      	cmp	r5, #0
  411420:	f000 8082 	beq.w	411528 <_strtod_r+0xe28>
  411424:	9a03      	ldr	r2, [sp, #12]
  411426:	4b7e      	ldr	r3, [pc, #504]	; (411620 <_strtod_r+0xf20>)
  411428:	f3c2 0113 	ubfx	r1, r2, #0, #20
  41142c:	4299      	cmp	r1, r3
  41142e:	f000 80a3 	beq.w	411578 <_strtod_r+0xe78>
  411432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  411434:	2b00      	cmp	r3, #0
  411436:	f000 8083 	beq.w	411540 <_strtod_r+0xe40>
  41143a:	9803      	ldr	r0, [sp, #12]
  41143c:	4203      	tst	r3, r0
  41143e:	d00f      	beq.n	411460 <_strtod_r+0xd60>
  411440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  411444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411446:	2d00      	cmp	r5, #0
  411448:	f000 8084 	beq.w	411554 <_strtod_r+0xe54>
  41144c:	f7ff f938 	bl	4106c0 <sulp>
  411450:	4602      	mov	r2, r0
  411452:	460b      	mov	r3, r1
  411454:	4640      	mov	r0, r8
  411456:	4649      	mov	r1, r9
  411458:	f001 fa30 	bl	4128bc <__adddf3>
  41145c:	4680      	mov	r8, r0
  41145e:	4689      	mov	r9, r1
  411460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411462:	b1b3      	cbz	r3, 411492 <_strtod_r+0xd92>
  411464:	486f      	ldr	r0, [pc, #444]	; (411624 <_strtod_r+0xf24>)
  411466:	9013      	str	r0, [sp, #76]	; 0x4c
  411468:	2100      	movs	r1, #0
  41146a:	9112      	str	r1, [sp, #72]	; 0x48
  41146c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  411470:	4640      	mov	r0, r8
  411472:	4649      	mov	r1, r9
  411474:	f001 fbd4 	bl	412c20 <__aeabi_dmul>
  411478:	4680      	mov	r8, r0
  41147a:	4689      	mov	r9, r1
  41147c:	e9cd 8902 	strd	r8, r9, [sp, #8]
  411480:	9a03      	ldr	r2, [sp, #12]
  411482:	b932      	cbnz	r2, 411492 <_strtod_r+0xd92>
  411484:	9b02      	ldr	r3, [sp, #8]
  411486:	b923      	cbnz	r3, 411492 <_strtod_r+0xd92>
  411488:	2322      	movs	r3, #34	; 0x22
  41148a:	991a      	ldr	r1, [sp, #104]	; 0x68
  41148c:	f8cb 3000 	str.w	r3, [fp]
  411490:	e65e      	b.n	411150 <_strtod_r+0xa50>
  411492:	991a      	ldr	r1, [sp, #104]	; 0x68
  411494:	e65c      	b.n	411150 <_strtod_r+0xa50>
  411496:	4655      	mov	r5, sl
  411498:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  41149c:	46b2      	mov	sl, r6
  41149e:	2d00      	cmp	r5, #0
  4114a0:	d1de      	bne.n	411460 <_strtod_r+0xd60>
  4114a2:	9a02      	ldr	r2, [sp, #8]
  4114a4:	2a00      	cmp	r2, #0
  4114a6:	d1db      	bne.n	411460 <_strtod_r+0xd60>
  4114a8:	9803      	ldr	r0, [sp, #12]
  4114aa:	f3c0 0313 	ubfx	r3, r0, #0, #20
  4114ae:	4604      	mov	r4, r0
  4114b0:	2b00      	cmp	r3, #0
  4114b2:	d1d5      	bne.n	411460 <_strtod_r+0xd60>
  4114b4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  4114b8:	0d1b      	lsrs	r3, r3, #20
  4114ba:	051b      	lsls	r3, r3, #20
  4114bc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  4114c0:	d9ce      	bls.n	411460 <_strtod_r+0xd60>
  4114c2:	9906      	ldr	r1, [sp, #24]
  4114c4:	694b      	ldr	r3, [r1, #20]
  4114c6:	b913      	cbnz	r3, 4114ce <_strtod_r+0xdce>
  4114c8:	690b      	ldr	r3, [r1, #16]
  4114ca:	2b01      	cmp	r3, #1
  4114cc:	ddc8      	ble.n	411460 <_strtod_r+0xd60>
  4114ce:	9906      	ldr	r1, [sp, #24]
  4114d0:	2201      	movs	r2, #1
  4114d2:	4658      	mov	r0, fp
  4114d4:	f7fe fc44 	bl	40fd60 <__lshift>
  4114d8:	4639      	mov	r1, r7
  4114da:	9006      	str	r0, [sp, #24]
  4114dc:	f7fe fc9e 	bl	40fe1c <__mcmp>
  4114e0:	2800      	cmp	r0, #0
  4114e2:	ddbd      	ble.n	411460 <_strtod_r+0xd60>
  4114e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4114e6:	2b00      	cmp	r3, #0
  4114e8:	d17a      	bne.n	4115e0 <_strtod_r+0xee0>
  4114ea:	4b4f      	ldr	r3, [pc, #316]	; (411628 <_strtod_r+0xf28>)
  4114ec:	4023      	ands	r3, r4
  4114ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  4114f2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  4114f6:	ea6f 5003 	mvn.w	r0, r3, lsl #20
  4114fa:	f04f 31ff 	mov.w	r1, #4294967295
  4114fe:	9003      	str	r0, [sp, #12]
  411500:	9102      	str	r1, [sp, #8]
  411502:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  411506:	e7ab      	b.n	411460 <_strtod_r+0xd60>
  411508:	f100 7154 	add.w	r1, r0, #55574528	; 0x3500000
  41150c:	2000      	movs	r0, #0
  41150e:	9103      	str	r1, [sp, #12]
  411510:	900a      	str	r0, [sp, #40]	; 0x28
  411512:	f7ff bb23 	b.w	410b5c <_strtod_r+0x45c>
  411516:	4b45      	ldr	r3, [pc, #276]	; (41162c <_strtod_r+0xf2c>)
  411518:	4945      	ldr	r1, [pc, #276]	; (411630 <_strtod_r+0xf30>)
  41151a:	2200      	movs	r2, #0
  41151c:	2000      	movs	r0, #0
  41151e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  411522:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  411526:	e4ac      	b.n	410e82 <_strtod_r+0x782>
  411528:	9903      	ldr	r1, [sp, #12]
  41152a:	f3c1 0313 	ubfx	r3, r1, #0, #20
  41152e:	460c      	mov	r4, r1
  411530:	2b00      	cmp	r3, #0
  411532:	f47f af7e 	bne.w	411432 <_strtod_r+0xd32>
  411536:	9a02      	ldr	r2, [sp, #8]
  411538:	2a00      	cmp	r2, #0
  41153a:	f47f af7a 	bne.w	411432 <_strtod_r+0xd32>
  41153e:	e7d1      	b.n	4114e4 <_strtod_r+0xde4>
  411540:	9902      	ldr	r1, [sp, #8]
  411542:	ea1c 0f01 	tst.w	ip, r1
  411546:	d08b      	beq.n	411460 <_strtod_r+0xd60>
  411548:	e77a      	b.n	411440 <_strtod_r+0xd40>
  41154a:	3101      	adds	r1, #1
  41154c:	9119      	str	r1, [sp, #100]	; 0x64
  41154e:	e57d      	b.n	41104c <_strtod_r+0x94c>
  411550:	2700      	movs	r7, #0
  411552:	e4e8      	b.n	410f26 <_strtod_r+0x826>
  411554:	f7ff f8b4 	bl	4106c0 <sulp>
  411558:	4602      	mov	r2, r0
  41155a:	460b      	mov	r3, r1
  41155c:	4640      	mov	r0, r8
  41155e:	4649      	mov	r1, r9
  411560:	f001 f9aa 	bl	4128b8 <__aeabi_dsub>
  411564:	2200      	movs	r2, #0
  411566:	2300      	movs	r3, #0
  411568:	4680      	mov	r8, r0
  41156a:	4689      	mov	r9, r1
  41156c:	f001 fdc0 	bl	4130f0 <__aeabi_dcmpeq>
  411570:	2800      	cmp	r0, #0
  411572:	f47f aed0 	bne.w	411316 <_strtod_r+0xc16>
  411576:	e773      	b.n	411460 <_strtod_r+0xd60>
  411578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41157a:	9902      	ldr	r1, [sp, #8]
  41157c:	b1db      	cbz	r3, 4115b6 <_strtod_r+0xeb6>
  41157e:	4b2a      	ldr	r3, [pc, #168]	; (411628 <_strtod_r+0xf28>)
  411580:	4013      	ands	r3, r2
  411582:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  411586:	d816      	bhi.n	4115b6 <_strtod_r+0xeb6>
  411588:	0d1b      	lsrs	r3, r3, #20
  41158a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  41158e:	f04f 30ff 	mov.w	r0, #4294967295
  411592:	fa00 f303 	lsl.w	r3, r0, r3
  411596:	4299      	cmp	r1, r3
  411598:	f47f af4b 	bne.w	411432 <_strtod_r+0xd32>
  41159c:	4b25      	ldr	r3, [pc, #148]	; (411634 <_strtod_r+0xf34>)
  41159e:	429a      	cmp	r2, r3
  4115a0:	d038      	beq.n	411614 <_strtod_r+0xf14>
  4115a2:	4b21      	ldr	r3, [pc, #132]	; (411628 <_strtod_r+0xf28>)
  4115a4:	4013      	ands	r3, r2
  4115a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  4115aa:	2000      	movs	r0, #0
  4115ac:	9303      	str	r3, [sp, #12]
  4115ae:	9002      	str	r0, [sp, #8]
  4115b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4115b4:	e754      	b.n	411460 <_strtod_r+0xd60>
  4115b6:	f04f 33ff 	mov.w	r3, #4294967295
  4115ba:	e7ec      	b.n	411596 <_strtod_r+0xe96>
  4115bc:	a819      	add	r0, sp, #100	; 0x64
  4115be:	491e      	ldr	r1, [pc, #120]	; (411638 <_strtod_r+0xf38>)
  4115c0:	aa1c      	add	r2, sp, #112	; 0x70
  4115c2:	f001 f899 	bl	4126f8 <__hexnan>
  4115c6:	2805      	cmp	r0, #5
  4115c8:	f47f ad16 	bne.w	410ff8 <_strtod_r+0x8f8>
  4115cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4115ce:	991c      	ldr	r1, [sp, #112]	; 0x70
  4115d0:	9102      	str	r1, [sp, #8]
  4115d2:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  4115d6:	f443 00e0 	orr.w	r0, r3, #7340032	; 0x700000
  4115da:	9003      	str	r0, [sp, #12]
  4115dc:	f7ff ba25 	b.w	410a2a <_strtod_r+0x32a>
  4115e0:	4b11      	ldr	r3, [pc, #68]	; (411628 <_strtod_r+0xf28>)
  4115e2:	4023      	ands	r3, r4
  4115e4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  4115e8:	d881      	bhi.n	4114ee <_strtod_r+0xdee>
  4115ea:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  4115ee:	f63f af39 	bhi.w	411464 <_strtod_r+0xd64>
  4115f2:	e690      	b.n	411316 <_strtod_r+0xc16>
  4115f4:	9802      	ldr	r0, [sp, #8]
  4115f6:	f04f 32ff 	mov.w	r2, #4294967295
  4115fa:	fa02 f303 	lsl.w	r3, r2, r3
  4115fe:	4003      	ands	r3, r0
  411600:	9302      	str	r3, [sp, #8]
  411602:	e642      	b.n	41128a <_strtod_r+0xb8a>
  411604:	3b20      	subs	r3, #32
  411606:	f04f 31ff 	mov.w	r1, #4294967295
  41160a:	fa01 f303 	lsl.w	r3, r1, r3
  41160e:	4003      	ands	r3, r0
  411610:	9303      	str	r3, [sp, #12]
  411612:	e63a      	b.n	41128a <_strtod_r+0xb8a>
  411614:	3101      	adds	r1, #1
  411616:	d1c4      	bne.n	4115a2 <_strtod_r+0xea2>
  411618:	e590      	b.n	41113c <_strtod_r+0xa3c>
  41161a:	bf00      	nop
  41161c:	004135a0 	.word	0x004135a0
  411620:	000fffff 	.word	0x000fffff
  411624:	39500000 	.word	0x39500000
  411628:	7ff00000 	.word	0x7ff00000
  41162c:	bfe00000 	.word	0xbfe00000
  411630:	3fe00000 	.word	0x3fe00000
  411634:	7fefffff 	.word	0x7fefffff
  411638:	004136c0 	.word	0x004136c0
  41163c:	f3af 8000 	nop.w

00411640 <_strtol_r>:
  411640:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  411644:	4c42      	ldr	r4, [pc, #264]	; (411750 <_strtol_r+0x110>)
  411646:	b082      	sub	sp, #8
  411648:	f8d4 c000 	ldr.w	ip, [r4]
  41164c:	9001      	str	r0, [sp, #4]
  41164e:	460e      	mov	r6, r1
  411650:	e000      	b.n	411654 <_strtol_r+0x14>
  411652:	4626      	mov	r6, r4
  411654:	4634      	mov	r4, r6
  411656:	f814 5b01 	ldrb.w	r5, [r4], #1
  41165a:	eb0c 0005 	add.w	r0, ip, r5
  41165e:	7840      	ldrb	r0, [r0, #1]
  411660:	f000 0008 	and.w	r0, r0, #8
  411664:	f000 0aff 	and.w	sl, r0, #255	; 0xff
  411668:	2800      	cmp	r0, #0
  41166a:	d1f2      	bne.n	411652 <_strtol_r+0x12>
  41166c:	2d2d      	cmp	r5, #45	; 0x2d
  41166e:	d05b      	beq.n	411728 <_strtol_r+0xe8>
  411670:	2d2b      	cmp	r5, #43	; 0x2b
  411672:	bf04      	itt	eq
  411674:	7875      	ldrbeq	r5, [r6, #1]
  411676:	1cb4      	addeq	r4, r6, #2
  411678:	f033 0010 	bics.w	r0, r3, #16
  41167c:	d03c      	beq.n	4116f8 <_strtol_r+0xb8>
  41167e:	4699      	mov	r9, r3
  411680:	f1ba 0f00 	cmp.w	sl, #0
  411684:	bf0c      	ite	eq
  411686:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
  41168a:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
  41168e:	fbbb f8f9 	udiv	r8, fp, r9
  411692:	2700      	movs	r7, #0
  411694:	fb09 bb18 	mls	fp, r9, r8, fp
  411698:	4638      	mov	r0, r7
  41169a:	e00c      	b.n	4116b6 <_strtol_r+0x76>
  41169c:	3d30      	subs	r5, #48	; 0x30
  41169e:	42ab      	cmp	r3, r5
  4116a0:	dd19      	ble.n	4116d6 <_strtol_r+0x96>
  4116a2:	1c7e      	adds	r6, r7, #1
  4116a4:	d005      	beq.n	4116b2 <_strtol_r+0x72>
  4116a6:	4540      	cmp	r0, r8
  4116a8:	d823      	bhi.n	4116f2 <_strtol_r+0xb2>
  4116aa:	d020      	beq.n	4116ee <_strtol_r+0xae>
  4116ac:	fb09 5000 	mla	r0, r9, r0, r5
  4116b0:	2701      	movs	r7, #1
  4116b2:	f814 5b01 	ldrb.w	r5, [r4], #1
  4116b6:	eb0c 0605 	add.w	r6, ip, r5
  4116ba:	7876      	ldrb	r6, [r6, #1]
  4116bc:	f016 0f04 	tst.w	r6, #4
  4116c0:	d1ec      	bne.n	41169c <_strtol_r+0x5c>
  4116c2:	f016 0603 	ands.w	r6, r6, #3
  4116c6:	d006      	beq.n	4116d6 <_strtol_r+0x96>
  4116c8:	2e01      	cmp	r6, #1
  4116ca:	bf14      	ite	ne
  4116cc:	2657      	movne	r6, #87	; 0x57
  4116ce:	2637      	moveq	r6, #55	; 0x37
  4116d0:	1bad      	subs	r5, r5, r6
  4116d2:	42ab      	cmp	r3, r5
  4116d4:	dce5      	bgt.n	4116a2 <_strtol_r+0x62>
  4116d6:	1c7b      	adds	r3, r7, #1
  4116d8:	d015      	beq.n	411706 <_strtol_r+0xc6>
  4116da:	f1ba 0f00 	cmp.w	sl, #0
  4116de:	d121      	bne.n	411724 <_strtol_r+0xe4>
  4116e0:	b10a      	cbz	r2, 4116e6 <_strtol_r+0xa6>
  4116e2:	b9ef      	cbnz	r7, 411720 <_strtol_r+0xe0>
  4116e4:	6011      	str	r1, [r2, #0]
  4116e6:	b002      	add	sp, #8
  4116e8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4116ec:	4770      	bx	lr
  4116ee:	455d      	cmp	r5, fp
  4116f0:	dddc      	ble.n	4116ac <_strtol_r+0x6c>
  4116f2:	f04f 37ff 	mov.w	r7, #4294967295
  4116f6:	e7dc      	b.n	4116b2 <_strtol_r+0x72>
  4116f8:	2d30      	cmp	r5, #48	; 0x30
  4116fa:	d01a      	beq.n	411732 <_strtol_r+0xf2>
  4116fc:	2b00      	cmp	r3, #0
  4116fe:	d1be      	bne.n	41167e <_strtol_r+0x3e>
  411700:	230a      	movs	r3, #10
  411702:	4699      	mov	r9, r3
  411704:	e7bc      	b.n	411680 <_strtol_r+0x40>
  411706:	9901      	ldr	r1, [sp, #4]
  411708:	f1ba 0f00 	cmp.w	sl, #0
  41170c:	f04f 0322 	mov.w	r3, #34	; 0x22
  411710:	bf0c      	ite	eq
  411712:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  411716:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  41171a:	600b      	str	r3, [r1, #0]
  41171c:	2a00      	cmp	r2, #0
  41171e:	d0e2      	beq.n	4116e6 <_strtol_r+0xa6>
  411720:	1e61      	subs	r1, r4, #1
  411722:	e7df      	b.n	4116e4 <_strtol_r+0xa4>
  411724:	4240      	negs	r0, r0
  411726:	e7db      	b.n	4116e0 <_strtol_r+0xa0>
  411728:	1cb4      	adds	r4, r6, #2
  41172a:	7875      	ldrb	r5, [r6, #1]
  41172c:	f04f 0a01 	mov.w	sl, #1
  411730:	e7a2      	b.n	411678 <_strtol_r+0x38>
  411732:	7820      	ldrb	r0, [r4, #0]
  411734:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  411738:	2858      	cmp	r0, #88	; 0x58
  41173a:	d003      	beq.n	411744 <_strtol_r+0x104>
  41173c:	2b00      	cmp	r3, #0
  41173e:	d19e      	bne.n	41167e <_strtol_r+0x3e>
  411740:	2308      	movs	r3, #8
  411742:	e79c      	b.n	41167e <_strtol_r+0x3e>
  411744:	2310      	movs	r3, #16
  411746:	7865      	ldrb	r5, [r4, #1]
  411748:	4699      	mov	r9, r3
  41174a:	3402      	adds	r4, #2
  41174c:	e798      	b.n	411680 <_strtol_r+0x40>
  41174e:	bf00      	nop
  411750:	20000644 	.word	0x20000644

00411754 <_strtoll_r>:
  411754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411758:	4c64      	ldr	r4, [pc, #400]	; (4118ec <_strtoll_r+0x198>)
  41175a:	b087      	sub	sp, #28
  41175c:	4694      	mov	ip, r2
  41175e:	9104      	str	r1, [sp, #16]
  411760:	f8d4 8000 	ldr.w	r8, [r4]
  411764:	9005      	str	r0, [sp, #20]
  411766:	4699      	mov	r9, r3
  411768:	460a      	mov	r2, r1
  41176a:	e000      	b.n	41176e <_strtoll_r+0x1a>
  41176c:	4632      	mov	r2, r6
  41176e:	4616      	mov	r6, r2
  411770:	f816 7b01 	ldrb.w	r7, [r6], #1
  411774:	eb08 0307 	add.w	r3, r8, r7
  411778:	785b      	ldrb	r3, [r3, #1]
  41177a:	f003 0308 	and.w	r3, r3, #8
  41177e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  411782:	2b00      	cmp	r3, #0
  411784:	d1f2      	bne.n	41176c <_strtoll_r+0x18>
  411786:	2f2d      	cmp	r7, #45	; 0x2d
  411788:	f000 808d 	beq.w	4118a6 <_strtoll_r+0x152>
  41178c:	2f2b      	cmp	r7, #43	; 0x2b
  41178e:	bf08      	it	eq
  411790:	7857      	ldrbeq	r7, [r2, #1]
  411792:	9102      	str	r1, [sp, #8]
  411794:	bf08      	it	eq
  411796:	1c96      	addeq	r6, r2, #2
  411798:	f039 0110 	bics.w	r1, r9, #16
  41179c:	d05e      	beq.n	41185c <_strtoll_r+0x108>
  41179e:	46ca      	mov	sl, r9
  4117a0:	ea4f 7be9 	mov.w	fp, r9, asr #31
  4117a4:	9c02      	ldr	r4, [sp, #8]
  4117a6:	2c00      	cmp	r4, #0
  4117a8:	d066      	beq.n	411878 <_strtoll_r+0x124>
  4117aa:	2400      	movs	r4, #0
  4117ac:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  4117b0:	4620      	mov	r0, r4
  4117b2:	4629      	mov	r1, r5
  4117b4:	4652      	mov	r2, sl
  4117b6:	465b      	mov	r3, fp
  4117b8:	f8cd c004 	str.w	ip, [sp, #4]
  4117bc:	f7f8 f98e 	bl	409adc <__aeabi_uldivmod>
  4117c0:	4620      	mov	r0, r4
  4117c2:	9203      	str	r2, [sp, #12]
  4117c4:	465b      	mov	r3, fp
  4117c6:	4652      	mov	r2, sl
  4117c8:	4629      	mov	r1, r5
  4117ca:	f7f8 f987 	bl	409adc <__aeabi_uldivmod>
  4117ce:	2400      	movs	r4, #0
  4117d0:	2200      	movs	r2, #0
  4117d2:	2300      	movs	r3, #0
  4117d4:	f8dd c004 	ldr.w	ip, [sp, #4]
  4117d8:	e019      	b.n	41180e <_strtoll_r+0xba>
  4117da:	3f30      	subs	r7, #48	; 0x30
  4117dc:	45b9      	cmp	r9, r7
  4117de:	dd26      	ble.n	41182e <_strtoll_r+0xda>
  4117e0:	1c65      	adds	r5, r4, #1
  4117e2:	d012      	beq.n	41180a <_strtoll_r+0xb6>
  4117e4:	4299      	cmp	r1, r3
  4117e6:	bf08      	it	eq
  4117e8:	4290      	cmpeq	r0, r2
  4117ea:	d334      	bcc.n	411856 <_strtoll_r+0x102>
  4117ec:	428b      	cmp	r3, r1
  4117ee:	bf08      	it	eq
  4117f0:	4282      	cmpeq	r2, r0
  4117f2:	d02d      	beq.n	411850 <_strtoll_r+0xfc>
  4117f4:	fb02 f40b 	mul.w	r4, r2, fp
  4117f8:	fb0a 4403 	mla	r4, sl, r3, r4
  4117fc:	fba2 230a 	umull	r2, r3, r2, sl
  411800:	4423      	add	r3, r4
  411802:	19d2      	adds	r2, r2, r7
  411804:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
  411808:	2401      	movs	r4, #1
  41180a:	f816 7b01 	ldrb.w	r7, [r6], #1
  41180e:	eb08 0507 	add.w	r5, r8, r7
  411812:	786d      	ldrb	r5, [r5, #1]
  411814:	f015 0f04 	tst.w	r5, #4
  411818:	d1df      	bne.n	4117da <_strtoll_r+0x86>
  41181a:	f015 0503 	ands.w	r5, r5, #3
  41181e:	d006      	beq.n	41182e <_strtoll_r+0xda>
  411820:	2d01      	cmp	r5, #1
  411822:	bf14      	ite	ne
  411824:	2557      	movne	r5, #87	; 0x57
  411826:	2537      	moveq	r5, #55	; 0x37
  411828:	1b7f      	subs	r7, r7, r5
  41182a:	45b9      	cmp	r9, r7
  41182c:	dcd8      	bgt.n	4117e0 <_strtoll_r+0x8c>
  41182e:	1c61      	adds	r1, r4, #1
  411830:	d027      	beq.n	411882 <_strtoll_r+0x12e>
  411832:	9902      	ldr	r1, [sp, #8]
  411834:	2900      	cmp	r1, #0
  411836:	d132      	bne.n	41189e <_strtoll_r+0x14a>
  411838:	4610      	mov	r0, r2
  41183a:	4619      	mov	r1, r3
  41183c:	f1bc 0f00 	cmp.w	ip, #0
  411840:	d003      	beq.n	41184a <_strtoll_r+0xf6>
  411842:	bb54      	cbnz	r4, 41189a <_strtoll_r+0x146>
  411844:	9e04      	ldr	r6, [sp, #16]
  411846:	f8cc 6000 	str.w	r6, [ip]
  41184a:	b007      	add	sp, #28
  41184c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411850:	9c03      	ldr	r4, [sp, #12]
  411852:	42a7      	cmp	r7, r4
  411854:	ddce      	ble.n	4117f4 <_strtoll_r+0xa0>
  411856:	f04f 34ff 	mov.w	r4, #4294967295
  41185a:	e7d6      	b.n	41180a <_strtoll_r+0xb6>
  41185c:	2f30      	cmp	r7, #48	; 0x30
  41185e:	d027      	beq.n	4118b0 <_strtoll_r+0x15c>
  411860:	f1b9 0f00 	cmp.w	r9, #0
  411864:	d19b      	bne.n	41179e <_strtoll_r+0x4a>
  411866:	9c02      	ldr	r4, [sp, #8]
  411868:	f04f 0a0a 	mov.w	sl, #10
  41186c:	f04f 0b00 	mov.w	fp, #0
  411870:	f04f 090a 	mov.w	r9, #10
  411874:	2c00      	cmp	r4, #0
  411876:	d198      	bne.n	4117aa <_strtoll_r+0x56>
  411878:	f04f 34ff 	mov.w	r4, #4294967295
  41187c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  411880:	e796      	b.n	4117b0 <_strtoll_r+0x5c>
  411882:	9c02      	ldr	r4, [sp, #8]
  411884:	bb24      	cbnz	r4, 4118d0 <_strtoll_r+0x17c>
  411886:	f04f 30ff 	mov.w	r0, #4294967295
  41188a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  41188e:	9c05      	ldr	r4, [sp, #20]
  411890:	2322      	movs	r3, #34	; 0x22
  411892:	6023      	str	r3, [r4, #0]
  411894:	f1bc 0f00 	cmp.w	ip, #0
  411898:	d0d7      	beq.n	41184a <_strtoll_r+0xf6>
  41189a:	3e01      	subs	r6, #1
  41189c:	e7d3      	b.n	411846 <_strtoll_r+0xf2>
  41189e:	4252      	negs	r2, r2
  4118a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4118a4:	e7c8      	b.n	411838 <_strtoll_r+0xe4>
  4118a6:	2401      	movs	r4, #1
  4118a8:	1c96      	adds	r6, r2, #2
  4118aa:	7857      	ldrb	r7, [r2, #1]
  4118ac:	9402      	str	r4, [sp, #8]
  4118ae:	e773      	b.n	411798 <_strtoll_r+0x44>
  4118b0:	7833      	ldrb	r3, [r6, #0]
  4118b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4118b6:	2b58      	cmp	r3, #88	; 0x58
  4118b8:	d00e      	beq.n	4118d8 <_strtoll_r+0x184>
  4118ba:	f1b9 0f00 	cmp.w	r9, #0
  4118be:	f47f af6e 	bne.w	41179e <_strtoll_r+0x4a>
  4118c2:	f04f 0a08 	mov.w	sl, #8
  4118c6:	f04f 0b00 	mov.w	fp, #0
  4118ca:	f04f 0908 	mov.w	r9, #8
  4118ce:	e769      	b.n	4117a4 <_strtoll_r+0x50>
  4118d0:	2000      	movs	r0, #0
  4118d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4118d6:	e7da      	b.n	41188e <_strtoll_r+0x13a>
  4118d8:	7877      	ldrb	r7, [r6, #1]
  4118da:	f04f 0a10 	mov.w	sl, #16
  4118de:	f04f 0b00 	mov.w	fp, #0
  4118e2:	3602      	adds	r6, #2
  4118e4:	f04f 0910 	mov.w	r9, #16
  4118e8:	e75c      	b.n	4117a4 <_strtoll_r+0x50>
  4118ea:	bf00      	nop
  4118ec:	20000644 	.word	0x20000644

004118f0 <_strtoul_r>:
  4118f0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4118f4:	4c44      	ldr	r4, [pc, #272]	; (411a08 <_strtoul_r+0x118>)
  4118f6:	b082      	sub	sp, #8
  4118f8:	f8d4 c000 	ldr.w	ip, [r4]
  4118fc:	9001      	str	r0, [sp, #4]
  4118fe:	460e      	mov	r6, r1
  411900:	e000      	b.n	411904 <_strtoul_r+0x14>
  411902:	4626      	mov	r6, r4
  411904:	4634      	mov	r4, r6
  411906:	f814 5b01 	ldrb.w	r5, [r4], #1
  41190a:	eb0c 0005 	add.w	r0, ip, r5
  41190e:	7840      	ldrb	r0, [r0, #1]
  411910:	f000 0008 	and.w	r0, r0, #8
  411914:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  411918:	2800      	cmp	r0, #0
  41191a:	d1f2      	bne.n	411902 <_strtoul_r+0x12>
  41191c:	2d2d      	cmp	r5, #45	; 0x2d
  41191e:	d057      	beq.n	4119d0 <_strtoul_r+0xe0>
  411920:	2d2b      	cmp	r5, #43	; 0x2b
  411922:	bf08      	it	eq
  411924:	7875      	ldrbeq	r5, [r6, #1]
  411926:	46ba      	mov	sl, r7
  411928:	bf08      	it	eq
  41192a:	1cb4      	addeq	r4, r6, #2
  41192c:	f033 0010 	bics.w	r0, r3, #16
  411930:	d039      	beq.n	4119a6 <_strtoul_r+0xb6>
  411932:	f04f 38ff 	mov.w	r8, #4294967295
  411936:	fbb8 f8f3 	udiv	r8, r8, r3
  41193a:	fb03 fb08 	mul.w	fp, r3, r8
  41193e:	ea6f 0b0b 	mvn.w	fp, fp
  411942:	4699      	mov	r9, r3
  411944:	2700      	movs	r7, #0
  411946:	4638      	mov	r0, r7
  411948:	e00c      	b.n	411964 <_strtoul_r+0x74>
  41194a:	3d30      	subs	r5, #48	; 0x30
  41194c:	42ab      	cmp	r3, r5
  41194e:	dd19      	ble.n	411984 <_strtoul_r+0x94>
  411950:	2f00      	cmp	r7, #0
  411952:	db25      	blt.n	4119a0 <_strtoul_r+0xb0>
  411954:	4540      	cmp	r0, r8
  411956:	d823      	bhi.n	4119a0 <_strtoul_r+0xb0>
  411958:	d020      	beq.n	41199c <_strtoul_r+0xac>
  41195a:	fb09 5000 	mla	r0, r9, r0, r5
  41195e:	2701      	movs	r7, #1
  411960:	f814 5b01 	ldrb.w	r5, [r4], #1
  411964:	eb0c 0605 	add.w	r6, ip, r5
  411968:	7876      	ldrb	r6, [r6, #1]
  41196a:	f016 0f04 	tst.w	r6, #4
  41196e:	d1ec      	bne.n	41194a <_strtoul_r+0x5a>
  411970:	f016 0603 	ands.w	r6, r6, #3
  411974:	d006      	beq.n	411984 <_strtoul_r+0x94>
  411976:	2e01      	cmp	r6, #1
  411978:	bf14      	ite	ne
  41197a:	2657      	movne	r6, #87	; 0x57
  41197c:	2637      	moveq	r6, #55	; 0x37
  41197e:	1bad      	subs	r5, r5, r6
  411980:	42ab      	cmp	r3, r5
  411982:	dce5      	bgt.n	411950 <_strtoul_r+0x60>
  411984:	2f00      	cmp	r7, #0
  411986:	db1d      	blt.n	4119c4 <_strtoul_r+0xd4>
  411988:	f1ba 0f00 	cmp.w	sl, #0
  41198c:	d118      	bne.n	4119c0 <_strtoul_r+0xd0>
  41198e:	b10a      	cbz	r2, 411994 <_strtoul_r+0xa4>
  411990:	b9a7      	cbnz	r7, 4119bc <_strtoul_r+0xcc>
  411992:	6011      	str	r1, [r2, #0]
  411994:	b002      	add	sp, #8
  411996:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41199a:	4770      	bx	lr
  41199c:	455d      	cmp	r5, fp
  41199e:	dddc      	ble.n	41195a <_strtoul_r+0x6a>
  4119a0:	f04f 37ff 	mov.w	r7, #4294967295
  4119a4:	e7dc      	b.n	411960 <_strtoul_r+0x70>
  4119a6:	2d30      	cmp	r5, #48	; 0x30
  4119a8:	d017      	beq.n	4119da <_strtoul_r+0xea>
  4119aa:	2b00      	cmp	r3, #0
  4119ac:	d1c1      	bne.n	411932 <_strtoul_r+0x42>
  4119ae:	230a      	movs	r3, #10
  4119b0:	4699      	mov	r9, r3
  4119b2:	f04f 0b05 	mov.w	fp, #5
  4119b6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 411a0c <_strtoul_r+0x11c>
  4119ba:	e7c3      	b.n	411944 <_strtoul_r+0x54>
  4119bc:	1e61      	subs	r1, r4, #1
  4119be:	e7e8      	b.n	411992 <_strtoul_r+0xa2>
  4119c0:	4240      	negs	r0, r0
  4119c2:	e7e4      	b.n	41198e <_strtoul_r+0x9e>
  4119c4:	9801      	ldr	r0, [sp, #4]
  4119c6:	2322      	movs	r3, #34	; 0x22
  4119c8:	6003      	str	r3, [r0, #0]
  4119ca:	f04f 30ff 	mov.w	r0, #4294967295
  4119ce:	e7de      	b.n	41198e <_strtoul_r+0x9e>
  4119d0:	1cb4      	adds	r4, r6, #2
  4119d2:	7875      	ldrb	r5, [r6, #1]
  4119d4:	f04f 0a01 	mov.w	sl, #1
  4119d8:	e7a8      	b.n	41192c <_strtoul_r+0x3c>
  4119da:	7820      	ldrb	r0, [r4, #0]
  4119dc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  4119e0:	2858      	cmp	r0, #88	; 0x58
  4119e2:	d008      	beq.n	4119f6 <_strtoul_r+0x106>
  4119e4:	2b00      	cmp	r3, #0
  4119e6:	d1a4      	bne.n	411932 <_strtoul_r+0x42>
  4119e8:	2308      	movs	r3, #8
  4119ea:	4699      	mov	r9, r3
  4119ec:	f04f 0b07 	mov.w	fp, #7
  4119f0:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
  4119f4:	e7a6      	b.n	411944 <_strtoul_r+0x54>
  4119f6:	2310      	movs	r3, #16
  4119f8:	7865      	ldrb	r5, [r4, #1]
  4119fa:	4699      	mov	r9, r3
  4119fc:	f04f 0b0f 	mov.w	fp, #15
  411a00:	3402      	adds	r4, #2
  411a02:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  411a06:	e79d      	b.n	411944 <_strtoul_r+0x54>
  411a08:	20000644 	.word	0x20000644
  411a0c:	19999999 	.word	0x19999999

00411a10 <_strtoull_r>:
  411a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411a14:	4c60      	ldr	r4, [pc, #384]	; (411b98 <_strtoull_r+0x188>)
  411a16:	b085      	sub	sp, #20
  411a18:	f8d4 8000 	ldr.w	r8, [r4]
  411a1c:	9200      	str	r2, [sp, #0]
  411a1e:	9101      	str	r1, [sp, #4]
  411a20:	9003      	str	r0, [sp, #12]
  411a22:	4699      	mov	r9, r3
  411a24:	460a      	mov	r2, r1
  411a26:	e000      	b.n	411a2a <_strtoull_r+0x1a>
  411a28:	4632      	mov	r2, r6
  411a2a:	4616      	mov	r6, r2
  411a2c:	f816 7b01 	ldrb.w	r7, [r6], #1
  411a30:	eb08 0307 	add.w	r3, r8, r7
  411a34:	785b      	ldrb	r3, [r3, #1]
  411a36:	f003 0308 	and.w	r3, r3, #8
  411a3a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  411a3e:	2b00      	cmp	r3, #0
  411a40:	d1f2      	bne.n	411a28 <_strtoull_r+0x18>
  411a42:	2f2d      	cmp	r7, #45	; 0x2d
  411a44:	d07d      	beq.n	411b42 <_strtoull_r+0x132>
  411a46:	2f2b      	cmp	r7, #43	; 0x2b
  411a48:	bf08      	it	eq
  411a4a:	7857      	ldrbeq	r7, [r2, #1]
  411a4c:	9102      	str	r1, [sp, #8]
  411a4e:	bf08      	it	eq
  411a50:	1c96      	addeq	r6, r2, #2
  411a52:	f039 0210 	bics.w	r2, r9, #16
  411a56:	d055      	beq.n	411b04 <_strtoull_r+0xf4>
  411a58:	ea4f 7be9 	mov.w	fp, r9, asr #31
  411a5c:	464a      	mov	r2, r9
  411a5e:	465b      	mov	r3, fp
  411a60:	f04f 30ff 	mov.w	r0, #4294967295
  411a64:	f04f 31ff 	mov.w	r1, #4294967295
  411a68:	f7f8 f838 	bl	409adc <__aeabi_uldivmod>
  411a6c:	464a      	mov	r2, r9
  411a6e:	4604      	mov	r4, r0
  411a70:	460d      	mov	r5, r1
  411a72:	465b      	mov	r3, fp
  411a74:	f04f 30ff 	mov.w	r0, #4294967295
  411a78:	f04f 31ff 	mov.w	r1, #4294967295
  411a7c:	f7f8 f82e 	bl	409adc <__aeabi_uldivmod>
  411a80:	46ca      	mov	sl, r9
  411a82:	4694      	mov	ip, r2
  411a84:	2300      	movs	r3, #0
  411a86:	2000      	movs	r0, #0
  411a88:	2100      	movs	r1, #0
  411a8a:	e019      	b.n	411ac0 <_strtoull_r+0xb0>
  411a8c:	3f30      	subs	r7, #48	; 0x30
  411a8e:	45b9      	cmp	r9, r7
  411a90:	dd26      	ble.n	411ae0 <_strtoull_r+0xd0>
  411a92:	2b00      	cmp	r3, #0
  411a94:	db33      	blt.n	411afe <_strtoull_r+0xee>
  411a96:	428d      	cmp	r5, r1
  411a98:	bf08      	it	eq
  411a9a:	4284      	cmpeq	r4, r0
  411a9c:	d32f      	bcc.n	411afe <_strtoull_r+0xee>
  411a9e:	42a9      	cmp	r1, r5
  411aa0:	bf08      	it	eq
  411aa2:	42a0      	cmpeq	r0, r4
  411aa4:	d029      	beq.n	411afa <_strtoull_r+0xea>
  411aa6:	fb00 f30b 	mul.w	r3, r0, fp
  411aaa:	fb0a 3301 	mla	r3, sl, r1, r3
  411aae:	fba0 010a 	umull	r0, r1, r0, sl
  411ab2:	4419      	add	r1, r3
  411ab4:	19c0      	adds	r0, r0, r7
  411ab6:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
  411aba:	2301      	movs	r3, #1
  411abc:	f816 7b01 	ldrb.w	r7, [r6], #1
  411ac0:	eb08 0207 	add.w	r2, r8, r7
  411ac4:	7852      	ldrb	r2, [r2, #1]
  411ac6:	f012 0f04 	tst.w	r2, #4
  411aca:	d1df      	bne.n	411a8c <_strtoull_r+0x7c>
  411acc:	f012 0203 	ands.w	r2, r2, #3
  411ad0:	d006      	beq.n	411ae0 <_strtoull_r+0xd0>
  411ad2:	2a01      	cmp	r2, #1
  411ad4:	bf14      	ite	ne
  411ad6:	2257      	movne	r2, #87	; 0x57
  411ad8:	2237      	moveq	r2, #55	; 0x37
  411ada:	1abf      	subs	r7, r7, r2
  411adc:	45b9      	cmp	r9, r7
  411ade:	dcd8      	bgt.n	411a92 <_strtoull_r+0x82>
  411ae0:	2b00      	cmp	r3, #0
  411ae2:	db26      	blt.n	411b32 <_strtoull_r+0x122>
  411ae4:	9a02      	ldr	r2, [sp, #8]
  411ae6:	bb02      	cbnz	r2, 411b2a <_strtoull_r+0x11a>
  411ae8:	9a00      	ldr	r2, [sp, #0]
  411aea:	b11a      	cbz	r2, 411af4 <_strtoull_r+0xe4>
  411aec:	b9db      	cbnz	r3, 411b26 <_strtoull_r+0x116>
  411aee:	9e01      	ldr	r6, [sp, #4]
  411af0:	9b00      	ldr	r3, [sp, #0]
  411af2:	601e      	str	r6, [r3, #0]
  411af4:	b005      	add	sp, #20
  411af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411afa:	4567      	cmp	r7, ip
  411afc:	ddd3      	ble.n	411aa6 <_strtoull_r+0x96>
  411afe:	f04f 33ff 	mov.w	r3, #4294967295
  411b02:	e7db      	b.n	411abc <_strtoull_r+0xac>
  411b04:	2f30      	cmp	r7, #48	; 0x30
  411b06:	d021      	beq.n	411b4c <_strtoull_r+0x13c>
  411b08:	f1b9 0f00 	cmp.w	r9, #0
  411b0c:	d1a4      	bne.n	411a58 <_strtoull_r+0x48>
  411b0e:	f04f 0c05 	mov.w	ip, #5
  411b12:	f04f 3499 	mov.w	r4, #2576980377	; 0x99999999
  411b16:	4d21      	ldr	r5, [pc, #132]	; (411b9c <_strtoull_r+0x18c>)
  411b18:	f04f 0a0a 	mov.w	sl, #10
  411b1c:	f04f 0b00 	mov.w	fp, #0
  411b20:	f04f 090a 	mov.w	r9, #10
  411b24:	e7ae      	b.n	411a84 <_strtoull_r+0x74>
  411b26:	3e01      	subs	r6, #1
  411b28:	e7e2      	b.n	411af0 <_strtoull_r+0xe0>
  411b2a:	4240      	negs	r0, r0
  411b2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  411b30:	e7da      	b.n	411ae8 <_strtoull_r+0xd8>
  411b32:	9903      	ldr	r1, [sp, #12]
  411b34:	2222      	movs	r2, #34	; 0x22
  411b36:	600a      	str	r2, [r1, #0]
  411b38:	f04f 30ff 	mov.w	r0, #4294967295
  411b3c:	f04f 31ff 	mov.w	r1, #4294967295
  411b40:	e7d2      	b.n	411ae8 <_strtoull_r+0xd8>
  411b42:	2101      	movs	r1, #1
  411b44:	1c96      	adds	r6, r2, #2
  411b46:	7857      	ldrb	r7, [r2, #1]
  411b48:	9102      	str	r1, [sp, #8]
  411b4a:	e782      	b.n	411a52 <_strtoull_r+0x42>
  411b4c:	7833      	ldrb	r3, [r6, #0]
  411b4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  411b52:	2b58      	cmp	r3, #88	; 0x58
  411b54:	d010      	beq.n	411b78 <_strtoull_r+0x168>
  411b56:	f1b9 0f00 	cmp.w	r9, #0
  411b5a:	f47f af7d 	bne.w	411a58 <_strtoull_r+0x48>
  411b5e:	f04f 0c07 	mov.w	ip, #7
  411b62:	f04f 34ff 	mov.w	r4, #4294967295
  411b66:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
  411b6a:	f04f 0a08 	mov.w	sl, #8
  411b6e:	f04f 0b00 	mov.w	fp, #0
  411b72:	f04f 0908 	mov.w	r9, #8
  411b76:	e785      	b.n	411a84 <_strtoull_r+0x74>
  411b78:	7877      	ldrb	r7, [r6, #1]
  411b7a:	f04f 0c0f 	mov.w	ip, #15
  411b7e:	3602      	adds	r6, #2
  411b80:	f04f 34ff 	mov.w	r4, #4294967295
  411b84:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
  411b88:	f04f 0a10 	mov.w	sl, #16
  411b8c:	f04f 0b00 	mov.w	fp, #0
  411b90:	f04f 0910 	mov.w	r9, #16
  411b94:	e776      	b.n	411a84 <_strtoull_r+0x74>
  411b96:	bf00      	nop
  411b98:	20000644 	.word	0x20000644
  411b9c:	19999999 	.word	0x19999999

00411ba0 <__ssprint_r>:
  411ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411ba4:	6894      	ldr	r4, [r2, #8]
  411ba6:	6816      	ldr	r6, [r2, #0]
  411ba8:	b083      	sub	sp, #12
  411baa:	4692      	mov	sl, r2
  411bac:	4680      	mov	r8, r0
  411bae:	460d      	mov	r5, r1
  411bb0:	2c00      	cmp	r4, #0
  411bb2:	d06f      	beq.n	411c94 <__ssprint_r+0xf4>
  411bb4:	f04f 0b00 	mov.w	fp, #0
  411bb8:	6808      	ldr	r0, [r1, #0]
  411bba:	688b      	ldr	r3, [r1, #8]
  411bbc:	465c      	mov	r4, fp
  411bbe:	2c00      	cmp	r4, #0
  411bc0:	d043      	beq.n	411c4a <__ssprint_r+0xaa>
  411bc2:	429c      	cmp	r4, r3
  411bc4:	461f      	mov	r7, r3
  411bc6:	d345      	bcc.n	411c54 <__ssprint_r+0xb4>
  411bc8:	89ab      	ldrh	r3, [r5, #12]
  411bca:	f413 6f90 	tst.w	r3, #1152	; 0x480
  411bce:	d044      	beq.n	411c5a <__ssprint_r+0xba>
  411bd0:	696f      	ldr	r7, [r5, #20]
  411bd2:	6929      	ldr	r1, [r5, #16]
  411bd4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  411bd8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  411bdc:	ebc1 0900 	rsb	r9, r1, r0
  411be0:	1c62      	adds	r2, r4, #1
  411be2:	107f      	asrs	r7, r7, #1
  411be4:	444a      	add	r2, r9
  411be6:	4297      	cmp	r7, r2
  411be8:	bf34      	ite	cc
  411bea:	4617      	movcc	r7, r2
  411bec:	463a      	movcs	r2, r7
  411bee:	055b      	lsls	r3, r3, #21
  411bf0:	d535      	bpl.n	411c5e <__ssprint_r+0xbe>
  411bf2:	4611      	mov	r1, r2
  411bf4:	4640      	mov	r0, r8
  411bf6:	f7fd fb1b 	bl	40f230 <_malloc_r>
  411bfa:	2800      	cmp	r0, #0
  411bfc:	d039      	beq.n	411c72 <__ssprint_r+0xd2>
  411bfe:	6929      	ldr	r1, [r5, #16]
  411c00:	9001      	str	r0, [sp, #4]
  411c02:	464a      	mov	r2, r9
  411c04:	f7f8 fa7c 	bl	40a100 <memcpy>
  411c08:	89aa      	ldrh	r2, [r5, #12]
  411c0a:	9b01      	ldr	r3, [sp, #4]
  411c0c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  411c10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  411c14:	81aa      	strh	r2, [r5, #12]
  411c16:	ebc9 0207 	rsb	r2, r9, r7
  411c1a:	eb03 0009 	add.w	r0, r3, r9
  411c1e:	616f      	str	r7, [r5, #20]
  411c20:	612b      	str	r3, [r5, #16]
  411c22:	6028      	str	r0, [r5, #0]
  411c24:	60aa      	str	r2, [r5, #8]
  411c26:	4627      	mov	r7, r4
  411c28:	46a1      	mov	r9, r4
  411c2a:	464a      	mov	r2, r9
  411c2c:	4659      	mov	r1, fp
  411c2e:	f7fd fe27 	bl	40f880 <memmove>
  411c32:	f8da 2008 	ldr.w	r2, [sl, #8]
  411c36:	68ab      	ldr	r3, [r5, #8]
  411c38:	6828      	ldr	r0, [r5, #0]
  411c3a:	1bdb      	subs	r3, r3, r7
  411c3c:	4448      	add	r0, r9
  411c3e:	1b14      	subs	r4, r2, r4
  411c40:	60ab      	str	r3, [r5, #8]
  411c42:	6028      	str	r0, [r5, #0]
  411c44:	f8ca 4008 	str.w	r4, [sl, #8]
  411c48:	b324      	cbz	r4, 411c94 <__ssprint_r+0xf4>
  411c4a:	f8d6 b000 	ldr.w	fp, [r6]
  411c4e:	6874      	ldr	r4, [r6, #4]
  411c50:	3608      	adds	r6, #8
  411c52:	e7b4      	b.n	411bbe <__ssprint_r+0x1e>
  411c54:	4627      	mov	r7, r4
  411c56:	46a1      	mov	r9, r4
  411c58:	e7e7      	b.n	411c2a <__ssprint_r+0x8a>
  411c5a:	46b9      	mov	r9, r7
  411c5c:	e7e5      	b.n	411c2a <__ssprint_r+0x8a>
  411c5e:	4640      	mov	r0, r8
  411c60:	f7fe fad2 	bl	410208 <_realloc_r>
  411c64:	4603      	mov	r3, r0
  411c66:	2800      	cmp	r0, #0
  411c68:	d1d5      	bne.n	411c16 <__ssprint_r+0x76>
  411c6a:	4640      	mov	r0, r8
  411c6c:	6929      	ldr	r1, [r5, #16]
  411c6e:	f7fc ffb7 	bl	40ebe0 <_free_r>
  411c72:	89aa      	ldrh	r2, [r5, #12]
  411c74:	230c      	movs	r3, #12
  411c76:	f8c8 3000 	str.w	r3, [r8]
  411c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  411c7e:	2300      	movs	r3, #0
  411c80:	f04f 30ff 	mov.w	r0, #4294967295
  411c84:	81aa      	strh	r2, [r5, #12]
  411c86:	f8ca 3008 	str.w	r3, [sl, #8]
  411c8a:	f8ca 3004 	str.w	r3, [sl, #4]
  411c8e:	b003      	add	sp, #12
  411c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411c94:	4620      	mov	r0, r4
  411c96:	f8ca 4004 	str.w	r4, [sl, #4]
  411c9a:	b003      	add	sp, #12
  411c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00411ca0 <_sungetc_r>:
  411ca0:	b538      	push	{r3, r4, r5, lr}
  411ca2:	1c4b      	adds	r3, r1, #1
  411ca4:	4614      	mov	r4, r2
  411ca6:	d019      	beq.n	411cdc <_sungetc_r+0x3c>
  411ca8:	8992      	ldrh	r2, [r2, #12]
  411caa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  411cac:	f022 0220 	bic.w	r2, r2, #32
  411cb0:	b2cd      	uxtb	r5, r1
  411cb2:	81a2      	strh	r2, [r4, #12]
  411cb4:	b1ab      	cbz	r3, 411ce2 <_sungetc_r+0x42>
  411cb6:	6862      	ldr	r2, [r4, #4]
  411cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  411cba:	429a      	cmp	r2, r3
  411cbc:	da09      	bge.n	411cd2 <_sungetc_r+0x32>
  411cbe:	6823      	ldr	r3, [r4, #0]
  411cc0:	1e5a      	subs	r2, r3, #1
  411cc2:	6022      	str	r2, [r4, #0]
  411cc4:	f803 5c01 	strb.w	r5, [r3, #-1]
  411cc8:	6863      	ldr	r3, [r4, #4]
  411cca:	3301      	adds	r3, #1
  411ccc:	4628      	mov	r0, r5
  411cce:	6063      	str	r3, [r4, #4]
  411cd0:	bd38      	pop	{r3, r4, r5, pc}
  411cd2:	4621      	mov	r1, r4
  411cd4:	f000 f882 	bl	411ddc <__submore>
  411cd8:	2800      	cmp	r0, #0
  411cda:	d0f0      	beq.n	411cbe <_sungetc_r+0x1e>
  411cdc:	f04f 30ff 	mov.w	r0, #4294967295
  411ce0:	bd38      	pop	{r3, r4, r5, pc}
  411ce2:	6923      	ldr	r3, [r4, #16]
  411ce4:	6822      	ldr	r2, [r4, #0]
  411ce6:	b12b      	cbz	r3, 411cf4 <_sungetc_r+0x54>
  411ce8:	4293      	cmp	r3, r2
  411cea:	d203      	bcs.n	411cf4 <_sungetc_r+0x54>
  411cec:	f812 0c01 	ldrb.w	r0, [r2, #-1]
  411cf0:	42a8      	cmp	r0, r5
  411cf2:	d00f      	beq.n	411d14 <_sungetc_r+0x74>
  411cf4:	4623      	mov	r3, r4
  411cf6:	6861      	ldr	r1, [r4, #4]
  411cf8:	63a2      	str	r2, [r4, #56]	; 0x38
  411cfa:	f104 0040 	add.w	r0, r4, #64	; 0x40
  411cfe:	2203      	movs	r2, #3
  411d00:	6320      	str	r0, [r4, #48]	; 0x30
  411d02:	6362      	str	r2, [r4, #52]	; 0x34
  411d04:	63e1      	str	r1, [r4, #60]	; 0x3c
  411d06:	f803 5f42 	strb.w	r5, [r3, #66]!
  411d0a:	2201      	movs	r2, #1
  411d0c:	6023      	str	r3, [r4, #0]
  411d0e:	4628      	mov	r0, r5
  411d10:	6062      	str	r2, [r4, #4]
  411d12:	bd38      	pop	{r3, r4, r5, pc}
  411d14:	6863      	ldr	r3, [r4, #4]
  411d16:	3a01      	subs	r2, #1
  411d18:	3301      	adds	r3, #1
  411d1a:	e884 000c 	stmia.w	r4, {r2, r3}
  411d1e:	bd38      	pop	{r3, r4, r5, pc}

00411d20 <__ssrefill_r>:
  411d20:	b510      	push	{r4, lr}
  411d22:	460c      	mov	r4, r1
  411d24:	6b09      	ldr	r1, [r1, #48]	; 0x30
  411d26:	b169      	cbz	r1, 411d44 <__ssrefill_r+0x24>
  411d28:	f104 0340 	add.w	r3, r4, #64	; 0x40
  411d2c:	4299      	cmp	r1, r3
  411d2e:	d001      	beq.n	411d34 <__ssrefill_r+0x14>
  411d30:	f7fc ff56 	bl	40ebe0 <_free_r>
  411d34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  411d36:	6063      	str	r3, [r4, #4]
  411d38:	2000      	movs	r0, #0
  411d3a:	6320      	str	r0, [r4, #48]	; 0x30
  411d3c:	b113      	cbz	r3, 411d44 <__ssrefill_r+0x24>
  411d3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  411d40:	6023      	str	r3, [r4, #0]
  411d42:	bd10      	pop	{r4, pc}
  411d44:	89a2      	ldrh	r2, [r4, #12]
  411d46:	6923      	ldr	r3, [r4, #16]
  411d48:	6023      	str	r3, [r4, #0]
  411d4a:	f042 0220 	orr.w	r2, r2, #32
  411d4e:	2300      	movs	r3, #0
  411d50:	81a2      	strh	r2, [r4, #12]
  411d52:	6063      	str	r3, [r4, #4]
  411d54:	f04f 30ff 	mov.w	r0, #4294967295
  411d58:	bd10      	pop	{r4, pc}
  411d5a:	bf00      	nop

00411d5c <_sfread_r>:
  411d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411d60:	b083      	sub	sp, #12
  411d62:	fb02 f903 	mul.w	r9, r2, r3
  411d66:	9201      	str	r2, [sp, #4]
  411d68:	469a      	mov	sl, r3
  411d6a:	4607      	mov	r7, r0
  411d6c:	460e      	mov	r6, r1
  411d6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  411d70:	f1b9 0f00 	cmp.w	r9, #0
  411d74:	d026      	beq.n	411dc4 <_sfread_r+0x68>
  411d76:	464d      	mov	r5, r9
  411d78:	f04f 0800 	mov.w	r8, #0
  411d7c:	e00e      	b.n	411d9c <_sfread_r+0x40>
  411d7e:	f7f8 f9bf 	bl	40a100 <memcpy>
  411d82:	6822      	ldr	r2, [r4, #0]
  411d84:	f8c4 8004 	str.w	r8, [r4, #4]
  411d88:	445a      	add	r2, fp
  411d8a:	6022      	str	r2, [r4, #0]
  411d8c:	4638      	mov	r0, r7
  411d8e:	4621      	mov	r1, r4
  411d90:	445e      	add	r6, fp
  411d92:	ebcb 0505 	rsb	r5, fp, r5
  411d96:	f7ff ffc3 	bl	411d20 <__ssrefill_r>
  411d9a:	b9b8      	cbnz	r0, 411dcc <_sfread_r+0x70>
  411d9c:	f8d4 b004 	ldr.w	fp, [r4, #4]
  411da0:	6821      	ldr	r1, [r4, #0]
  411da2:	455d      	cmp	r5, fp
  411da4:	4630      	mov	r0, r6
  411da6:	465a      	mov	r2, fp
  411da8:	d8e9      	bhi.n	411d7e <_sfread_r+0x22>
  411daa:	462a      	mov	r2, r5
  411dac:	f7f8 f9a8 	bl	40a100 <memcpy>
  411db0:	6862      	ldr	r2, [r4, #4]
  411db2:	6823      	ldr	r3, [r4, #0]
  411db4:	1b52      	subs	r2, r2, r5
  411db6:	442b      	add	r3, r5
  411db8:	4650      	mov	r0, sl
  411dba:	6062      	str	r2, [r4, #4]
  411dbc:	6023      	str	r3, [r4, #0]
  411dbe:	b003      	add	sp, #12
  411dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411dc4:	4648      	mov	r0, r9
  411dc6:	b003      	add	sp, #12
  411dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411dcc:	9b01      	ldr	r3, [sp, #4]
  411dce:	ebc5 0909 	rsb	r9, r5, r9
  411dd2:	fbb9 f0f3 	udiv	r0, r9, r3
  411dd6:	b003      	add	sp, #12
  411dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00411ddc <__submore>:
  411ddc:	f101 0340 	add.w	r3, r1, #64	; 0x40
  411de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411de4:	460c      	mov	r4, r1
  411de6:	6b09      	ldr	r1, [r1, #48]	; 0x30
  411de8:	4299      	cmp	r1, r3
  411dea:	d014      	beq.n	411e16 <__submore+0x3a>
  411dec:	6b66      	ldr	r6, [r4, #52]	; 0x34
  411dee:	0077      	lsls	r7, r6, #1
  411df0:	463a      	mov	r2, r7
  411df2:	f7fe fa09 	bl	410208 <_realloc_r>
  411df6:	4605      	mov	r5, r0
  411df8:	b340      	cbz	r0, 411e4c <__submore+0x70>
  411dfa:	eb00 0806 	add.w	r8, r0, r6
  411dfe:	4632      	mov	r2, r6
  411e00:	4640      	mov	r0, r8
  411e02:	4629      	mov	r1, r5
  411e04:	f7f8 f97c 	bl	40a100 <memcpy>
  411e08:	f8c4 8000 	str.w	r8, [r4]
  411e0c:	6325      	str	r5, [r4, #48]	; 0x30
  411e0e:	6367      	str	r7, [r4, #52]	; 0x34
  411e10:	2000      	movs	r0, #0
  411e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411e16:	f44f 6180 	mov.w	r1, #1024	; 0x400
  411e1a:	f7fd fa09 	bl	40f230 <_malloc_r>
  411e1e:	b1a8      	cbz	r0, 411e4c <__submore+0x70>
  411e20:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  411e24:	6320      	str	r0, [r4, #48]	; 0x30
  411e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
  411e2a:	6362      	str	r2, [r4, #52]	; 0x34
  411e2c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  411e30:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  411e34:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  411e38:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  411e3c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  411e40:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  411e44:	6020      	str	r0, [r4, #0]
  411e46:	2000      	movs	r0, #0
  411e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411e4c:	f04f 30ff 	mov.w	r0, #4294967295
  411e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00411e54 <__swbuf_r>:
  411e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411e56:	460d      	mov	r5, r1
  411e58:	4614      	mov	r4, r2
  411e5a:	4607      	mov	r7, r0
  411e5c:	b110      	cbz	r0, 411e64 <__swbuf_r+0x10>
  411e5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  411e60:	2b00      	cmp	r3, #0
  411e62:	d048      	beq.n	411ef6 <__swbuf_r+0xa2>
  411e64:	89a2      	ldrh	r2, [r4, #12]
  411e66:	69a3      	ldr	r3, [r4, #24]
  411e68:	60a3      	str	r3, [r4, #8]
  411e6a:	b293      	uxth	r3, r2
  411e6c:	0718      	lsls	r0, r3, #28
  411e6e:	d538      	bpl.n	411ee2 <__swbuf_r+0x8e>
  411e70:	6926      	ldr	r6, [r4, #16]
  411e72:	2e00      	cmp	r6, #0
  411e74:	d035      	beq.n	411ee2 <__swbuf_r+0x8e>
  411e76:	0499      	lsls	r1, r3, #18
  411e78:	b2ed      	uxtb	r5, r5
  411e7a:	d515      	bpl.n	411ea8 <__swbuf_r+0x54>
  411e7c:	6823      	ldr	r3, [r4, #0]
  411e7e:	6962      	ldr	r2, [r4, #20]
  411e80:	1b9e      	subs	r6, r3, r6
  411e82:	4296      	cmp	r6, r2
  411e84:	da1c      	bge.n	411ec0 <__swbuf_r+0x6c>
  411e86:	3601      	adds	r6, #1
  411e88:	68a2      	ldr	r2, [r4, #8]
  411e8a:	1c59      	adds	r1, r3, #1
  411e8c:	3a01      	subs	r2, #1
  411e8e:	60a2      	str	r2, [r4, #8]
  411e90:	6021      	str	r1, [r4, #0]
  411e92:	701d      	strb	r5, [r3, #0]
  411e94:	6963      	ldr	r3, [r4, #20]
  411e96:	42b3      	cmp	r3, r6
  411e98:	d01a      	beq.n	411ed0 <__swbuf_r+0x7c>
  411e9a:	89a3      	ldrh	r3, [r4, #12]
  411e9c:	07db      	lsls	r3, r3, #31
  411e9e:	d501      	bpl.n	411ea4 <__swbuf_r+0x50>
  411ea0:	2d0a      	cmp	r5, #10
  411ea2:	d015      	beq.n	411ed0 <__swbuf_r+0x7c>
  411ea4:	4628      	mov	r0, r5
  411ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  411ea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
  411eaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  411eae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  411eb2:	6663      	str	r3, [r4, #100]	; 0x64
  411eb4:	6823      	ldr	r3, [r4, #0]
  411eb6:	81a2      	strh	r2, [r4, #12]
  411eb8:	6962      	ldr	r2, [r4, #20]
  411eba:	1b9e      	subs	r6, r3, r6
  411ebc:	4296      	cmp	r6, r2
  411ebe:	dbe2      	blt.n	411e86 <__swbuf_r+0x32>
  411ec0:	4638      	mov	r0, r7
  411ec2:	4621      	mov	r1, r4
  411ec4:	f7fc fd2e 	bl	40e924 <_fflush_r>
  411ec8:	b940      	cbnz	r0, 411edc <__swbuf_r+0x88>
  411eca:	6823      	ldr	r3, [r4, #0]
  411ecc:	2601      	movs	r6, #1
  411ece:	e7db      	b.n	411e88 <__swbuf_r+0x34>
  411ed0:	4638      	mov	r0, r7
  411ed2:	4621      	mov	r1, r4
  411ed4:	f7fc fd26 	bl	40e924 <_fflush_r>
  411ed8:	2800      	cmp	r0, #0
  411eda:	d0e3      	beq.n	411ea4 <__swbuf_r+0x50>
  411edc:	f04f 30ff 	mov.w	r0, #4294967295
  411ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  411ee2:	4638      	mov	r0, r7
  411ee4:	4621      	mov	r1, r4
  411ee6:	f7fb fc39 	bl	40d75c <__swsetup_r>
  411eea:	2800      	cmp	r0, #0
  411eec:	d1f6      	bne.n	411edc <__swbuf_r+0x88>
  411eee:	89a2      	ldrh	r2, [r4, #12]
  411ef0:	6926      	ldr	r6, [r4, #16]
  411ef2:	b293      	uxth	r3, r2
  411ef4:	e7bf      	b.n	411e76 <__swbuf_r+0x22>
  411ef6:	f7fc fd31 	bl	40e95c <__sinit>
  411efa:	e7b3      	b.n	411e64 <__swbuf_r+0x10>

00411efc <_wcrtomb_r>:
  411efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411f00:	461e      	mov	r6, r3
  411f02:	b086      	sub	sp, #24
  411f04:	460c      	mov	r4, r1
  411f06:	4605      	mov	r5, r0
  411f08:	4617      	mov	r7, r2
  411f0a:	4b0f      	ldr	r3, [pc, #60]	; (411f48 <_wcrtomb_r+0x4c>)
  411f0c:	b191      	cbz	r1, 411f34 <_wcrtomb_r+0x38>
  411f0e:	f8d3 8000 	ldr.w	r8, [r3]
  411f12:	f7fd f8f3 	bl	40f0fc <__locale_charset>
  411f16:	9600      	str	r6, [sp, #0]
  411f18:	4603      	mov	r3, r0
  411f1a:	4621      	mov	r1, r4
  411f1c:	463a      	mov	r2, r7
  411f1e:	4628      	mov	r0, r5
  411f20:	47c0      	blx	r8
  411f22:	1c43      	adds	r3, r0, #1
  411f24:	d103      	bne.n	411f2e <_wcrtomb_r+0x32>
  411f26:	2200      	movs	r2, #0
  411f28:	238a      	movs	r3, #138	; 0x8a
  411f2a:	6032      	str	r2, [r6, #0]
  411f2c:	602b      	str	r3, [r5, #0]
  411f2e:	b006      	add	sp, #24
  411f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411f34:	681f      	ldr	r7, [r3, #0]
  411f36:	f7fd f8e1 	bl	40f0fc <__locale_charset>
  411f3a:	9600      	str	r6, [sp, #0]
  411f3c:	4603      	mov	r3, r0
  411f3e:	4622      	mov	r2, r4
  411f40:	4628      	mov	r0, r5
  411f42:	a903      	add	r1, sp, #12
  411f44:	47b8      	blx	r7
  411f46:	e7ec      	b.n	411f22 <_wcrtomb_r+0x26>
  411f48:	20000ab8 	.word	0x20000ab8

00411f4c <__ascii_wctomb>:
  411f4c:	b121      	cbz	r1, 411f58 <__ascii_wctomb+0xc>
  411f4e:	2aff      	cmp	r2, #255	; 0xff
  411f50:	d804      	bhi.n	411f5c <__ascii_wctomb+0x10>
  411f52:	700a      	strb	r2, [r1, #0]
  411f54:	2001      	movs	r0, #1
  411f56:	4770      	bx	lr
  411f58:	4608      	mov	r0, r1
  411f5a:	4770      	bx	lr
  411f5c:	238a      	movs	r3, #138	; 0x8a
  411f5e:	6003      	str	r3, [r0, #0]
  411f60:	f04f 30ff 	mov.w	r0, #4294967295
  411f64:	4770      	bx	lr
  411f66:	bf00      	nop

00411f68 <__register_exitproc>:
  411f68:	b5f0      	push	{r4, r5, r6, r7, lr}
  411f6a:	4c27      	ldr	r4, [pc, #156]	; (412008 <__register_exitproc+0xa0>)
  411f6c:	6826      	ldr	r6, [r4, #0]
  411f6e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  411f72:	b085      	sub	sp, #20
  411f74:	4607      	mov	r7, r0
  411f76:	2c00      	cmp	r4, #0
  411f78:	d041      	beq.n	411ffe <__register_exitproc+0x96>
  411f7a:	6865      	ldr	r5, [r4, #4]
  411f7c:	2d1f      	cmp	r5, #31
  411f7e:	dd1e      	ble.n	411fbe <__register_exitproc+0x56>
  411f80:	4822      	ldr	r0, [pc, #136]	; (41200c <__register_exitproc+0xa4>)
  411f82:	b918      	cbnz	r0, 411f8c <__register_exitproc+0x24>
  411f84:	f04f 30ff 	mov.w	r0, #4294967295
  411f88:	b005      	add	sp, #20
  411f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  411f8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  411f90:	9103      	str	r1, [sp, #12]
  411f92:	9202      	str	r2, [sp, #8]
  411f94:	9301      	str	r3, [sp, #4]
  411f96:	f7fd f943 	bl	40f220 <malloc>
  411f9a:	9903      	ldr	r1, [sp, #12]
  411f9c:	9a02      	ldr	r2, [sp, #8]
  411f9e:	9b01      	ldr	r3, [sp, #4]
  411fa0:	4604      	mov	r4, r0
  411fa2:	2800      	cmp	r0, #0
  411fa4:	d0ee      	beq.n	411f84 <__register_exitproc+0x1c>
  411fa6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  411faa:	6025      	str	r5, [r4, #0]
  411fac:	2000      	movs	r0, #0
  411fae:	6060      	str	r0, [r4, #4]
  411fb0:	4605      	mov	r5, r0
  411fb2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  411fb6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  411fba:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  411fbe:	b93f      	cbnz	r7, 411fd0 <__register_exitproc+0x68>
  411fc0:	1cab      	adds	r3, r5, #2
  411fc2:	2000      	movs	r0, #0
  411fc4:	3501      	adds	r5, #1
  411fc6:	6065      	str	r5, [r4, #4]
  411fc8:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  411fcc:	b005      	add	sp, #20
  411fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  411fd0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  411fd4:	f04f 0c01 	mov.w	ip, #1
  411fd8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  411fdc:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  411fe0:	fa0c f205 	lsl.w	r2, ip, r5
  411fe4:	4316      	orrs	r6, r2
  411fe6:	2f02      	cmp	r7, #2
  411fe8:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  411fec:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  411ff0:	d1e6      	bne.n	411fc0 <__register_exitproc+0x58>
  411ff2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  411ff6:	431a      	orrs	r2, r3
  411ff8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  411ffc:	e7e0      	b.n	411fc0 <__register_exitproc+0x58>
  411ffe:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  412002:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  412006:	e7b8      	b.n	411f7a <__register_exitproc+0x12>
  412008:	004133cc 	.word	0x004133cc
  41200c:	0040f221 	.word	0x0040f221

00412010 <_calloc_r>:
  412010:	b510      	push	{r4, lr}
  412012:	fb02 f101 	mul.w	r1, r2, r1
  412016:	f7fd f90b 	bl	40f230 <_malloc_r>
  41201a:	4604      	mov	r4, r0
  41201c:	b168      	cbz	r0, 41203a <_calloc_r+0x2a>
  41201e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  412022:	f022 0203 	bic.w	r2, r2, #3
  412026:	3a04      	subs	r2, #4
  412028:	2a24      	cmp	r2, #36	; 0x24
  41202a:	d818      	bhi.n	41205e <_calloc_r+0x4e>
  41202c:	2a13      	cmp	r2, #19
  41202e:	d806      	bhi.n	41203e <_calloc_r+0x2e>
  412030:	4603      	mov	r3, r0
  412032:	2200      	movs	r2, #0
  412034:	601a      	str	r2, [r3, #0]
  412036:	605a      	str	r2, [r3, #4]
  412038:	609a      	str	r2, [r3, #8]
  41203a:	4620      	mov	r0, r4
  41203c:	bd10      	pop	{r4, pc}
  41203e:	2300      	movs	r3, #0
  412040:	2a1b      	cmp	r2, #27
  412042:	6003      	str	r3, [r0, #0]
  412044:	6043      	str	r3, [r0, #4]
  412046:	d90f      	bls.n	412068 <_calloc_r+0x58>
  412048:	2a24      	cmp	r2, #36	; 0x24
  41204a:	6083      	str	r3, [r0, #8]
  41204c:	60c3      	str	r3, [r0, #12]
  41204e:	bf05      	ittet	eq
  412050:	6103      	streq	r3, [r0, #16]
  412052:	6143      	streq	r3, [r0, #20]
  412054:	f100 0310 	addne.w	r3, r0, #16
  412058:	f100 0318 	addeq.w	r3, r0, #24
  41205c:	e7e9      	b.n	412032 <_calloc_r+0x22>
  41205e:	2100      	movs	r1, #0
  412060:	f7f8 f8e8 	bl	40a234 <memset>
  412064:	4620      	mov	r0, r4
  412066:	bd10      	pop	{r4, pc}
  412068:	f100 0308 	add.w	r3, r0, #8
  41206c:	e7e1      	b.n	412032 <_calloc_r+0x22>
  41206e:	bf00      	nop

00412070 <_fclose_r>:
  412070:	b570      	push	{r4, r5, r6, lr}
  412072:	460c      	mov	r4, r1
  412074:	4605      	mov	r5, r0
  412076:	b131      	cbz	r1, 412086 <_fclose_r+0x16>
  412078:	b110      	cbz	r0, 412080 <_fclose_r+0x10>
  41207a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  41207c:	2b00      	cmp	r3, #0
  41207e:	d02f      	beq.n	4120e0 <_fclose_r+0x70>
  412080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  412084:	b90b      	cbnz	r3, 41208a <_fclose_r+0x1a>
  412086:	2000      	movs	r0, #0
  412088:	bd70      	pop	{r4, r5, r6, pc}
  41208a:	4628      	mov	r0, r5
  41208c:	4621      	mov	r1, r4
  41208e:	f7fc fc49 	bl	40e924 <_fflush_r>
  412092:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  412094:	4606      	mov	r6, r0
  412096:	b133      	cbz	r3, 4120a6 <_fclose_r+0x36>
  412098:	4628      	mov	r0, r5
  41209a:	69e1      	ldr	r1, [r4, #28]
  41209c:	4798      	blx	r3
  41209e:	2800      	cmp	r0, #0
  4120a0:	bfb8      	it	lt
  4120a2:	f04f 36ff 	movlt.w	r6, #4294967295
  4120a6:	89a3      	ldrh	r3, [r4, #12]
  4120a8:	061b      	lsls	r3, r3, #24
  4120aa:	d41c      	bmi.n	4120e6 <_fclose_r+0x76>
  4120ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4120ae:	b141      	cbz	r1, 4120c2 <_fclose_r+0x52>
  4120b0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4120b4:	4299      	cmp	r1, r3
  4120b6:	d002      	beq.n	4120be <_fclose_r+0x4e>
  4120b8:	4628      	mov	r0, r5
  4120ba:	f7fc fd91 	bl	40ebe0 <_free_r>
  4120be:	2300      	movs	r3, #0
  4120c0:	6323      	str	r3, [r4, #48]	; 0x30
  4120c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4120c4:	b121      	cbz	r1, 4120d0 <_fclose_r+0x60>
  4120c6:	4628      	mov	r0, r5
  4120c8:	f7fc fd8a 	bl	40ebe0 <_free_r>
  4120cc:	2300      	movs	r3, #0
  4120ce:	6463      	str	r3, [r4, #68]	; 0x44
  4120d0:	f7fc fcbe 	bl	40ea50 <__sfp_lock_acquire>
  4120d4:	2300      	movs	r3, #0
  4120d6:	81a3      	strh	r3, [r4, #12]
  4120d8:	f7fc fcbc 	bl	40ea54 <__sfp_lock_release>
  4120dc:	4630      	mov	r0, r6
  4120de:	bd70      	pop	{r4, r5, r6, pc}
  4120e0:	f7fc fc3c 	bl	40e95c <__sinit>
  4120e4:	e7cc      	b.n	412080 <_fclose_r+0x10>
  4120e6:	4628      	mov	r0, r5
  4120e8:	6921      	ldr	r1, [r4, #16]
  4120ea:	f7fc fd79 	bl	40ebe0 <_free_r>
  4120ee:	e7dd      	b.n	4120ac <_fclose_r+0x3c>

004120f0 <fclose>:
  4120f0:	4b02      	ldr	r3, [pc, #8]	; (4120fc <fclose+0xc>)
  4120f2:	4601      	mov	r1, r0
  4120f4:	6818      	ldr	r0, [r3, #0]
  4120f6:	f7ff bfbb 	b.w	412070 <_fclose_r>
  4120fa:	bf00      	nop
  4120fc:	20000640 	.word	0x20000640

00412100 <_fstat_r>:
  412100:	b538      	push	{r3, r4, r5, lr}
  412102:	4c08      	ldr	r4, [pc, #32]	; (412124 <_fstat_r+0x24>)
  412104:	2300      	movs	r3, #0
  412106:	4605      	mov	r5, r0
  412108:	4608      	mov	r0, r1
  41210a:	4611      	mov	r1, r2
  41210c:	6023      	str	r3, [r4, #0]
  41210e:	f7f7 fbf9 	bl	409904 <_fstat>
  412112:	1c43      	adds	r3, r0, #1
  412114:	d000      	beq.n	412118 <_fstat_r+0x18>
  412116:	bd38      	pop	{r3, r4, r5, pc}
  412118:	6823      	ldr	r3, [r4, #0]
  41211a:	2b00      	cmp	r3, #0
  41211c:	d0fb      	beq.n	412116 <_fstat_r+0x16>
  41211e:	602b      	str	r3, [r5, #0]
  412120:	bd38      	pop	{r3, r4, r5, pc}
  412122:	bf00      	nop
  412124:	2000c00c 	.word	0x2000c00c

00412128 <rshift>:
  412128:	6902      	ldr	r2, [r0, #16]
  41212a:	114b      	asrs	r3, r1, #5
  41212c:	4293      	cmp	r3, r2
  41212e:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  412132:	f100 0814 	add.w	r8, r0, #20
  412136:	da28      	bge.n	41218a <rshift+0x62>
  412138:	f011 0c1f 	ands.w	ip, r1, #31
  41213c:	eb08 0282 	add.w	r2, r8, r2, lsl #2
  412140:	eb08 0783 	add.w	r7, r8, r3, lsl #2
  412144:	d028      	beq.n	412198 <rshift+0x70>
  412146:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
  41214a:	1d3b      	adds	r3, r7, #4
  41214c:	429a      	cmp	r2, r3
  41214e:	fa24 f40c 	lsr.w	r4, r4, ip
  412152:	f1cc 0120 	rsb	r1, ip, #32
  412156:	d935      	bls.n	4121c4 <rshift+0x9c>
  412158:	4645      	mov	r5, r8
  41215a:	681e      	ldr	r6, [r3, #0]
  41215c:	408e      	lsls	r6, r1
  41215e:	4334      	orrs	r4, r6
  412160:	f845 4b04 	str.w	r4, [r5], #4
  412164:	f853 4b04 	ldr.w	r4, [r3], #4
  412168:	4293      	cmp	r3, r2
  41216a:	fa24 f40c 	lsr.w	r4, r4, ip
  41216e:	d3f4      	bcc.n	41215a <rshift+0x32>
  412170:	1bd3      	subs	r3, r2, r7
  412172:	3b05      	subs	r3, #5
  412174:	f023 0303 	bic.w	r3, r3, #3
  412178:	3304      	adds	r3, #4
  41217a:	4443      	add	r3, r8
  41217c:	601c      	str	r4, [r3, #0]
  41217e:	b104      	cbz	r4, 412182 <rshift+0x5a>
  412180:	3304      	adds	r3, #4
  412182:	ebc8 0303 	rsb	r3, r8, r3
  412186:	109b      	asrs	r3, r3, #2
  412188:	e016      	b.n	4121b8 <rshift+0x90>
  41218a:	2300      	movs	r3, #0
  41218c:	6103      	str	r3, [r0, #16]
  41218e:	2300      	movs	r3, #0
  412190:	6143      	str	r3, [r0, #20]
  412192:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  412196:	4770      	bx	lr
  412198:	42ba      	cmp	r2, r7
  41219a:	d9f6      	bls.n	41218a <rshift+0x62>
  41219c:	4641      	mov	r1, r8
  41219e:	463b      	mov	r3, r7
  4121a0:	f853 4b04 	ldr.w	r4, [r3], #4
  4121a4:	f841 4b04 	str.w	r4, [r1], #4
  4121a8:	429a      	cmp	r2, r3
  4121aa:	d8f9      	bhi.n	4121a0 <rshift+0x78>
  4121ac:	43fb      	mvns	r3, r7
  4121ae:	4413      	add	r3, r2
  4121b0:	f023 0303 	bic.w	r3, r3, #3
  4121b4:	3304      	adds	r3, #4
  4121b6:	109b      	asrs	r3, r3, #2
  4121b8:	6103      	str	r3, [r0, #16]
  4121ba:	2b00      	cmp	r3, #0
  4121bc:	d0e7      	beq.n	41218e <rshift+0x66>
  4121be:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  4121c2:	4770      	bx	lr
  4121c4:	4643      	mov	r3, r8
  4121c6:	e7d9      	b.n	41217c <rshift+0x54>

004121c8 <__gethex>:
  4121c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4121cc:	b08b      	sub	sp, #44	; 0x2c
  4121ce:	4688      	mov	r8, r1
  4121d0:	9206      	str	r2, [sp, #24]
  4121d2:	9309      	str	r3, [sp, #36]	; 0x24
  4121d4:	9007      	str	r0, [sp, #28]
  4121d6:	f7fc ff9b 	bl	40f110 <_localeconv_r>
  4121da:	6800      	ldr	r0, [r0, #0]
  4121dc:	9002      	str	r0, [sp, #8]
  4121de:	f7f8 f991 	bl	40a504 <strlen>
  4121e2:	f8d8 3000 	ldr.w	r3, [r8]
  4121e6:	9902      	ldr	r1, [sp, #8]
  4121e8:	789a      	ldrb	r2, [r3, #2]
  4121ea:	9003      	str	r0, [sp, #12]
  4121ec:	4401      	add	r1, r0
  4121ee:	2a30      	cmp	r2, #48	; 0x30
  4121f0:	f811 ac01 	ldrb.w	sl, [r1, #-1]
  4121f4:	f103 0502 	add.w	r5, r3, #2
  4121f8:	f040 81a6 	bne.w	412548 <__gethex+0x380>
  4121fc:	3303      	adds	r3, #3
  4121fe:	2700      	movs	r7, #0
  412200:	461d      	mov	r5, r3
  412202:	f813 2b01 	ldrb.w	r2, [r3], #1
  412206:	2a30      	cmp	r2, #48	; 0x30
  412208:	f107 0701 	add.w	r7, r7, #1
  41220c:	d0f8      	beq.n	412200 <__gethex+0x38>
  41220e:	4eb1      	ldr	r6, [pc, #708]	; (4124d4 <__gethex+0x30c>)
  412210:	5cb4      	ldrb	r4, [r6, r2]
  412212:	2c00      	cmp	r4, #0
  412214:	f000 80f4 	beq.w	412400 <__gethex+0x238>
  412218:	782b      	ldrb	r3, [r5, #0]
  41221a:	f04f 0900 	mov.w	r9, #0
  41221e:	5cf3      	ldrb	r3, [r6, r3]
  412220:	46cb      	mov	fp, r9
  412222:	2b00      	cmp	r3, #0
  412224:	f000 8198 	beq.w	412558 <__gethex+0x390>
  412228:	1c6b      	adds	r3, r5, #1
  41222a:	461c      	mov	r4, r3
  41222c:	3301      	adds	r3, #1
  41222e:	7822      	ldrb	r2, [r4, #0]
  412230:	5cb2      	ldrb	r2, [r6, r2]
  412232:	2a00      	cmp	r2, #0
  412234:	d1f9      	bne.n	41222a <__gethex+0x62>
  412236:	4620      	mov	r0, r4
  412238:	9902      	ldr	r1, [sp, #8]
  41223a:	9a03      	ldr	r2, [sp, #12]
  41223c:	f7f8 f992 	bl	40a564 <strncmp>
  412240:	b1e0      	cbz	r0, 41227c <__gethex+0xb4>
  412242:	7823      	ldrb	r3, [r4, #0]
  412244:	f1bb 0f00 	cmp.w	fp, #0
  412248:	f000 816c 	beq.w	412524 <__gethex+0x35c>
  41224c:	ebc4 0b0b 	rsb	fp, r4, fp
  412250:	ea4f 028b 	mov.w	r2, fp, lsl #2
  412254:	9204      	str	r2, [sp, #16]
  412256:	2b50      	cmp	r3, #80	; 0x50
  412258:	f000 809d 	beq.w	412396 <__gethex+0x1ce>
  41225c:	2b70      	cmp	r3, #112	; 0x70
  41225e:	f000 809a 	beq.w	412396 <__gethex+0x1ce>
  412262:	4623      	mov	r3, r4
  412264:	f8c8 3000 	str.w	r3, [r8]
  412268:	f1b9 0f00 	cmp.w	r9, #0
  41226c:	d00c      	beq.n	412288 <__gethex+0xc0>
  41226e:	2f00      	cmp	r7, #0
  412270:	bf0c      	ite	eq
  412272:	2006      	moveq	r0, #6
  412274:	2000      	movne	r0, #0
  412276:	b00b      	add	sp, #44	; 0x2c
  412278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41227c:	f1bb 0f00 	cmp.w	fp, #0
  412280:	f000 818c 	beq.w	41259c <__gethex+0x3d4>
  412284:	7823      	ldrb	r3, [r4, #0]
  412286:	e7e1      	b.n	41224c <__gethex+0x84>
  412288:	1b63      	subs	r3, r4, r5
  41228a:	3b01      	subs	r3, #1
  41228c:	2b07      	cmp	r3, #7
  41228e:	4649      	mov	r1, r9
  412290:	dd04      	ble.n	41229c <__gethex+0xd4>
  412292:	105b      	asrs	r3, r3, #1
  412294:	2b07      	cmp	r3, #7
  412296:	f101 0101 	add.w	r1, r1, #1
  41229a:	dcfa      	bgt.n	412292 <__gethex+0xca>
  41229c:	9807      	ldr	r0, [sp, #28]
  41229e:	f7fd fb53 	bl	40f948 <_Balloc>
  4122a2:	42a5      	cmp	r5, r4
  4122a4:	f100 0314 	add.w	r3, r0, #20
  4122a8:	9005      	str	r0, [sp, #20]
  4122aa:	9308      	str	r3, [sp, #32]
  4122ac:	f080 81cd 	bcs.w	41264a <__gethex+0x482>
  4122b0:	469b      	mov	fp, r3
  4122b2:	9b03      	ldr	r3, [sp, #12]
  4122b4:	f04f 0900 	mov.w	r9, #0
  4122b8:	464f      	mov	r7, r9
  4122ba:	f1c3 0c01 	rsb	ip, r3, #1
  4122be:	e00e      	b.n	4122de <__gethex+0x116>
  4122c0:	2f20      	cmp	r7, #32
  4122c2:	d05f      	beq.n	412384 <__gethex+0x1bc>
  4122c4:	463a      	mov	r2, r7
  4122c6:	3704      	adds	r7, #4
  4122c8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  4122cc:	5cf3      	ldrb	r3, [r6, r3]
  4122ce:	f003 030f 	and.w	r3, r3, #15
  4122d2:	4093      	lsls	r3, r2
  4122d4:	4545      	cmp	r5, r8
  4122d6:	ea49 0903 	orr.w	r9, r9, r3
  4122da:	d21a      	bcs.n	412312 <__gethex+0x14a>
  4122dc:	4644      	mov	r4, r8
  4122de:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  4122e2:	4553      	cmp	r3, sl
  4122e4:	f104 38ff 	add.w	r8, r4, #4294967295
  4122e8:	d1ea      	bne.n	4122c0 <__gethex+0xf8>
  4122ea:	eb08 030c 	add.w	r3, r8, ip
  4122ee:	429d      	cmp	r5, r3
  4122f0:	d8e6      	bhi.n	4122c0 <__gethex+0xf8>
  4122f2:	4618      	mov	r0, r3
  4122f4:	9902      	ldr	r1, [sp, #8]
  4122f6:	9a03      	ldr	r2, [sp, #12]
  4122f8:	9301      	str	r3, [sp, #4]
  4122fa:	f8cd c000 	str.w	ip, [sp]
  4122fe:	f7f8 f931 	bl	40a564 <strncmp>
  412302:	9b01      	ldr	r3, [sp, #4]
  412304:	f8dd c000 	ldr.w	ip, [sp]
  412308:	2800      	cmp	r0, #0
  41230a:	d1d9      	bne.n	4122c0 <__gethex+0xf8>
  41230c:	4698      	mov	r8, r3
  41230e:	4545      	cmp	r5, r8
  412310:	d3e4      	bcc.n	4122dc <__gethex+0x114>
  412312:	f84b 9b04 	str.w	r9, [fp], #4
  412316:	9b08      	ldr	r3, [sp, #32]
  412318:	9905      	ldr	r1, [sp, #20]
  41231a:	ebc3 0b0b 	rsb	fp, r3, fp
  41231e:	ea4f 03ab 	mov.w	r3, fp, asr #2
  412322:	4648      	mov	r0, r9
  412324:	610b      	str	r3, [r1, #16]
  412326:	015d      	lsls	r5, r3, #5
  412328:	f7fd fbd6 	bl	40fad8 <__hi0bits>
  41232c:	9a06      	ldr	r2, [sp, #24]
  41232e:	6814      	ldr	r4, [r2, #0]
  412330:	1a28      	subs	r0, r5, r0
  412332:	42a0      	cmp	r0, r4
  412334:	f300 80d0 	bgt.w	4124d8 <__gethex+0x310>
  412338:	f2c0 80f7 	blt.w	41252a <__gethex+0x362>
  41233c:	2600      	movs	r6, #0
  41233e:	9806      	ldr	r0, [sp, #24]
  412340:	9904      	ldr	r1, [sp, #16]
  412342:	6883      	ldr	r3, [r0, #8]
  412344:	4299      	cmp	r1, r3
  412346:	f300 8092 	bgt.w	41246e <__gethex+0x2a6>
  41234a:	9806      	ldr	r0, [sp, #24]
  41234c:	9904      	ldr	r1, [sp, #16]
  41234e:	6843      	ldr	r3, [r0, #4]
  412350:	4299      	cmp	r1, r3
  412352:	f280 80a2 	bge.w	41249a <__gethex+0x2d2>
  412356:	1a5d      	subs	r5, r3, r1
  412358:	42ac      	cmp	r4, r5
  41235a:	f300 80ff 	bgt.w	41255c <__gethex+0x394>
  41235e:	68c2      	ldr	r2, [r0, #12]
  412360:	2a02      	cmp	r2, #2
  412362:	f000 8188 	beq.w	412676 <__gethex+0x4ae>
  412366:	2a03      	cmp	r2, #3
  412368:	f000 8156 	beq.w	412618 <__gethex+0x450>
  41236c:	2a01      	cmp	r2, #1
  41236e:	f000 8173 	beq.w	412658 <__gethex+0x490>
  412372:	9807      	ldr	r0, [sp, #28]
  412374:	9905      	ldr	r1, [sp, #20]
  412376:	f7fd fb0d 	bl	40f994 <_Bfree>
  41237a:	9a14      	ldr	r2, [sp, #80]	; 0x50
  41237c:	2300      	movs	r3, #0
  41237e:	6013      	str	r3, [r2, #0]
  412380:	2050      	movs	r0, #80	; 0x50
  412382:	e778      	b.n	412276 <__gethex+0xae>
  412384:	f8cb 9000 	str.w	r9, [fp]
  412388:	f04f 0900 	mov.w	r9, #0
  41238c:	f10b 0b04 	add.w	fp, fp, #4
  412390:	464a      	mov	r2, r9
  412392:	2704      	movs	r7, #4
  412394:	e798      	b.n	4122c8 <__gethex+0x100>
  412396:	7863      	ldrb	r3, [r4, #1]
  412398:	2b2b      	cmp	r3, #43	; 0x2b
  41239a:	f000 8097 	beq.w	4124cc <__gethex+0x304>
  41239e:	2b2d      	cmp	r3, #45	; 0x2d
  4123a0:	d070      	beq.n	412484 <__gethex+0x2bc>
  4123a2:	1c60      	adds	r0, r4, #1
  4123a4:	f04f 0b00 	mov.w	fp, #0
  4123a8:	5cf2      	ldrb	r2, [r6, r3]
  4123aa:	494a      	ldr	r1, [pc, #296]	; (4124d4 <__gethex+0x30c>)
  4123ac:	1e53      	subs	r3, r2, #1
  4123ae:	2b18      	cmp	r3, #24
  4123b0:	f63f af57 	bhi.w	412262 <__gethex+0x9a>
  4123b4:	7843      	ldrb	r3, [r0, #1]
  4123b6:	5cc9      	ldrb	r1, [r1, r3]
  4123b8:	f101 3cff 	add.w	ip, r1, #4294967295
  4123bc:	f1bc 0f18 	cmp.w	ip, #24
  4123c0:	f1a2 0210 	sub.w	r2, r2, #16
  4123c4:	f100 0301 	add.w	r3, r0, #1
  4123c8:	d812      	bhi.n	4123f0 <__gethex+0x228>
  4123ca:	3002      	adds	r0, #2
  4123cc:	f890 c000 	ldrb.w	ip, [r0]
  4123d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4123d4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  4123d8:	f816 100c 	ldrb.w	r1, [r6, ip]
  4123dc:	f101 3cff 	add.w	ip, r1, #4294967295
  4123e0:	f1bc 0f18 	cmp.w	ip, #24
  4123e4:	4603      	mov	r3, r0
  4123e6:	f1a2 0210 	sub.w	r2, r2, #16
  4123ea:	f100 0001 	add.w	r0, r0, #1
  4123ee:	d9ed      	bls.n	4123cc <__gethex+0x204>
  4123f0:	f1bb 0f00 	cmp.w	fp, #0
  4123f4:	d000      	beq.n	4123f8 <__gethex+0x230>
  4123f6:	4252      	negs	r2, r2
  4123f8:	9804      	ldr	r0, [sp, #16]
  4123fa:	4410      	add	r0, r2
  4123fc:	9004      	str	r0, [sp, #16]
  4123fe:	e731      	b.n	412264 <__gethex+0x9c>
  412400:	4628      	mov	r0, r5
  412402:	9902      	ldr	r1, [sp, #8]
  412404:	9a03      	ldr	r2, [sp, #12]
  412406:	f7f8 f8ad 	bl	40a564 <strncmp>
  41240a:	2800      	cmp	r0, #0
  41240c:	d13f      	bne.n	41248e <__gethex+0x2c6>
  41240e:	9803      	ldr	r0, [sp, #12]
  412410:	5c2b      	ldrb	r3, [r5, r0]
  412412:	5cf2      	ldrb	r2, [r6, r3]
  412414:	4604      	mov	r4, r0
  412416:	442c      	add	r4, r5
  412418:	2a00      	cmp	r2, #0
  41241a:	f000 8097 	beq.w	41254c <__gethex+0x384>
  41241e:	2b30      	cmp	r3, #48	; 0x30
  412420:	f040 8142 	bne.w	4126a8 <__gethex+0x4e0>
  412424:	1c62      	adds	r2, r4, #1
  412426:	4615      	mov	r5, r2
  412428:	3201      	adds	r2, #1
  41242a:	782b      	ldrb	r3, [r5, #0]
  41242c:	2b30      	cmp	r3, #48	; 0x30
  41242e:	d0fa      	beq.n	412426 <__gethex+0x25e>
  412430:	5cf3      	ldrb	r3, [r6, r3]
  412432:	f1d3 0901 	rsbs	r9, r3, #1
  412436:	46a3      	mov	fp, r4
  412438:	bf38      	it	cc
  41243a:	f04f 0900 	movcc.w	r9, #0
  41243e:	2701      	movs	r7, #1
  412440:	e6ef      	b.n	412222 <__gethex+0x5a>
  412442:	4447      	add	r7, r8
  412444:	f857 0c04 	ldr.w	r0, [r7, #-4]
  412448:	f7fd fb46 	bl	40fad8 <__hi0bits>
  41244c:	f1c4 0320 	rsb	r3, r4, #32
  412450:	4298      	cmp	r0, r3
  412452:	f280 80dd 	bge.w	412610 <__gethex+0x448>
  412456:	9805      	ldr	r0, [sp, #20]
  412458:	2101      	movs	r1, #1
  41245a:	f7ff fe65 	bl	412128 <rshift>
  41245e:	9806      	ldr	r0, [sp, #24]
  412460:	9904      	ldr	r1, [sp, #16]
  412462:	6883      	ldr	r3, [r0, #8]
  412464:	3101      	adds	r1, #1
  412466:	4299      	cmp	r1, r3
  412468:	9104      	str	r1, [sp, #16]
  41246a:	f340 80d1 	ble.w	412610 <__gethex+0x448>
  41246e:	9807      	ldr	r0, [sp, #28]
  412470:	9905      	ldr	r1, [sp, #20]
  412472:	f7fd fa8f 	bl	40f994 <_Bfree>
  412476:	9a14      	ldr	r2, [sp, #80]	; 0x50
  412478:	2300      	movs	r3, #0
  41247a:	20a3      	movs	r0, #163	; 0xa3
  41247c:	6013      	str	r3, [r2, #0]
  41247e:	b00b      	add	sp, #44	; 0x2c
  412480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412484:	f04f 0b01 	mov.w	fp, #1
  412488:	78a3      	ldrb	r3, [r4, #2]
  41248a:	1ca0      	adds	r0, r4, #2
  41248c:	e78c      	b.n	4123a8 <__gethex+0x1e0>
  41248e:	9404      	str	r4, [sp, #16]
  412490:	782b      	ldrb	r3, [r5, #0]
  412492:	462c      	mov	r4, r5
  412494:	f04f 0901 	mov.w	r9, #1
  412498:	e6dd      	b.n	412256 <__gethex+0x8e>
  41249a:	2501      	movs	r5, #1
  41249c:	b166      	cbz	r6, 4124b8 <__gethex+0x2f0>
  41249e:	9806      	ldr	r0, [sp, #24]
  4124a0:	68c3      	ldr	r3, [r0, #12]
  4124a2:	2b02      	cmp	r3, #2
  4124a4:	f000 808b 	beq.w	4125be <__gethex+0x3f6>
  4124a8:	2b03      	cmp	r3, #3
  4124aa:	f000 808c 	beq.w	4125c6 <__gethex+0x3fe>
  4124ae:	2b01      	cmp	r3, #1
  4124b0:	f000 80c2 	beq.w	412638 <__gethex+0x470>
  4124b4:	f045 0510 	orr.w	r5, r5, #16
  4124b8:	9814      	ldr	r0, [sp, #80]	; 0x50
  4124ba:	9b05      	ldr	r3, [sp, #20]
  4124bc:	6003      	str	r3, [r0, #0]
  4124be:	9909      	ldr	r1, [sp, #36]	; 0x24
  4124c0:	9b04      	ldr	r3, [sp, #16]
  4124c2:	600b      	str	r3, [r1, #0]
  4124c4:	4628      	mov	r0, r5
  4124c6:	b00b      	add	sp, #44	; 0x2c
  4124c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4124cc:	f04f 0b00 	mov.w	fp, #0
  4124d0:	e7da      	b.n	412488 <__gethex+0x2c0>
  4124d2:	bf00      	nop
  4124d4:	00413700 	.word	0x00413700
  4124d8:	1b05      	subs	r5, r0, r4
  4124da:	4629      	mov	r1, r5
  4124dc:	9805      	ldr	r0, [sp, #20]
  4124de:	f7fd fe4f 	bl	410180 <__any_on>
  4124e2:	2800      	cmp	r0, #0
  4124e4:	d036      	beq.n	412554 <__gethex+0x38c>
  4124e6:	1e6b      	subs	r3, r5, #1
  4124e8:	115a      	asrs	r2, r3, #5
  4124ea:	9808      	ldr	r0, [sp, #32]
  4124ec:	f003 011f 	and.w	r1, r3, #31
  4124f0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4124f4:	2601      	movs	r6, #1
  4124f6:	fa06 f101 	lsl.w	r1, r6, r1
  4124fa:	4211      	tst	r1, r2
  4124fc:	d00a      	beq.n	412514 <__gethex+0x34c>
  4124fe:	42b3      	cmp	r3, r6
  412500:	f340 80a8 	ble.w	412654 <__gethex+0x48c>
  412504:	9805      	ldr	r0, [sp, #20]
  412506:	1ea9      	subs	r1, r5, #2
  412508:	f7fd fe3a 	bl	410180 <__any_on>
  41250c:	2800      	cmp	r0, #0
  41250e:	f000 80a1 	beq.w	412654 <__gethex+0x48c>
  412512:	2603      	movs	r6, #3
  412514:	9b04      	ldr	r3, [sp, #16]
  412516:	9805      	ldr	r0, [sp, #20]
  412518:	442b      	add	r3, r5
  41251a:	4629      	mov	r1, r5
  41251c:	9304      	str	r3, [sp, #16]
  41251e:	f7ff fe03 	bl	412128 <rshift>
  412522:	e70c      	b.n	41233e <__gethex+0x176>
  412524:	f8cd b010 	str.w	fp, [sp, #16]
  412528:	e695      	b.n	412256 <__gethex+0x8e>
  41252a:	1a25      	subs	r5, r4, r0
  41252c:	9905      	ldr	r1, [sp, #20]
  41252e:	9807      	ldr	r0, [sp, #28]
  412530:	462a      	mov	r2, r5
  412532:	f7fd fc15 	bl	40fd60 <__lshift>
  412536:	9b04      	ldr	r3, [sp, #16]
  412538:	9005      	str	r0, [sp, #20]
  41253a:	1b5b      	subs	r3, r3, r5
  41253c:	9304      	str	r3, [sp, #16]
  41253e:	f100 0314 	add.w	r3, r0, #20
  412542:	9308      	str	r3, [sp, #32]
  412544:	2600      	movs	r6, #0
  412546:	e6fa      	b.n	41233e <__gethex+0x176>
  412548:	2700      	movs	r7, #0
  41254a:	e660      	b.n	41220e <__gethex+0x46>
  41254c:	9204      	str	r2, [sp, #16]
  41254e:	f04f 0901 	mov.w	r9, #1
  412552:	e680      	b.n	412256 <__gethex+0x8e>
  412554:	4606      	mov	r6, r0
  412556:	e7dd      	b.n	412514 <__gethex+0x34c>
  412558:	462c      	mov	r4, r5
  41255a:	e66c      	b.n	412236 <__gethex+0x6e>
  41255c:	1e6f      	subs	r7, r5, #1
  41255e:	2e00      	cmp	r6, #0
  412560:	d158      	bne.n	412614 <__gethex+0x44c>
  412562:	2f00      	cmp	r7, #0
  412564:	dd04      	ble.n	412570 <__gethex+0x3a8>
  412566:	9805      	ldr	r0, [sp, #20]
  412568:	4639      	mov	r1, r7
  41256a:	f7fd fe09 	bl	410180 <__any_on>
  41256e:	4606      	mov	r6, r0
  412570:	9808      	ldr	r0, [sp, #32]
  412572:	117b      	asrs	r3, r7, #5
  412574:	2201      	movs	r2, #1
  412576:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  41257a:	9805      	ldr	r0, [sp, #20]
  41257c:	f007 071f 	and.w	r7, r7, #31
  412580:	40ba      	lsls	r2, r7
  412582:	421a      	tst	r2, r3
  412584:	4629      	mov	r1, r5
  412586:	bf18      	it	ne
  412588:	f046 0602 	orrne.w	r6, r6, #2
  41258c:	f7ff fdcc 	bl	412128 <rshift>
  412590:	9b06      	ldr	r3, [sp, #24]
  412592:	685b      	ldr	r3, [r3, #4]
  412594:	9304      	str	r3, [sp, #16]
  412596:	1b64      	subs	r4, r4, r5
  412598:	2502      	movs	r5, #2
  41259a:	e77f      	b.n	41249c <__gethex+0x2d4>
  41259c:	9903      	ldr	r1, [sp, #12]
  41259e:	5c63      	ldrb	r3, [r4, r1]
  4125a0:	5cf2      	ldrb	r2, [r6, r3]
  4125a2:	468b      	mov	fp, r1
  4125a4:	44a3      	add	fp, r4
  4125a6:	2a00      	cmp	r2, #0
  4125a8:	f000 8081 	beq.w	4126ae <__gethex+0x4e6>
  4125ac:	f10b 0201 	add.w	r2, fp, #1
  4125b0:	4614      	mov	r4, r2
  4125b2:	3201      	adds	r2, #1
  4125b4:	7823      	ldrb	r3, [r4, #0]
  4125b6:	5cf1      	ldrb	r1, [r6, r3]
  4125b8:	2900      	cmp	r1, #0
  4125ba:	d1f9      	bne.n	4125b0 <__gethex+0x3e8>
  4125bc:	e646      	b.n	41224c <__gethex+0x84>
  4125be:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4125c0:	f1c2 0201 	rsb	r2, r2, #1
  4125c4:	9215      	str	r2, [sp, #84]	; 0x54
  4125c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4125c8:	2b00      	cmp	r3, #0
  4125ca:	f43f af73 	beq.w	4124b4 <__gethex+0x2ec>
  4125ce:	9b05      	ldr	r3, [sp, #20]
  4125d0:	9f08      	ldr	r7, [sp, #32]
  4125d2:	691e      	ldr	r6, [r3, #16]
  4125d4:	9b08      	ldr	r3, [sp, #32]
  4125d6:	ea4f 0886 	mov.w	r8, r6, lsl #2
  4125da:	4447      	add	r7, r8
  4125dc:	2000      	movs	r0, #0
  4125de:	e003      	b.n	4125e8 <__gethex+0x420>
  4125e0:	429f      	cmp	r7, r3
  4125e2:	f843 0c04 	str.w	r0, [r3, #-4]
  4125e6:	d94a      	bls.n	41267e <__gethex+0x4b6>
  4125e8:	4619      	mov	r1, r3
  4125ea:	f853 2b04 	ldr.w	r2, [r3], #4
  4125ee:	f1b2 3fff 	cmp.w	r2, #4294967295
  4125f2:	d0f5      	beq.n	4125e0 <__gethex+0x418>
  4125f4:	3201      	adds	r2, #1
  4125f6:	9f08      	ldr	r7, [sp, #32]
  4125f8:	600a      	str	r2, [r1, #0]
  4125fa:	2d02      	cmp	r5, #2
  4125fc:	d04d      	beq.n	41269a <__gethex+0x4d2>
  4125fe:	9a05      	ldr	r2, [sp, #20]
  412600:	6913      	ldr	r3, [r2, #16]
  412602:	429e      	cmp	r6, r3
  412604:	f6ff af27 	blt.w	412456 <__gethex+0x28e>
  412608:	f014 041f 	ands.w	r4, r4, #31
  41260c:	f47f af19 	bne.w	412442 <__gethex+0x27a>
  412610:	2521      	movs	r5, #33	; 0x21
  412612:	e751      	b.n	4124b8 <__gethex+0x2f0>
  412614:	2601      	movs	r6, #1
  412616:	e7ab      	b.n	412570 <__gethex+0x3a8>
  412618:	9915      	ldr	r1, [sp, #84]	; 0x54
  41261a:	2900      	cmp	r1, #0
  41261c:	f43f aea9 	beq.w	412372 <__gethex+0x1aa>
  412620:	9809      	ldr	r0, [sp, #36]	; 0x24
  412622:	9914      	ldr	r1, [sp, #80]	; 0x50
  412624:	6003      	str	r3, [r0, #0]
  412626:	9b05      	ldr	r3, [sp, #20]
  412628:	2201      	movs	r2, #1
  41262a:	611a      	str	r2, [r3, #16]
  41262c:	9b08      	ldr	r3, [sp, #32]
  41262e:	601a      	str	r2, [r3, #0]
  412630:	9b05      	ldr	r3, [sp, #20]
  412632:	600b      	str	r3, [r1, #0]
  412634:	2062      	movs	r0, #98	; 0x62
  412636:	e61e      	b.n	412276 <__gethex+0xae>
  412638:	07b2      	lsls	r2, r6, #30
  41263a:	f57f af3b 	bpl.w	4124b4 <__gethex+0x2ec>
  41263e:	9908      	ldr	r1, [sp, #32]
  412640:	680b      	ldr	r3, [r1, #0]
  412642:	4333      	orrs	r3, r6
  412644:	07db      	lsls	r3, r3, #31
  412646:	d4c2      	bmi.n	4125ce <__gethex+0x406>
  412648:	e734      	b.n	4124b4 <__gethex+0x2ec>
  41264a:	f8dd b020 	ldr.w	fp, [sp, #32]
  41264e:	f04f 0900 	mov.w	r9, #0
  412652:	e65e      	b.n	412312 <__gethex+0x14a>
  412654:	2602      	movs	r6, #2
  412656:	e75d      	b.n	412514 <__gethex+0x34c>
  412658:	42a5      	cmp	r5, r4
  41265a:	f47f ae8a 	bne.w	412372 <__gethex+0x1aa>
  41265e:	2c01      	cmp	r4, #1
  412660:	ddde      	ble.n	412620 <__gethex+0x458>
  412662:	1e61      	subs	r1, r4, #1
  412664:	9805      	ldr	r0, [sp, #20]
  412666:	f7fd fd8b 	bl	410180 <__any_on>
  41266a:	2800      	cmp	r0, #0
  41266c:	f43f ae81 	beq.w	412372 <__gethex+0x1aa>
  412670:	9a06      	ldr	r2, [sp, #24]
  412672:	6853      	ldr	r3, [r2, #4]
  412674:	e7d4      	b.n	412620 <__gethex+0x458>
  412676:	9815      	ldr	r0, [sp, #84]	; 0x54
  412678:	2800      	cmp	r0, #0
  41267a:	d0d1      	beq.n	412620 <__gethex+0x458>
  41267c:	e679      	b.n	412372 <__gethex+0x1aa>
  41267e:	9805      	ldr	r0, [sp, #20]
  412680:	6883      	ldr	r3, [r0, #8]
  412682:	429e      	cmp	r6, r3
  412684:	da15      	bge.n	4126b2 <__gethex+0x4ea>
  412686:	9f08      	ldr	r7, [sp, #32]
  412688:	4633      	mov	r3, r6
  41268a:	9805      	ldr	r0, [sp, #20]
  41268c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  412690:	2101      	movs	r1, #1
  412692:	3301      	adds	r3, #1
  412694:	6103      	str	r3, [r0, #16]
  412696:	6151      	str	r1, [r2, #20]
  412698:	e7af      	b.n	4125fa <__gethex+0x432>
  41269a:	9906      	ldr	r1, [sp, #24]
  41269c:	680b      	ldr	r3, [r1, #0]
  41269e:	3b01      	subs	r3, #1
  4126a0:	42a3      	cmp	r3, r4
  4126a2:	d01c      	beq.n	4126de <__gethex+0x516>
  4126a4:	2522      	movs	r5, #34	; 0x22
  4126a6:	e707      	b.n	4124b8 <__gethex+0x2f0>
  4126a8:	4613      	mov	r3, r2
  4126aa:	4625      	mov	r5, r4
  4126ac:	e6c1      	b.n	412432 <__gethex+0x26a>
  4126ae:	465c      	mov	r4, fp
  4126b0:	e5cc      	b.n	41224c <__gethex+0x84>
  4126b2:	6841      	ldr	r1, [r0, #4]
  4126b4:	9807      	ldr	r0, [sp, #28]
  4126b6:	3101      	adds	r1, #1
  4126b8:	f7fd f946 	bl	40f948 <_Balloc>
  4126bc:	9905      	ldr	r1, [sp, #20]
  4126be:	690b      	ldr	r3, [r1, #16]
  4126c0:	1c9a      	adds	r2, r3, #2
  4126c2:	4607      	mov	r7, r0
  4126c4:	0092      	lsls	r2, r2, #2
  4126c6:	310c      	adds	r1, #12
  4126c8:	300c      	adds	r0, #12
  4126ca:	f7f7 fd19 	bl	40a100 <memcpy>
  4126ce:	9807      	ldr	r0, [sp, #28]
  4126d0:	9905      	ldr	r1, [sp, #20]
  4126d2:	f7fd f95f 	bl	40f994 <_Bfree>
  4126d6:	9705      	str	r7, [sp, #20]
  4126d8:	693b      	ldr	r3, [r7, #16]
  4126da:	3714      	adds	r7, #20
  4126dc:	e7d5      	b.n	41268a <__gethex+0x4c2>
  4126de:	1163      	asrs	r3, r4, #5
  4126e0:	2201      	movs	r2, #1
  4126e2:	f004 041f 	and.w	r4, r4, #31
  4126e6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
  4126ea:	40a2      	lsls	r2, r4
  4126ec:	421a      	tst	r2, r3
  4126ee:	bf14      	ite	ne
  4126f0:	2521      	movne	r5, #33	; 0x21
  4126f2:	2522      	moveq	r5, #34	; 0x22
  4126f4:	e6e0      	b.n	4124b8 <__gethex+0x2f0>
  4126f6:	bf00      	nop

004126f8 <__hexnan>:
  4126f8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4126fc:	680b      	ldr	r3, [r1, #0]
  4126fe:	f8df 8188 	ldr.w	r8, [pc, #392]	; 412888 <__hexnan+0x190>
  412702:	b084      	sub	sp, #16
  412704:	4691      	mov	r9, r2
  412706:	115a      	asrs	r2, r3, #5
  412708:	eb09 0282 	add.w	r2, r9, r2, lsl #2
  41270c:	f013 031f 	ands.w	r3, r3, #31
  412710:	9200      	str	r2, [sp, #0]
  412712:	9001      	str	r0, [sp, #4]
  412714:	bf1c      	itt	ne
  412716:	3204      	addne	r2, #4
  412718:	9200      	strne	r2, [sp, #0]
  41271a:	9a01      	ldr	r2, [sp, #4]
  41271c:	9800      	ldr	r0, [sp, #0]
  41271e:	9303      	str	r3, [sp, #12]
  412720:	6811      	ldr	r1, [r2, #0]
  412722:	2300      	movs	r3, #0
  412724:	f840 3c04 	str.w	r3, [r0, #-4]
  412728:	469a      	mov	sl, r3
  41272a:	461d      	mov	r5, r3
  41272c:	461e      	mov	r6, r3
  41272e:	784b      	ldrb	r3, [r1, #1]
  412730:	1f07      	subs	r7, r0, #4
  412732:	46bc      	mov	ip, r7
  412734:	4638      	mov	r0, r7
  412736:	9702      	str	r7, [sp, #8]
  412738:	b33b      	cbz	r3, 41278a <__hexnan+0x92>
  41273a:	f818 2003 	ldrb.w	r2, [r8, r3]
  41273e:	2a00      	cmp	r2, #0
  412740:	d148      	bne.n	4127d4 <__hexnan+0xdc>
  412742:	2b20      	cmp	r3, #32
  412744:	d866      	bhi.n	412814 <__hexnan+0x11c>
  412746:	42ae      	cmp	r6, r5
  412748:	dd1b      	ble.n	412782 <__hexnan+0x8a>
  41274a:	4560      	cmp	r0, ip
  41274c:	d215      	bcs.n	41277a <__hexnan+0x82>
  41274e:	f1ba 0f07 	cmp.w	sl, #7
  412752:	dc12      	bgt.n	41277a <__hexnan+0x82>
  412754:	f1ca 0a08 	rsb	sl, sl, #8
  412758:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
  41275c:	6802      	ldr	r2, [r0, #0]
  41275e:	f1ca 0b20 	rsb	fp, sl, #32
  412762:	4603      	mov	r3, r0
  412764:	685c      	ldr	r4, [r3, #4]
  412766:	fa04 f70b 	lsl.w	r7, r4, fp
  41276a:	4317      	orrs	r7, r2
  41276c:	fa24 f20a 	lsr.w	r2, r4, sl
  412770:	601f      	str	r7, [r3, #0]
  412772:	f843 2f04 	str.w	r2, [r3, #4]!
  412776:	459c      	cmp	ip, r3
  412778:	d8f4      	bhi.n	412764 <__hexnan+0x6c>
  41277a:	4548      	cmp	r0, r9
  41277c:	d841      	bhi.n	412802 <__hexnan+0x10a>
  41277e:	f04f 0a08 	mov.w	sl, #8
  412782:	3101      	adds	r1, #1
  412784:	784b      	ldrb	r3, [r1, #1]
  412786:	2b00      	cmp	r3, #0
  412788:	d1d7      	bne.n	41273a <__hexnan+0x42>
  41278a:	9f02      	ldr	r7, [sp, #8]
  41278c:	2e00      	cmp	r6, #0
  41278e:	d044      	beq.n	41281a <__hexnan+0x122>
  412790:	4560      	cmp	r0, ip
  412792:	d202      	bcs.n	41279a <__hexnan+0xa2>
  412794:	f1ba 0f07 	cmp.w	sl, #7
  412798:	dd62      	ble.n	412860 <__hexnan+0x168>
  41279a:	4581      	cmp	r9, r0
  41279c:	d242      	bcs.n	412824 <__hexnan+0x12c>
  41279e:	464b      	mov	r3, r9
  4127a0:	f850 2b04 	ldr.w	r2, [r0], #4
  4127a4:	f843 2b04 	str.w	r2, [r3], #4
  4127a8:	4287      	cmp	r7, r0
  4127aa:	d2f9      	bcs.n	4127a0 <__hexnan+0xa8>
  4127ac:	2200      	movs	r2, #0
  4127ae:	f843 2b04 	str.w	r2, [r3], #4
  4127b2:	429f      	cmp	r7, r3
  4127b4:	d2fb      	bcs.n	4127ae <__hexnan+0xb6>
  4127b6:	9800      	ldr	r0, [sp, #0]
  4127b8:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4127bc:	b92b      	cbnz	r3, 4127ca <__hexnan+0xd2>
  4127be:	45b9      	cmp	r9, r7
  4127c0:	d041      	beq.n	412846 <__hexnan+0x14e>
  4127c2:	f857 3d04 	ldr.w	r3, [r7, #-4]!
  4127c6:	2b00      	cmp	r3, #0
  4127c8:	d0f9      	beq.n	4127be <__hexnan+0xc6>
  4127ca:	2005      	movs	r0, #5
  4127cc:	b004      	add	sp, #16
  4127ce:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4127d2:	4770      	bx	lr
  4127d4:	f10a 0a01 	add.w	sl, sl, #1
  4127d8:	f1ba 0f08 	cmp.w	sl, #8
  4127dc:	f106 0601 	add.w	r6, r6, #1
  4127e0:	dc06      	bgt.n	4127f0 <__hexnan+0xf8>
  4127e2:	6803      	ldr	r3, [r0, #0]
  4127e4:	011b      	lsls	r3, r3, #4
  4127e6:	f002 020f 	and.w	r2, r2, #15
  4127ea:	431a      	orrs	r2, r3
  4127ec:	6002      	str	r2, [r0, #0]
  4127ee:	e7c8      	b.n	412782 <__hexnan+0x8a>
  4127f0:	4548      	cmp	r0, r9
  4127f2:	d9c6      	bls.n	412782 <__hexnan+0x8a>
  4127f4:	2300      	movs	r3, #0
  4127f6:	f840 3c04 	str.w	r3, [r0, #-4]
  4127fa:	f04f 0a01 	mov.w	sl, #1
  4127fe:	3804      	subs	r0, #4
  412800:	e7f1      	b.n	4127e6 <__hexnan+0xee>
  412802:	2300      	movs	r3, #0
  412804:	f1a0 0c04 	sub.w	ip, r0, #4
  412808:	f840 3c04 	str.w	r3, [r0, #-4]
  41280c:	4635      	mov	r5, r6
  41280e:	4660      	mov	r0, ip
  412810:	469a      	mov	sl, r3
  412812:	e7b6      	b.n	412782 <__hexnan+0x8a>
  412814:	2b29      	cmp	r3, #41	; 0x29
  412816:	9f02      	ldr	r7, [sp, #8]
  412818:	d01c      	beq.n	412854 <__hexnan+0x15c>
  41281a:	2004      	movs	r0, #4
  41281c:	b004      	add	sp, #16
  41281e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  412822:	4770      	bx	lr
  412824:	9a03      	ldr	r2, [sp, #12]
  412826:	2a00      	cmp	r2, #0
  412828:	d0c5      	beq.n	4127b6 <__hexnan+0xbe>
  41282a:	9b03      	ldr	r3, [sp, #12]
  41282c:	9800      	ldr	r0, [sp, #0]
  41282e:	f1c3 0220 	rsb	r2, r3, #32
  412832:	f04f 31ff 	mov.w	r1, #4294967295
  412836:	f850 3c04 	ldr.w	r3, [r0, #-4]
  41283a:	fa21 f202 	lsr.w	r2, r1, r2
  41283e:	4013      	ands	r3, r2
  412840:	f840 3c04 	str.w	r3, [r0, #-4]
  412844:	e7ba      	b.n	4127bc <__hexnan+0xc4>
  412846:	2301      	movs	r3, #1
  412848:	2005      	movs	r0, #5
  41284a:	603b      	str	r3, [r7, #0]
  41284c:	b004      	add	sp, #16
  41284e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  412852:	4770      	bx	lr
  412854:	9a01      	ldr	r2, [sp, #4]
  412856:	3102      	adds	r1, #2
  412858:	6011      	str	r1, [r2, #0]
  41285a:	2e00      	cmp	r6, #0
  41285c:	d198      	bne.n	412790 <__hexnan+0x98>
  41285e:	e7dc      	b.n	41281a <__hexnan+0x122>
  412860:	f1ca 0508 	rsb	r5, sl, #8
  412864:	00ad      	lsls	r5, r5, #2
  412866:	6802      	ldr	r2, [r0, #0]
  412868:	f1c5 0620 	rsb	r6, r5, #32
  41286c:	4603      	mov	r3, r0
  41286e:	6859      	ldr	r1, [r3, #4]
  412870:	fa01 f406 	lsl.w	r4, r1, r6
  412874:	4314      	orrs	r4, r2
  412876:	fa21 f205 	lsr.w	r2, r1, r5
  41287a:	601c      	str	r4, [r3, #0]
  41287c:	f843 2f04 	str.w	r2, [r3, #4]!
  412880:	4563      	cmp	r3, ip
  412882:	d3f4      	bcc.n	41286e <__hexnan+0x176>
  412884:	e789      	b.n	41279a <__hexnan+0xa2>
  412886:	bf00      	nop
  412888:	00413700 	.word	0x00413700

0041288c <_isatty_r>:
  41288c:	b538      	push	{r3, r4, r5, lr}
  41288e:	4c07      	ldr	r4, [pc, #28]	; (4128ac <_isatty_r+0x20>)
  412890:	2300      	movs	r3, #0
  412892:	4605      	mov	r5, r0
  412894:	4608      	mov	r0, r1
  412896:	6023      	str	r3, [r4, #0]
  412898:	f7f7 f844 	bl	409924 <_isatty>
  41289c:	1c43      	adds	r3, r0, #1
  41289e:	d000      	beq.n	4128a2 <_isatty_r+0x16>
  4128a0:	bd38      	pop	{r3, r4, r5, pc}
  4128a2:	6823      	ldr	r3, [r4, #0]
  4128a4:	2b00      	cmp	r3, #0
  4128a6:	d0fb      	beq.n	4128a0 <_isatty_r+0x14>
  4128a8:	602b      	str	r3, [r5, #0]
  4128aa:	bd38      	pop	{r3, r4, r5, pc}
  4128ac:	2000c00c 	.word	0x2000c00c

004128b0 <__aeabi_drsub>:
  4128b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4128b4:	e002      	b.n	4128bc <__adddf3>
  4128b6:	bf00      	nop

004128b8 <__aeabi_dsub>:
  4128b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004128bc <__adddf3>:
  4128bc:	b530      	push	{r4, r5, lr}
  4128be:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4128c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4128c6:	ea94 0f05 	teq	r4, r5
  4128ca:	bf08      	it	eq
  4128cc:	ea90 0f02 	teqeq	r0, r2
  4128d0:	bf1f      	itttt	ne
  4128d2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4128d6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4128da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4128de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4128e2:	f000 80e2 	beq.w	412aaa <__adddf3+0x1ee>
  4128e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4128ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4128ee:	bfb8      	it	lt
  4128f0:	426d      	neglt	r5, r5
  4128f2:	dd0c      	ble.n	41290e <__adddf3+0x52>
  4128f4:	442c      	add	r4, r5
  4128f6:	ea80 0202 	eor.w	r2, r0, r2
  4128fa:	ea81 0303 	eor.w	r3, r1, r3
  4128fe:	ea82 0000 	eor.w	r0, r2, r0
  412902:	ea83 0101 	eor.w	r1, r3, r1
  412906:	ea80 0202 	eor.w	r2, r0, r2
  41290a:	ea81 0303 	eor.w	r3, r1, r3
  41290e:	2d36      	cmp	r5, #54	; 0x36
  412910:	bf88      	it	hi
  412912:	bd30      	pophi	{r4, r5, pc}
  412914:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  412918:	ea4f 3101 	mov.w	r1, r1, lsl #12
  41291c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  412920:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  412924:	d002      	beq.n	41292c <__adddf3+0x70>
  412926:	4240      	negs	r0, r0
  412928:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  41292c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  412930:	ea4f 3303 	mov.w	r3, r3, lsl #12
  412934:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  412938:	d002      	beq.n	412940 <__adddf3+0x84>
  41293a:	4252      	negs	r2, r2
  41293c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  412940:	ea94 0f05 	teq	r4, r5
  412944:	f000 80a7 	beq.w	412a96 <__adddf3+0x1da>
  412948:	f1a4 0401 	sub.w	r4, r4, #1
  41294c:	f1d5 0e20 	rsbs	lr, r5, #32
  412950:	db0d      	blt.n	41296e <__adddf3+0xb2>
  412952:	fa02 fc0e 	lsl.w	ip, r2, lr
  412956:	fa22 f205 	lsr.w	r2, r2, r5
  41295a:	1880      	adds	r0, r0, r2
  41295c:	f141 0100 	adc.w	r1, r1, #0
  412960:	fa03 f20e 	lsl.w	r2, r3, lr
  412964:	1880      	adds	r0, r0, r2
  412966:	fa43 f305 	asr.w	r3, r3, r5
  41296a:	4159      	adcs	r1, r3
  41296c:	e00e      	b.n	41298c <__adddf3+0xd0>
  41296e:	f1a5 0520 	sub.w	r5, r5, #32
  412972:	f10e 0e20 	add.w	lr, lr, #32
  412976:	2a01      	cmp	r2, #1
  412978:	fa03 fc0e 	lsl.w	ip, r3, lr
  41297c:	bf28      	it	cs
  41297e:	f04c 0c02 	orrcs.w	ip, ip, #2
  412982:	fa43 f305 	asr.w	r3, r3, r5
  412986:	18c0      	adds	r0, r0, r3
  412988:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  41298c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  412990:	d507      	bpl.n	4129a2 <__adddf3+0xe6>
  412992:	f04f 0e00 	mov.w	lr, #0
  412996:	f1dc 0c00 	rsbs	ip, ip, #0
  41299a:	eb7e 0000 	sbcs.w	r0, lr, r0
  41299e:	eb6e 0101 	sbc.w	r1, lr, r1
  4129a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4129a6:	d31b      	bcc.n	4129e0 <__adddf3+0x124>
  4129a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4129ac:	d30c      	bcc.n	4129c8 <__adddf3+0x10c>
  4129ae:	0849      	lsrs	r1, r1, #1
  4129b0:	ea5f 0030 	movs.w	r0, r0, rrx
  4129b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4129b8:	f104 0401 	add.w	r4, r4, #1
  4129bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4129c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4129c4:	f080 809a 	bcs.w	412afc <__adddf3+0x240>
  4129c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4129cc:	bf08      	it	eq
  4129ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4129d2:	f150 0000 	adcs.w	r0, r0, #0
  4129d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4129da:	ea41 0105 	orr.w	r1, r1, r5
  4129de:	bd30      	pop	{r4, r5, pc}
  4129e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4129e4:	4140      	adcs	r0, r0
  4129e6:	eb41 0101 	adc.w	r1, r1, r1
  4129ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4129ee:	f1a4 0401 	sub.w	r4, r4, #1
  4129f2:	d1e9      	bne.n	4129c8 <__adddf3+0x10c>
  4129f4:	f091 0f00 	teq	r1, #0
  4129f8:	bf04      	itt	eq
  4129fa:	4601      	moveq	r1, r0
  4129fc:	2000      	moveq	r0, #0
  4129fe:	fab1 f381 	clz	r3, r1
  412a02:	bf08      	it	eq
  412a04:	3320      	addeq	r3, #32
  412a06:	f1a3 030b 	sub.w	r3, r3, #11
  412a0a:	f1b3 0220 	subs.w	r2, r3, #32
  412a0e:	da0c      	bge.n	412a2a <__adddf3+0x16e>
  412a10:	320c      	adds	r2, #12
  412a12:	dd08      	ble.n	412a26 <__adddf3+0x16a>
  412a14:	f102 0c14 	add.w	ip, r2, #20
  412a18:	f1c2 020c 	rsb	r2, r2, #12
  412a1c:	fa01 f00c 	lsl.w	r0, r1, ip
  412a20:	fa21 f102 	lsr.w	r1, r1, r2
  412a24:	e00c      	b.n	412a40 <__adddf3+0x184>
  412a26:	f102 0214 	add.w	r2, r2, #20
  412a2a:	bfd8      	it	le
  412a2c:	f1c2 0c20 	rsble	ip, r2, #32
  412a30:	fa01 f102 	lsl.w	r1, r1, r2
  412a34:	fa20 fc0c 	lsr.w	ip, r0, ip
  412a38:	bfdc      	itt	le
  412a3a:	ea41 010c 	orrle.w	r1, r1, ip
  412a3e:	4090      	lslle	r0, r2
  412a40:	1ae4      	subs	r4, r4, r3
  412a42:	bfa2      	ittt	ge
  412a44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  412a48:	4329      	orrge	r1, r5
  412a4a:	bd30      	popge	{r4, r5, pc}
  412a4c:	ea6f 0404 	mvn.w	r4, r4
  412a50:	3c1f      	subs	r4, #31
  412a52:	da1c      	bge.n	412a8e <__adddf3+0x1d2>
  412a54:	340c      	adds	r4, #12
  412a56:	dc0e      	bgt.n	412a76 <__adddf3+0x1ba>
  412a58:	f104 0414 	add.w	r4, r4, #20
  412a5c:	f1c4 0220 	rsb	r2, r4, #32
  412a60:	fa20 f004 	lsr.w	r0, r0, r4
  412a64:	fa01 f302 	lsl.w	r3, r1, r2
  412a68:	ea40 0003 	orr.w	r0, r0, r3
  412a6c:	fa21 f304 	lsr.w	r3, r1, r4
  412a70:	ea45 0103 	orr.w	r1, r5, r3
  412a74:	bd30      	pop	{r4, r5, pc}
  412a76:	f1c4 040c 	rsb	r4, r4, #12
  412a7a:	f1c4 0220 	rsb	r2, r4, #32
  412a7e:	fa20 f002 	lsr.w	r0, r0, r2
  412a82:	fa01 f304 	lsl.w	r3, r1, r4
  412a86:	ea40 0003 	orr.w	r0, r0, r3
  412a8a:	4629      	mov	r1, r5
  412a8c:	bd30      	pop	{r4, r5, pc}
  412a8e:	fa21 f004 	lsr.w	r0, r1, r4
  412a92:	4629      	mov	r1, r5
  412a94:	bd30      	pop	{r4, r5, pc}
  412a96:	f094 0f00 	teq	r4, #0
  412a9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  412a9e:	bf06      	itte	eq
  412aa0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  412aa4:	3401      	addeq	r4, #1
  412aa6:	3d01      	subne	r5, #1
  412aa8:	e74e      	b.n	412948 <__adddf3+0x8c>
  412aaa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  412aae:	bf18      	it	ne
  412ab0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  412ab4:	d029      	beq.n	412b0a <__adddf3+0x24e>
  412ab6:	ea94 0f05 	teq	r4, r5
  412aba:	bf08      	it	eq
  412abc:	ea90 0f02 	teqeq	r0, r2
  412ac0:	d005      	beq.n	412ace <__adddf3+0x212>
  412ac2:	ea54 0c00 	orrs.w	ip, r4, r0
  412ac6:	bf04      	itt	eq
  412ac8:	4619      	moveq	r1, r3
  412aca:	4610      	moveq	r0, r2
  412acc:	bd30      	pop	{r4, r5, pc}
  412ace:	ea91 0f03 	teq	r1, r3
  412ad2:	bf1e      	ittt	ne
  412ad4:	2100      	movne	r1, #0
  412ad6:	2000      	movne	r0, #0
  412ad8:	bd30      	popne	{r4, r5, pc}
  412ada:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  412ade:	d105      	bne.n	412aec <__adddf3+0x230>
  412ae0:	0040      	lsls	r0, r0, #1
  412ae2:	4149      	adcs	r1, r1
  412ae4:	bf28      	it	cs
  412ae6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  412aea:	bd30      	pop	{r4, r5, pc}
  412aec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  412af0:	bf3c      	itt	cc
  412af2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  412af6:	bd30      	popcc	{r4, r5, pc}
  412af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  412afc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  412b00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  412b04:	f04f 0000 	mov.w	r0, #0
  412b08:	bd30      	pop	{r4, r5, pc}
  412b0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  412b0e:	bf1a      	itte	ne
  412b10:	4619      	movne	r1, r3
  412b12:	4610      	movne	r0, r2
  412b14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  412b18:	bf1c      	itt	ne
  412b1a:	460b      	movne	r3, r1
  412b1c:	4602      	movne	r2, r0
  412b1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  412b22:	bf06      	itte	eq
  412b24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  412b28:	ea91 0f03 	teqeq	r1, r3
  412b2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  412b30:	bd30      	pop	{r4, r5, pc}
  412b32:	bf00      	nop

00412b34 <__aeabi_ui2d>:
  412b34:	f090 0f00 	teq	r0, #0
  412b38:	bf04      	itt	eq
  412b3a:	2100      	moveq	r1, #0
  412b3c:	4770      	bxeq	lr
  412b3e:	b530      	push	{r4, r5, lr}
  412b40:	f44f 6480 	mov.w	r4, #1024	; 0x400
  412b44:	f104 0432 	add.w	r4, r4, #50	; 0x32
  412b48:	f04f 0500 	mov.w	r5, #0
  412b4c:	f04f 0100 	mov.w	r1, #0
  412b50:	e750      	b.n	4129f4 <__adddf3+0x138>
  412b52:	bf00      	nop

00412b54 <__aeabi_i2d>:
  412b54:	f090 0f00 	teq	r0, #0
  412b58:	bf04      	itt	eq
  412b5a:	2100      	moveq	r1, #0
  412b5c:	4770      	bxeq	lr
  412b5e:	b530      	push	{r4, r5, lr}
  412b60:	f44f 6480 	mov.w	r4, #1024	; 0x400
  412b64:	f104 0432 	add.w	r4, r4, #50	; 0x32
  412b68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  412b6c:	bf48      	it	mi
  412b6e:	4240      	negmi	r0, r0
  412b70:	f04f 0100 	mov.w	r1, #0
  412b74:	e73e      	b.n	4129f4 <__adddf3+0x138>
  412b76:	bf00      	nop

00412b78 <__aeabi_f2d>:
  412b78:	0042      	lsls	r2, r0, #1
  412b7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  412b7e:	ea4f 0131 	mov.w	r1, r1, rrx
  412b82:	ea4f 7002 	mov.w	r0, r2, lsl #28
  412b86:	bf1f      	itttt	ne
  412b88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  412b8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  412b90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  412b94:	4770      	bxne	lr
  412b96:	f092 0f00 	teq	r2, #0
  412b9a:	bf14      	ite	ne
  412b9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  412ba0:	4770      	bxeq	lr
  412ba2:	b530      	push	{r4, r5, lr}
  412ba4:	f44f 7460 	mov.w	r4, #896	; 0x380
  412ba8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  412bac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  412bb0:	e720      	b.n	4129f4 <__adddf3+0x138>
  412bb2:	bf00      	nop

00412bb4 <__aeabi_ul2d>:
  412bb4:	ea50 0201 	orrs.w	r2, r0, r1
  412bb8:	bf08      	it	eq
  412bba:	4770      	bxeq	lr
  412bbc:	b530      	push	{r4, r5, lr}
  412bbe:	f04f 0500 	mov.w	r5, #0
  412bc2:	e00a      	b.n	412bda <__aeabi_l2d+0x16>

00412bc4 <__aeabi_l2d>:
  412bc4:	ea50 0201 	orrs.w	r2, r0, r1
  412bc8:	bf08      	it	eq
  412bca:	4770      	bxeq	lr
  412bcc:	b530      	push	{r4, r5, lr}
  412bce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  412bd2:	d502      	bpl.n	412bda <__aeabi_l2d+0x16>
  412bd4:	4240      	negs	r0, r0
  412bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  412bda:	f44f 6480 	mov.w	r4, #1024	; 0x400
  412bde:	f104 0432 	add.w	r4, r4, #50	; 0x32
  412be2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  412be6:	f43f aedc 	beq.w	4129a2 <__adddf3+0xe6>
  412bea:	f04f 0203 	mov.w	r2, #3
  412bee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  412bf2:	bf18      	it	ne
  412bf4:	3203      	addne	r2, #3
  412bf6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  412bfa:	bf18      	it	ne
  412bfc:	3203      	addne	r2, #3
  412bfe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  412c02:	f1c2 0320 	rsb	r3, r2, #32
  412c06:	fa00 fc03 	lsl.w	ip, r0, r3
  412c0a:	fa20 f002 	lsr.w	r0, r0, r2
  412c0e:	fa01 fe03 	lsl.w	lr, r1, r3
  412c12:	ea40 000e 	orr.w	r0, r0, lr
  412c16:	fa21 f102 	lsr.w	r1, r1, r2
  412c1a:	4414      	add	r4, r2
  412c1c:	e6c1      	b.n	4129a2 <__adddf3+0xe6>
  412c1e:	bf00      	nop

00412c20 <__aeabi_dmul>:
  412c20:	b570      	push	{r4, r5, r6, lr}
  412c22:	f04f 0cff 	mov.w	ip, #255	; 0xff
  412c26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  412c2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  412c2e:	bf1d      	ittte	ne
  412c30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  412c34:	ea94 0f0c 	teqne	r4, ip
  412c38:	ea95 0f0c 	teqne	r5, ip
  412c3c:	f000 f8de 	bleq	412dfc <__aeabi_dmul+0x1dc>
  412c40:	442c      	add	r4, r5
  412c42:	ea81 0603 	eor.w	r6, r1, r3
  412c46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  412c4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  412c4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  412c52:	bf18      	it	ne
  412c54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  412c58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  412c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  412c60:	d038      	beq.n	412cd4 <__aeabi_dmul+0xb4>
  412c62:	fba0 ce02 	umull	ip, lr, r0, r2
  412c66:	f04f 0500 	mov.w	r5, #0
  412c6a:	fbe1 e502 	umlal	lr, r5, r1, r2
  412c6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  412c72:	fbe0 e503 	umlal	lr, r5, r0, r3
  412c76:	f04f 0600 	mov.w	r6, #0
  412c7a:	fbe1 5603 	umlal	r5, r6, r1, r3
  412c7e:	f09c 0f00 	teq	ip, #0
  412c82:	bf18      	it	ne
  412c84:	f04e 0e01 	orrne.w	lr, lr, #1
  412c88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  412c8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  412c90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  412c94:	d204      	bcs.n	412ca0 <__aeabi_dmul+0x80>
  412c96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  412c9a:	416d      	adcs	r5, r5
  412c9c:	eb46 0606 	adc.w	r6, r6, r6
  412ca0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  412ca4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  412ca8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  412cac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  412cb0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  412cb4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  412cb8:	bf88      	it	hi
  412cba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  412cbe:	d81e      	bhi.n	412cfe <__aeabi_dmul+0xde>
  412cc0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  412cc4:	bf08      	it	eq
  412cc6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  412cca:	f150 0000 	adcs.w	r0, r0, #0
  412cce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  412cd2:	bd70      	pop	{r4, r5, r6, pc}
  412cd4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  412cd8:	ea46 0101 	orr.w	r1, r6, r1
  412cdc:	ea40 0002 	orr.w	r0, r0, r2
  412ce0:	ea81 0103 	eor.w	r1, r1, r3
  412ce4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  412ce8:	bfc2      	ittt	gt
  412cea:	ebd4 050c 	rsbsgt	r5, r4, ip
  412cee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  412cf2:	bd70      	popgt	{r4, r5, r6, pc}
  412cf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  412cf8:	f04f 0e00 	mov.w	lr, #0
  412cfc:	3c01      	subs	r4, #1
  412cfe:	f300 80ab 	bgt.w	412e58 <__aeabi_dmul+0x238>
  412d02:	f114 0f36 	cmn.w	r4, #54	; 0x36
  412d06:	bfde      	ittt	le
  412d08:	2000      	movle	r0, #0
  412d0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  412d0e:	bd70      	pople	{r4, r5, r6, pc}
  412d10:	f1c4 0400 	rsb	r4, r4, #0
  412d14:	3c20      	subs	r4, #32
  412d16:	da35      	bge.n	412d84 <__aeabi_dmul+0x164>
  412d18:	340c      	adds	r4, #12
  412d1a:	dc1b      	bgt.n	412d54 <__aeabi_dmul+0x134>
  412d1c:	f104 0414 	add.w	r4, r4, #20
  412d20:	f1c4 0520 	rsb	r5, r4, #32
  412d24:	fa00 f305 	lsl.w	r3, r0, r5
  412d28:	fa20 f004 	lsr.w	r0, r0, r4
  412d2c:	fa01 f205 	lsl.w	r2, r1, r5
  412d30:	ea40 0002 	orr.w	r0, r0, r2
  412d34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  412d38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  412d3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  412d40:	fa21 f604 	lsr.w	r6, r1, r4
  412d44:	eb42 0106 	adc.w	r1, r2, r6
  412d48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  412d4c:	bf08      	it	eq
  412d4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  412d52:	bd70      	pop	{r4, r5, r6, pc}
  412d54:	f1c4 040c 	rsb	r4, r4, #12
  412d58:	f1c4 0520 	rsb	r5, r4, #32
  412d5c:	fa00 f304 	lsl.w	r3, r0, r4
  412d60:	fa20 f005 	lsr.w	r0, r0, r5
  412d64:	fa01 f204 	lsl.w	r2, r1, r4
  412d68:	ea40 0002 	orr.w	r0, r0, r2
  412d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  412d70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  412d74:	f141 0100 	adc.w	r1, r1, #0
  412d78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  412d7c:	bf08      	it	eq
  412d7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  412d82:	bd70      	pop	{r4, r5, r6, pc}
  412d84:	f1c4 0520 	rsb	r5, r4, #32
  412d88:	fa00 f205 	lsl.w	r2, r0, r5
  412d8c:	ea4e 0e02 	orr.w	lr, lr, r2
  412d90:	fa20 f304 	lsr.w	r3, r0, r4
  412d94:	fa01 f205 	lsl.w	r2, r1, r5
  412d98:	ea43 0302 	orr.w	r3, r3, r2
  412d9c:	fa21 f004 	lsr.w	r0, r1, r4
  412da0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  412da4:	fa21 f204 	lsr.w	r2, r1, r4
  412da8:	ea20 0002 	bic.w	r0, r0, r2
  412dac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  412db0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  412db4:	bf08      	it	eq
  412db6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  412dba:	bd70      	pop	{r4, r5, r6, pc}
  412dbc:	f094 0f00 	teq	r4, #0
  412dc0:	d10f      	bne.n	412de2 <__aeabi_dmul+0x1c2>
  412dc2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  412dc6:	0040      	lsls	r0, r0, #1
  412dc8:	eb41 0101 	adc.w	r1, r1, r1
  412dcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  412dd0:	bf08      	it	eq
  412dd2:	3c01      	subeq	r4, #1
  412dd4:	d0f7      	beq.n	412dc6 <__aeabi_dmul+0x1a6>
  412dd6:	ea41 0106 	orr.w	r1, r1, r6
  412dda:	f095 0f00 	teq	r5, #0
  412dde:	bf18      	it	ne
  412de0:	4770      	bxne	lr
  412de2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  412de6:	0052      	lsls	r2, r2, #1
  412de8:	eb43 0303 	adc.w	r3, r3, r3
  412dec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  412df0:	bf08      	it	eq
  412df2:	3d01      	subeq	r5, #1
  412df4:	d0f7      	beq.n	412de6 <__aeabi_dmul+0x1c6>
  412df6:	ea43 0306 	orr.w	r3, r3, r6
  412dfa:	4770      	bx	lr
  412dfc:	ea94 0f0c 	teq	r4, ip
  412e00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  412e04:	bf18      	it	ne
  412e06:	ea95 0f0c 	teqne	r5, ip
  412e0a:	d00c      	beq.n	412e26 <__aeabi_dmul+0x206>
  412e0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  412e10:	bf18      	it	ne
  412e12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  412e16:	d1d1      	bne.n	412dbc <__aeabi_dmul+0x19c>
  412e18:	ea81 0103 	eor.w	r1, r1, r3
  412e1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  412e20:	f04f 0000 	mov.w	r0, #0
  412e24:	bd70      	pop	{r4, r5, r6, pc}
  412e26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  412e2a:	bf06      	itte	eq
  412e2c:	4610      	moveq	r0, r2
  412e2e:	4619      	moveq	r1, r3
  412e30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  412e34:	d019      	beq.n	412e6a <__aeabi_dmul+0x24a>
  412e36:	ea94 0f0c 	teq	r4, ip
  412e3a:	d102      	bne.n	412e42 <__aeabi_dmul+0x222>
  412e3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  412e40:	d113      	bne.n	412e6a <__aeabi_dmul+0x24a>
  412e42:	ea95 0f0c 	teq	r5, ip
  412e46:	d105      	bne.n	412e54 <__aeabi_dmul+0x234>
  412e48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  412e4c:	bf1c      	itt	ne
  412e4e:	4610      	movne	r0, r2
  412e50:	4619      	movne	r1, r3
  412e52:	d10a      	bne.n	412e6a <__aeabi_dmul+0x24a>
  412e54:	ea81 0103 	eor.w	r1, r1, r3
  412e58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  412e5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  412e60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  412e64:	f04f 0000 	mov.w	r0, #0
  412e68:	bd70      	pop	{r4, r5, r6, pc}
  412e6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  412e6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  412e72:	bd70      	pop	{r4, r5, r6, pc}

00412e74 <__aeabi_ddiv>:
  412e74:	b570      	push	{r4, r5, r6, lr}
  412e76:	f04f 0cff 	mov.w	ip, #255	; 0xff
  412e7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  412e7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  412e82:	bf1d      	ittte	ne
  412e84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  412e88:	ea94 0f0c 	teqne	r4, ip
  412e8c:	ea95 0f0c 	teqne	r5, ip
  412e90:	f000 f8a7 	bleq	412fe2 <__aeabi_ddiv+0x16e>
  412e94:	eba4 0405 	sub.w	r4, r4, r5
  412e98:	ea81 0e03 	eor.w	lr, r1, r3
  412e9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  412ea0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  412ea4:	f000 8088 	beq.w	412fb8 <__aeabi_ddiv+0x144>
  412ea8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  412eac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  412eb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  412eb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  412eb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  412ebc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  412ec0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  412ec4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  412ec8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  412ecc:	429d      	cmp	r5, r3
  412ece:	bf08      	it	eq
  412ed0:	4296      	cmpeq	r6, r2
  412ed2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  412ed6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  412eda:	d202      	bcs.n	412ee2 <__aeabi_ddiv+0x6e>
  412edc:	085b      	lsrs	r3, r3, #1
  412ede:	ea4f 0232 	mov.w	r2, r2, rrx
  412ee2:	1ab6      	subs	r6, r6, r2
  412ee4:	eb65 0503 	sbc.w	r5, r5, r3
  412ee8:	085b      	lsrs	r3, r3, #1
  412eea:	ea4f 0232 	mov.w	r2, r2, rrx
  412eee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  412ef2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  412ef6:	ebb6 0e02 	subs.w	lr, r6, r2
  412efa:	eb75 0e03 	sbcs.w	lr, r5, r3
  412efe:	bf22      	ittt	cs
  412f00:	1ab6      	subcs	r6, r6, r2
  412f02:	4675      	movcs	r5, lr
  412f04:	ea40 000c 	orrcs.w	r0, r0, ip
  412f08:	085b      	lsrs	r3, r3, #1
  412f0a:	ea4f 0232 	mov.w	r2, r2, rrx
  412f0e:	ebb6 0e02 	subs.w	lr, r6, r2
  412f12:	eb75 0e03 	sbcs.w	lr, r5, r3
  412f16:	bf22      	ittt	cs
  412f18:	1ab6      	subcs	r6, r6, r2
  412f1a:	4675      	movcs	r5, lr
  412f1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  412f20:	085b      	lsrs	r3, r3, #1
  412f22:	ea4f 0232 	mov.w	r2, r2, rrx
  412f26:	ebb6 0e02 	subs.w	lr, r6, r2
  412f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
  412f2e:	bf22      	ittt	cs
  412f30:	1ab6      	subcs	r6, r6, r2
  412f32:	4675      	movcs	r5, lr
  412f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  412f38:	085b      	lsrs	r3, r3, #1
  412f3a:	ea4f 0232 	mov.w	r2, r2, rrx
  412f3e:	ebb6 0e02 	subs.w	lr, r6, r2
  412f42:	eb75 0e03 	sbcs.w	lr, r5, r3
  412f46:	bf22      	ittt	cs
  412f48:	1ab6      	subcs	r6, r6, r2
  412f4a:	4675      	movcs	r5, lr
  412f4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  412f50:	ea55 0e06 	orrs.w	lr, r5, r6
  412f54:	d018      	beq.n	412f88 <__aeabi_ddiv+0x114>
  412f56:	ea4f 1505 	mov.w	r5, r5, lsl #4
  412f5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  412f5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  412f62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  412f66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  412f6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  412f6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  412f72:	d1c0      	bne.n	412ef6 <__aeabi_ddiv+0x82>
  412f74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  412f78:	d10b      	bne.n	412f92 <__aeabi_ddiv+0x11e>
  412f7a:	ea41 0100 	orr.w	r1, r1, r0
  412f7e:	f04f 0000 	mov.w	r0, #0
  412f82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  412f86:	e7b6      	b.n	412ef6 <__aeabi_ddiv+0x82>
  412f88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  412f8c:	bf04      	itt	eq
  412f8e:	4301      	orreq	r1, r0
  412f90:	2000      	moveq	r0, #0
  412f92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  412f96:	bf88      	it	hi
  412f98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  412f9c:	f63f aeaf 	bhi.w	412cfe <__aeabi_dmul+0xde>
  412fa0:	ebb5 0c03 	subs.w	ip, r5, r3
  412fa4:	bf04      	itt	eq
  412fa6:	ebb6 0c02 	subseq.w	ip, r6, r2
  412faa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  412fae:	f150 0000 	adcs.w	r0, r0, #0
  412fb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  412fb6:	bd70      	pop	{r4, r5, r6, pc}
  412fb8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  412fbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  412fc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  412fc4:	bfc2      	ittt	gt
  412fc6:	ebd4 050c 	rsbsgt	r5, r4, ip
  412fca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  412fce:	bd70      	popgt	{r4, r5, r6, pc}
  412fd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  412fd4:	f04f 0e00 	mov.w	lr, #0
  412fd8:	3c01      	subs	r4, #1
  412fda:	e690      	b.n	412cfe <__aeabi_dmul+0xde>
  412fdc:	ea45 0e06 	orr.w	lr, r5, r6
  412fe0:	e68d      	b.n	412cfe <__aeabi_dmul+0xde>
  412fe2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  412fe6:	ea94 0f0c 	teq	r4, ip
  412fea:	bf08      	it	eq
  412fec:	ea95 0f0c 	teqeq	r5, ip
  412ff0:	f43f af3b 	beq.w	412e6a <__aeabi_dmul+0x24a>
  412ff4:	ea94 0f0c 	teq	r4, ip
  412ff8:	d10a      	bne.n	413010 <__aeabi_ddiv+0x19c>
  412ffa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  412ffe:	f47f af34 	bne.w	412e6a <__aeabi_dmul+0x24a>
  413002:	ea95 0f0c 	teq	r5, ip
  413006:	f47f af25 	bne.w	412e54 <__aeabi_dmul+0x234>
  41300a:	4610      	mov	r0, r2
  41300c:	4619      	mov	r1, r3
  41300e:	e72c      	b.n	412e6a <__aeabi_dmul+0x24a>
  413010:	ea95 0f0c 	teq	r5, ip
  413014:	d106      	bne.n	413024 <__aeabi_ddiv+0x1b0>
  413016:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  41301a:	f43f aefd 	beq.w	412e18 <__aeabi_dmul+0x1f8>
  41301e:	4610      	mov	r0, r2
  413020:	4619      	mov	r1, r3
  413022:	e722      	b.n	412e6a <__aeabi_dmul+0x24a>
  413024:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  413028:	bf18      	it	ne
  41302a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41302e:	f47f aec5 	bne.w	412dbc <__aeabi_dmul+0x19c>
  413032:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  413036:	f47f af0d 	bne.w	412e54 <__aeabi_dmul+0x234>
  41303a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  41303e:	f47f aeeb 	bne.w	412e18 <__aeabi_dmul+0x1f8>
  413042:	e712      	b.n	412e6a <__aeabi_dmul+0x24a>

00413044 <__gedf2>:
  413044:	f04f 3cff 	mov.w	ip, #4294967295
  413048:	e006      	b.n	413058 <__cmpdf2+0x4>
  41304a:	bf00      	nop

0041304c <__ledf2>:
  41304c:	f04f 0c01 	mov.w	ip, #1
  413050:	e002      	b.n	413058 <__cmpdf2+0x4>
  413052:	bf00      	nop

00413054 <__cmpdf2>:
  413054:	f04f 0c01 	mov.w	ip, #1
  413058:	f84d cd04 	str.w	ip, [sp, #-4]!
  41305c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  413060:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  413064:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  413068:	bf18      	it	ne
  41306a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  41306e:	d01b      	beq.n	4130a8 <__cmpdf2+0x54>
  413070:	b001      	add	sp, #4
  413072:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  413076:	bf0c      	ite	eq
  413078:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  41307c:	ea91 0f03 	teqne	r1, r3
  413080:	bf02      	ittt	eq
  413082:	ea90 0f02 	teqeq	r0, r2
  413086:	2000      	moveq	r0, #0
  413088:	4770      	bxeq	lr
  41308a:	f110 0f00 	cmn.w	r0, #0
  41308e:	ea91 0f03 	teq	r1, r3
  413092:	bf58      	it	pl
  413094:	4299      	cmppl	r1, r3
  413096:	bf08      	it	eq
  413098:	4290      	cmpeq	r0, r2
  41309a:	bf2c      	ite	cs
  41309c:	17d8      	asrcs	r0, r3, #31
  41309e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4130a2:	f040 0001 	orr.w	r0, r0, #1
  4130a6:	4770      	bx	lr
  4130a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4130ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4130b0:	d102      	bne.n	4130b8 <__cmpdf2+0x64>
  4130b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4130b6:	d107      	bne.n	4130c8 <__cmpdf2+0x74>
  4130b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4130bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4130c0:	d1d6      	bne.n	413070 <__cmpdf2+0x1c>
  4130c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4130c6:	d0d3      	beq.n	413070 <__cmpdf2+0x1c>
  4130c8:	f85d 0b04 	ldr.w	r0, [sp], #4
  4130cc:	4770      	bx	lr
  4130ce:	bf00      	nop

004130d0 <__aeabi_cdrcmple>:
  4130d0:	4684      	mov	ip, r0
  4130d2:	4610      	mov	r0, r2
  4130d4:	4662      	mov	r2, ip
  4130d6:	468c      	mov	ip, r1
  4130d8:	4619      	mov	r1, r3
  4130da:	4663      	mov	r3, ip
  4130dc:	e000      	b.n	4130e0 <__aeabi_cdcmpeq>
  4130de:	bf00      	nop

004130e0 <__aeabi_cdcmpeq>:
  4130e0:	b501      	push	{r0, lr}
  4130e2:	f7ff ffb7 	bl	413054 <__cmpdf2>
  4130e6:	2800      	cmp	r0, #0
  4130e8:	bf48      	it	mi
  4130ea:	f110 0f00 	cmnmi.w	r0, #0
  4130ee:	bd01      	pop	{r0, pc}

004130f0 <__aeabi_dcmpeq>:
  4130f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4130f4:	f7ff fff4 	bl	4130e0 <__aeabi_cdcmpeq>
  4130f8:	bf0c      	ite	eq
  4130fa:	2001      	moveq	r0, #1
  4130fc:	2000      	movne	r0, #0
  4130fe:	f85d fb08 	ldr.w	pc, [sp], #8
  413102:	bf00      	nop

00413104 <__aeabi_dcmplt>:
  413104:	f84d ed08 	str.w	lr, [sp, #-8]!
  413108:	f7ff ffea 	bl	4130e0 <__aeabi_cdcmpeq>
  41310c:	bf34      	ite	cc
  41310e:	2001      	movcc	r0, #1
  413110:	2000      	movcs	r0, #0
  413112:	f85d fb08 	ldr.w	pc, [sp], #8
  413116:	bf00      	nop

00413118 <__aeabi_dcmple>:
  413118:	f84d ed08 	str.w	lr, [sp, #-8]!
  41311c:	f7ff ffe0 	bl	4130e0 <__aeabi_cdcmpeq>
  413120:	bf94      	ite	ls
  413122:	2001      	movls	r0, #1
  413124:	2000      	movhi	r0, #0
  413126:	f85d fb08 	ldr.w	pc, [sp], #8
  41312a:	bf00      	nop

0041312c <__aeabi_dcmpge>:
  41312c:	f84d ed08 	str.w	lr, [sp, #-8]!
  413130:	f7ff ffce 	bl	4130d0 <__aeabi_cdrcmple>
  413134:	bf94      	ite	ls
  413136:	2001      	movls	r0, #1
  413138:	2000      	movhi	r0, #0
  41313a:	f85d fb08 	ldr.w	pc, [sp], #8
  41313e:	bf00      	nop

00413140 <__aeabi_dcmpgt>:
  413140:	f84d ed08 	str.w	lr, [sp, #-8]!
  413144:	f7ff ffc4 	bl	4130d0 <__aeabi_cdrcmple>
  413148:	bf34      	ite	cc
  41314a:	2001      	movcc	r0, #1
  41314c:	2000      	movcs	r0, #0
  41314e:	f85d fb08 	ldr.w	pc, [sp], #8
  413152:	bf00      	nop

00413154 <__aeabi_d2iz>:
  413154:	ea4f 0241 	mov.w	r2, r1, lsl #1
  413158:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  41315c:	d215      	bcs.n	41318a <__aeabi_d2iz+0x36>
  41315e:	d511      	bpl.n	413184 <__aeabi_d2iz+0x30>
  413160:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  413164:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  413168:	d912      	bls.n	413190 <__aeabi_d2iz+0x3c>
  41316a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  41316e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  413172:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  413176:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  41317a:	fa23 f002 	lsr.w	r0, r3, r2
  41317e:	bf18      	it	ne
  413180:	4240      	negne	r0, r0
  413182:	4770      	bx	lr
  413184:	f04f 0000 	mov.w	r0, #0
  413188:	4770      	bx	lr
  41318a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  41318e:	d105      	bne.n	41319c <__aeabi_d2iz+0x48>
  413190:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  413194:	bf08      	it	eq
  413196:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  41319a:	4770      	bx	lr
  41319c:	f04f 0000 	mov.w	r0, #0
  4131a0:	4770      	bx	lr
  4131a2:	bf00      	nop

004131a4 <__aeabi_d2uiz>:
  4131a4:	004a      	lsls	r2, r1, #1
  4131a6:	d211      	bcs.n	4131cc <__aeabi_d2uiz+0x28>
  4131a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4131ac:	d211      	bcs.n	4131d2 <__aeabi_d2uiz+0x2e>
  4131ae:	d50d      	bpl.n	4131cc <__aeabi_d2uiz+0x28>
  4131b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4131b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4131b8:	d40e      	bmi.n	4131d8 <__aeabi_d2uiz+0x34>
  4131ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4131be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4131c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4131c6:	fa23 f002 	lsr.w	r0, r3, r2
  4131ca:	4770      	bx	lr
  4131cc:	f04f 0000 	mov.w	r0, #0
  4131d0:	4770      	bx	lr
  4131d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4131d6:	d102      	bne.n	4131de <__aeabi_d2uiz+0x3a>
  4131d8:	f04f 30ff 	mov.w	r0, #4294967295
  4131dc:	4770      	bx	lr
  4131de:	f04f 0000 	mov.w	r0, #0
  4131e2:	4770      	bx	lr

004131e4 <__aeabi_d2f>:
  4131e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4131e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4131ec:	bf24      	itt	cs
  4131ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4131f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4131f6:	d90d      	bls.n	413214 <__aeabi_d2f+0x30>
  4131f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4131fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  413200:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  413204:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  413208:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  41320c:	bf08      	it	eq
  41320e:	f020 0001 	biceq.w	r0, r0, #1
  413212:	4770      	bx	lr
  413214:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  413218:	d121      	bne.n	41325e <__aeabi_d2f+0x7a>
  41321a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  41321e:	bfbc      	itt	lt
  413220:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  413224:	4770      	bxlt	lr
  413226:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41322a:	ea4f 5252 	mov.w	r2, r2, lsr #21
  41322e:	f1c2 0218 	rsb	r2, r2, #24
  413232:	f1c2 0c20 	rsb	ip, r2, #32
  413236:	fa10 f30c 	lsls.w	r3, r0, ip
  41323a:	fa20 f002 	lsr.w	r0, r0, r2
  41323e:	bf18      	it	ne
  413240:	f040 0001 	orrne.w	r0, r0, #1
  413244:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  413248:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  41324c:	fa03 fc0c 	lsl.w	ip, r3, ip
  413250:	ea40 000c 	orr.w	r0, r0, ip
  413254:	fa23 f302 	lsr.w	r3, r3, r2
  413258:	ea4f 0343 	mov.w	r3, r3, lsl #1
  41325c:	e7cc      	b.n	4131f8 <__aeabi_d2f+0x14>
  41325e:	ea7f 5362 	mvns.w	r3, r2, asr #21
  413262:	d107      	bne.n	413274 <__aeabi_d2f+0x90>
  413264:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  413268:	bf1e      	ittt	ne
  41326a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  41326e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  413272:	4770      	bxne	lr
  413274:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  413278:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  41327c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  413280:	4770      	bx	lr
  413282:	bf00      	nop

00413284 <all_twi_definitions>:
  413284:	8000 4001 8100 4001 0013 0000 0013 0000     ...@...@........
  413294:	c000 4001 c100 4001 0014 0000 0014 0000     ...@...@........
  4132a4:	c200 0001 0000 0000 0800 0000 0000 0000     ................
  4132b4:	6573 5474 6d69 0065 7750 4272 6472 734d     setTime.PwrBrdMs
  4132c4:	3a67 7325 0000 0000 6425 252d 2d64 6425     g:%s....%d-%d-%d
  4132d4:	252d 2d64 6425 253a 3a64 6425 0a0d 0000     -%d-%d:%d:%d....
  4132e4:	7473 7261 4174 7070 696c 6163 6974 6e6f     startApplication
  4132f4:	0d21 000a 6f50 6577 4272 746e 7420 6d69     !...PowerBnt tim
  413304:	7265 0000 4843 4752 0000 0000 6146 6c69     er..CHRG....Fail
  413314:	6465 7420 206f 7263 6165 6574 4320 5248     ed to create CHR
  413324:	2047 6174 6b73 6320 646f 2065 6425 0a0d     G task code %d..
  413334:	0000 0000 4d43 0044 6146 6c69 6465 7420     ....CMD.Failed t
  413344:	206f 7263 6165 6574 4320 444d 7420 7361     o create CMD tas
  413354:	206b 6f63 6564 2520 0d64 000a 4144 0054     k code %d...DAT.
  413364:	6f50 6577 0d72 000a 654c 2064 6954 656d     Power...Led Time
  413374:	0072 0000 4449 454c 0000 0000 0a0d 0000     r...IDLE........
  413384:	7325 0909 6325 2509 0975 7525 2509 0d75     %s..%c.%u.%u.%u.
  413394:	000a 0000 6d54 2072 7653 0063 474d 0052     ....Tmr Svc.MGR.
  4133a4:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  4133b4:	4d20 5247 7420 7361 206b 6f63 6564 2520      MGR task code %
  4133c4:	0d64 000a 0043 0000                         d...C...

004133cc <_global_impure_ptr>:
  4133cc:	0218 2000                                   ... 

004133d0 <zeroes.6763>:
  4133d0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4133e0:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  4133f0:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  413400:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  413410:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  413420:	0030 0000                                   0...

00413424 <blanks.6762>:
  413424:	2020 2020 2020 2020 2020 2020 2020 2020                     

00413434 <basefix.6714>:
  413434:	000a 0001 0002 0003 0004 0005 0006 0007     ................
  413444:	0008 0009 000a 000b 000c 000d 000e 000f     ................
  413454:	0010 0000 2565 646c 0000 0000               ....e%ld....

00413460 <zeroes.6721>:
  413460:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00413470 <blanks.6720>:
  413470:	2020 2020 2020 2020 2020 2020 2020 2020                     

00413480 <_ctype_>:
  413480:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  413490:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4134a0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4134b0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4134c0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4134d0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4134e0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4134f0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  413500:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  413584:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  413594:	4f50 4953 0058 0000 002e 0000               POSIX.......

004135a0 <__mprec_tens>:
  4135a0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  4135b0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  4135c0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  4135d0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  4135e0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  4135f0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  413600:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  413610:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  413620:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  413630:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  413640:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  413650:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  413660:	9db4 79d9 7843 44ea                         ...yCx.D

00413668 <__mprec_bigtens>:
  413668:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  413678:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  413688:	bf3c 7f73 4fdd 7515                         <.s..O.u

00413690 <p05.5269>:
  413690:	0005 0000 0019 0000 007d 0000               ........}...

0041369c <fpi.5238>:
  41369c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
  4136ac:	0000 0000 666e 0000 6e69 7469 0079 0000     ....nf..inity...
  4136bc:	6e61 0000                                   an..

004136c0 <fpinan.5274>:
  4136c0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

004136d8 <tinytens>:
  4136d8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
  4136e8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
  4136f8:	6f43 64ac 0628 1168                         Co.d(.h.

00413700 <__hexdig>:
	...
  413730:	1110 1312 1514 1716 1918 0000 0000 0000     ................
  413740:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  413760:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...

00413800 <_init>:
  413800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413802:	bf00      	nop
  413804:	bcf8      	pop	{r3, r4, r5, r6, r7}
  413806:	bc08      	pop	{r3}
  413808:	469e      	mov	lr, r3
  41380a:	4770      	bx	lr

0041380c <__init_array_start>:
  41380c:	0040d821 	.word	0x0040d821

00413810 <__frame_dummy_init_array_entry>:
  413810:	004000f1                                ..@.

00413814 <_fini>:
  413814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413816:	bf00      	nop
  413818:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41381a:	bc08      	pop	{r3}
  41381c:	469e      	mov	lr, r3
  41381e:	4770      	bx	lr

00413820 <__fini_array_start>:
  413820:	004000cd 	.word	0x004000cd
